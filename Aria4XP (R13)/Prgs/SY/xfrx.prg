*Modification:
*B608916,1 MMT 07/09/2009 Fix bug of invoice form prints '****' while exporting to PDF[T20090629.0002]
*B608916,2 MMT 07/09/2009 Fix bug of invoice form Total charges are shifted left[T20090625.0022]
*B609136,1 MMT 02/03/2010 Fix bug of not exporting barcode to PDF[T20090421.0032]
*B609214,1 MMT 04/21/2010 Fix bug of Wrong alignment of Multiple lines Text[T20100308.0010]
*B609633,1 MMT 06/27/2011 Exporting reports to PDF gives error [T20110104.0021]
*** 
*** ReFox XI  #ES110215  Edelmiro González Martínez  Asesoria Informatica Gallega S.L [VFP90]
***
LPARAMETERS REPORTNAME, OUTPUTNAME, TCFORCLAUSE, TLNOTOPENWORD, TCCODEPAGE, TLSILENT, TLNEWSESSION, LCDIRECTORY
EXTERNAL ARRAY LACOLOR
EXTERNAL ARRAY TAARRAY
LOCAL ___XFRX_LC_STR
___XFRX_LC_STR = "*** XFRX"
___XFRX_LC_STR = "***"
___XFRX_LC_STR = "*** Author: Martin Haluza, mhaluza@eqeus.com, www.eqeus.com"
___XFRX_LC_STR = "***"
___XFRX_LC_STR = "*** Version: "+"12.6.0001"
LOCAL LOSESSION, LNRETVAL
IF TYPE("m.reportname")<>"C"
= MESSAGEBOX("wrong argument type!")
RETURN -100
ENDIF
IF UPPER(M.REPORTNAME)=="XFRX#LISTENER"
RETURN CREATEOBJECT("xfrxlistener")
ENDIF
IF UPPER(M.REPORTNAME)=="PDFL#INIT"
RETURN CREATEOBJECT("pdfl")
ENDIF
LOSESSION = CREATEOBJECT("xfrxSession")
IF UPPER(M.REPORTNAME)=="XFRX#INIT"
RETURN LOSESSION
ENDIF
IF UPPER(M.REPORTNAME)=="XFRX#DRAW"
RETURN CREATEOBJECT("XFFWriter")
ELSE
IF UPPER(M.REPORTNAME)=="XFRX#XML"
RETURN CREATEOBJECT("XMLWriter")
ELSE
IF TYPE("m.outputname")<>"C"
= MESSAGEBOX("wrong argument type!")
RETURN -100
ENDIF
LNRETVAL = 0
LNRETVAL = LOSESSION.SETPARAMS(M.OUTPUTNAME, M.LCDIRECTORY, M.TLNOTOPENWORD, M.TCCODEPAGE, M.TLSILENT, M.TLNEWSESSION)
IF M.LNRETVAL=0
LOSESSION.PROCESSREPORT(M.REPORTNAME, M.TCFORCLAUSE)
LOSESSION.FINALIZE()
ENDIF
RETURN M.LNRETVAL
ENDIF
ENDIF
RETURN -100
= _ANTIFROG_
ENDFUNC
**
FUNCTION _xfFormatBIDIString
LPARAMETERS TCSTRING
IF EMPTY(TCSTRING)
RETURN ""
ENDIF
LOCAL LCOUTPUT, LNOUTPUTLENGTH
LCOUTPUT = SPACE(LEN(TCSTRING))
LNOUTPUTLENGTH = FORMATBIDISTRING(TCSTRING, LEN(TCSTRING), @LCOUTPUT)
RETURN LCOUTPUT
ENDFUNC
**
FUNCTION _xfSaveImage
LPARAMETERS TNIMAGE, TCFILENAME, TCTYPE, TNWIDTH, TNHEIGHT, TNMAXDPI
LOCAL TNMODE, TNSUBMODE
IF VARTYPE(TNIMAGE)="C"
TNSUBMODE = 2
ELSE
TNSUBMODE = 1
ENDIF
TNMODE = 2
RETURN _XFBMP2()
ENDFUNC
**
PROCEDURE _xf_handleMessage
LPARAMETERS HWND, MSG, WPARAM, LPARAM
LOCAL LCVARIABLENAME
DO CASE
CASE MSG=522
LCVARIABLENAME = "__xf_g_ch"+ALLTRIM(STR(HWND))
IF "O" = TYPE(LCVARIABLENAME)  AND !ISNULL(&LCVARIABLENAME)
IF PEMSTATUS(&LCVARIABLENAME, "_xf_iLastMM", 5)
IF PEMSTATUS(&LCVARIABLENAME->_XF_ILASTMM, "m_MOUSEWHEEL", 5)
&LCVARIABLENAME->_XF_ILASTMM.M_MOUSEWHEEL(IIF(WPARAM<0,-120,120))
ENDIF
ENDIF
ENDIF
CASE MSG=512
LCVARIABLENAME = "__xf_g_ch"+ALLTRIM(STR(HWND))
IF "O" = TYPE(LCVARIABLENAME) AND !ISNULL(&LCVARIABLENAME)
IF &LCVARIABLENAME->BASECLASS<>"Form" 
&LCVARIABLENAME->M_MOVE(1, 0, MOD(LPARAM,256*256), LPARAM/(256*256))
ENDIF
ENDIF
CASE MSG=516
LCVARIABLENAME = "__xf_g_ch"+ALLTRIM(STR(HWND))
IF "O" = TYPE(LCVARIABLENAME) AND !ISNULL(&LCVARIABLENAME)
IF &LCVARIABLENAME->BASECLASS<>"Form"
&LCVARIABLENAME->M_CLICK(1)
ENDIF
ENDIF
CASE MSG=273
LCVARIABLENAME = "__xf_g_ch"+ALLTRIM(STR(LPARAM))
IF "O"=TYPE(LCVARIABLENAME)
&LCVARIABLENAME->M_CLICK(0)
ENDIF
OTHERWISE
LCVARIABLENAME = "__xf_g_ca"+ALLTRIM(STR(WPARAM))
IF "O"=TYPE(LCVARIABLENAME)
&LCVARIABLENAME->REPAINT()
ENDIF
ENDCASE
ENDPROC
**
FUNCTION _xf_extractFllPath
LPARAMETERS LCSETLIBRARY, LCLIBRARY
LOCAL LNAT, LNCOMMA
LNAT = ATC(LCLIBRARY, LCSETLIBRARY)
LNCOMMA = ATC(",", SUBSTR(LCSETLIBRARY, LNAT))
IF LNCOMMA>0
LCSETLIBRARY = LEFT(LCSETLIBRARY, LNAT+LNCOMMA-1-1)
ENDIF
LNCOMMA = RATC(",", LEFT(LCSETLIBRARY, LNAT))
IF LNCOMMA>0
LCSETLIBRARY = SUBSTR(LCSETLIBRARY, LNCOMMA+1)
ENDIF
RETURN ALLTRIM(LCSETLIBRARY)
ENDFUNC
**
FUNCTION _xfVFPVersion
RETURN VAL(STRTRAN(SUBSTR(VERSION(), LEN("Visual FoxPro ")+1, 2), "0", ""))
ENDFUNC
**
FUNCTION _xfPrinterProperties
LPARAMETERS TCPRINTERNAME, TCDEVMODE, TLSHOWWINDOW, TOFORM
IF ATC("xfrxlib.fll", SET("Library"))=0
SET LIBRARY TO xfrxlib.fll ADDITIVE
ENDIF
LOCAL LCXFPRINTERNAME, SCREENHANDLE, TNISDEVMODE, LCTAG2, TNMODE
LCXFPRINTERNAME = TCPRINTERNAME
TNMODE = 1
IF TLSHOWWINDOW
TLSHOWWINDOW = 1
ELSE
TLSHOWWINDOW = 0
ENDIF
IF EMPTY(TCDEVMODE)
LCTAG2 = ""
TNISDEVMODE = 0
ELSE
LCTAG2 = TCDEVMODE
TNISDEVMODE = 1
ENDIF
IF TYPE("toForm")<>"O" .OR. ISNULL(TOFORM)
TOFORM = _SCREEN
ENDIF
IF _XFVFPVERSION()<7
DECLARE INTEGER FindWindow IN win32api STRING, STRING
SCREENHANDLE = FINDWINDOW(0, TOFORM.CAPTION)
ELSE
SCREENHANDLE = TOFORM.HWND
ENDIF
_XFBMP2()
RETURN LCTAG2
ENDFUNC
**
FUNCTION ToPoint
LPARAMETERS LNSIZE
RETURN (M.LNSIZE/10000)*72
ENDFUNC
**
FUNCTION tstr
LPARAMETERS NUM
RETURN STRTRAN(ALLTRIM(STR(M.NUM, 13, 4)), SET("Point"), ".")
ENDFUNC
**
FUNCTION toInt
LPARAMETERS STR
RETURN ASC(SUBSTR(M.STR, 1, 1))+256*ASC(SUBSTR(M.STR, 2, 1))+65536*ASC(SUBSTR(M.STR, 3, 1))+16777216*ASC(SUBSTR(M.STR, 4, 1))
ENDFUNC
**
FUNCTION toShort
LPARAMETERS STR
RETURN ASC(SUBSTR(M.STR, 1, 1))+256*ASC(SUBSTR(M.STR, 2, 1))
ENDFUNC
**
FUNCTION __XFRXFixPicture
LPARAMETERS LCPICTURE
LCPICTURE = ALLTRIM(LCPICTURE)
IF LEN(LCPICTURE)>2
IF LEFT(LCPICTURE, 1)="@" .AND. SUBSTR(LCPICTURE, 2, 1)<>" " .AND. SUBSTR(LCPICTURE, 2, 1)<>"9" .AND. SUBSTR(LCPICTURE, 3, 1)=="9"
LCPICTURE = "@"+SUBSTR(LCPICTURE, 2, 1)+" "+SUBSTR(LCPICTURE, 3)
ENDIF
IF LEFT(LCPICTURE, 1)="@" .AND. SUBSTR(LCPICTURE, 2, 1)="9"
LCPICTURE = "@ "+SUBSTR(LCPICTURE, 2)
ENDIF
ENDIF
RETURN LCPICTURE
ENDFUNC
**
DEFINE CLASS cusURReport AS Custom
DIMENSION ABUFFERS(1)
DYNAMICLINEHEIGHT = .T.
LNEWPAGEGROUPSONNEWPAGE = .F.
NRECORDSTOPROCESS = 0
CFORCLAUSE = ""
CWHILECLAUSE = ""
CSCOPECLAUSE = ""
LNACTUALCOLUMN = 1
LNTOPPAGEMARGIN = 0
LNBOTTOMPAGEMARGIN = 0
LNLEFTPAGEMARGIN = 0
LNRIGHTPAGEMARGIN = 0
LNTOPMARGIN = 999999
LNTOPMARGINSHIFT = 0
LNLEFTMARGIN = 999999
LNRIGHTMARGIN = 999999
LNBOTTOMMARGIN = 999999
NUPPERMOST = 999999
LIHEADERHEIGHT = 0
LIDETAILHEIGHT = 0
LIFOOTERHEIGHT = 0
LIFOOTERBEGIN = 0
LISUMMARYHEIGHT = 0
LISHAPECOUNTER = 0
LCOUTPUT = ""
LICURRENTPOS = 0
LIDETAILBEGIN = 0
LNNUMBEROFCOLUMNS = 1
LNORIENTATION = 0
LNPAPERWIDTH = 85000
LNPAPERHEIGHT = 110000
LNCOLUMNWIDTH = 85000
LNCOLUMNSPACING = 0
LNHANDLER = 0
IOSECTIONS = .NULL.
IOVARIABLES = .NULL.
LNSESSION = 0
LODATASESSION = .NULL.
LOCURSORS = .NULL.
LNFIRSTTOSELECT = 0
CURRENTBUFFER = .NULL.
LLNODETAIL = .F.
VFPVERSION = 6
LLFILELISTEXISTS = .F.
LCFILENAME = ""
OFILES = .NULL.
LCREPORTDIRECTORY = ""
CTARGET = ""
ODOCUMENT = .NULL.
TOPROGRESS = .NULL.
TNPROGRESSTYPE = 0
TNREPORTNUMBER = 0
LNLEFTOFFSET = 0
CAUTHOR = ""
CTITLE = ""
CSUBJECT = ""
CKEYWORDS = ""
CCREATOR = ""
CPRODUCER = ""
CCREATIONDATE = ""
CCOMMENTS = ""
CCATEGORY = ""
CMANAGER = ""
CCOMPANY = ""
DIMENSION AVC(1)
NVC = 0
CLOGFILE = ""
THATFORM = .NULL.
THAT = .NULL.
NGROUPS = 0
DIMENSION AGROUPS(1)
NPROCESSINGALIAS = 0
CPROCESSINGALIASNAME = ""
LSUMMARYREPORTCLAUSEACTIVE = .F.
OPDFLSCRIPTS = .NULL.
CADDTEXT = ""
NCURRENTREPORTPAGENO = 1
NCURRENTREPORTPAGENOOFFSET = 0
CTMPFILE = ""
LFIRSTLOOP = .F.
NTOTALRECORDS = 0
NACTUALRECORD = 0
LPLAIN = .F.
DIMENSION ATABLERELATIONS(1)
NTABLERELATIONS = 0
NAFTERHEADERPOS = 0
LNEXTPAGERESET = .F.
NAFTERHEADERS = 0
ODOCUMENTWRITER = .NULL.
CPAGESCOPE = .F.
LLFIRSTTOSKIP = .F.
LSPLITFILE = .F.
NSPLITSKIP = 20
NSPLITCOUNTDOWN = 20
XFRXSESSION = .NULL.
CCODEPAGE = ""
NCODEPAGE = 0
CHEADERFILE = ""
NPAPERSIZEINDEX = 1
CBANNEDIDS = ""
**
PROCEDURE BanID
LPARAMETERS TCID
THIS.CBANNEDIDS = THIS.CBANNEDIDS+","+TCID+","
ENDPROC
**
FUNCTION IsBanned
LPARAMETERS TCID
RETURN ","+TCID+","$THIS.CBANNEDIDS
ENDFUNC
**
PROCEDURE AllowBanned
THIS.CBANNEDIDS = ""
ENDPROC
**
FUNCTION skipPage
IF EMPTY(THIS.CPAGESCOPE)
RETURN .F.
ENDIF
LLRETVAL =  .NOT. _PAGENOCHECK(THIS.NCURRENTREPORTPAGENO, THIS.CPAGESCOPE)
RETURN LLRETVAL
ENDFUNC
**
FUNCTION needsPreprocessing
LOCAL LNSEL, LLFOUND
LNSEL = SELECT(0)
SELECT UR_REPORT
LOCATE ALL FOR "_PAGETOTAL"$UPPER(EXPR)
LLFOUND = FOUND()
SELECT (LNSEL)
RETURN LLFOUND
ENDFUNC
**
PROCEDURE prepareRelations
LPARAMETERS TCALIAS
LOCAL LNRELNO, LCTARGET
IF EMPTY(M.TCALIAS)
RETURN
ENDIF
LNRELNO = 1
DO WHILE  .NOT. EMPTY(RELATION(LNRELNO, TCALIAS))
LCTARGET = TARGET(LNRELNO, TCALIAS)
THIS.NTABLERELATIONS = THIS.NTABLERELATIONS+1
DIMENSION THIS.ATABLERELATIONS(THIS.NTABLERELATIONS, 4)
THIS.ATABLERELATIONS(THIS.NTABLERELATIONS, 1) = LCTARGET
THIS.PREPARERELATIONS(LCTARGET)
LNRELNO = LNRELNO+1
ENDDO
ENDPROC
**
PROCEDURE synchronizeRelations
LPARAMETERS TNINDEX
LOCAL M.I
FOR M.I = 1 TO THIS.NTABLERELATIONS
IF THIS.ATABLERELATIONS(M.I, TNINDEX)>RECCOUNT(THIS.ATABLERELATIONS(M.I, 1))
GOTO BOTTOM IN (THIS.ATABLERELATIONS(M.I, 1))
IF  .NOT. EOF(THIS.ATABLERELATIONS(M.I, 1))
SKIP IN (THIS.ATABLERELATIONS(M.I, 1))
ENDIF
ELSE
GOTO (THIS.ATABLERELATIONS(M.I, TNINDEX)) IN THIS.ATABLERELATIONS(M.I, 1)
ENDIF
ENDFOR
ENDPROC
**
PROCEDURE copyRelationsPos
LPARAMETERS TNFROM, TNTO
LOCAL M.I
FOR M.I = 1 TO THIS.NTABLERELATIONS
THIS.ATABLERELATIONS(M.I, TNTO) = THIS.ATABLERELATIONS(M.I, TNFROM)
ENDFOR
ENDPROC
**
PROCEDURE storeRelationsPos
LPARAMETERS TNINDEX
LOCAL M.I
FOR M.I = 1 TO THIS.NTABLERELATIONS
THIS.ATABLERELATIONS(M.I, TNINDEX) = RECNO(THIS.ATABLERELATIONS(M.I, 1))
ENDFOR
ENDPROC
**
PROCEDURE setAddText
LPARAMETERS _X____11334
THIS.CADDTEXT = _X____11334
ENDPROC
**
FUNCTION _transform
LPARAMETERS LUVALUE, LCPICTURE
LOCAL LCRETVAL
IF TYPE("luvalue")<>"N"
IF EMPTY(LCPICTURE)
LCRETVAL = TRANSFORM(LUVALUE)
ELSE
LCRETVAL = TRANSFORM(LUVALUE, LCPICTURE)
ENDIF
RETURN LCRETVAL
ENDIF
IF EMPTY(LCPICTURE) .OR.  .NOT. ("9"$LCPICTURE .OR. "$"$LCPICTURE .OR. "#"$LCPICTURE)
IF EMPTY(LCPICTURE)
RETURN ALLTRIM(STR(LUVALUE, _XFWID(), _XFDEC()))
ELSE
LOCAL LNDEC
LNDEC = _XFDEC()
IF LNDEC=0
RETURN TRANSFORM(LUVALUE, ALLTRIM(LCPICTURE)+" "+REPLICATE("9", _XFWID()))
ELSE
RETURN TRANSFORM(LUVALUE, ALLTRIM(LCPICTURE)+" "+REPLICATE("9", _XFWID())+"."+REPLICATE("9", LNDEC))
ENDIF
ENDIF
ENDIF
IF EMPTY(LCPICTURE)
RETURN LCRETVAL
ENDIF
LOCAL TMP_TMP__LDECI, LCSEPARATOR, LNPOS
TMP_TMP__LDECI = SET("deci")
SET DECIMALS TO 18
IF  .NOT. ("9"$LCPICTURE .OR. "$"$LCPICTURE .OR. "#"$LCPICTURE)
LCSEPARATOR = SUBSTR(TRANSFORM(4.5 , "9.9"), 2, 1)
LCRETVAL = ALLTRIM(LCRETVAL)
IF LCSEPARATOR$LCRETVAL
LNPOS = AT(LCSEPARATOR, LCRETVAL)
LCPICTURE = ALLTRIM(LCPICTURE)+" "+REPLICATE("9", LNPOS-1)+"."+REPLICATE("9", LEN(LCRETVAL)-LNPOS)
ELSE
LCPICTURE = ALLTRIM(LCPICTURE)+" "+REPLICATE("9", LEN(LCRETVAL))
ENDIF
ELSE
LCPICTURE = __XFRXFIXPICTURE(LCPICTURE)
ENDIF
LCRETVAL = TRANSFORM(LUVALUE, LCPICTURE)
SET DECIMALS TO TMP_TMP__LDECI
RETURN LCRETVAL
ENDFUNC
**
PROCEDURE setDeci
LPARAMETERS TNDECI
THIS.NDECI = TNDECI
ENDPROC
**
PROCEDURE setThisform
LPARAMETERS TOFORM
THIS.THATFORM = TOFORM
ENDPROC
**
PROCEDURE setScripts
LPARAMETERS TOSCRIPTS
THIS.OPDFLSCRIPTS = TOSCRIPTS
ENDPROC
**
PROCEDURE setThis
LPARAMETERS TOOBJ
THIS.THAT = TOOBJ
ENDPROC
**
FUNCTION getFieldValue
LPARAMETERS TCEXPR, TNRECNO
LOCAL LNPREVRECNO
IF TNRECNO<>0
LNPREVRECNO = RECNO(THIS.NPROCESSINGALIAS)
GOTO (TNRECNO) IN THIS.NPROCESSINGALIAS
THIS.SYNCHRONIZERELATIONS(4)
ENDIF
LUVALUE = THIS.XFEVAL(TCEXPR)
IF TNRECNO<>0
GOTO (M.LNPREVRECNO) IN THIS.NPROCESSINGALIAS
THIS.SYNCHRONIZERELATIONS(3)
ENDIF
RETURN LUVALUE
ENDFUNC
**
FUNCTION XFEVAL
LPARAMETERS LCSTR
LOCAL LNPOS, LNOCC, II, LLINSTR, LCWAITFOR, LCCHAR, LLGOON
LOCAL LLSELECTCHANGED, LURETVAL
IF THIS.NPROCESSINGALIAS>0
LLSELECTCHANGED = .T.
SELECT (THIS.NPROCESSINGALIAS)
ENDIF
IF  .NOT. ISNULL(THIS.THAT)
LNOCC = 1
II = 0
LLINSTR = .F.
LNPOS = ATC("this", LCSTR, LNOCC)
DO WHILE LNPOS>0
LLGOON = .T.
IF LEN(LCSTR)>LNPOS+3
LCCHAR = SUBSTR(LCSTR, LNPOS+4, 1)
IF ISALPHA(LCCHAR) .OR. ISDIGIT(LCCHAR) .OR. LCCHAR=="_"
LNOCC = LNOCC+1
LLGOON = .F.
ENDIF
ENDIF
IF LLGOON
DO WHILE II<LNPOS
II = II+1
IF  .NOT. LLINSTR
IF INLIST(SUBSTR(LCSTR, II, 1), "'", '"')
LLINSTR = .T.
LCWAITFOR = SUBSTR(LCSTR, II, 1)
LOOP
ENDIF
ELSE
IF SUBSTR(LCSTR, II, 1)=LCWAITFOR
LLINSTR = .F.
ENDIF
LOOP
ENDIF
ENDDO
IF LLINSTR
LNOCC = LNOCC+1
ELSE
LCSTR = STUFF(LCSTR, LNPOS, 4, "this.that")
LNOCC = LNOCC+1
ENDIF
ENDIF
LNPOS = ATC("this", LCSTR, LNOCC)
ENDDO
ENDIF
IF  .NOT. ISNULL(THIS.THATFORM)
LCSTR = THIS.STUFFTHISFORM(LCSTR)
ENDIF
LURETVAL = EVALUATE(LCSTR)
IF LLSELECTCHANGED
SELECT UR_REPORT
ENDIF
RETURN LURETVAL
ENDFUNC
**
FUNCTION StuffThisform
LPARAMETERS LCSTR
LOCAL LNOCC, II, LLINSTR, LNPOS
LNOCC = 1
II = 0
LLINSTR = .F.
LNPOS = ATC("thisform", LCSTR, LNOCC)
DO WHILE LNPOS>0
DO WHILE II<LNPOS
II = II+1
IF  .NOT. LLINSTR
IF INLIST(SUBSTR(LCSTR, II, 1), "'", '"')
LLINSTR = .T.
LCWAITFOR = SUBSTR(LCSTR, II, 1)
LOOP
ENDIF
ELSE
IF SUBSTR(LCSTR, II, 1)=LCWAITFOR
LLINSTR = .F.
ENDIF
LOOP
ENDIF
ENDDO
IF LLINSTR
LNOCC = LNOCC+1
ELSE
LCSTR = STUFF(LCSTR, LNPOS, 8, "this.thatform")
ENDIF
LNPOS = ATC("thisform", LCSTR, LNOCC)
ENDDO
RETURN LCSTR
ENDFUNC
**
FUNCTION evalws
LPARAMETERS TCSTR
LOCAL LCSTR, M.I, LLINSTR, LCWAITFOR, LNPARLEV, LCEVALSTR, LCTRVAL
LCSTR = TCSTR
M.I = 0
LLINSTR = .F.
LCWAITFOR = ""
LNPARLEV = 0
LCOUT = ""
DO WHILE M.I<LEN(LCSTR)
M.I = M.I+1
IF  .NOT. LLINSTR
IF INLIST(SUBSTR(LCSTR, M.I, 1), "'", '"')
LLINSTR = .T.
LCWAITFOR = SUBSTR(LCSTR, M.I, 1)
LOOP
ENDIF
IF INLIST(SUBSTR(LCSTR, M.I, 1), "(")
LNPARLEV = LNPARLEV+1
LOOP
ENDIF
IF INLIST(SUBSTR(LCSTR, M.I, 1), ")")
LNPARLEV = LNPARLEV-1
LOOP
ENDIF
IF INLIST(SUBSTR(LCSTR, M.I, 1), "[")
LNPARLEV = LNPARLEV+1
LOOP
ENDIF
IF INLIST(SUBSTR(LCSTR, M.I, 1), "]")
LNPARLEV = LNPARLEV-1
LOOP
ENDIF
ELSE
IF SUBSTR(LCSTR, M.I, 1)=LCWAITFOR
LLINSTR = .F.
ENDIF
LOOP
ENDIF
IF LNPARLEV<>0
LOOP
ENDIF
IF SUBSTR(LCSTR, M.I, 1)=","
LCEVALSTR = THIS.XFEVAL(LEFT(LCSTR, M.I-1))
LCTRVAL = THIS._TRANSFORM(LCEVALSTR)
LCOUT = LCOUT+ALLTRIM(LCTRVAL)
IF  .NOT. EMPTY(LCTRVAL)
LCOUT = LCOUT+" "
ENDIF
LCSTR = SUBSTR(LCSTR, M.I+1)
M.I = 0
ENDIF
IF SUBSTR(LCSTR, M.I, 1)=";"
LCEVALSTR = THIS.XFEVAL(LEFT(LCSTR, M.I-1))
LCOUT = LCOUT+ALLTRIM(THIS._TRANSFORM(LCEVALSTR))
IF  .NOT. INLIST(RIGHT(LCOUT, 1), CHR(13), CHR(10))
LCOUT = LCOUT+CHR(13)+CHR(10)
ENDIF
LCSTR = SUBSTR(LCSTR, M.I+1)
M.I = 0
ENDIF
ENDDO
IF LEN(LCOUT)=0
LCEVALSTR = THIS.XFEVAL(LCSTR)
RETURN LCEVALSTR
ELSE
LCEVALSTR = THIS.XFEVAL(LCSTR)
RETURN LCOUT+THIS._TRANSFORM(LCEVALSTR)
ENDIF
POS = AT("_UR_COM", LCSTR)
DO WHILE POS>0
II = POS-1
LLENTER = .F.
DO WHILE II>=1
IF SUBSTR(LCSTR, II, 1)<>" "
EXIT
ENDIF
II = II-1
ENDDO
LCSTR = LEFT(LCSTR, II)+" "+SUBSTR(LCSTR, POS+7)
POS = AT("_UR_COM", LCSTR)
ENDDO
POS = AT("_UR_SEM", LCSTR)
DO WHILE POS>0
II = POS-1
LLENTER = .F.
DO WHILE II>=1
IF SUBSTR(LCSTR, II, 1)<>" "
IF INLIST(SUBSTR(LCSTR, II, 1), CHR(13), CHR(10))
LLENTER = .T.
ENDIF
EXIT
ENDIF
II = II-1
ENDDO
IF LLENTER
LCSTR = LEFT(LCSTR, II)+SUBSTR(LCSTR, POS+7)
ELSE
LCSTR = LEFT(LCSTR, POS-1)+CHR(10)+CHR(13)+SUBSTR(LCSTR, POS+7)
ENDIF
POS = AT("_UR_SEM", LCSTR)
ENDDO
RETURN LCSTR
ENDFUNC
**
PROCEDURE addToLog
LPARAMETERS TCSTR
IF  .NOT. EMPTY(THIS.CLOGFILE)
ADDTOLOG(TCSTR, THIS.CLOGFILE)
ENDIF
ENDPROC
**
PROCEDURE registerVerticalComponent
LPARAMETERS LNTOP, LNUNIQUEID
WITH THIS
.NVC = .NVC+1
DIMENSION .AVC(.NVC, 2)
.AVC(.NVC, 1) = LNUNIQUEID
.AVC(.NVC, 2) = LNTOP+THIS.LICURRENTPOS
ENDWITH
RETURN
ENDPROC
**
FUNCTION isVerticalComponent
LPARAMETERS TCUNIQUEID
LOCAL LI
WITH THIS
FOR LI = 1 TO .NVC
IF .AVC(LI, 1)=TCUNIQUEID
RETURN .T.
ENDIF
ENDFOR
ENDWITH
RETURN .F.
ENDFUNC
**
PROCEDURE adjustVerticalComponent
LPARAMETERS TOOBJ, TOSECTION
LOCAL LI
WITH THIS
FOR LI = 1 TO .NVC
IF .AVC(LI, 1)=TOOBJ.LNUNIQUEID
TOOBJ.LNTOPABS = .AVC(LI, 2)
TOOBJ.LLABSTOP = .T.
ADEL(.AVC, LI)
.NVC = .NVC-1
EXIT
ENDIF
ENDFOR
ENDWITH
RETURN
ENDPROC
**
PROCEDURE resetVC
THIS.NVC = 0
ENDPROC
**
FUNCTION toTopPoint
LPARAMETERS LNTOP
RETURN THIS.TOPOINT(THIS.LNPAPERHEIGHT-LNTOP)
ENDFUNC
**
FUNCTION ToPoint
LPARAMETERS LNSIZE
RETURN (LNSIZE/10000)*72
ENDFUNC
**
FUNCTION ToPixel
LPARAMETERS LNSIZE
RETURN (LNSIZE/10000)*96
ENDFUNC
**
PROCEDURE addAd
LOCAL LCTOP
*THIS.CADDTEXT = "Created with XFRX, www.eqeus.com, commercial use prohibited."
IF  .NOT. EMPTY(THIS.CADDTEXT)
DO CASE
CASE THIS.CTARGET="DOC"
LCTOP = THIS.TOINCH(THIS.LNPAPERHEIGHT-4500+0-THIS.LNTOPMARGIN-THIS.LNTOPPAGEMARGIN)
THIS.OUTSHAPE(THIS.TOINCH(6000-THIS.LNLEFTMARGIN), LCTOP, THIS.TOINCH(2000), THIS.TOINCH(58000), THIS.CADDTEXT, "Arial", "9pt", "left")
CASE THIS.CTARGET="PDF"
THIS.ODOCUMENT.SETCOLOR("f", 0, 0, 0)
THIS.ODOCUMENT.STARTTEXT()
THIS.ODOCUMENT.SETPOS(30, 30)
THIS.ODOCUMENT.SETFONT("F1", 10)
THIS.ODOCUMENT.OUTTEXT(THIS.CADDTEXT)
THIS.ODOCUMENT.ENDTEXT()
CASE THIS.CTARGET="HTML"
THIS.ODOCUMENT.ADDFONT('Arial', 9)
THIS.ODOCUMENT.SETFONT('Arial', 9)
THIS.ODOCUMENT.ADDTEXTBOX(THIS.CADDTEXT, 30, THIS.ODOCUMENT.NPAGEHEIGHT-22, 600, 22, 0, 1, 192, 192, 192, 255, 255, 255, '', '')
CASE THIS.CTARGET="XLS"
OTHERWISE
THIS.ODOCUMENTWRITER.ADDTEXTBOX(THIS.CADDTEXT, "Arial", 9, .F., .F., 6000, THIS.LNPAPERHEIGHT-4500, 58000, 2000, "L", 0, 0, 0, 0, -1, -1, -1, "left", .F., "", "", "", "", 0, "")
ENDCASE
ENDIF
ENDPROC
**
PROCEDURE setAuthor
LPARAMETERS TCAUTHOR
THIS.CAUTHOR = TCAUTHOR
ENDPROC
**
PROCEDURE setTitle
LPARAMETERS TCTITLE
THIS.CTITLE = TCTITLE
ENDPROC
**
PROCEDURE setSubject
LPARAMETERS TCSUBJECT
THIS.CSUBJECT = TCSUBJECT
ENDPROC
**
PROCEDURE setKeywords
LPARAMETERS TCKEYWORDS
THIS.CKEYWORDS = TCKEYWORDS
ENDPROC
**
PROCEDURE setCreator
LPARAMETERS TCCREATOR
THIS.CCREATOR = TCCREATOR
ENDPROC
**
PROCEDURE setProducer
LPARAMETERS TCPRODUCER
THIS.CPRODUCER = TCPRODUCER
ENDPROC
**
PROCEDURE setCreationDate
LPARAMETERS TCCREATIONDATE
THIS.CCREATIONDATE = TCCREATIONDATE
ENDPROC
**
PROCEDURE setComments
LPARAMETERS TCCOMMENTS
THIS.CCOMMENTS = TCCOMMENTS
ENDPROC
**
PROCEDURE setCategory
LPARAMETERS TCCATEGORY
THIS.CCATEGORY = TCCATEGORY
ENDPROC
**
PROCEDURE setManager
LPARAMETERS TCMANAGER
THIS.CMANAGER = TCMANAGER
ENDPROC
**
PROCEDURE setCompany
LPARAMETERS TCCOMPANY
THIS.CCOMPANY = TCCOMPANY
ENDPROC
**
FUNCTION Init
LPARAMETERS OXFRXSESSION, TCREPORTFILE, TCTARGET, TLSUMMARY, TCLOGFILE
THIS.CLOGFILE = TCLOGFILE
THIS.LSUMMARYREPORTCLAUSEACTIVE =  .NOT. EMPTY(TLSUMMARY)
THIS.XFRXSESSION = OXFRXSESSION
THIS.CTARGET = TCTARGET
IF EMPTY(TCREPORTFILE)
RETURN .T.
ENDIF
THIS.THATFORM = OXFRXSESSION.THATFORM
THIS.THAT = OXFRXSESSION.THAT
LOCAL LNMEMOWIDTH
LNMEMOWIDTH = SET("memowidth")
SET MEMOWIDTH TO 1000
THIS.LCREPORTDIRECTORY = ADDBS(JUSTPATH(TCREPORTFILE))
THIS.LNFIRSTTOSELECT = SELECT(0)
LOCAL LCERROR, LLERROR
LCERROR = ON("Error")
ON ERROR LLERROR = .t.
USE (TCREPORTFILE) ALIAS _REPORT2 IN 0
IF  .NOT. USED("_report2")
USE JUSTFNAME(TCREPORTFILE) ALIAS _REPORT2 IN 0
ENDIF
ON ERROR &LCERROR
IF  .NOT. USED("_report2")
RETURN .F.
ENDIF
SELECT "_U"+ALLTRIM(STR(RECNO())) AS UNIQUEIDX, "_U"+ALLTRIM(STR(RECNO())) AS UNIQUEID, * FROM _report2 INTO CURSOR ur_repxxx
SELECT UNIQUEIDX AS UNIQUEID, * FROM ur_repxxx INTO CURSOR ur_report
USE IN _REPORT2
USE IN UR_REPXXX
SELECT UR_REPORT
THIS.LNSESSION = SET("datasession")
THIS.LOCURSORS = CREATEOBJECT("cursors", .F.)
SELECT UR_REPORT
SET FILTER TO UPPER(PLATFORM)=="WINDOWS "
LOCATE ALL FOR OBJTYPE=25
IF FOUND()
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("initialselectedalias", UR_REPORT.EXPR))
IF  .NOT. EMPTY(LCSTR)
LCSTR = STRTRAN(LCSTR, "'", "")
LCSTR = STRTRAN(LCSTR, '"', "")
THIS.LOCURSORS.INITIALSELECTEDALIAS = GETCHARACTERVALUE(LCSTR)
ENDIF
IF UR_REPORT.ENVIRON
THIS.LODATASESSION = NEWOBJECT("session")
USE IN UR_REPORT
SET DATASESSION TO THIS.LODATASESSION.DATASESSIONID
USE (TCREPORTFILE) ALIAS UR_REPORT IN 0
LOCATE ALL FOR OBJTYPE=25
THIS.LOCURSORS.ILPRIVATE = .T.
ENDIF
THIS.LOCURSORS.HANDLEMETHODS(SET("datasession"))
ENDIF
THIS.LOADCURSORS()
SELECT (THIS.LNFIRSTTOSELECT)
THIS.LOCURSORS.OPENCURSORS(SET("datasession"), THIS.LCREPORTDIRECTORY, THIS.XFRXSESSION.LIGNORECURSORPATH)
THIS.LNFIRSTTOSELECT = SELECT(0)
THIS.NPROCESSINGALIAS = SELECT(0)
SELECT UR_REPORT
THIS.SETUPRELATIONS()
SELECT UR_REPORT
THIS.IOSECTIONS = CREATEOBJECT("cusURSectionList")
LOCAL LITOP
LITOP = 0
THIS.LLNODETAIL = .T.
SCAN ALL FOR OBJTYPE=9
IF  .NOT. (UR_REPORT.OBJCODE=0 .OR. UR_REPORT.OBJCODE=1)
IF UR_REPORT.HEIGHT>5
THIS.LLNODETAIL = .F.
ENDIF
ENDIF
THIS.IOSECTIONS.ADD(UR_REPORT.OBJCODE, LITOP, UR_REPORT.HEIGHT, UR_REPORT.PAGEBREAK, UR_REPORT.COLBREAK, UR_REPORT.EXPR, UR_REPORT.TAG, UR_REPORT.TAG2, UR_REPORT.RESETPAGE, UR_REPORT.WIDTH, UR_REPORT.NOREPEAT, UR_REPORT.EJECTBEFOR, UR_REPORT.EJECTAFTER)
LITOP = LITOP+UR_REPORT.HEIGHT+1980+100
IF OBJCODE=7 .OR. OBJCODE=6
THIS.LIFOOTERHEIGHT = THIS.LIFOOTERHEIGHT+UR_REPORT.HEIGHT
ENDIF
ENDSCAN
LOCAL LNMAXLEVEL
LNMAXLEVEL = THIS.IOSECTIONS.SETEXPRTOFOOTERS()
THIS.IOSECTIONS.UPDATEVALUES()
THIS.IOVARIABLES = CREATEOBJECT("cusURVariableList")
LOCAL LO
SCAN ALL FOR OBJTYPE=18
THIS.ADDTOLOG("Initializing variable: "+UR_REPORT.NAME)
LO = CREATEOBJECT("cusURVariable", THIS, UR_REPORT.UNIQUEID, UR_REPORT.NAME, UR_REPORT.TAG, UR_REPORT.TOTALTYPE, MIN(LNMAXLEVEL, UR_REPORT.RESETTOTAL), UR_REPORT.EXPR, UR_REPORT.SUPGROUP)
THIS.IOVARIABLES.ADD(LO)
ENDSCAN
SCAN ALL FOR OBJTYPE=8
LO = CREATEOBJECT("cusURVariable", THIS, UR_REPORT.UNIQUEID, "", .NULL., UR_REPORT.TOTALTYPE, MIN(LNMAXLEVEL, UR_REPORT.RESETTOTAL), UR_REPORT.EXPR, UR_REPORT.SUPGROUP)
THIS.IOVARIABLES.ADD(LO)
ENDSCAN
LOCAL LNGRSHIFT
LNGRSHIFT = 0
SCAN ALL FOR OBJTYPE=10
THIS.NGROUPS = THIS.NGROUPS+1
DIMENSION THIS.AGROUPS(THIS.NGROUPS, 2)
THIS.AGROUPS(THIS.NGROUPS, 1) = UR_REPORT.VPOS+LNGRSHIFT
THIS.AGROUPS(THIS.NGROUPS, 2) = UR_REPORT.HPOS
LNGRSHIFT = LNGRSHIFT+UR_REPORT.HPOS-1
ENDSCAN
THIS.READREPORTHEADER()
SET MEMOWIDTH TO (LNMEMOWIDTH)
ENDFUNC
**
PROCEDURE Destroy
THIS.XFRXSESSION = .NULL.
IF USED("UR_report")
USE IN UR_REPORT
ENDIF
IF TYPE("this.loCursors")="O" .AND.  .NOT. ISNULL(THIS.LOCURSORS)
THIS.LOCURSORS.CLOSECURSORS(SET("datasession"))
ENDIF
IF TYPE("this.loDataSession")="O" .AND.  .NOT. ISNULL(THIS.LODATASESSION)
SET DATASESSION TO THIS.LNSESSION
THIS.LODATASESSION.DESTROY()
ENDIF
ENDPROC
**
PROCEDURE loadCursors
LOCAL LOCURSOR, LCSTR, LCALIAS, LCORDER, LCCURSORSOURCE, LCNAME, LCDATABASE, LNBUFFER
SCAN ALL FOR OBJTYPE=26 .AND. ALLTRIM(NAME)="cursor"
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("ALIAS = ", UR_REPORT.EXPR))
LCALIAS = GETCHARACTERVALUE(LCSTR)
LCALIAS = STRTRAN(LCALIAS, "'")
LCALIAS = STRTRAN(LCALIAS, '"')
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("ORDER = ", UR_REPORT.EXPR))
LCORDER = GETCHARACTERVALUE(LCSTR)
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("CURSORSOURCE = ", UR_REPORT.EXPR))
LCCURSORSOURCE = GETCHARACTERVALUE(LCSTR)
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("NAME = ", UR_REPORT.EXPR))
LCNAME = GETCHARACTERVALUE(LCSTR)
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("DATABASE = ", UR_REPORT.EXPR))
LCDATABASE = GETCHARACTERVALUE(LCSTR)
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("BUFFERMODEOVERRIDE = ", UR_REPORT.EXPR))
LNBUFFER = GETNUMERICVALUE(LCSTR)
LOCURSOR = CREATEOBJECT("mycursor", LCALIAS, LCORDER, LCCURSORSOURCE, LCNAME, LCDATABASE, LNBUFFER)
THIS.LOCURSORS.ADDCURSOR(LOCURSOR)
ENDSCAN
ENDPROC
**
PROCEDURE setupRelations
LOCAL II, LLFND, LCWIDTH
LCWIDTH = SET("Memowidth")
SET MEMOWIDTH TO 300
SCAN ALL FOR OBJTYPE=26 .AND. ALLTRIM(NAME)="relation"
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("PARENTALIAS", UR_REPORT.EXPR))
LCPARENTALIAS = STRTRAN(GETCHARACTERVALUE(LCSTR), '"')
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("CHILDALIAS", UR_REPORT.EXPR))
LCCHILDALIAS = STRTRAN(GETCHARACTERVALUE(LCSTR), '"')
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("RELATIONALEXPR", UR_REPORT.EXPR))
LCEXPR = EVALUATE(GETCHARACTERVALUE(LCSTR))
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("ONETOMANY", UR_REPORT.EXPR))
LCOTM = UPPER(STRTRAN(GETCHARACTERVALUE(LCSTR), '"'))
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("CHILDORDER", UR_REPORT.EXPR))
LCCHILDORDER = STRTRAN(GETCHARACTERVALUE(LCSTR), '"')
IF  .NOT. EMPTY(LCCHILDORDER)
SELECT (LCCHILDALIAS)
SET ORDER TO (LCCHILDORDER)
ENDIF
SELECT (LCPARENTALIAS)
M.I = 1
LLFND = .F.
DO WHILE  .NOT. EMPTY(TARGET(M.I))
IF UPPER(ALLTRIM(TARGET(M.I)))=UPPER(ALLTRIM(LCCHILDALIAS))
LLFND = .T.
EXIT
ENDIF
M.I = M.I+1
ENDDO
IF LLFND
LOOP
ENDIF
SET RELATION TO &LCEXPR INTO &LCCHILDALIAS ADDI
IF "T"$LCOTM
SET SKIP TO &LCCHILDALIAS
ENDIF
ENDSCAN
SET MEMOWIDTH TO (LCWIDTH)
ENDPROC
**
PROCEDURE readReportHeader
LOCAL LCSTR, LORIENTATIONDEFINED
SELECT UR_REPORT
LOCATE ALL FOR OBJTYPE=1 .AND. OBJCODE=53
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("ORIENTATION", UR_REPORT.EXPR))
IF  .NOT. EMPTY(LCSTR)
THIS.LNORIENTATION = GETNUMERICVALUE(LCSTR)
LORIENTATIONDEFINED = .T.
ENDIF
LCSTR = MLINE(UR_REPORT.EXPR, ATCLINE("PAPERSIZE", UR_REPORT.EXPR))
IF  .NOT. EMPTY(LCSTR)
THIS.NPAPERSIZEINDEX = GETNUMERICVALUE(LCSTR)
THIS.SETPAPERSIZE(THIS.NPAPERSIZEINDEX)
ENDIF
IF FOUND()
IF  .NOT. UR_REPORT.TOP
THIS.LNTOPPAGEMARGIN = 1950
THIS.LNBOTTOMPAGEMARGIN = 2000
THIS.LNLEFTPAGEMARGIN = 2100
THIS.LNRIGHTPAGEMARGIN = 2100
ENDIF
THIS.LNNUMBEROFCOLUMNS = UR_REPORT.VPOS
THIS.LNLEFTOFFSET = UR_REPORT.HPOS+THIS.LNLEFTPAGEMARGIN
THIS.LNCOLUMNWIDTH = UR_REPORT.WIDTH
THIS.LNCOLUMNSPACING = UR_REPORT.HEIGHT
ENDIF
IF UR_REPORT.WIDTH>THIS.LNPAPERWIDTH*1.15  .AND.  .NOT. LORIENTATIONDEFINED .AND. THIS.LNORIENTATION=0
THIS.LNORIENTATION = 1
LOCAL LNTEMP
LNTEMP = THIS.LNPAPERWIDTH
THIS.LNPAPERWIDTH = THIS.LNPAPERHEIGHT
THIS.LNPAPERHEIGHT = LNTEMP
ENDIF
ENDPROC
**
PROCEDURE newcolumn
THIS.LICURRENTPOS = 0
THIS.IOVARIABLES.NEWPAGEORCOLUMN()
ENDPROC
**
PROCEDURE newPage
THIS.ALLOWBANNED()
IF  .NOT. ISNULL(THIS.IOVARIABLES)
THIS.IOVARIABLES.NEWPAGEORCOLUMN()
ENDIF
DO CASE
CASE THIS.CTARGET="DOC"
LOCAL LLNEWDOC
IF THIS.NSPLITSKIP>0
THIS.NSPLITCOUNTDOWN = THIS.NSPLITCOUNTDOWN-1
IF THIS.NSPLITCOUNTDOWN=0
THIS.NSPLITCOUNTDOWN = THIS.NSPLITSKIP
THIS.ADDAD()
THIS.ENDDIV()
THIS.FLUSHOUTPUT()
FCLOSE(.LNHANDLER)
THIS.XFRXSESSION.ANOTHERDOCPLEASE()
THIS.PROCESSWORDHEADER(THIS.CCODEPAGE, THIS.CHEADERFILE, 1)
THIS.LNHANDLER = FCREATE(THIS.LCFILENAME)
THIS.STARTDIV(1)
LLNEWDOC = .T.
ENDIF
ENDIF
THIS.INCPAGENO()
IF  .NOT. THIS.SKIPPAGE() .AND.  .NOT. THIS.LLFIRSTTOSKIP .AND.  .NOT. LLNEWDOC
THIS.ADDAD()
THIS.LCOUTPUT = THIS.LCOUTPUT+"<br clear=all style='page-break-before:always'>"+CHR(13)+CHR(10)
THIS.LLFIRSTTOSKIP = .F.
ELSE
IF  .NOT. THIS.SKIPPAGE()
IF THIS.LLFIRSTTOSKIP
THIS.LLFIRSTTOSKIP = .F.
ENDIF
ENDIF
ENDIF
THIS.LICURRENTPOS = 0
CASE THIS.CTARGET="PDF"
IF  .NOT. THIS.SKIPPAGE()
THIS.PROCESSSCRIPTS(1)
THIS.ADDAD()
THIS.ODOCUMENT.FLUSHPAGE()
ENDIF
THIS.LICURRENTPOS = 0
THIS.INCPAGENO()
IF  .NOT. THIS.SKIPPAGE()
THIS.ODOCUMENT.NEWPAGE(THIS.TOPOINT(THIS.LNPAPERHEIGHT), THIS.TOPOINT(THIS.LNPAPERWIDTH))
THIS.PROCESSSCRIPTS(0)
ENDIF
CASE THIS.CTARGET="HTML"
THIS.LICURRENTPOS = 0
THIS.INCPAGENO()
IF  .NOT. THIS.SKIPPAGE()
THIS.ADDAD()
THIS.ODOCUMENT.NEWPAGE(THIS.TOPIXEL(THIS.LNPAPERHEIGHT), THIS.TOPIXEL(THIS.LNPAPERWIDTH))
ENDIF
OTHERWISE
THIS.LICURRENTPOS = 0
THIS.INCPAGENO()
IF  .NOT. THIS.SKIPPAGE()
THIS.ODOCUMENTWRITER.NEWPAGE(THIS.LNPAPERHEIGHT, THIS.LNPAPERWIDTH, _PAGENO, THIS.LNORIENTATION)
ENDIF
ENDCASE
ENDPROC
**
PROCEDURE newSection
DO CASE
CASE THIS.CTARGET="DOC"
IF  .NOT. THIS.SKIPPAGE()
THIS.LCOUTPUT = THIS.LCOUTPUT+"<br clear=all style='page-break-before:always; mso-break-type:section-break'>"+CHR(13)+CHR(10)
ENDIF
CASE THIS.CTARGET="PDF"
IF  .NOT. THIS.SKIPPAGE()
THIS.ODOCUMENT.FLUSHPAGE()
THIS.ODOCUMENT.NEWPAGE(THIS.TOPOINT(THIS.LNPAPERHEIGHT), THIS.TOPOINT(THIS.LNPAPERWIDTH))
ENDIF
CASE THIS.CTARGET="HTML"
THIS.ODOCUMENT.NEWPAGE(THIS.TOPIXEL(THIS.LNPAPERHEIGHT), THIS.TOPIXEL(THIS.LNPAPERWIDTH))
ENDCASE
THIS.LICURRENTPOS = 0
ENDPROC
**
PROCEDURE incPageNo
_PAGENO = _PAGENO+1
THIS.NCURRENTREPORTPAGENO = THIS.NCURRENTREPORTPAGENO+1
IF  .NOT. ISNULL(THIS.TOPROGRESS)
IF THIS.TNPROGRESSTYPE=1
THIS.TOPROGRESS.UPDATEPROGRESS(THIS.TNREPORTNUMBER, _PAGENO, 0)
ENDIF
ENDIF
THIS.RESETVC()
ENDPROC
**
PROCEDURE StartDiv
LPARAMETERS TNREPORTNUMBER
DO CASE
CASE THIS.CTARGET="DOC"
THIS.LCOUTPUT = THIS.LCOUTPUT+"<div class=Section"+ALLTRIM(STR(TNREPORTNUMBER))+">"+CHR(13)+CHR(10)
CASE THIS.CTARGET="PDF"
ENDCASE
ENDPROC
**
PROCEDURE EndDiv
LPARAMETERS TNREPORTNUMBER
DO CASE
CASE THIS.CTARGET="DOC"
THIS.LCOUTPUT = THIS.LCOUTPUT+"</div>"+CHR(13)+CHR(10)
CASE THIS.CTARGET="PDF"
ENDCASE
ENDPROC
**
PROCEDURE processScripts
LPARAMETERS TNZORDER
WITH THIS
LOCAL II, LCCALLSTRING, ODOCUMENT, LLPROCESS, LNPAGENUMBER, LCPAGESCOPE
FOR II = 1 TO .OPDFLSCRIPTS.NPDFLSCRIPTS
WITH .OPDFLSCRIPTS.APDFLSCRIPTS(II)
IF .NZORDER=TNZORDER
LLPROCESS = .F.
DO CASE
CASE .NNUMBERINGTYPE=0
LNPAGENUMBER = THIS.NCURRENTREPORTPAGENO+THIS.NCURRENTREPORTPAGENOOFFSET
CASE .NNUMBERINGTYPE=1
LNPAGENUMBER = THIS.NCURRENTREPORTPAGENO
OTHERWISE
LNPAGENUMBER = _PAGENO
ENDCASE
LCPAGESCOPE = .CPAGESCOPE
IF "ALL"$LCPAGESCOPE .OR. "FIRST"$LCPAGESCOPE .AND. LNPAGENUMBER=1 .OR. "ODD"$LCPAGESCOPE .AND. MOD(LNPAGENUMBER, 2)=1 .OR. "EVEN"$LCPAGESCOPE .AND. MOD(LNPAGENUMBER, 2)=0
LLPROCESS = .T.
ELSE
LLPROCESS = _PAGENOCHECK(LNPAGENUMBER, .CPAGESCOPE)
ENDIF
IF LLPROCESS
LCCALLSTRING = ".oScriptObject."+ALLTRIM(.CSCRIPTMETHOD)+"()"
&LCCALLSTRING
ENDIF
ENDIF
ENDWITH
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE InitializeFonts
IF THIS.CTARGET="PDF"
SELECT UR_REPORT
LOCAL LNSTYLE, LLBOLD, LLITALICS, LLEMBED
SCAN ALL FOR OBJTYPE<>25
IF  .NOT. EMPTY(UR_REPORT.FONTFACE)
LNSTYLE = UR_REPORT.FONTSTYLE
IF LNSTYLE>127
LNSTYLE = LNSTYLE-128
ENDIF
IF LNSTYLE>3
LNSTYLE = LNSTYLE-4
ENDIF
IF LNSTYLE>1
LLITALICS = .T.
LNSTYLE = LNSTYLE-2
ELSE
LLITALICS = .F.
ENDIF
IF LNSTYLE>0
LLBOLD = .T.
ELSE
LLBOLD = .F.
ENDIF
LLEMBED = "#UR INCLUDEFONT"$UR_REPORT.COMMENT
IF LLEMBED
IF "SUBSET"$UR_REPORT.COMMENT
LLEMBED = 1
ELSE
LLEMBED = 2
ENDIF
ELSE
LLEMBED = 0
ENDIF
THIS.ODOCUMENT.ADDFONT(ALLTRIM(UR_REPORT.FONTFACE), LLBOLD, LLITALICS, LLEMBED)
ENDIF
ENDSCAN
ENDIF
IF THIS.CTARGET="HTML"
SELECT UR_REPORT
LOCAL LNSTYLE, LLBOLD, LLITALICS
SCAN ALL
IF  .NOT. EMPTY(UR_REPORT.FONTFACE)
LNSTYLE = UR_REPORT.FONTSTYLE
IF LNSTYLE>3
LNSTYLE = LNSTYLE-4
ENDIF
IF LNSTYLE>1
LLITALICS = .T.
LNSTYLE = LNSTYLE-2
ELSE
LLITALICS = .F.
ENDIF
IF LNSTYLE>0
LLBOLD = .T.
ELSE
LLBOLD = .F.
ENDIF
THIS.ODOCUMENT.ADDFONT(ALLTRIM(UR_REPORT.FONTFACE), UR_REPORT.FONTSIZE, LLBOLD, LLITALICS)
ENDIF
ENDSCAN
ENDIF
ENDPROC
**
PROCEDURE InitializeProperties
LPARAMETERS TLNEWDOC, TLDONTREOPEN
WITH THIS
IF .CTARGET="HTML"
.ODOCUMENT.CTEXTTOHIGHLIGHT = .XFRXSESSION.CTEXTTOHIGHLIGHT
.ODOCUMENT.BEGINDOC(.TNREPORTNUMBER, .CCODEPAGE)
ENDIF
IF  .NOT. ISNULL(.ODOCUMENTWRITER)
.ODOCUMENTWRITER.NEWREPORT(.TNREPORTNUMBER, .CCODEPAGE, THIS)
ENDIF
DO CASE
CASE .CTARGET="DOC"
.PROCESSWORDHEADER(.CCODEPAGE, .CHEADERFILE, .TNREPORTNUMBER)
IF TLNEWDOC
.LNHANDLER = FCREATE(.LCFILENAME)
ELSE
IF  .NOT. TLDONTREOPEN
.LNHANDLER = FOPEN(.LCFILENAME, 1)
= FSEEK(.LNHANDLER, 0, 2)
ENDIF
.NEWSECTION()
ENDIF
.STARTDIV(.TNREPORTNUMBER)
IF THIS.SKIPPAGE()
.LLFIRSTTOSKIP = .T.
ENDIF
CASE .CTARGET="PDF"
IF  .NOT. .SKIPPAGE()
.ODOCUMENT.NEWPAGE(.TOPOINT(.LNPAPERHEIGHT), .TOPOINT(.LNPAPERWIDTH))
.PROCESSSCRIPTS(0)
ENDIF
CASE .CTARGET="HTML"
IF .LNTOPMARGIN>.ODOCUMENT.NTOPMARGIN
.LNTOPMARGIN = .ODOCUMENT.NTOPMARGIN
ENDIF
IF .LNBOTTOMMARGIN>.ODOCUMENT.NBOTTOMMARGIN
.LNBOTTOMMARGIN = .ODOCUMENT.NTOPMARGIN
ENDIF
IF .LNLEFTMARGIN>.ODOCUMENT.NLEFTMARGIN
.LNLEFTMARGIN = .ODOCUMENT.NLEFTMARGIN
ENDIF
IF .LNRIGHTMARGIN>.ODOCUMENT.NRIGHTMARGIN
.LNRIGHTMARGIN = .ODOCUMENT.NRIGHTMARGIN
ENDIF
IF  .NOT. THIS.SKIPPAGE()
.ODOCUMENT.NEWPAGE(.TOPIXEL(.LNPAPERHEIGHT), .TOPIXEL(.LNPAPERWIDTH))
ENDIF
OTHERWISE
IF  .NOT. THIS.SKIPPAGE()
.ODOCUMENTWRITER.FIRSTPAGE(.LNPAPERHEIGHT, .LNPAPERWIDTH, _PAGENO)
ENDIF
ENDCASE
ENDWITH
ENDPROC
**
PROCEDURE AfterReport
WITH THIS
DO CASE
CASE THIS.CTARGET="DOC"
.ENDDIV()
.FLUSHOUTPUT()
CASE THIS.CTARGET="PDF"
THIS.PROCESSSCRIPTS(1)
IF  .NOT. THIS.SKIPPAGE()
THIS.ODOCUMENT.FLUSHPAGE()
ENDIF
CASE THIS.CTARGET="HTML"
OTHERWISE
.ODOCUMENTWRITER.ENDREPORT()
ENDCASE
FCLOSE(.LNHANDLER)
ENDWITH
ENDPROC
**
PROCEDURE SetupReport
LPARAMETERS LCFILENAME, TCHEADERFILE, TNREPORTNUMBER, TOFILES, TCFORCLAUSE, TCCODEPAGE, TLNEWDOC, TODOC, TOPROGRESS, TNPROGRESSTYPE, TCLOGFILE, TCSCOPECLAUSE, TCWHILECLAUSE, TOSESSION
LOCAL LTSECTION, LTPROCESS, LLFINISH, LLNEWPAGE, LNPROCESSFOOTERSUPTO, LLFIRSTLOOP
WITH THIS
.CFORCLAUSE = TCFORCLAUSE
.CWHILECLAUSE = TCWHILECLAUSE
.CSCOPECLAUSE = TCSCOPECLAUSE
.CCODEPAGE = TCCODEPAGE
DO CASE
CASE TYPE(".cCodePage")="N"
.NCODEPAGE = .CCODEPAGE
CASE TYPE(".cCodePage")="C"
.NCODEPAGE = VAL(.CCODEPAGE)
OTHERWISE
.NCODEPAGE = 0
ENDCASE
.CHEADERFILE = TCHEADERFILE
.XFRXSESSION = TOSESSION
.CLOGFILE = TCLOGFILE
.TNREPORTNUMBER = TNREPORTNUMBER
.TOPROGRESS = TOPROGRESS
.TNPROGRESSTYPE = 0 && TNPROGRESSTYPE
.ODOCUMENT = TODOC
.OFILES = TOFILES
.LCFILENAME = LCFILENAME
THIS.INITIALIZEFONTS()
SELECT (.LNFIRSTTOSELECT)
.GETPAGEMARGINS()
THIS.INITIALIZEPROPERTIES(TLNEWDOC)
.LICURRENTPOS = 0
.CURRENTBUFFER = CREATEOBJECT("buffer")
.CURRENTBUFFER.SETREPORT(THIS)
ENDWITH
ENDPROC
**
FUNCTION RunReport
LPARAMETERS TOSTATE, TLNOVARRELEASE
LOCAL LNALIAS, LNRECNO
WITH THIS
GNSTOPXFRX = 0
LOCAL LCSCOPE, LNCURRENTRECORD, LNPREVIOUSRECORD, LNNEXTRECORD, LOSECTION
IF ISNULL(M.TOSTATE)
IF THIS.LLNODETAIL
LCSCOPE = "NEXT 1"
ELSE
IF  .NOT. EMPTY(.CWHILECLAUSE) .AND. EMPTY(.CSCOPECLAUSE)
.CSCOPECLAUSE = " rest"
ENDIF
LCSCOPE = "FOR "+.CFORCLAUSE+IIF(EMPTY(.CSCOPECLAUSE), " ALL", " "+ALLTRIM(.CSCOPECLAUSE))+IIF(EMPTY(.CWHILECLAUSE), "", " WHILE "+.CWHILECLAUSE)
LCSCOPE = THIS.STUFFTHISFORM(LCSCOPE)
ENDIF
IF  .NOT. ISNULL(.TOPROGRESS) .AND. .TNPROGRESSTYPE>1
LNRECNO = RECNO()
CALCULATE CNT() &LCSCOPE TO .NTOTALRECORDS
IF M.LNRECNO<=RECCOUNT()
GOTO (M.LNRECNO)
ENDIF
ELSE
.NTOTALRECORDS = 0
ENDIF
IF  .NOT. ISNULL(.TOPROGRESS)
IF .TNPROGRESSTYPE=1
.TOPROGRESS.UPDATEPROGRESS(.TNREPORTNUMBER, _PAGENO, 0)
ENDIF
ENDIF
.NACTUALRECORD = 0
.NPROCESSINGALIAS = SELECT(0)
.LFIRSTLOOP = .T.
LNCURRENTRECORD = 0
LNPREVIOUSRECORD = 0
LNNEXTRECORD = 0
.PREPARERELATIONS(ALIAS())
.LNACTUALCOLUMN = 1
ELSE
LCSCOPE = M.TOSTATE.CSCOPE
LNPREVIOUSRECORD = M.TOSTATE.NPREVIOUSRECORD
LNCURRENTRECORD = M.TOSTATE.NCURRENTRECORD
LNNEXTRECORD = M.TOSTATE.LNNEXTRECORD
ENDIF
LOCAL LLLASTRECORD
LOCAL NRECORDS, LLRESETALLVARIABLES
LLRESETALLVARIABLES = .T.
NRECORDS = IIF(.NRECORDSTOPROCESS=0, -1, .NRECORDSTOPROCESS)
SCAN &LCSCOPE
IF LLRESETALLVARIABLES
LNALIAS = SELECT(0)
.IOVARIABLES.RESETALLVARIABLES()
SELECT (LNALIAS)
LLRESETALLVARIABLES = .F.
ENDIF
IF  .NOT. ISNULL(M.TOSTATE)
GOTO (M.TOSTATE.NRECNO)
M.TOSTATE = .NULL.
ENDIF
IF (TYPE("gnStopXFRX")="N" .AND. GNSTOPXFRX>0) .OR. M.NRECORDS=0
IF M.NRECORDS=0
M.TOSTATE = CREATEOBJECT("XFRXState")
M.TOSTATE.CSCOPE = LCSCOPE
M.TOSTATE.NPREVIOUSRECORD = LNPREVIOUSRECORD
M.TOSTATE.NCURRENTRECORD = LNCURRENTRECORD
M.TOSTATE.LNNEXTRECORD = LNNEXTRECORD
M.TOSTATE.NRECNO = RECNO()
ENDIF
EXIT
ENDIF
NRECORDS = M.NRECORDS-1
LNPREVIOUSRECORD = LNCURRENTRECORD
THIS.COPYRELATIONSPOS(3, 2)
LNCURRENTRECORD = LNNEXTRECORD
THIS.COPYRELATIONSPOS(4, 3)
LNNEXTRECORD = RECNO()
THIS.STORERELATIONSPOS(4)
IF LNCURRENTRECORD<>0
GOTO (LNCURRENTRECORD)
THIS.SYNCHRONIZERELATIONS(3)
.PROCESSONERECORD(LNPREVIOUSRECORD, LNCURRENTRECORD, LNNEXTRECORD, .F., THIS.TOPROGRESS)
SELECT (.NPROCESSINGALIAS)
IF RECNO()<>LNCURRENTRECORD
LNNEXTRECORD = 0
ENDIF
IF LNNEXTRECORD<>0
GOTO (LNNEXTRECORD)
THIS.SYNCHRONIZERELATIONS(4)
ENDIF
.LFIRSTLOOP = .F.
ENDIF
ENDSCAN
IF  .NOT. ISNULL(M.TOSTATE)
RETURN M.TOSTATE
ENDIF
LNPREVIOUSRECORD = LNCURRENTRECORD
THIS.COPYRELATIONSPOS(3, 2)
LNCURRENTRECORD = LNNEXTRECORD
THIS.COPYRELATIONSPOS(4, 3)
LNNEXTRECORD = 0
LOCAL LLSUMMARYONNEWPAGE, LNACTUALCOLUMN
IF LNCURRENTRECORD<>0
GOTO (LNCURRENTRECORD) IN (.NPROCESSINGALIAS)
THIS.SYNCHRONIZERELATIONS(3)
.PROCESSONERECORD(LNPREVIOUSRECORD, LNCURRENTRECORD, LNNEXTRECORD, .T., THIS.TOPROGRESS)
LNACTUALCOLUMN = THIS.LNACTUALCOLUMN
LOSECTION = .IOSECTIONS.GETSPECIAL(8)
IF  .NOT. ISNULL(LOSECTION)
IF  .NOT. THIS.LPLAIN .AND. (LOSECTION.ILNEWPAGE .OR. ((THIS.LICURRENTPOS+LOSECTION.INHEIGHT>THIS.LNPAPERHEIGHT-THIS.LIFOOTERHEIGHT-2*THIS.LNTOPPAGEMARGIN)))
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(6),  ,  , 1)
THIS.LNACTUALCOLUMN = 1
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(7),  ,  , 1)
.NEWPAGE()
IF LOSECTION.LPAGEHEADERONSUMMARY
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(1),  ,  , 1)
ENDIF
LLSUMMARYONNEWPAGE = .T.
ENDIF
THIS.LNACTUALCOLUMN = 1
.PROCESSSECTION(LOSECTION,  ,  , 1)
ENDIF
IF  .NOT. LLSUMMARYONNEWPAGE .OR. LOSECTION.LPAGEFOOTERONSUMMARY
IF  .NOT. LLSUMMARYONNEWPAGE
LOSECTION = .IOSECTIONS.GETSPECIAL(6)
IF  .NOT. ISNULL(LOSECTION)
IF THIS.LPLAIN
LOSECTION.INOBJECTCODE = 4
ENDIF
THIS.LNACTUALCOLUMN = LNACTUALCOLUMN
.PROCESSSECTION(LOSECTION,  ,  , 1, .T.)
IF THIS.LPLAIN
LOSECTION.INOBJECTCODE = 6
ENDIF
ENDIF
ENDIF
THIS.LNACTUALCOLUMN = 1
LOSECTION = .IOSECTIONS.GETSPECIAL(7)
IF  .NOT. ISNULL(LOSECTION)
IF THIS.LPLAIN
LOSECTION.INOBJECTCODE = 4
ENDIF
.PROCESSSECTION(LOSECTION,  ,  , 1, .T.)
IF THIS.LPLAIN
LOSECTION.INOBJECTCODE = 7
ENDIF
ENDIF
ENDIF
THIS.ADDAD()
ENDIF
IF  .NOT. M.TLNOVARRELEASE
.IOVARIABLES.RELEASEMEMORY()
.IOVARIABLES.RELEASE()
ENDIF
.AFTERREPORT()
.CURRENTBUFFER.SETREPORT(.NULL.)
SELECT (.NPROCESSINGALIAS)
ENDWITH
RETURN M.TOSTATE
ENDFUNC
**
PROCEDURE processOneRecord
LPARAMETERS TNPREVIOUSRECORD, TNCURRENTRECORD, TNNEXTRECORD, TLFINISH, TOPROGRESS
LOCAL LLNEWPAGE, LLNEWFULLCOLUMNS, LLRESETPAGE, LOTITLE, LLNEWCOLUMN, LLCOMPARERESULT, LUVALUEA, LUVALUEB
WITH THIS
LLRESETPAGE = THIS.LNEXTPAGERESET
SELECT UR_REPORT
IF .LFIRSTLOOP
.IOVARIABLES.DEFINEMEMORY()
ENDIF
IF .LFIRSTLOOP
LOTITLE = .IOSECTIONS.GETSPECIAL(0)
.PROCESSSECTION(LOTITLE,  ,  , 1)
.NAFTERHEADERS = .LICURRENTPOS
LTSECTION = .IOSECTIONS.GETSPECIAL(1)
IF  .NOT. ISNULL(LOTITLE) .AND. (LOTITLE.ILNEWPAGE .OR. ((THIS.LICURRENTPOS+LTSECTION.INHEIGHT>THIS.LNPAPERHEIGHT-THIS.LIFOOTERHEIGHT-(25000.0/9)) .AND.  .NOT. (LTSECTION.INHEIGHT>THIS.LNPAPERHEIGHT-THIS.LIFOOTERHEIGHT-(25000.0/9)))) .AND.  .NOT. THIS.LPLAIN
.NEWPAGE()
.NAFTERHEADERS = 0
ENDIF
.PROCESSSECTION(LTSECTION,  ,  , 1)
.NAFTERHEADERPOS = .LICURRENTPOS
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(2),  ,  , 1)
.NAFTERHEADERS = .LICURRENTPOS-.NAFTERHEADERS
LLNEWPAGE = .T.
LLNEWCOLUMN = .T.
ENDIF
.IOSECTIONS.REWIND()
LNPROCESSFOOTERSUPTO = 999
LNLASTPROCESS = 0
DO WHILE  .NOT. .IOSECTIONS.ENDOFLIST()
LTSECTION = .IOSECTIONS.GETNEXTINPAGE()
IF LNPROCESSFOOTERSUPTO<999
IF LTSECTION.INOBJECTCODE<>5
LOOP
ELSE
IF LNLASTPROCESS<=LTSECTION.LNLEVEL
LOOP
ENDIF
ENDIF
ENDIF
LTPROCESS = .F.
DO CASE
CASE LTSECTION.INOBJECTCODE=4
IF THIS.LSUMMARYREPORTCLAUSEACTIVE
THIS.IOVARIABLES.INCREMENT(THIS)
LTPROCESS = .F.
ELSE
LTPROCESS = .T.
ENDIF
LLNEWPAGE = .F.
LLNEWCOLUMN = .F.
CASE LTSECTION.INOBJECTCODE=3
IF LTSECTION.ILSHOULDBEPRINTED .OR. (LTSECTION.LREPRINTHEADERONEACHPAGE .AND. LLNEWPAGE)
LTPROCESS = .T.
ENDIF
CASE LTSECTION.INOBJECTCODE=5
IF LNLASTPROCESS=0
LNLASTPROCESS = LTSECTION.LNLEVEL+1
ENDIF
IF M.TLFINISH
LTPROCESS = .T.
ELSE
LUVALUEA = THIS.GETFIELDVALUE(LTSECTION.ICEXPR, 0)
LUVALUEB = THIS.GETFIELDVALUE(LTSECTION.ICEXPR, M.TNNEXTRECORD)
DO CASE
CASE ISNULL(M.LUVALUEA) .AND. ISNULL(M.LUVALUEB)
LLCOMPARERESULT = .T.
CASE ISNULL(M.LUVALUEA) .OR. ISNULL(M.LUVALUEB)
LLCOMPARERESULT = .F.
OTHERWISE
LLCOMPARERESULT = (LUVALUEA==LUVALUEB)
ENDCASE
IF  .NOT. (LLCOMPARERESULT) .OR. (M.LNPROCESSFOOTERSUPTO<=LTSECTION.LNLEVEL)
IF M.LNPROCESSFOOTERSUPTO=999
IF M.LNLASTPROCESS-1>LTSECTION.LNLEVEL
M.LNPROCESSFOOTERSUPTO = LTSECTION.LNLEVEL
.IOSECTIONS.REWIND()
LOOP
ENDIF
ELSE
IF M.LNPROCESSFOOTERSUPTO=LTSECTION.LNLEVEL
M.LNPROCESSFOOTERSUPTO = 999
ENDIF
ENDIF
LNLASTPROCESS = LTSECTION.LNLEVEL
LTPROCESS = .T.
THIS.LNEXTPAGERESET = .IOSECTIONS.SETGRPHEADERTOPRINT()
ENDIF
ENDIF
ENDCASE
IF THIS.XFRXSESSION.SKIPBAND(LTSECTION)
LTPROCESS = .F.
ENDIF
IF LTPROCESS
IF THIS.NAFTERHEADERS+LTSECTION.INHEIGHT>THIS.LNPAPERHEIGHT-THIS.LIFOOTERHEIGHT-2*THIS.LNTOPPAGEMARGIN
THIS.LNPAPERHEIGHT = THIS.NAFTERHEADERS+LTSECTION.INHEIGHT+THIS.LIFOOTERHEIGHT+2*THIS.LNTOPPAGEMARGIN
ENDIF
IF ( .NOT. THIS.LPLAIN .OR. THIS.LNEWPAGEGROUPSONNEWPAGE .AND. LTSECTION.ILNEWPAGE .AND. LTSECTION.INOBJECTCODE=3) .AND. ((THIS.LICURRENTPOS+LTSECTION.INHEIGHT>THIS.LNPAPERHEIGHT-THIS.LIFOOTERHEIGHT-2*THIS.LNTOPPAGEMARGIN) .OR. (LTSECTION.INOBJECTCODE=3 .AND. ( .NOT. LLNEWPAGE .AND. (LTSECTION.ILNEWPAGE .OR.  .NOT. LLNEWCOLUMN .AND. LTSECTION.ILNEWCOLUMN) .OR. LTSECTION.NNEWPAGEIFLESSTHAN+THIS.LICURRENTPOS>THIS.LNPAPERHEIGHT-THIS.LIFOOTERHEIGHT-2*THIS.LNTOPPAGEMARGIN)))
IF THIS.LNACTUALCOLUMN=THIS.LNNUMBEROFCOLUMNS .OR. LTSECTION.ILNEWPAGE
LLNEWFULLCOLUMNS = .T.
ELSE
LLNEWFULLCOLUMNS = .F.
ENDIF
IF  .NOT. .LFIRSTLOOP
GOTO (M.TNPREVIOUSRECORD) IN THIS.NPROCESSINGALIAS
THIS.SYNCHRONIZERELATIONS(2)
ENDIF
IF LLNEWFULLCOLUMNS
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(6),  ,  , 1)
THIS.LNACTUALCOLUMN = 1
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(7),  ,  , 1)
ELSE
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(6),  ,  , 1)
THIS.LNACTUALCOLUMN = THIS.LNACTUALCOLUMN+1
ENDIF
IF  .NOT. .LFIRSTLOOP
GOTO (M.TNCURRENTRECORD) IN THIS.NPROCESSINGALIAS
THIS.SYNCHRONIZERELATIONS(3)
ENDIF
IF LLNEWFULLCOLUMNS
.NEWPAGE()
IF LLRESETPAGE .OR. (.F. .AND. LTSECTION.INOBJECTCODE=3 .AND. LTSECTION.LRESETPAGE .AND. LTSECTION.ILSHOULDBEPRINTED)
_PAGENO = 1
THIS.LNEXTPAGERESET = .F.
LLRESETPAGE = .F.
ENDIF
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(1),  ,  , 1)
.NAFTERHEADERPOS = .LICURRENTPOS
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(2),  ,  , 1)
ELSE
.NEWCOLUMN()
.LICURRENTPOS = .NAFTERHEADERPOS
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(2),  ,  , 1)
ENDIF
IF LLNEWFULLCOLUMNS
LLNEWPAGE = .T.
LLNEWCOLUMN = .T.
ELSE
LLNEWCOLUMN = .T.
ENDIF
IF LTSECTION.INOBJECTCODE<>5
.IOSECTIONS.REWIND()
LOOP
ENDIF
ELSE
ENDIF
.PROCESSSECTION(LTSECTION,  ,  , 1)
LTSECTION.ILSHOULDBEPRINTED = .F.
IF LTSECTION.INOBJECTCODE=5
.IOVARIABLES.PROCESSGROUP(5+LTSECTION.LNLEVEL)
LLNEWPAGE = .F.
LLNEWCOLUMN = .F.
ENDIF
IF LTSECTION.INOBJECTCODE=4
LLNEWPAGE = .F.
LLNEWCOLUMN = .F.
ENDIF
ENDIF
.FLUSHOUTPUT()
ENDDO
THIS.NACTUALRECORD = THIS.NACTUALRECORD+1
IF  .NOT. ISNULL(TOPROGRESS)
IF THIS.NTOTALRECORDS>0
THIS.TOPROGRESS.UPDATEPROGRESS(THIS.TNREPORTNUMBER, _PAGENO, INT(100*THIS.NACTUALRECORD/THIS.NTOTALRECORDS))
ENDIF
ENDIF
ENDWITH
ENDPROC
**
PROCEDURE getPageMargins
LOCAL LOSECTION, LNVALUE
WITH THIS
LOSECTION = .IOSECTIONS.GETSPECIAL(1)
.LNTOPMARGIN = LOSECTION.INHEIGHT
.NUPPERMOST = .LNTOPMARGIN
LOSECTION = .IOSECTIONS.GETSPECIAL(7)
.LNBOTTOMMARGIN = LOSECTION.INHEIGHT
.LNLEFTMARGIN = 999999
.IOSECTIONS.REWIND()
DO WHILE  .NOT. .IOSECTIONS.EOL()
.PROCESSSECTION(.IOSECTIONS.GETNEXT(), .T.,  , 0)
ENDDO
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(0), .T.,  , 0)
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(1), .T.,  , 0)
.LNRIGHTMARGIN = MAX(.LNRIGHTMARGIN, .LNRIGHTPAGEMARGIN)
.LNRIGHTMARGIN = .LNRIGHTMARGIN-.LNLEFTOFFSET
.LNLEFTMARGIN = .LNLEFTMARGIN+.LNLEFTOFFSET
LOSECTION = .IOSECTIONS.GETSPECIAL(7)
.LNBOTTOMMARGIN = MAX(LOSECTION.INHEIGHT, 4500)
ENDWITH
ENDPROC
**
PROCEDURE flushOutput
= FWRITE(THIS.LNHANDLER, THIS.LCOUTPUT)
THIS.LCOUTPUT = ""
ENDPROC
**
PROCEDURE processSection
LPARAMETERS TOSECTION, TLJUSTMARGINS, LNSHIFT, LNACTION, TLNOINCREMENT
LOCAL NOBJNO, JJJ, LLNEWFULLCOLUMNS, VARLEVEL
IF ISNULL(TOSECTION)
RETURN
ENDIF
IF THIS.XFRXSESSION.SKIPBAND(TOSECTION)
RETURN
ENDIF
WITH THIS
IF EMPTY(LNACTION)
LNACTION = 0
ENDIF
LOCAL LNSEL
LNSEL = SELECT(0)
SELECT (THIS.NPROCESSINGALIAS)
LNSHIFT = 0
LOCAL LCEVALSTR
IF  .NOT. TLJUSTMARGINS
IF M.LNACTION=1
IF M.TOSECTION.INOBJECTCODE=3 .OR. M.TOSECTION.INOBJECTCODE=1 .OR. M.TOSECTION.INOBJECTCODE=2
M.VARLEVEL = .GETVARLEVEL(M.TOSECTION)
.IOVARIABLES.RESETVARIABLES(M.VARLEVEL)
ENDIF
ENDIF
IF M.TOSECTION.INOBJECTCODE=4 .AND.  .NOT. M.TLNOINCREMENT
.IOVARIABLES.INCREMENT(THIS)
ENDIF
IF  .NOT. EMPTY(TOSECTION.CONENTRY)
LCEVALSTR = THIS.XFEVAL(TOSECTION.CONENTRY)
ENDIF
ENDIF
SELECT UR_REPORT
NOBJNO = 0
SCAN ALL FOR INLIST(UR_REPORT.OBJTYPE, 5, 8, 6, 7, 17)
NOBJNO = NOBJNO+1
IF  .NOT. (VPOS>(TOSECTION.INBEGIN-1606) .AND. VPOS<=TOSECTION.INBEGIN+TOSECTION.INHEIGHT+100+360-30-00 .OR. ((UR_REPORT.OBJTYPE=6 .AND. UR_REPORT.HEIGHT>UR_REPORT.WIDTH) .OR. UR_REPORT.OBJTYPE=7) .AND. VPOS+HEIGHT>(TOSECTION.INBEGIN-1606+600) .AND. VPOS+HEIGHT<=TOSECTION.INBEGIN+TOSECTION.INHEIGHT+100+360-30-00)
LOOP
ENDIF
LNGROUP = 0
FOR JJJ = 1 TO THIS.NGROUPS
IF NOBJNO>=THIS.AGROUPS(JJJ, 1) .AND. NOBJNO<THIS.AGROUPS(JJJ, 1)+THIS.AGROUPS(JJJ, 2)
LNGROUP = JJJ
EXIT
ENDIF
ENDFOR
SELECT (LNSEL)
IF TLJUSTMARGINS
IF INLIST(UR_REPORT.OBJTYPE, 5, 8, 6, 7, 17)
LOCAL LNPOSITION
LOCAL LNTOPPOSITION, LNBOTTOMPOSITION
IF INLIST(TOSECTION.INOBJECTCODE, 1)
LNPOSITIONTOP = UR_REPORT.VPOS-TOSECTION.INBEGIN
IF THIS.CTARGET='HTML'
IF .LNTOPMARGIN>LNPOSITIONTOP
.LNTOPMARGIN = LNPOSITIONTOP
ENDIF
ENDIF
IF .NUPPERMOST>LNPOSITIONTOP
.NUPPERMOST = LNPOSITIONTOP
ENDIF
ENDIF
IF INLIST(TOSECTION.INOBJECTCODE, 7)
LNPOSITIONBOTTOM = TOSECTION.INHEIGHT-(UR_REPORT.VPOS-TOSECTION.INBEGIN+UR_REPORT.HEIGHT)
IF THIS.CTARGET='HTML'
IF .LNBOTTOMMARGIN>LNPOSITIONBOTTOM
.LNBOTTOMMARGIN = LNPOSITIONBOTTOM
ENDIF
ENDIF
ENDIF
DO CASE
CASE INLIST(TOSECTION.INOBJECTCODE, 1, 0)
LNPOSITION = UR_REPORT.VPOS-TOSECTION.INBEGIN
LNPOSITION = UR_REPORT.HPOS
IF .LNLEFTMARGIN>LNPOSITION
.LNLEFTMARGIN = LNPOSITION
ENDIF
LNPOSITION = .LNPAPERWIDTH-(UR_REPORT.HPOS+UR_REPORT.WIDTH)
IF .LNRIGHTMARGIN>LNPOSITION
.LNRIGHTMARGIN = LNPOSITION
ENDIF
CASE INLIST(TOSECTION.INOBJECTCODE, 7)
LNPOSITION = UR_REPORT.HPOS
IF .LNLEFTMARGIN>LNPOSITION
.LNLEFTMARGIN = LNPOSITION
ENDIF
LNPOSITION = .LNPAPERWIDTH-(UR_REPORT.HPOS+UR_REPORT.WIDTH)
IF .LNRIGHTMARGIN>LNPOSITION
.LNRIGHTMARGIN = LNPOSITION
ENDIF
LNPOSITION = TOSECTION.INHEIGHT-(UR_REPORT.VPOS-TOSECTION.INBEGIN+UR_REPORT.HEIGHT)
OTHERWISE
LNPOSITION = UR_REPORT.HPOS
IF .LNLEFTMARGIN>LNPOSITION
.LNLEFTMARGIN = LNPOSITION
ENDIF
LNPOSITION = .LNPAPERWIDTH-(UR_REPORT.HPOS+UR_REPORT.WIDTH)
IF .LNRIGHTMARGIN>LNPOSITION
.LNRIGHTMARGIN = LNPOSITION
ENDIF
ENDCASE
ENDIF
ELSE
IF ((UR_REPORT.OBJTYPE=6 .AND. UR_REPORT.HEIGHT>UR_REPORT.WIDTH) .OR. UR_REPORT.OBJTYPE=7) .AND. UR_REPORT.VPOS+UR_REPORT.HEIGHT>(TOSECTION.INBEGIN-1606) .AND. UR_REPORT.VPOS+UR_REPORT.HEIGHT<=TOSECTION.INBEGIN+TOSECTION.INHEIGHT+100+360-30
LNSHIFT = LNSHIFT+THIS.PROCESSOBJECT(TOSECTION, LNACTION, .T., LNGROUP)
ELSE
LNSHIFT = LNSHIFT+THIS.PROCESSOBJECT(TOSECTION, LNACTION, .F., LNGROUP)
ENDIF
ENDIF
ENDSCAN
IF LNACTION=1
LNSHIFT = 0
LNSHIFT = -MAX(0, THIS.CURRENTBUFFER.REMOVEIFBLANK())
LNSHIFT = LNSHIFT+THIS.CURRENTBUFFER.APPLYSTRETCH()
SELECT (LNSEL)
LOCAL LNREMAIN, LNCURRENTHEIGHT, LLNEXT
LNREMAIN = 0
IF  .NOT. THIS.LPLAIN .AND. LNSHIFT>0
LNCURRENTHEIGHT = TOSECTION.INHEIGHT+LNSHIFT
LLNEXT = .T.
LOCAL LOBUFFER, LNMINTOP, LLFIRSTGO
LNMINTOP = 0
LLFIRSTGO = .T.
DO WHILE (THIS.LICURRENTPOS+LNCURRENTHEIGHT>THIS.LNPAPERHEIGHT-THIS.LIFOOTERHEIGHT-2*THIS.LNTOPPAGEMARGIN)
LNREMAIN = THIS.LNPAPERHEIGHT-THIS.LIFOOTERHEIGHT-THIS.LICURRENTPOS-2*THIS.LNTOPPAGEMARGIN
LNMINTOP = THIS.CURRENTBUFFER.CUTTOP(THIS, TOSECTION, LNREMAIN)
IF LNMINTOP=-1 .OR. LNMINTOP=0
EXIT
ENDIF
LLFIRSTGO = .F.
THIS.CURRENTBUFFER.COMPOSEOUTPUT(THIS, TOSECTION, LNMINTOP)
LNCURRENTHEIGHT = LNCURRENTHEIGHT-LNMINTOP
THIS.CURRENTBUFFER.CLEANTOP(THIS, TOSECTION, LNMINTOP)
LOBUFFER = THIS.CURRENTBUFFER
.CURRENTBUFFER = CREATEOBJECT("buffer")
.CURRENTBUFFER.SETREPORT(THIS)
IF THIS.LNACTUALCOLUMN=THIS.LNNUMBEROFCOLUMNS .OR. LTSECTION.ILNEWPAGE
LLNEWFULLCOLUMNS = .T.
ELSE
LLNEWFULLCOLUMNS = .F.
ENDIF
IF LLNEWFULLCOLUMNS
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(6),  ,  , 1)
THIS.LNACTUALCOLUMN = 1
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(7),  ,  , 1)
ELSE
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(6),  ,  , 1)
THIS.LNACTUALCOLUMN = THIS.LNACTUALCOLUMN+1
ENDIF
IF LLNEWFULLCOLUMNS
.NEWPAGE()
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(1),  ,  , 1)
.NAFTERHEADERPOS = .LICURRENTPOS
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(2),  ,  , 1)
ELSE
.NEWCOLUMN()
.LICURRENTPOS = .NAFTERHEADERPOS
.PROCESSSECTION(.IOSECTIONS.GETSPECIAL(2),  ,  , 1)
ENDIF
.CURRENTBUFFER.SETREPORT(.NULL.)
.CURRENTBUFFER = LOBUFFER
ENDDO
IF LNMINTOP<>-1 .OR. LLFIRSTGO
THIS.CURRENTBUFFER.COMPOSEOUTPUT(THIS, TOSECTION, LNCURRENTHEIGHT)
ENDIF
THIS.LICURRENTPOS = THIS.LICURRENTPOS+LNCURRENTHEIGHT
ELSE
THIS.CURRENTBUFFER.COMPOSEOUTPUT(THIS, TOSECTION, TOSECTION.INHEIGHT+LNSHIFT)
IF LNSHIFT+TOSECTION.INHEIGHT>0
THIS.LICURRENTPOS = THIS.LICURRENTPOS+TOSECTION.INHEIGHT+LNSHIFT
ENDIF
ENDIF
ENDIF
IF LNACTION=1
THIS.CURRENTBUFFER.RESET()
ENDIF
SELECT (THIS.NPROCESSINGALIAS)
IF  .NOT. TLJUSTMARGINS
IF  .NOT. EMPTY(TOSECTION.CONEXIT)
= THIS.XFEVAL(TOSECTION.CONEXIT)
ENDIF
IF M.LNACTION=1
M.VARLEVEL = .GETVARLEVEL(M.TOSECTION)
IF M.TOSECTION.INOBJECTCODE=3 .OR. M.TOSECTION.INOBJECTCODE=1 .OR. M.TOSECTION.INOBJECTCODE=2
ELSE
IF  .NOT. EMPTY(M.VARLEVEL)
.IOVARIABLES.PREPARETORESET(M.VARLEVEL)
ENDIF
ENDIF
ENDIF
ENDIF
SELECT (LNSEL)
ENDWITH
ENDPROC
**
FUNCTION GetVarLevel
LPARAMETERS OSECTION
LOCAL LEVEL
DO CASE
CASE OSECTION.INOBJECTCODE=5 .OR. OSECTION.INOBJECTCODE=3
LEVEL = OSECTION.LNLEVEL+5
CASE OSECTION.INOBJECTCODE=7 .OR. OSECTION.INOBJECTCODE=1
LEVEL = 2
CASE OSECTION.INOBJECTCODE=6 .OR. OSECTION.INOBJECTCODE=2
LEVEL = 3
OTHERWISE
LEVEL = 0
ENDCASE
RETURN M.LEVEL
ENDFUNC
**
FUNCTION processObject
LPARAMETERS TOSECTION, LNACTION, TLSECOND, TNGROUP
LOCAL LCOUTPUT, LCLEFT, LCTOP, LCHEIGHT, LCWIDTH, LCFONTFACE, LCFONTSIZE, LCALIGN, LNLINES, LNSHIFT, LLUNDERLINE, LCPICTUREPATH, LUPRINTWHEN, LNNUMERICVALUE, LOSHAPE, LCPICTUREFORMAT, LLSTRIKED
LCLEFT = THIS.TOINCH(UR_REPORT.HPOS)
LNSHIFT = 0
IF  .NOT. EMPTY(UR_REPORT.SUPEXPR)
LUPRINTWHEN = THIS.XFEVAL(UR_REPORT.SUPEXPR)
ELSE
LUPRINTWHEN = .T.
ENDIF
IF UR_REPORT.OBJTYPE=5 .OR. UR_REPORT.OBJTYPE=8
LCOUTPUT = THIS.FORMATOUTPUT(@LNNUMERICVALUE, @LCPICTUREFORMAT)
ENDIF
IF EMPTY(LUPRINTWHEN)
IF UR_REPORT.NOREPEAT
THIS.CURRENTBUFFER.ADDTOREMOVE(UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.HEIGHT)
ENDIF
RETURN 0
ENDIF
DO CASE
CASE UR_REPORT.OBJTYPE=5 .OR. UR_REPORT.OBJTYPE=8
LCOUTPUT = STRTRAN(LCOUTPUT, CHR(13)+CHR(10), CHR(13))
LCOUTPUT = STRTRAN(LCOUTPUT, CHR(10), CHR(13))
IF UR_REPORT.NOREPEAT .AND. (ISNULL(LCOUTPUT) .OR. EMPTY(LCOUTPUT))
THIS.CURRENTBUFFER.ADDTOREMOVE(UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.HEIGHT)
RETURN 0
ENDIF
LCFONTFACE = UR_REPORT.FONTFACE
LCFONTSIZE = ALLTRIM(STR(UR_REPORT.FONTSIZE))+"pt"
LOCAL LNSTYLE
LNSTYLE = UR_REPORT.FONTSTYLE
IF LNSTYLE>127
LLSTRIKED = .T.
LNSTYLE = LNSTYLE-128
ENDIF
IF LNSTYLE>3
LLUNDERLINE = .T.
LNSTYLE = LNSTYLE-4
ELSE
LLUNDERLINE = .F.
ENDIF
IF LNSTYLE>1
LLITALICS = .T.
LNSTYLE = LNSTYLE-2
ELSE
LLITALICS = .F.
ENDIF
IF LNSTYLE>0
LLBOLD = .T.
ELSE
LLBOLD = .F.
ENDIF
LCALIGN = "left"
IF UR_REPORT.OFFSET=2
LCALIGN = "center"
ENDIF
IF UR_REPORT.OFFSET=1
LCALIGN = "right"
ENDIF
IF UR_REPORT.OFFSET=1
LCALIGN = "right"
ENDIF
IF "@I"$UR_REPORT.PICTURE
LCALIGN = "center"
ENDIF
IF "@J"$UR_REPORT.PICTURE
LCALIGN = "right"
ENDIF
IF UR_REPORT.OBJTYPE=8
LCHEIGHT = THIS.TOINCH(UR_REPORT.HEIGHT-(2500.0/9))
LNHEIGHT = UR_REPORT.HEIGHT-(2500.0/9)
ELSE
LCHEIGHT = THIS.TOINCH(UR_REPORT.HEIGHT)
LNHEIGHT = UR_REPORT.HEIGHT
ENDIF
IF LCALIGN="right"
LCWIDTH = THIS.TOINCH(UR_REPORT.WIDTH+(625^1))
LNWIDTH = UR_REPORT.WIDTH+(625^1)
LCLEFT = THIS.TOINCH(UR_REPORT.HPOS-(2500.0/9))
M.LCOUTPUT = ALLTRIM(M.LCOUTPUT)
ELSE
LCWIDTH = THIS.TOINCH(UR_REPORT.WIDTH+(1250.0/9))
LNWIDTH = UR_REPORT.WIDTH+(1250.0/9)
M.LCOUTPUT = RTRIM(M.LCOUTPUT)
ENDIF
LOSHAPE = THIS.CURRENTBUFFER.ADDSHAPE(UR_REPORT.OBJTYPE, UR_REPORT.HPOS, UR_REPORT.VPOS-TOSECTION.INBEGIN+IIF(UR_REPORT.OBJTYPE=8, (97.2222222222222^1), 0), UR_REPORT.HEIGHT, UR_REPORT.WIDTH, M.LCOUTPUT, M.LCFONTFACE, UR_REPORT.FONTSIZE, M.LCALIGN, M.LLITALICS, M.LLBOLD, M.LLUNDERLINE, IIF(INLIST(TOSECTION.INOBJECTCODE, 7), .F., UR_REPORT.STRETCH), UR_REPORT.FLOAT, UR_REPORT.NOREPEAT, UR_REPORT.PENRED, UR_REPORT.PENGREEN, UR_REPORT.PENBLUE, UR_REPORT.PENSIZE, UR_REPORT.PENPAT, UR_REPORT.FILLRED, UR_REPORT.FILLGREEN, UR_REPORT.FILLBLUE, UR_REPORT.FILLPAT, UR_REPORT.MODE, UR_REPORT.BOTTOM, UR_REPORT.UNIQUEID+CHR(13)+ALLTRIM(STR(TNGROUP, 8))+CHR(13)+UR_REPORT.COMMENT)
LOSHAPE.LSTRIKED = LLSTRIKED
LOSHAPE.NCODEPAGE = THIS.NCODEPAGE
IF LOSHAPE.CXLSFORMAT="TEXT"
LOSHAPE.NNUMERICVALUE = .NULL.
LOSHAPE.CXLSFORMAT = ""
ELSE
LOSHAPE.NNUMERICVALUE = LNNUMERICVALUE
IF EMPTY(LOSHAPE.CXLSFORMAT) .AND.  .NOT. ISNULL(LNNUMERICVALUE)
LOSHAPE.CXLSFORMAT = THIS.XFRXSESSION.CONVERTXLSFORMATSTRING(LCPICTUREFORMAT, LNNUMERICVALUE)
ENDIF
ENDIF
CASE UR_REPORT.OBJTYPE=6
LOCAL LNTEMPTOP
IF ABS(UR_REPORT.HEIGHT)>ABS(UR_REPORT.WIDTH) .AND.  .NOT. (ABS(UR_REPORT.WIDTH)>UR_REPORT.PENSIZE*104.167 +105)
IF LNACTION=1
LOCAL LOPGF
LOPGF = THIS.IOSECTIONS.GETSPECIAL(7)
IF UR_REPORT.VPOS-TOSECTION.INBEGIN+UR_REPORT.HEIGHT>TOSECTION.INHEIGHT+2000 .AND. (TOSECTION.INOBJECTCODE<>1 .OR. UR_REPORT.VPOS+UR_REPORT.HEIGHT>LOPGF.INBEGIN)
THIS.CURRENTBUFFER.ADDVERTICALLINE("", UR_REPORT.PENRED, UR_REPORT.PENGREEN, UR_REPORT.PENBLUE, UR_REPORT.HPOS, UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.HEIGHT, IIF(UR_REPORT.STRETCH, 1, IIF(UR_REPORT.STRETCHTOP, 2, 0)), UR_REPORT.BOTTOM, UR_REPORT.PENPAT, UR_REPORT.PENSIZE, UR_REPORT.FLOAT, TNGROUP, 1, UR_REPORT.UNIQUEID)
ELSE
IF TLSECOND .AND. UR_REPORT.VPOS<TOSECTION.INBEGIN
LOPGF = THIS.IOSECTIONS.GETSPECIAL(1)
IF UR_REPORT.VPOS<LOPGF.INHEIGHT .AND. TOSECTION.INOBJECTCODE<>1
IF TOSECTION.INOBJECTCODE<>7
RETURN LNSHIFT
ENDIF
ENDIF
THIS.CURRENTBUFFER.ADDVERTICALLINE("", UR_REPORT.PENRED, UR_REPORT.PENGREEN, UR_REPORT.PENBLUE, UR_REPORT.HPOS, UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.HEIGHT, IIF(UR_REPORT.STRETCH, 1, IIF(UR_REPORT.STRETCHTOP, 2, 0)), UR_REPORT.BOTTOM, UR_REPORT.PENPAT, UR_REPORT.PENSIZE, UR_REPORT.FLOAT, TNGROUP, 2, UR_REPORT.UNIQUEID)
ELSE
THIS.CURRENTBUFFER.ADDVERTICALLINE("", UR_REPORT.PENRED, UR_REPORT.PENGREEN, UR_REPORT.PENBLUE, UR_REPORT.HPOS, UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.HEIGHT, IIF(UR_REPORT.STRETCH, 1, IIF(UR_REPORT.STRETCHTOP, 2, 0)), UR_REPORT.BOTTOM, UR_REPORT.PENPAT, UR_REPORT.PENSIZE, UR_REPORT.FLOAT, TNGROUP)
ENDIF
ENDIF
ELSE
ENDIF
ELSE
IF LNACTION=1
THIS.CURRENTBUFFER.ADDHORIZONTALLINE("", UR_REPORT.PENRED, UR_REPORT.PENGREEN, UR_REPORT.PENBLUE, UR_REPORT.HPOS, UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.WIDTH, UR_REPORT.HEIGHT, UR_REPORT.FLOAT, UR_REPORT.BOTTOM, UR_REPORT.PENPAT, UR_REPORT.PENSIZE)
ELSE
ENDIF
ENDIF
CASE UR_REPORT.OBJTYPE=7 .OR. UR_REPORT.OBJTYPE=17
IF LNACTION=1
IF UR_REPORT.OBJTYPE=17
DO CASE
CASE UR_REPORT.OFFSET=0 .OR. UR_REPORT.OFFSET=2
IF UR_REPORT.OFFSET=0
LCPICTUREPATH = ALLTRIM(UR_REPORT.PICTURE)
IF  .NOT. EMPTY(LCPICTUREPATH)
LCPICTUREPATH = THIS.XFEVAL(LCPICTUREPATH)
ENDIF
LCPICTUREPATH = "p"+FULLPATH(LCPICTUREPATH, THIS.LCREPORTDIRECTORY)
ELSE
LCPICTUREPATH = ALLTRIM(UR_REPORT.NAME)
IF  .NOT. EMPTY(LCPICTUREPATH)
LCPICTUREPATH = THIS.XFEVAL(LCPICTUREPATH)
ENDIF
LCPICTUREPATH = "p"+FULLPATH(LCPICTUREPATH)
ENDIF
CASE UR_REPORT.OFFSET=1
LCPICTUREPATH = "f"+UR_REPORT.NAME
ENDCASE
ELSE
LCPICTUREPATH = ""
ENDIF
LOCAL LOPGF, LLTOPDOWN, LNHEIGHT, LOPGF2
LOPGF = THIS.IOSECTIONS.GETSPECIAL(7)
LOPGF2 = THIS.IOSECTIONS.GETSPECIAL(1)
IF (UR_REPORT.VPOS+UR_REPORT.HEIGHT>TOSECTION.INBEGIN+TOSECTION.INHEIGHT) .AND. UR_REPORT.OBJTYPE=17
IF THIS.ISBANNED(UR_REPORT.UNIQUEID)
RETURN 0
ENDIF
THIS.BANID(UR_REPORT.UNIQUEID)
ENDIF
IF (TOSECTION.INOBJECTCODE=1 .AND. UR_REPORT.VPOS+UR_REPORT.HEIGHT>LOPGF.INBEGIN)
LLTOPDOWN = .T.
ENDIF
IF  .NOT. LLTOPDOWN .AND. (TOSECTION.INOBJECTCODE=7 .AND. UR_REPORT.VPOS<LOPGF2.INBEGIN+LOPGF2.INHEIGHT)
ELSE
IF  .NOT. LLTOPDOWN .AND. UR_REPORT.OBJTYPE=7 .AND. UR_REPORT.VPOS-TOSECTION.INBEGIN+UR_REPORT.HEIGHT>TOSECTION.INHEIGHT+2000
THIS.CURRENTBUFFER.ADDRECTANGLE("", UR_REPORT.HPOS, UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.WIDTH-(250.0/3), UR_REPORT.HEIGHT-(250.0/3), IIF(UR_REPORT.STRETCH, 1, IIF(UR_REPORT.STRETCHTOP, 2, 0)), UR_REPORT.PENRED, UR_REPORT.PENGREEN, UR_REPORT.PENBLUE, UR_REPORT.PENSIZE, UR_REPORT.PENPAT, UR_REPORT.FILLRED, UR_REPORT.FILLGREEN, UR_REPORT.FILLBLUE, UR_REPORT.FILLPAT, UR_REPORT.BOTTOM, LCPICTUREPATH, UR_REPORT.OFFSET, UR_REPORT.FLOAT, TNGROUP, UR_REPORT.GENERAL, 1, UR_REPORT.UNIQUEID, UR_REPORT.COMMENT)
ELSE
IF TLSECOND
THIS.CURRENTBUFFER.ADDRECTANGLE("", UR_REPORT.HPOS, UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.WIDTH-(250.0/3), UR_REPORT.HEIGHT-(250.0/3), IIF(UR_REPORT.STRETCH, 1, IIF(UR_REPORT.STRETCHTOP, 2, 0)), UR_REPORT.PENRED, UR_REPORT.PENGREEN, UR_REPORT.PENBLUE, UR_REPORT.PENSIZE, UR_REPORT.PENPAT, UR_REPORT.FILLRED, UR_REPORT.FILLGREEN, UR_REPORT.FILLBLUE, UR_REPORT.FILLPAT, UR_REPORT.BOTTOM, LCPICTUREPATH, UR_REPORT.OFFSET, UR_REPORT.FLOAT, TNGROUP, UR_REPORT.GENERAL, 2, UR_REPORT.UNIQUEID, UR_REPORT.COMMENT)
ELSE
IF LLTOPDOWN .AND. UR_REPORT.OBJTYPE=7
LNHEIGHT = (UR_REPORT.VPOS+UR_REPORT.HEIGHT-LOPGF.INBEGIN)+THIS.LNPAPERHEIGHT-LOPGF.INHEIGHT-(UR_REPORT.VPOS-TOSECTION.INBEGIN)-2*THIS.LNTOPPAGEMARGIN-THIS.LICURRENTPOS
ELSE
LNHEIGHT = UR_REPORT.HEIGHT
ENDIF
THIS.CURRENTBUFFER.ADDRECTANGLE("", UR_REPORT.HPOS, UR_REPORT.VPOS-TOSECTION.INBEGIN, UR_REPORT.WIDTH-(250.0/3), M.LNHEIGHT-(250.0/3), IIF(UR_REPORT.STRETCH, 1, IIF(UR_REPORT.STRETCHTOP, 2, 0)), UR_REPORT.PENRED, UR_REPORT.PENGREEN, UR_REPORT.PENBLUE, UR_REPORT.PENSIZE, UR_REPORT.PENPAT, UR_REPORT.FILLRED, UR_REPORT.FILLGREEN, UR_REPORT.FILLBLUE, UR_REPORT.FILLPAT, UR_REPORT.BOTTOM, LCPICTUREPATH, UR_REPORT.OFFSET, UR_REPORT.FLOAT, TNGROUP, UR_REPORT.GENERAL,  ,  , UR_REPORT.COMMENT)
ENDIF
ENDIF
ENDIF
ELSE
ENDIF
ENDCASE
RETURN LNSHIFT
ENDFUNC
**
FUNCTION formatOutput
LPARAMETERS TNNUMERICVALUE, TCPICTURE
TNNUMERICVALUE = .NULL.
LOCAL LOVAR, LUVALUE, LUSKIPVALUE
IF UR_REPORT.TOTALTYPE>0
LUVALUE = THIS.IOVARIABLES.GETVALUE(UR_REPORT.UNIQUEID)
ELSE
IF UR_REPORT.OBJTYPE=5 .AND. _XFVFPVERSION()>=9
LUVALUE = SUBSTR(ALLTRIM(UR_REPORT.EXPR), 2)
IF LEN(LUVALUE)>0
LUVALUE = LEFT(LUVALUE, LEN(LUVALUE)-1)
ENDIF
ELSE
IF AT(";", UR_REPORT.EXPR)>0 .OR. AT(",", UR_REPORT.EXPR)>0 .OR. AT("@", UR_REPORT.EXPR)>0
LUVALUE = THIS.EVALWS(UR_REPORT.EXPR)
ELSE
LUVALUE = THIS.XFEVAL(UR_REPORT.EXPR)
ENDIF
ENDIF
ENDIF
IF UR_REPORT.SUPVALCHNG .AND. UR_REPORT.OBJTYPE<>5 .AND. EMPTY(UR_REPORT.SUPEXPR)
LOVAR = THIS.IOVARIABLES.GETVARIABLE(UR_REPORT.UNIQUEID)
IF (LUVALUE=LOVAR.IUPREVIOUSVALUEFORREPEATEDVALUES) .AND. (UR_REPORT.SUPGROUP=0 .OR.  .NOT. LOVAR.ILSUPGROUPCHANGED) .AND. (UR_REPORT.SUPRPCOL=0 .OR.  .NOT. LOVAR.ILONNEWPAGEORCOLUMN)
LOVAR.IUPREVIOUSVALUEFORREPEATEDVALUES = M.LUVALUE
LOVAR.ILSUPGROUPCHANGED = .F.
LOVAR.ILONNEWPAGEORCOLUMN = .F.
RETURN .NULL.
ENDIF
LOVAR.ILSUPGROUPCHANGED = .F.
LOVAR.ILONNEWPAGEORCOLUMN = .F.
LOVAR.IUPREVIOUSVALUEFORREPEATEDVALUES = M.LUVALUE
ENDIF
IF  .NOT. EMPTY(UR_REPORT.SUPEXPR)
LUSKIPVALUE = THIS.XFEVAL(UR_REPORT.SUPEXPR)
IF EMPTY(LUSKIPVALUE) .OR. ISNULL(LUSKIPVALUE)
RETURN .NULL.
ENDIF
ENDIF
LPIC = ALLTRIM(UR_REPORT.PICTURE)
IF LEFT(LPIC, 1)='"'
LPIC = SUBSTR(LPIC, 2, LEN(LPIC)-2)
ENDIF
TCPICTURE = __XFRXFIXPICTURE(LPIC)
DO CASE
CASE TYPE("luvalue")$"NY"
TNNUMERICVALUE = LUVALUE
IF EMPTY(LPIC)
LOUT = ALLTRIM(THIS._TRANSFORM(LUVALUE))
ELSE
LOUT = ALLTRIM(THIS._TRANSFORM(LUVALUE, LPIC))
ENDIF
CASE TYPE("luvalue")="D"
LOUT = ALLTRIM(THIS._TRANSFORM(LUVALUE, LPIC))
CASE TYPE("luvalue")="C" .OR. TYPE("luvalue")="M"
IF LEN(LUVALUE)>254
LOUT = LUVALUE
ELSE
LOUT = THIS._TRANSFORM(LUVALUE, LPIC)
ENDIF
OTHERWISE
LOUT = THIS._TRANSFORM(LUVALUE, LPIC)
ENDCASE
RETURN LOUT
ENDFUNC
**
PROCEDURE processWordHeader
LPARAMETERS TCCODEPAGE, TCHEADERFILE, TNREPORTNUMBER
LOCAL LNSEL, LCTEMPL
LNSEL = SELECT(0)
IF TNREPORTNUMBER=1
LCTEMPL = STRTRAN(GETTEMPLATE(1), "UR_TOP_MARGIN", ALLTRIM(STR(THIS.LNTOPMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_BOTTOM_MARGIN", ALLTRIM(STR(THIS.LNBOTTOMMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_LEFT_MARGIN", ALLTRIM(STR(THIS.LNLEFTMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_RIGHT_MARGIN", ALLTRIM(STR(THIS.LNRIGHTMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_WIDTH", ALLTRIM(__STR(THIS.LNPAPERWIDTH*72/10000, 8, 3)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_HEIGHT", ALLTRIM(__STR(THIS.LNPAPERHEIGHT*72/10000, 8, 3)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_ORIENTATION", IIF(THIS.LNORIENTATION=0, "", "mso-page-orientation:landscape;"))
LCTEMPL = STRTRAN(LCTEMPL, "UR_AUTHOR", THIS.CAUTHOR)
LCTEMPL = STRTRAN(LCTEMPL, "UR_TITLE", THIS.CTITLE)
LCTEMPL = STRTRAN(LCTEMPL, "UR_SUBJECT", THIS.CSUBJECT)
LCTEMPL = STRTRAN(LCTEMPL, "UR_KEYWORDS", THIS.CKEYWORDS)
LCTEMPL = STRTRAN(LCTEMPL, "UR_COMMENTS", THIS.CCOMMENTS)
LCTEMPL = STRTRAN(LCTEMPL, "UR_CATEGORY", THIS.CCATEGORY)
LCTEMPL = STRTRAN(LCTEMPL, "UR_MANAGER", THIS.CMANAGER)
LCTEMPL = STRTRAN(LCTEMPL, "UR_COMPANY", THIS.CCOMPANY)
LCTEMPL = STRTRAN(LCTEMPL, "UR_FDIR", JUSTFNAME(THIS.OFILES.GETFDIR()))
IF EMPTY(TCCODEPAGE)
TCCODEPAGE = "windows-"+ALLTRIM(STR(CPCURRENT()))
ENDIF
IF TYPE("tcCodePage")="N"
TCCODEPAGE = "windows-"+ALLTRIM(STR(TCCODEPAGE))
ENDIF
LCTEMPL = STRTRAN(LCTEMPL, "UR_CHARSET", ALLTRIM(TCCODEPAGE))
ELSE
LCTEMPL = STRTRAN(GETTEMPLATE(3), "UR_TOP_MARGIN", ALLTRIM(STR(THIS.LNTOPMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_BOTTOM_MARGIN", ALLTRIM(STR(THIS.LNBOTTOMMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_LEFT_MARGIN", ALLTRIM(STR(THIS.LNLEFTMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_RIGHT_MARGIN", ALLTRIM(STR(THIS.LNRIGHTMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_WIDTH", ALLTRIM(STR(THIS.LNPAPERWIDTH*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_HEIGHT", ALLTRIM(STR(THIS.LNPAPERHEIGHT*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_ORIENTATION", IIF(THIS.LNORIENTATION=0, "", "mso-page-orientation:landscape;"))
LCTEMPL = STRTRAN(LCTEMPL, "UR_SECNUM", ALLTRIM(STR(TNREPORTNUMBER)))
ENDIF
_STRTOFILE(LCTEMPL, TCHEADERFILE, .T.)
SELECT (LNSEL)
ENDPROC
**
PROCEDURE outShape
LPARAMETERS TCLEFT, TCTOP, TCHEIGHT, TCWIDTH, TCOUTPUT, TCFONT, TCFONTSIZE, TCALIGN, TCITALICS, TCBOLD, TCUNDERLINE, TCSTROKEDFILLED, TCFONTCOLOR, TCBACKCOLOR, TCLINKNAME, TCLINKHREF, TLSTRIKED
LOCAL LCNEWPAR, LCCLOSEPAR
THIS.LISHAPECOUNTER = THIS.LISHAPECOUNTER+1
THIS.LCOUTPUT = THIS.LCOUTPUT+'<v:shapetype id="_x_'+ALLTRIM(STR(THIS.LISHAPECOUNTER))+'_t"'
THIS.LCOUTPUT = THIS.LCOUTPUT+' coordsize="21600,21600" o:spt="202" path="m0,0l0,21600,21600,21600,21600,0xe">'
THIS.LCOUTPUT = THIS.LCOUTPUT+'<v:stroke joinstyle="miter"/>'
THIS.LCOUTPUT = THIS.LCOUTPUT+'<v:path gradientshapeok="t" o:connecttype="rect"/>'
THIS.LCOUTPUT = THIS.LCOUTPUT+'</v:shapetype>'
THIS.LCOUTPUT = THIS.LCOUTPUT+'<v:shape id="_x_'+ALLTRIM(STR(THIS.LISHAPECOUNTER))+'" type="#_x_'+ALLTRIM(STR(THIS.LISHAPECOUNTER))+'_t"'
THIS.LCOUTPUT = THIS.LCOUTPUT+"style='position:absolute;margin-left:"+TCLEFT+";margin-top:"+TCTOP+";width:"+TCWIDTH+";height:"+TCHEIGHT+";mso-position-horizontal:absolute;mso-position-vertical:absolute'"
IF EMPTY(TCSTROKEDFILLED)
THIS.LCOUTPUT = THIS.LCOUTPUT+' stroked="f" filled="f">'
ELSE
THIS.LCOUTPUT = THIS.LCOUTPUT+" "+TCSTROKEDFILLED+'>'
ENDIF
DO CASE
CASE TCALIGN="right"
THIS.LCOUTPUT = THIS.LCOUTPUT+'<v:textbox inset="0,0,2pt,0" style="mso-fit-shape-to-text:t">'
LCNEWPAR = "<p class=MsoNormal style='text-align:right'>"
CASE TCALIGN="left"
THIS.LCOUTPUT = THIS.LCOUTPUT+'<v:textbox inset="0,0,0,0" style="mso-fit-shape-to-text:t">'
LCNEWPAR = "<p class=MsoNormal>"
CASE TCALIGN="block"
THIS.LCOUTPUT = THIS.LCOUTPUT+'<v:textbox inset="0,0,0,0" style="mso-fit-shape-to-text:t">'
LCNEWPAR = "<p class=MsoNormal style='text-align:justify'>"
CASE TCALIGN="center"
THIS.LCOUTPUT = THIS.LCOUTPUT+'<v:textbox inset="0,0,0,0" style="mso-fit-shape-to-text:t">'
LCNEWPAR = "<p class=MsoNormal style='text-align:center'>"
ENDCASE
THIS.LCOUTPUT = THIS.LCOUTPUT+'<div>'
LCNEWPAR = LCNEWPAR+"<span style='font-size:"+TCFONTSIZE+IIF(EMPTY(TCFONTCOLOR), "", ";color:"+TCFONTCOLOR)+"; "+IIF(EMPTY(TCBACKCOLOR), "", "background:"+TCBACKCOLOR+";")+" font-family:"+'"'+TCFONT+'"'+"'>"
LCCLOSEPAR = ""
IF TCITALICS
LCNEWPAR = LCNEWPAR+'<i>'
LCCLOSEPAR = LCCLOSEPAR+'</i>'
ENDIF
IF TCBOLD
LCNEWPAR = LCNEWPAR+'<b>'
LCCLOSEPAR = LCCLOSEPAR+'</b>'
ENDIF
IF TCUNDERLINE
LCNEWPAR = LCNEWPAR+'<u>'
LCCLOSEPAR = LCCLOSEPAR+'</u>'
ENDIF
IF TLSTRIKED
LCNEWPAR = LCNEWPAR+'<s>'
LCCLOSEPAR = LCCLOSEPAR+'</s>'
ENDIF
DO CASE
CASE TCALIGN="right"
CASE TCALIGN="center"
TCOUTPUT = ALLTRIM(TCOUTPUT)
OTHERWISE
TCOUTPUT = STRTRAN(TRIM(TCOUTPUT),"  ","&nbsp; ")
TCOUTPUT = STRTRAN(TRIM(TCOUTPUT),"  ","&nbsp; ")
ENDCASE
TCOUTPUT = STRTRAN(TCOUTPUT,"<","&lt;")
TCOUTPUT = STRTRAN(TCOUTPUT,">","&gt;")
TCOUTPUT = STRTRAN(TCOUTPUT, CHR(10))
IF  .NOT. EMPTY(TCLINKNAME)
IF EMPTY(TCLINKHREF)
TCOUTPUT = '<a name="'+ALLTRIM(TCLINKNAME)+'">'+TCOUTPUT+'</a>'
ELSE
TCOUTPUT = '<a name="'+ALLTRIM(TCLINKNAME)+'" href="'+ALLTRIM(TCLINKHREF)+'">'+TCOUTPUT+'</a>'
ENDIF
ELSE
IF  .NOT. EMPTY(TCLINKHREF)
TCOUTPUT = '<a href="'+ALLTRIM(TCLINKHREF)+'">'+TCOUTPUT+'</a>'
ENDIF
ENDIF
TCOUTPUT = STRTRAN(TCOUTPUT,CHR(13)+CHR(13),CHR(13)+"&nbsp;"+CHR(13))
TCOUTPUT = STRTRAN(TCOUTPUT,CHR(13)+CHR(13),CHR(13)+"&nbsp;"+CHR(13))
TCOUTPUT = STRTRAN(TCOUTPUT,CHR(13)+" ",CHR(13)+"&nbsp;")
IF LEFT(TCOUTPUT, 1)=CHR(13)
TCOUTPUT = "&nbsp;"+CHR(13)+SUBSTR(TCOUTPUT,2)
ENDIF
THIS.LCOUTPUT = THIS.LCOUTPUT+LCNEWPAR+STRTRAN(TCOUTPUT, CHR(13), "<br/>")+LCCLOSEPAR
THIS.LCOUTPUT = THIS.LCOUTPUT+'</span></p></div>'
THIS.LCOUTPUT = THIS.LCOUTPUT+'</v:textbox></v:shape>'
THIS.LCOUTPUT = THIS.LCOUTPUT+CHR(13)+CHR(10)+CHR(13)+CHR(10)
ENDPROC
**
FUNCTION toInch
LPARAMETERS VALUE
RETURN STRTRAN(ALLTRIM(STR(M.VALUE/10000, 15, 4)), SET("Point"), ".")+"in"
ENDFUNC
**
PROCEDURE setPaperSize
LPARAMETERS LNPAPERSIZE
IF THIS.XFRXSESSION.NUDPAPERWIDTH>0
THIS.LNPAPERWIDTH = THIS.XFRXSESSION.NUDPAPERWIDTH
THIS.LNPAPERHEIGHT = THIS.XFRXSESSION.NUDPAPERHEIGHT
THIS.LNORIENTATION = 0
ELSE
DIMENSION LAPS(256, 3)
LAPS(1, 2) = 85000
LAPS(1, 3) = 110000
LAPS(2, 2) = 85000
LAPS(2, 3) = 110000
LAPS(3, 2) = 110000
LAPS(3, 3) = 170000
LAPS(4, 2) = 170000
LAPS(4, 3) = 110000
LAPS(5, 2) = 85000
LAPS(5, 3) = 140000
LAPS(6, 2) = 55000
LAPS(6, 3) = 85000
LAPS(7, 2) = 72500
LAPS(7, 3) = 10500
LAPS(8, 2) = 116929
LAPS(8, 3) = 165354
LAPS(9, 2) = 82677
LAPS(9, 3) = 116929
LAPS(10, 2) = 82677
LAPS(10, 3) = 116929
LAPS(11, 2) = 58268
LAPS(11, 3) = 82677
LAPS(12, 2) = 98425
LAPS(12, 3) = 139370
LAPS(13, 2) = 71654
LAPS(13, 3) = 101181
LAPS(14, 2) = 85000
LAPS(14, 3) = 130000
LAPS(15, 2) = 84646
LAPS(15, 3) = 108268
LAPS(16, 2) = 100000
LAPS(16, 3) = 140000
LAPS(17, 2) = 110000
LAPS(17, 3) = 170000
LAPS(18, 2) = 85000
LAPS(18, 3) = 110000
LAPS(19, 2) = 38750
LAPS(19, 3) = 88750
LAPS(20, 2) = 41250
LAPS(20, 3) = 85000
LAPS(21, 2) = 45000
LAPS(21, 3) = 103750
LAPS(22, 2) = 45000
LAPS(22, 3) = 110000
LAPS(23, 2) = 50000
LAPS(23, 3) = 115000
LAPS(24, 2) = 45000
LAPS(24, 3) = 103750
LAPS(25, 2) = 47500
LAPS(25, 3) = 110000
LAPS(26, 2) = 50000
LAPS(26, 3) = 115000
LAPS(27, 2) = 43307
LAPS(27, 3) = 86614
LAPS(28, 2) = 63779
LAPS(28, 3) = 90157
LAPS(29, 2) = 127559
LAPS(29, 3) = 180315
LAPS(30, 2) = 90157
LAPS(30, 3) = 127559
LAPS(31, 2) = 44881
LAPS(31, 3) = 63779
LAPS(32, 2) = 44881
LAPS(32, 3) = 90157
LAPS(33, 2) = 98425
LAPS(33, 3) = 138976
LAPS(34, 2) = 69291
LAPS(34, 3) = 98425
LAPS(35, 2) = 69291
LAPS(35, 3) = 49212
LAPS(36, 2) = 43307
LAPS(36, 3) = 90551
LAPS(37, 2) = 38750
LAPS(37, 3) = 75000
LAPS(38, 2) = 36250
LAPS(38, 3) = 65000
LAPS(39, 2) = 148750
LAPS(39, 3) = 110000
LAPS(40, 2) = 85000
LAPS(40, 3) = 120000
LAPS(41, 2) = 85000
LAPS(41, 3) = 130000
LAPS(256, 2) = 104330
LAPS(256, 3) = 149606
IF LNPAPERSIZE>0 .AND. LNPAPERSIZE<42
ELSE
LNPAPERSIZE = 256
ENDIF
IF THIS.LNORIENTATION=0
THIS.LNPAPERWIDTH = LAPS(LNPAPERSIZE, 2)
THIS.LNPAPERHEIGHT = LAPS(LNPAPERSIZE, 3)
ELSE
THIS.LNPAPERWIDTH = LAPS(LNPAPERSIZE, 3)
THIS.LNPAPERHEIGHT = LAPS(LNPAPERSIZE, 2)
ENDIF
ENDIF
IF THIS.CTARGET="HTML" .OR. THIS.XFRXSESSION.NUDREDUCEHEIGHTBY>=0
THIS.LNPAPERHEIGHT = THIS.LNPAPERHEIGHT-IIF(THIS.XFRXSESSION.NUDREDUCEHEIGHTBY=-1, 16500, THIS.XFRXSESSION.NUDREDUCEHEIGHTBY)
ENDIF
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS cusURSection AS Custom
INOBJECTCODE = -1
INREALOBJECTCODE = -1
INBEGIN = 0
INHEIGHT = 0
ILNEWPAGE = .F.
ILNEWCOLUMN = .F.
ICEXPR = ""
ILSHOULDBEPRINTED = .T.
LNLEVEL = 0
CONENTRY = ""
CONEXIT = ""
LRESETPAGE = .F.
NNEWPAGEIFLESSTHAN = 0
LREPRINTHEADERONEACHPAGE = .F.
LPAGEHEADERONSUMMARY = .F.
LPAGEFOOTERONSUMMARY = .F.
**
PROCEDURE Init
LPARAMETERS TNOBJECTCODE, TNBEGIN, TNHEIGHT, TLNEWPAGE, TLNEWCOLUMN, TCEXPR, TCONENTRY, TCONEXIT, TLRESETPAGE, TNNEWPAGEIFLESSTHAN, TLREPRINTHEADERONEACHPAGE, TLPAGEHEADERONSUMMARY, TLPAGEFOOTERONSUMMARY
THIS.INOBJECTCODE = TNOBJECTCODE
THIS.INREALOBJECTCODE = TNOBJECTCODE
THIS.INBEGIN = TNBEGIN
THIS.INHEIGHT = TNHEIGHT
THIS.ILNEWPAGE = TLNEWPAGE
THIS.ILNEWCOLUMN = TLNEWCOLUMN
THIS.ICEXPR = TCEXPR
THIS.CONENTRY = TCONENTRY
THIS.CONEXIT = TCONEXIT
THIS.LRESETPAGE = TLRESETPAGE
THIS.NNEWPAGEIFLESSTHAN = TNNEWPAGEIFLESSTHAN
THIS.LREPRINTHEADERONEACHPAGE = TLREPRINTHEADERONEACHPAGE
THIS.LPAGEHEADERONSUMMARY = TLPAGEHEADERONSUMMARY
THIS.LPAGEFOOTERONSUMMARY = TLPAGEFOOTERONSUMMARY
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS cusURSectionList AS Custom
DIMENSION IASECTIONS(1)
IALISTCOUNT = 0
PROTECTED IAPOSITION
**
PROCEDURE Init
THIS.REWIND()
ENDPROC
**
PROCEDURE Add
LPARAMETERS TNOBJECTCODE, TNBEGIN, TNHEIGHT, TLNEWPAGE, TLNEWCOLUMN, TCEXPR, TCONENTRY, TCONEXIT, TLRESETPAGE, TNNEWPAGEIFLESSTHAN, TLREPRINTHEADERONEACHPAGE, TLPAGEHEADERONSUMMARY, TLPAGEFOOTERONSUMMARY
WITH THIS
.IALISTCOUNT = .IALISTCOUNT+1
DIMENSION .IASECTIONS(.IALISTCOUNT)
.IASECTIONS[.IALISTCOUNT] = CREATEOBJECT("cusURSection", TNOBJECTCODE, TNBEGIN, TNHEIGHT, TLNEWPAGE, TLNEWCOLUMN, TCEXPR, TCONENTRY, TCONEXIT, TLRESETPAGE, TNNEWPAGEIFLESSTHAN, TLREPRINTHEADERONEACHPAGE, TLPAGEHEADERONSUMMARY, TLPAGEFOOTERONSUMMARY)
ENDWITH
ENDPROC
**
PROCEDURE updateValues
WITH THIS
LOCAL M.I, LLNEWPAGE
FOR M.I = .IALISTCOUNT TO 1 STEP -1
WITH .IASECTIONS(M.I)
IF .INOBJECTCODE=3
IF .ILNEWPAGE=.T.
M.LLNEWPAGE = .T.
ELSE
IF M.LLNEWPAGE
.ILNEWPAGE = .T.
ENDIF
ENDIF
ENDIF
ENDWITH
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE reset
WITH THIS
LOCAL M.I
FOR M.I = 1 TO .IALISTCOUNT
.IASECTIONS[M.I].ILSHOULDBEPRINTED = .T.
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE rewind
THIS.IAPOSITION = 1
ENDPROC
**
FUNCTION endOfList
WITH THIS
DO WHILE (.IAPOSITION<=.IALISTCOUNT) .AND.  .NOT. INLIST(.IASECTIONS(.IAPOSITION).INOBJECTCODE, 3, 4, 5)
.IAPOSITION = .IAPOSITION+1
ENDDO
RETURN THIS.IAPOSITION>THIS.IALISTCOUNT
ENDWITH
ENDFUNC
**
FUNCTION getNextInPage
WITH THIS
DO WHILE (.IAPOSITION<=.IALISTCOUNT) .AND.  .NOT. INLIST(.IASECTIONS(.IAPOSITION).INOBJECTCODE, 3, 4, 5)
.IAPOSITION = .IAPOSITION+1
ENDDO
IF .IAPOSITION>.IALISTCOUNT
RETURN .NULL.
ELSE
.IAPOSITION = .IAPOSITION+1
RETURN .IASECTIONS(.IAPOSITION-1)
ENDIF
ENDWITH
ENDFUNC
**
FUNCTION eol
WITH THIS
RETURN THIS.IAPOSITION>THIS.IALISTCOUNT
ENDWITH
ENDFUNC
**
FUNCTION Getnext
WITH THIS
IF .IAPOSITION>.IALISTCOUNT
RETURN .NULL.
ELSE
.IAPOSITION = .IAPOSITION+1
RETURN .IASECTIONS(.IAPOSITION-1)
ENDIF
ENDWITH
ENDFUNC
**
FUNCTION getSpecial
LPARAMETERS TNCODE
WITH THIS
LOCAL M.I
FOR M.I = 1 TO .IALISTCOUNT
IF .IASECTIONS(M.I).INOBJECTCODE=TNCODE
RETURN .IASECTIONS(M.I)
ENDIF
ENDFOR
RETURN .NULL.
ENDWITH
ENDFUNC
**
FUNCTION setGrpHeaderToPrint
LPARAMETERS TCEXPR
WITH THIS
LOCAL M.I, LIGRPCNT, LLRETVAL
LIGRPCNT = 0
LLRETVAL = .F.
FOR M.I = .IAPOSITION-2 TO 1 STEP -1
IF .IASECTIONS(M.I).INOBJECTCODE=3
.IASECTIONS[M.I].ILSHOULDBEPRINTED = .T.
IF .IASECTIONS(M.I).LRESETPAGE
LLRETVAL = .T.
ENDIF
IF LIGRPCNT=0
RETURN LLRETVAL
ENDIF
LIGRPCNT = LIGRPCNT-1
ENDIF
IF .IASECTIONS(M.I).INOBJECTCODE=5
LIGRPCNT = LIGRPCNT+1
ENDIF
ENDFOR
ENDWITH
ENDFUNC
**
FUNCTION setExprToFooters
WITH THIS
LOCAL M.I, LNJ, LNMAX
LNJ = 0
LNMAX = 999
LOCAL EXPRS(.IALISTCOUNT)
FOR M.I = 1 TO .IALISTCOUNT
IF .IASECTIONS(M.I).INOBJECTCODE=3
LNJ = LNJ+1
EXPRS[LNJ] = .IASECTIONS(M.I)
.IASECTIONS[M.I].LNLEVEL = LNJ
LNMAX = LNJ+5
ENDIF
IF .IASECTIONS(M.I).INOBJECTCODE=5
.IASECTIONS[M.I].ICEXPR = EXPRS(LNJ).ICEXPR
.IASECTIONS[M.I].ILNEWPAGE = EXPRS(LNJ).ILNEWPAGE
.IASECTIONS[M.I].LNLEVEL = LNJ
LNJ = LNJ-1
ENDIF
ENDFOR
ENDWITH
RETURN M.LNMAX
ENDFUNC
**
ENDDEFINE
**
DEFINE CLASS cusURVariable AS Custom
ICUNIQUEID = ""
ICNAME = ""
IUVALUE = .NULL.
IUINITIALVALUE = .NULL.
IUINITIALVALUEEXPRESSION = .NULL.
IUNEWVALUE = .NULL.
INTOTALTYPE = 2
INRESETTOTAL = 0
IUPREVIOUSVALUE = .NULL.
IUPREVIOUSVALUEFORREPEATEDVALUES = .NULL.
INSUPGROUP = 0
ILSUPGROUPCHANGED = .T.
ILONNEWPAGEORCOLUMN = .T.
ICEXPR = ""
LLRESET = .F.
INCOUNT = 0
INSUM = 0
OREPORT = .NULL.
**
PROCEDURE Init
LPARAMETERS TOREPORT, TCUNIQUEID, TCNAME, TIVALUE, TNTOTALTYPE, TNRESETTOTAL, TCEXPR, TNSUPGROUP
LOCAL LCNAME
THIS.OREPORT = TOREPORT
THIS.ICUNIQUEID = TCUNIQUEID
THIS.ICNAME = TCNAME
THIS.IUINITIALVALUEEXPRESSION = TIVALUE
THIS.INTOTALTYPE = TNTOTALTYPE
THIS.INRESETTOTAL = TNRESETTOTAL
THIS.ICEXPR = TCEXPR
THIS.INSUPGROUP = TNSUPGROUP
IF  .NOT. EMPTY(THIS.ICNAME)
LCNAME = THIS.ICNAME
RELEASE &LCNAME
PUBLIC &LCNAME
ENDIF
THIS.RESET()
ENDPROC
**
PROCEDURE Increment
LPARAMETERS TOREPORT
LOCAL LUVALUE
THIS.IUPREVIOUSVALUE = THIS.IUVALUE
IF THIS.LLRESET
THIS.RESET()
ELSE
IF  .NOT. EMPTY(THIS.ICNAME)
ENDIF
ENDIF
DO CASE
CASE INLIST(THIS.INTOTALTYPE, 2, 3, 4, 5)
IF AT(";", THIS.ICEXPR)>0 .OR. AT(",", THIS.ICEXPR)>0
LUVALUE = TOREPORT.EVALWS(THIS.ICEXPR)
ELSE
LUVALUE = TOREPORT.XFEVAL(THIS.ICEXPR)
ENDIF
LOCAL LCTYPE1, LCTYPE2
LCTYPE1 = VARTYPE(THIS.IUVALUE)
LCTYPE2 = VARTYPE(LUVALUE)
DO CASE
CASE ISNULL(LUVALUE)
CASE ISNULL(THIS.IUVALUE) .OR. __XF_DFT(LCTYPE1, LCTYPE2)
THIS.IUVALUE = LUVALUE
THIS.INSUM = LUVALUE
THIS.INCOUNT = 1
CASE THIS.INTOTALTYPE=2
IF  .NOT. ISNULL(LUVALUE)
THIS.IUVALUE = THIS.IUVALUE+LUVALUE
ENDIF
CASE THIS.INTOTALTYPE=3
THIS.INCOUNT = THIS.INCOUNT+1
THIS.INSUM = THIS.INSUM+LUVALUE
THIS.IUVALUE = THIS.INSUM/THIS.INCOUNT
CASE THIS.INTOTALTYPE=4
IF LUVALUE<THIS.IUVALUE
THIS.IUVALUE = LUVALUE
ENDIF
CASE THIS.INTOTALTYPE=5
IF LUVALUE>THIS.IUVALUE
THIS.IUVALUE = LUVALUE
ENDIF
ENDCASE
CASE THIS.INTOTALTYPE=1
IF ISNULL(THIS.IUVALUE)
THIS.IUVALUE = 1
ELSE
THIS.IUVALUE = THIS.IUVALUE+1
ENDIF
CASE THIS.INTOTALTYPE=0
IF  .NOT. EMPTY(THIS.ICNAME)
IF AT(";", THIS.ICEXPR)>0 .OR. AT(",", THIS.ICEXPR)>0
THIS.IUVALUE = TOREPORT.EVALWS(THIS.ICEXPR)
ELSE
THIS.IUVALUE = TOREPORT.XFEVAL(THIS.ICEXPR)
ENDIF
ENDIF
ENDCASE
IF  .NOT. EMPTY(THIS.ICNAME)
STORE THIS.IUVALUE TO (THIS.ICNAME)
ENDIF
ENDPROC
**
PROCEDURE Reset
IF ISNULL(THIS.IUINITIALVALUEEXPRESSION)
THIS.IUVALUE = .NULL.
THIS.IUNEWVALUE = .NULL.
ELSE
THIS.IUVALUE = THIS.OREPORT.XFEVAL(THIS.IUINITIALVALUEEXPRESSION)
THIS.IUNEWVALUE = THIS.IUVALUE
ENDIF
THIS.INCOUNT = 0
THIS.INSUM = 0
THIS.LLRESET = .F.
IF  .NOT. EMPTY(THIS.ICNAME)
STORE THIS.IUVALUE TO (THIS.ICNAME)
ENDIF
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS cusURVariableList AS Custom
DIMENSION IAVARIABLES(1)
INVARCOUNT = 0
**
PROCEDURE Add
LPARAMETERS TOVARIABLE
WITH THIS
.INVARCOUNT = .INVARCOUNT+1
DIMENSION .IAVARIABLES(.INVARCOUNT)
.IAVARIABLES[.INVARCOUNT] = TOVARIABLE
ENDWITH
ENDPROC
**
PROCEDURE release
THIS.INVARCOUNT = 0
DIMENSION THIS.IAVARIABLES(1)
THIS.IAVARIABLES(1) = ""
ENDPROC
**
FUNCTION getValue
LPARAMETERS TCUNIQUEID
LOCAL M.I, LUVALUE
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
IF .IAVARIABLES(M.I).ICUNIQUEID==TCUNIQUEID
LUVALUE = .IAVARIABLES(M.I).IUVALUE
IF ISNULL(LUVALUE) .AND. .IAVARIABLES(M.I).INTOTALTYPE=1
RETURN 0
ELSE
RETURN LUVALUE
ENDIF
ENDIF
ENDFOR
ENDWITH
ENDFUNC
**
FUNCTION getVariable
LPARAMETERS TCUNIQUEID
LOCAL M.I
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
IF .IAVARIABLES(M.I).ICUNIQUEID==TCUNIQUEID
RETURN .IAVARIABLES(M.I)
ENDIF
ENDFOR
ENDWITH
ENDFUNC
**
PROCEDURE ResetAllVariables
LOCAL M.I
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
.IAVARIABLES(M.I).RESET()
.IAVARIABLES[M.I].IUPREVIOUSVALUEFORREPEATEDVALUES = .NULL.
.IAVARIABLES[M.I].ILSUPGROUPCHANGED = .T.
.IAVARIABLES[M.I].ILONNEWPAGEORCOLUMN = .T.
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE ResetVariables
LPARAMETERS TNLEVEL
LOCAL M.I
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
IF .IAVARIABLES(M.I).INRESETTOTAL=TNLEVEL .AND. .IAVARIABLES(M.I).LLRESET
.IAVARIABLES(M.I).RESET()
ENDIF
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE Increment
LPARAMETERS TOREPORT, TOLEVEL
LOCAL M.I
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
WITH .IAVARIABLES(M.I)
IF EMPTY(TOLEVEL) .OR. TOLEVEL=.INRESETTOTAL
IF .INTOTALTYPE<>0 .OR.  .NOT. EMPTY(.ICNAME)
.INCREMENT(TOREPORT)
ENDIF
ENDIF
ENDWITH
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE processGroup
LPARAMETERS GNO
LOCAL M.I
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
IF .IAVARIABLES(M.I).INSUPGROUP=GNO
.IAVARIABLES[M.I].ILSUPGROUPCHANGED = .T.
ENDIF
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE newPageOrColumn
LOCAL M.I
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
.IAVARIABLES[M.I].ILONNEWPAGEORCOLUMN = .T.
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE PrepareToReset
LPARAMETERS TNLEVEL
LOCAL M.I
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
IF .IAVARIABLES(M.I).INRESETTOTAL=TNLEVEL
.IAVARIABLES[M.I].LLRESET = .T.
ENDIF
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE defineMemory
LOCAL M.I, LCNAME
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
IF  .NOT. EMPTY(.IAVARIABLES(M.I).ICNAME)
LCNAME = .IAVARIABLES(M.I).ICNAME
RELEASE &LCNAME
PUBLIC &LCNAME
&LCNAME = .IAVARIABLES[M.I].IUVALUE
ENDIF
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE setMemory
LOCAL M.I, LCNAME
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
IF  .NOT. EMPTY(.IAVARIABLES(M.I).ICNAME)
LCNAME = .IAVARIABLES(M.I).ICNAME
&LCNAME = .IAVARIABLES[M.I].IUVALUE
ENDIF
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE setPrevious
LOCAL M.I, LCNAME
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
WITH .IAVARIABLES(M.I)
.IUNEWVALUE = .IUVALUE
.IUVALUE = .IUPREVIOUSVALUE
ENDWITH
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE setNew
LOCAL M.I, LCNAME
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
WITH .IAVARIABLES(M.I)
IF .INRESETTOTAL<>2
.IUVALUE = .IUNEWVALUE
ENDIF
ENDWITH
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE releaseMemory
LOCAL M.I, LCNAME
WITH THIS
FOR M.I = 1 TO .INVARCOUNT
IF  .NOT. EMPTY(.IAVARIABLES(M.I).ICNAME)
LCNAME = .IAVARIABLES(M.I).ICNAME
RELEASE &LCNAME
ENDIF
ENDFOR
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS mycursor AS Custom
ICALIAS = ""
ICORDER = ""
ICCURSORSOURCE = ""
ICNAME = ""
ICDATABASE = ""
ILOPENED = .F.
CPREVORDER = ""
INBUFFERMODEOVERRIDE = 1
**
PROCEDURE Init
LPARAMETERS TCALIAS, TCORDER, TCCURSORSOURCE, TCNAME, TCDATABASE, TNBUFFERMODEOVERRIDE
THIS.ICALIAS = M.TCALIAS
THIS.ICORDER = M.TCORDER
THIS.ICCURSORSOURCE = M.TCCURSORSOURCE
THIS.ICNAME = M.TCNAME
THIS.ICDATABASE = M.TCDATABASE
IF  .NOT. EMPTY(TNBUFFERMODEOVERRIDE)
THIS.INBUFFERMODEOVERRIDE = TNBUFFERMODEOVERRIDE
ENDIF
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS CursorS AS Custom
ILPRIVATE = .F.
DIMENSION IACURSORS(1)
INCURSORS = 0
DIMENSION IARELATIONS(1)
INRELATIONS = 0
LLSESSIONPROCS = .F.
LLBEFOREOPENTABLES = .F.
LLAFTERCLOSETABLES = .F.
LLOPENTABLES = .F.
LLCLOSETABLES = .F.
LLINIT = .F.
LLDESTROY = .F.
INITIALSELECTEDALIAS = ""
**
PROCEDURE Init
LPARAMETERS TLPRIVATE
THIS.ILPRIVATE = TLPRIVATE
ENDPROC
**
PROCEDURE handleMethods
LPARAMETERS TNSESSION
IF  .NOT. EMPTY(TNSESSION)
SET DATASESSION TO TNSESSION
ENDIF
IF  .NOT. EMPTY(UR_REPORT.TAG2)
ERASE __ur_ds.fxp
COPY MEMO TAG2 TO __ur_ds.fxp
THIS.LLSESSIONPROCS = .T.
THIS.LLBEFOREOPENTABLES = .T.
THIS.LLAFTERCLOSETABLES = .T.
THIS.LLOPENTABLES = .T.
THIS.LLCLOSETABLES = .T.
THIS.LLINIT = .T.
THIS.LLDESTROY = .T.
ENDIF
ENDPROC
**
PROCEDURE addCursor
LPARAMETERS LOCURSOR
WITH THIS
.INCURSORS = .INCURSORS+1
DIMENSION .IACURSORS(.INCURSORS)
.IACURSORS[.INCURSORS] = LOCURSOR
ENDWITH
ENDPROC
**
FUNCTION OpenCursors
LPARAMETERS TNSESSION, TCPATH, TLNOPATH
LOCAL M.I, LCSTR, SL, LCDB
LOCAL LCALIAS, LCORDER
LOCAL LCTESTSTR
IF  .NOT. EMPTY(TNSESSION)
SET DATASESSION TO TNSESSION
ENDIF
WITH THIS
IF .LLSESSIONPROCS
LOCAL LCERROR, LLERROR
LCERROR = ON("Error")
ON ERROR LLERROR = .t.
IF .LLBEFOREOPENTABLES
LCSTR = "Do BEFOREOPENTABLES IN __ur_ds.fxp"
&LCSTR
ENDIF
IF .LLOPENTABLES
LCSTR = "Do OPENTABLES IN __ur_ds.fxp"
&LCSTR
ENDIF
ON ERROR &LCERROR
ENDIF
M.SL = 0
FOR M.I = 1 TO .INCURSORS
IF .ILPRIVATE .OR.  .NOT. USED(.IACURSORS(M.I).ICALIAS)
LCSTR = ALLTRIM(.IACURSORS(M.I).ICCURSORSOURCE)
IF LEFT(ALLTRIM(M.LCSTR), 1)="("
LCSTR = EVALUATE(M.LCSTR)
ELSE
IF  .NOT. M.TLNOPATH
LCTESTSTR = STRTRAN(LCSTR, '"', '')
LCTESTSTR = STRTRAN(LCTESTSTR, ['], '')
IF  .NOT. (UPPER(FULLPATH(ALLTRIM(LCTESTSTR)))==UPPER(ALLTRIM(LCTESTSTR)))
LCSTR = ADDBS(ALLTRIM(TCPATH))+ALLTRIM(.IACURSORS(M.I).ICCURSORSOURCE)
LCSTR = SYS(2014, LCSTR)
ENDIF
IF  .NOT. FILE(LCSTR)
LCSTR = JUSTFNAME(LCSTR)
ENDIF
ELSE
LCSTR = JUSTFNAME(LCSTR)
ENDIF
ENDIF
LCALIAS = ''
IF  .NOT. EMPTY(.IACURSORS(M.I).ICALIAS)
LCALIAS = " alias "+.IACURSORS(M.I).ICALIAS
ENDIF
.IACURSORS[M.I].ICORDER = STRTRAN(.IACURSORS(M.I).ICORDER, "'", "")
.IACURSORS[M.I].ICORDER = STRTRAN(.IACURSORS(M.I).ICORDER, '"', "")
LCORDER = ''
IF  .NOT. EMPTY(.IACURSORS(M.I).ICORDER)
LCORDER = " order "+.IACURSORS(M.I).ICORDER
ENDIF
IF  .NOT. M.TLNOPATH
IF  .NOT. EMPTY(.IACURSORS(M.I).ICDATABASE)
LCDB = .IACURSORS(M.I).ICDATABASE
IF  .NOT. (UPPER(FULLPATH(ALLTRIM(LCDB)))==UPPER(ALLTRIM(LCDB)))
LCDB = ADDBS(ALLTRIM(TCPATH))+ALLTRIM(LCDB)
LCDB = SYS(2014, LCDB)
ENDIF
IF EMPTY(JUSTEXT(LCDB))
LCDB = LCDB+".dbc"
ENDIF
IF  .NOT. FILE(LCDB)
LCDB = JUSTFNAME(LCDB)
ENDIF
LCSTR = LCDB+"!"+LCSTR
ENDIF
ENDIF
SELECT 0
LCSTR = STRTRAN(LCSTR, "'", "")
LCSTR = STRTRAN(LCSTR, '"', "")
USE (LCSTR) &LCALIAS &LCORDER AGAIN SHARED
IF .IACURSORS(M.I).INBUFFERMODEOVERRIDE>1
CURSORSETPROP("Buffering", .IACURSORS(M.I).INBUFFERMODEOVERRIDE)
ENDIF
IF M.I=1
M.SL = SELECT(0)
ENDIF
ELSE
IF  .NOT. EMPTY(.IACURSORS(M.I).ICORDER)
.IACURSORS[M.I].CPREVORDER = ORDER(.IACURSORS(M.I).ICALIAS)
SET ORDER IN (.IACURSORS(M.I).ICALIAS) TO Eval(.iaCursors[m.i].icOrder)
ENDIF
IF .IACURSORS(M.I).INBUFFERMODEOVERRIDE>1
CURSORSETPROP("Buffering", .IACURSORS(M.I).INBUFFERMODEOVERRIDE, .IACURSORS(M.I).ICALIAS)
ENDIF
.IACURSORS[M.I].ILOPENED = .T.
ENDIF
IF  .NOT. EMPTY(.INITIALSELECTEDALIAS) .AND. UPPER(ALLTRIM(.IACURSORS(M.I).ICALIAS))==UPPER(ALLTRIM(.INITIALSELECTEDALIAS))
M.SL = SELECT(.INITIALSELECTEDALIAS)
ENDIF
ENDFOR
IF  .NOT. EMPTY(M.SL)
SELECT (M.SL)
ENDIF
IF .LLSESSIONPROCS
IF .LLINIT
ON ERROR LLERROR = .t.
LCSTR = "Do INIT IN __ur_ds.fxp"
&LCSTR
ON ERROR &LCERROR
ENDIF
ENDIF
ENDWITH
RETURN M.SL
ENDFUNC
**
PROCEDURE closeCursors
LPARAMETERS TNSESSION
IF  .NOT. EMPTY(TNSESSION)
SET DATASESSION TO TNSESSION
ENDIF
LOCAL M.I, LC
WITH THIS
FOR M.I = 1 TO .INCURSORS
IF  .NOT. .IACURSORS(M.I).ILOPENED
IF USED(.IACURSORS(M.I).ICALIAS)
USE IN (.IACURSORS(M.I).ICALIAS)
ENDIF
ELSE
LC = .IACURSORS(M.I).CPREVORDER
IF EMPTY(LC)
SELECT (.IACURSORS(M.I).ICALIAS)
SET ORDER TO
ELSE
SET ORDER TO &LC IN (.IACURSORS[M.I].ICALIAS)
ENDIF
ENDIF
ENDFOR
IF .LLSESSIONPROCS
LOCAL LCERROR, LLERROR
LCERROR = ON("Error")
ON ERROR LLERROR = .t.
IF .LLCLOSETABLES
LCSTR = "Do CLOSETABLES IN __ur_ds.fxp"
&LCSTR
ENDIF
IF .LLAFTERCLOSETABLES
LCSTR = "Do AFTERCLOSETABLES IN __ur_ds.fxp"
&LCSTR
ENDIF
IF .LLDESTROY
LCSTR = "Do DESTROY IN __ur_ds.fxp"
&LCSTR
ENDIF
ERASE __ur_ds.fxp
ON ERROR &LCERROR
ENDIF
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS Buffer AS Custom
DIMENSION IASHAPES(200)
INSHAPES = 0
IXSHAPES = 0
IZSHAPES = 200
DIMENSION IAHORIZONTALLINES(1)
INHORIZONTALLINES = 0
DIMENSION IAVERTICALLINES(1)
INVERTICALLINES = 0
DIMENSION IARECTANGLES(1)
INRECTANGLES = 0
DIMENSION IATOREMOVE(1, 2)
INTOREMOVE = 0
OREPORT = .NULL.
DIMENSION IAOBJECTS(200, 2)
INOBJECTS = 0
**
PROCEDURE reset
THIS.INSHAPES = 0
THIS.INHORIZONTALLINES = 0
THIS.INVERTICALLINES = 0
THIS.INRECTANGLES = 0
THIS.INTOREMOVE = 0
THIS.INOBJECTS = 0
ENDPROC
**
PROCEDURE setReport
LPARAMETERS TOREPORT
THIS.OREPORT = TOREPORT
ENDPROC
**
PROCEDURE addToRemove
LPARAMETERS LNTOP, LNHEIGHT
WITH THIS
.INTOREMOVE = .INTOREMOVE+1
DIMENSION .IATOREMOVE(.INTOREMOVE, 3)
.IATOREMOVE(.INTOREMOVE, 1) = MAX(0, LNTOP)
.IATOREMOVE(.INTOREMOVE, 2) = LNTOP+LNHEIGHT
ENDWITH
ENDPROC
**
FUNCTION addShape
LPARAMETERS TNOBJTYPE, TNLEFT, TNTOP, TNHEIGHT, TNWIDTH, TCOUTPUT, TCFONTFACE, TNFONTSIZE, TCALIGN, TLITALICS, TLBOLD, TLUNDERLINE, TLSTRETCH, TLFLOAT, TLREMOVEIFBLANK, TNPENRED, TNPENGREEN, TNPENBLUE, TNPENSIZE, TNPENPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNFILLPAT, TNMODE, LLBOTTOM, LCCOMMENT
WITH THIS
IF VARTYPE(TNOBJTYPE)="L"
RETURN
ENDIF
.INSHAPES = .INSHAPES+1
IF .INSHAPES>.IZSHAPES
.IZSHAPES = .IZSHAPES+100
DIMENSION .IASHAPES(.IZSHAPES)
ENDIF
.INOBJECTS = .INOBJECTS+1
DIMENSION .IAOBJECTS(.INOBJECTS, 2)
.IAOBJECTS(.INOBJECTS, 1) = "T"
.IAOBJECTS(.INOBJECTS, 2) = .INSHAPES
LOCAL TNGROUP, TCUNIQUEID, LNAT
LNAT = AT(CHR(13), LCCOMMENT)
TCUNIQUEID = LEFT(LCCOMMENT, LNAT-1)
LCCOMMENT = SUBSTR(LCCOMMENT, LNAT+1)
LNAT = AT(CHR(13), LCCOMMENT)
TNGROUP = VAL(LEFT(LCCOMMENT, LNAT-1))
LCCOMMENT = SUBSTR(LCCOMMENT, LNAT+1)
IF .IXSHAPES<.INSHAPES
.IASHAPES(.INSHAPES) = CREATEOBJECT("textboxdata", TNOBJTYPE, TNLEFT, TNTOP, TNHEIGHT, TNWIDTH, TCOUTPUT, TCFONTFACE, TNFONTSIZE, TCALIGN, TLITALICS, TLBOLD, TLUNDERLINE, TLSTRETCH, TLFLOAT, TLREMOVEIFBLANK, TNPENRED, TNPENGREEN, TNPENBLUE, TNPENSIZE, TNPENPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNFILLPAT, TNMODE)
.IXSHAPES = .INSHAPES
ELSE
WITH .IASHAPES(.INSHAPES)
.NNUMERICVALUE = .NULL.
.CXLSFORMAT = ""
.NROTATE = 0
.NSTRETCH = 0
.MOVEDDOWN = 0
.TYPE = "SHAPE"
.LLBOTTOM = .F.
.LCLINKNAME = ""
.LCLINKHREF = ""
.LSTRETCHED = .F.
.LCOUTLINE = ""
.NOUTLINESTYLE = 0
.LNPRINTSTATUS = 1
.NGROUP = 0
.UNIQUEID = ""
.CTOOLTIP = ""
.CNAME = ""
.LNOBJTYPE = TNOBJTYPE
.LNLEFT = TNLEFT
.LNTOP = TNTOP
.LNHEIGHT = TNHEIGHT
.LNWIDTH = TNWIDTH
.LCOUTPUT = TCOUTPUT
.LCFONTFACE = TCFONTFACE
.LNFONTSIZE = TNFONTSIZE
.LCALIGN = TCALIGN
.LLITALICS = TLITALICS
.LLBOLD = TLBOLD
.LLUNDERLINE = TLUNDERLINE
.LLSTRETCH = TLSTRETCH
.LLFLOAT = TLFLOAT
.LLREMOVEIFBLANK = TLREMOVEIFBLANK
.LNPENRED = TNPENRED
.LNPENGREEN = TNPENGREEN
.LNPENBLUE = TNPENBLUE
.LNPENSIZE = TNPENSIZE
.LNPENPAT = TNPENPAT
.LNFILLRED = TNFILLRED
.LNFILLGREEN = TNFILLGREEN
.LNFILLBLUE = TNFILLBLUE
.LNFILLPAT = TNFILLPAT
.LNMODE = TNMODE
ENDWITH
ENDIF
.IASHAPES(.INSHAPES).LLBOTTOM = LLBOTTOM
.IASHAPES(.INSHAPES).NGROUP = TNGROUP
.IASHAPES(.INSHAPES).UNIQUEID = TCUNIQUEID
IF "<FJ>"$LCCOMMENT
.IASHAPES(.INSHAPES).LCALIGN = "block"
ENDIF
IF  .NOT. EMPTY(LCCOMMENT)
LOCAL LNMEMOWIDTH
LNMEMOWIDTH = SET("memowidth")
SET MEMOWIDTH TO 700
IF USED("ur_report")
LCCOMMENT = UR_REPORT.COMMENT
ENDIF
LOCAL III, CSTR
FOR III = 1 TO MEMLINES(LCCOMMENT)
LCSTR = ALLTRIM(MLINE(LCCOMMENT, III))
DO CASE
CASE LEFT(LCSTR, 10)=="#UR ROTATE"
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 11))
.IASHAPES(.INSHAPES).NROTATE = CSTR
CASE LEFT(LCSTR, 20)=="#UR POSITIONABSOLUTE"
.IASHAPES(.INSHAPES).LABSOLUTE = .T.
CASE LEFT(LCSTR, 11)=="#UR A NAME="
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 12))
CSTR = CHRTRANC(CSTR, CHR(13)+CHR(10)+CHR(9), "")
.IASHAPES(.INSHAPES).LCLINKNAME = CSTR
CASE LEFT(LCSTR, 11)=="#UR A HREF="
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 12))
CSTR = CHRTRANC(CSTR, CHR(13)+CHR(10)+CHR(9), "")
.IASHAPES(.INSHAPES).LCLINKHREF = CSTR
CASE LEFT(LCSTR, 12)=="#UR OUTLINE="
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 13))
.IASHAPES(.INSHAPES).LCOUTLINE = CSTR
CASE LEFT(LCSTR, 12)=="#UR TOOLTIP="
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 13))
.IASHAPES(.INSHAPES).CTOOLTIP = CSTR
CASE LEFT(LCSTR, 17)=="#UR OUTLINESTYLE="
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 18))
.IASHAPES(.INSHAPES).NOUTLINESTYLE = CSTR
CASE LEFT(LCSTR, 9)=="#UR XLSF="
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 10))
.IASHAPES(.INSHAPES).CXLSFORMAT = CSTR
ENDCASE
SET MEMOWIDTH TO (LNMEMOWIDTH)
ENDFOR
ENDIF
RETURN .IASHAPES(.INSHAPES)
ENDWITH
ENDFUNC
**
PROCEDURE addVerticalLine
LPARAMETERS TCNAME, TNPENRED, TNPENGREEN, TNPENBLUE, TNLEFT, TNTOP, TNHEIGHT, TNSTRETCH, LLBOTTOM, TNPENPAT, TNPENSIZE, TLFLOAT, TNGROUP, LNLONGLINE, LNUNIQUEID
WITH THIS
IF  .NOT. EMPTY(M.LNLONGLINE)
IF M.LNLONGLINE=2
IF  .NOT. THIS.OREPORT.ISVERTICALCOMPONENT(M.LNUNIQUEID)
LNLONGLINE = 0
ENDIF
ENDIF
ENDIF
.INVERTICALLINES = .INVERTICALLINES+1
DIMENSION .IAVERTICALLINES(.INVERTICALLINES)
.INOBJECTS = .INOBJECTS+1
DIMENSION .IAOBJECTS(.INOBJECTS, 2)
.IAOBJECTS(.INOBJECTS, 1) = "V"
.IAOBJECTS(.INOBJECTS, 2) = .INVERTICALLINES
.IAVERTICALLINES(.INVERTICALLINES) = CREATEOBJECT("verticalLine", TNLEFT, TNTOP, TNHEIGHT, TNSTRETCH, LLBOTTOM, TNPENPAT, TNPENSIZE, TLFLOAT, TNGROUP, LNLONGLINE, LNUNIQUEID)
WITH .IAVERTICALLINES(.INVERTICALLINES)
.CNAME = TCNAME
.PENRED = TNPENRED
.PENGREEN = TNPENGREEN
.PENBLUE = TNPENBLUE
ENDWITH
ENDWITH
ENDPROC
**
PROCEDURE addHorizontalLine
LPARAMETERS TCNAME, TNPENRED, TNPENGREEN, TNPENBLUE, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, LLFLOAT, LLBOTTOM, TNPENPAT, TNPENSIZE
WITH THIS
.INHORIZONTALLINES = .INHORIZONTALLINES+1
DIMENSION .IAHORIZONTALLINES(.INHORIZONTALLINES)
.INOBJECTS = .INOBJECTS+1
DIMENSION .IAOBJECTS(.INOBJECTS, 2)
.IAOBJECTS(.INOBJECTS, 1) = "H"
.IAOBJECTS(.INOBJECTS, 2) = .INHORIZONTALLINES
.IAHORIZONTALLINES(.INHORIZONTALLINES) = CREATEOBJECT("HorizontalLine", TNLEFT, TNTOP, TNWIDTH, LLFLOAT, LLBOTTOM, TNPENPAT, TNPENSIZE)
WITH .IAHORIZONTALLINES(.INHORIZONTALLINES)
.CNAME = TCNAME
.PENRED = TNPENRED
.PENGREEN = TNPENGREEN
.PENBLUE = TNPENBLUE
IF ABS(TNHEIGHT)>TNPENSIZE*104.167 +105
.SLHEIGHT = TNHEIGHT
ENDIF
ENDWITH
ENDWITH
ENDPROC
**
FUNCTION addRectangle
LPARAMETERS TCNAME, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, LNSTRETCH, TNPENRED, TNPENGREEN, TNPENBLUE, TNPENSIZE, TNPENPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNFILLPAT, LLBOTTOM, LCPICTUREPATH, TNOFFSET, TLFLOAT, TNGROUP, TNADJTYPE, LNLONGLINE, LNUNIQUEID, LCCOMMENT, TNINDEX
IF  .NOT. EMPTY(LNLONGLINE)
IF LNLONGLINE=2
IF  .NOT. THIS.OREPORT.ISVERTICALCOMPONENT(LNUNIQUEID)
LNLONGLINE = 0
ENDIF
ENDIF
ENDIF
WITH THIS
.INRECTANGLES = .INRECTANGLES+1
DIMENSION .IARECTANGLES(.INRECTANGLES)
.INOBJECTS = .INOBJECTS+1
DIMENSION .IAOBJECTS(.INOBJECTS, 2)
LOCAL LLFOUND
IF  .NOT. EMPTY(TNINDEX)
LOCAL LNI
FOR LNI = 1 TO .INOBJECTS
IF .IAOBJECTS(LNI, 1)=="R" .AND. .IAOBJECTS(LNI, 2)=TNINDEX
AINS(.IAOBJECTS, LNI)
.IAOBJECTS(LNI, 1) = "R"
.IAOBJECTS(LNI, 2) = .INRECTANGLES
LLFOUND = .T.
EXIT
ENDIF
ENDFOR
ENDIF
IF  .NOT. LLFOUND
.IAOBJECTS(.INOBJECTS, 1) = "R"
.IAOBJECTS(.INOBJECTS, 2) = .INRECTANGLES
ENDIF
.IARECTANGLES(.INRECTANGLES) = CREATEOBJECT("Rectangle", TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, LNSTRETCH, TNPENRED, TNPENGREEN, TNPENBLUE, TNPENSIZE, TNPENPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNFILLPAT, LLBOTTOM, LCPICTUREPATH, TNOFFSET, TLFLOAT, TNGROUP, TNADJTYPE, LNLONGLINE, LNUNIQUEID)
.IARECTANGLES(.INRECTANGLES).CNAME = TCNAME
LOCAL LCSCRIPT, LLCONVERTSCRIPTTOPICTURE, LNDPIFACTOR, LCPICTURETYPE, LNAT, LCPARAMETERS
LCSCRIPT = ""
LCSCRIPTNAME = ""
LNDPIFACTOR = 1
LCPICTURETYPE = ""
LCPARAMETERS = ""
IF  .NOT. EMPTY(LCCOMMENT)
LOCAL LNMEMOWIDTH
LNMEMOWIDTH = SET("memowidth")
SET MEMOWIDTH TO 1000
LOCAL III, CSTR, LLINSCRIPTGRABMODE
FOR III = 1 TO MEMLINES(LCCOMMENT)
LCSTR = ALLTRIM(MLINE(LCCOMMENT, III))
DO CASE
CASE LEFT(LCSTR, 14)=="#UR SCRIPT END"
LLINSCRIPTGRABMODE = .F.
CASE LLINSCRIPTGRABMODE
LCSCRIPT = LCSCRIPT+CHR(13)+LCSTR
CASE LEFT(LCSTR, 15)=="#UR SCRIPT NAME"
LCSCRIPTNAME = GETWORD(SUBSTR(LCSTR, 16))
LCSTR = SUBSTR(LCSTR, 16+LEN(LCSCRIPTNAME))
LLCONVERTSCRIPTTOPICTURE = "PICTURE"$UPPER(LCSTR)
IF LLCONVERTSCRIPTTOPICTURE
LNDPIFACTOR = VAL(SUBSTR(LCSTR, 7+AT("PICTURE", UPPER(LCSTR))))
IF LNDPIFACTOR>0
LNDPIFACTOR = LNDPIFACTOR/96
ENDIF
LNAT = ATC("TYPE", LCSTR)
IF LNAT>0
LCPICTURETYPE = GETWORD(SUBSTR(LCSTR, LNAT+4))
ENDIF
LNAT = ATC("PARAMETERS", LCSTR)
IF LNAT>0
LCPARAMETERS = SUBSTR(LCSTR, LNAT+10)
ENDIF
ENDIF
CASE LEFT(LCSTR, 16)=="#UR SCRIPT BEGIN"
LLINSCRIPTGRABMODE = .T.
LLCONVERTSCRIPTTOPICTURE = "PICTURE"$UPPER(LCSTR)
LCSCRIPT = ""
IF LLCONVERTSCRIPTTOPICTURE
LNDPIFACTOR = VAL(SUBSTR(LCSTR, 7+AT("PICTURE", UPPER(LCSTR))))
IF LNDPIFACTOR>0
LNDPIFACTOR = LNDPIFACTOR/96
ENDIF
ENDIF
CASE LEFT(LCSTR, 9)=="#UR COLOR"
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 10))
.IARECTANGLES(.INRECTANGLES).LCMYK = "CMYK"$CSTR
.IARECTANGLES(.INRECTANGLES).LNEG = "NEG"$CSTR
CASE LEFT(LCSTR, 8)=="#UR MASK"
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 9))
.IARECTANGLES(.INRECTANGLES).CMASK = CSTR
CASE LEFT(LCSTR, 10)=="#UR ROTATE"
CSTR = .OREPORT.XFEVAL(SUBSTR(LCSTR, 11))
.IARECTANGLES(.INRECTANGLES).NROTATE = CSTR
ENDCASE
ENDFOR
SET MEMOWIDTH TO (LNMEMOWIDTH)
ENDIF
.IARECTANGLES(.INRECTANGLES).CSCRIPT = LCSCRIPT
.IARECTANGLES(.INRECTANGLES).CSCRIPTNAME = LCSCRIPTNAME
.IARECTANGLES(.INRECTANGLES).NDPIFACTOR = LNDPIFACTOR
.IARECTANGLES(.INRECTANGLES).LCONVERTSCRIPTTOPICTURE = LLCONVERTSCRIPTTOPICTURE
.IARECTANGLES(.INRECTANGLES).CPICTURETYPE = LCPICTURETYPE
.IARECTANGLES(.INRECTANGLES).CPARAMETERS = LCPARAMETERS
RETURN .IARECTANGLES(.INRECTANGLES)
ENDWITH
ENDFUNC
**
PROCEDURE showform
WITH THIS
FFF = CREATEOBJECT("form")
FFF.LEFT = 70
FFF.WIDTH = 900
FFF.HEIGHT = 400
FFF.VISIBLE = .T.
FOR M.I = 1 TO .INSHAPES
LT = "txt"+ALLTRIM(STR(M.I))
FFF.ADDOBJECT(LT, "textbox")
FFF.&LT->VISIBLE = .T.
FFF.&LT->VALUE = .IASHAPES[M.I].LCOUTPUT
FFF.&LT->TOP = .IASHAPES[M.I].LNTOP/100
FFF.&LT->LEFT = .IASHAPES[M.I].LNLEFT/100
FFF.&LT->HEIGHT = 6+.IASHAPES[M.I].LNHEIGHT/100
FFF.&LT->WIDTH = .IASHAPES[M.I].LNWIDTH/100
ENDFOR
WAIT WINDOW "look at it"
FFF.RELEASE()
RELEASE FFF
ENDWITH
ENDPROC
**
FUNCTION applystretch
WITH THIS
LOCAL M.I, LNHEIGHT, LNSHIFT, LNSHIFTCOUNT, LNSTRCOUNT, LNFLOATCOUNT
LOCAL LASHIFTS(1)
LOCAL LASTRETCHES(1)
LOCAL LAFLOATS(1)
LNSTRCOUNT = 0
LNSHIFT = 0
LNSHIFTCOUNT = 0
LNFLOATCOUNT = 0
FOR M.I = 1 TO .INSHAPES
IF .IASHAPES(M.I).LLSTRETCH
WITH .IASHAPES(M.I)
LNHEIGHT = .LNHEIGHT
.LNHEIGHT = MAX(.LNHEIGHT, 10*(GETPHEIGHT2(TRIM(.LCOUTPUT), (.LNWIDTH)/10, .LCFONTFACE, .LNFONTSIZE, IIF(.LLITALICS, 1, 0), IIF(.LLBOLD, 1, 0), IIF(.LCALIGN="right", 1, 0), .NCODEPAGE)))
IF .LNHEIGHT<>LNHEIGHT
.LSTRETCHED = .T.
LNSTRCOUNT = LNSTRCOUNT+1
DIMENSION LASTRETCHES(LNSTRCOUNT, 3)
LASTRETCHES(LNSTRCOUNT, 1) = THIS.IASHAPES(M.I)
LASTRETCHES(LNSTRCOUNT, 2) = .LNTOP+LNHEIGHT
.LNHEIGHT = .LNHEIGHT+(5000.0/9)
LASTRETCHES(LNSTRCOUNT, 3) = .LNHEIGHT-LNHEIGHT
.NSTRETCH = .LNHEIGHT-LNHEIGHT
ENDIF
ENDWITH
ENDIF
ENDFOR
IF LNSTRCOUNT>1
ASORT(LASTRETCHES, 2)
ENDIF
LOCAL J, LNINDEX
FOR M.I = 1 TO .INVERTICALLINES
IF .IAVERTICALLINES(M.I).LNLONGLINE==2
.IAVERTICALLINES[M.I].LFLOAT = .F.
ENDIF
IF .IAVERTICALLINES(M.I).LFLOAT
LNFLOATCOUNT = LNFLOATCOUNT+1
DIMENSION LAFLOATS(LNFLOATCOUNT)
LNINDEX = 0
FOR J = 1 TO LNFLOATCOUNT-1
IF .IAVERTICALLINES(M.I).LNTOP<LAFLOATS(J).LNTOP
LNINDEX = J
EXIT
ENDIF
ENDFOR
IF LNINDEX=0
LAFLOATS(LNFLOATCOUNT) = .IAVERTICALLINES(M.I)
ELSE
AINS(LAFLOATS, LNINDEX)
LAFLOATS(LNINDEX) = .IAVERTICALLINES(M.I)
ENDIF
.IAVERTICALLINES[M.I].MOVEDDOWN = 0
ENDIF
ENDFOR
FOR M.I = 1 TO .INRECTANGLES
IF .IARECTANGLES(M.I).LFLOAT
LNFLOATCOUNT = LNFLOATCOUNT+1
DIMENSION LAFLOATS(LNFLOATCOUNT)
LNINDEX = 0
FOR J = 1 TO LNFLOATCOUNT-1
IF .IARECTANGLES(M.I).LNTOP<LAFLOATS(J).LNTOP
LNINDEX = J
EXIT
ENDIF
ENDFOR
IF LNINDEX=0
LAFLOATS(LNFLOATCOUNT) = .IARECTANGLES(M.I)
ELSE
AINS(LAFLOATS, LNINDEX)
LAFLOATS(LNINDEX) = .IARECTANGLES(M.I)
ENDIF
.IARECTANGLES[M.I].MOVEDDOWN = 0
ENDIF
ENDFOR
FOR M.I = 1 TO .INSHAPES
IF .IASHAPES(M.I).LLFLOAT
LNFLOATCOUNT = LNFLOATCOUNT+1
DIMENSION LAFLOATS(LNFLOATCOUNT)
LNINDEX = 0
FOR J = 1 TO LNFLOATCOUNT-1
IF .IASHAPES(M.I).LNTOP<LAFLOATS(J).LNTOP
LNINDEX = J
EXIT
ENDIF
ENDFOR
IF LNINDEX=0
LAFLOATS(LNFLOATCOUNT) = .IASHAPES(M.I)
ELSE
AINS(LAFLOATS, LNINDEX)
LAFLOATS(LNINDEX) = .IASHAPES(M.I)
ENDIF
.IASHAPES[M.I].MOVEDDOWN = 0
ENDIF
ENDFOR
FOR M.I = 1 TO .INHORIZONTALLINES
IF .IAHORIZONTALLINES(M.I).LLFLOAT
LNFLOATCOUNT = LNFLOATCOUNT+1
DIMENSION LAFLOATS(LNFLOATCOUNT)
LNINDEX = 0
FOR J = 1 TO LNFLOATCOUNT-1
IF .IAHORIZONTALLINES(M.I).LNTOP<LAFLOATS(J).LNTOP
LNINDEX = J
EXIT
ENDIF
ENDFOR
IF LNINDEX=0
LAFLOATS(LNFLOATCOUNT) = .IAHORIZONTALLINES(M.I)
ELSE
AINS(LAFLOATS, LNINDEX)
LAFLOATS(LNINDEX) = .IAHORIZONTALLINES(M.I)
ENDIF
.IAHORIZONTALLINES[M.I].MOVEDDOWN = 0
ENDIF
ENDFOR
LOCAL LNLEFT, LNRIGHT, LNTOMOVE
FOR M.I = 1 TO LNSTRCOUNT
LNLEFT = LASTRETCHES(M.I,1).LNLEFT
LNRIGHT = LASTRETCHES(M.I,1).LNLEFT+LASTRETCHES(M.I,1).LNWIDTH
FOR J = 1 TO LNFLOATCOUNT
WITH LAFLOATS(J)
IF (.LNTOP>LASTRETCHES(M.I,1).LNTOP) .AND. ((.LNLEFT>=LNLEFT) .AND. (.LNLEFT<=LNRIGHT) .OR. (.LNLEFT+.LNWIDTH>=LNLEFT) .AND. (.LNLEFT+.LNWIDTH<=LNRIGHT) .OR. (.LNLEFT<=LNLEFT) .AND. (.LNLEFT+.LNWIDTH>=LNRIGHT))
LNTOMOVE = LASTRETCHES(M.I,1).LNTOP+LASTRETCHES(M.I,1).LNHEIGHT-LASTRETCHES(M.I, 2)
IF LNTOMOVE>.MOVEDDOWN
.LNTOP = .LNTOP+LNTOMOVE-.MOVEDDOWN
.MOVEDDOWN = LNTOMOVE
ENDIF
IF .LNLEFT<LNLEFT
LNLEFT = .LNLEFT
ENDIF
IF .LNLEFT+.LNWIDTH>LNRIGHT
LNRIGHT = .LNLEFT+.LNWIDTH
ENDIF
ENDIF
ENDWITH
ENDFOR
ENDFOR
LOCAL LNLSHIFT
FOR M.I = 1 TO LNSTRCOUNT
LNLSHIFT = LASTRETCHES(M.I,1).LNTOP+LASTRETCHES(M.I,1).LNHEIGHT-LASTRETCHES(M.I, 2)
IF LNLSHIFT>LNSHIFT
LNSHIFT = LNLSHIFT
ENDIF
FOR M.J = 1 TO .INRECTANGLES
WITH .IARECTANGLES(M.J)
IF .LNLONGLINE==2
IF LASTRETCHES(M.I, 2)<=.LNTOP+.LNHEIGHT-.MOVEDDOWN
.LNHEIGHT = .LNHEIGHT-.MOVEDDOWN+LNSHIFT
.MOVEDDOWN = LNSHIFT
ENDIF
ENDIF
ENDWITH
ENDFOR
FOR M.J = 1 TO .INVERTICALLINES
WITH .IAVERTICALLINES(M.J)
IF .LNLONGLINE==2
IF LASTRETCHES(M.I, 2)<=.LNTOP+.LNHEIGHT-.MOVEDDOWN
.LNHEIGHT = .LNHEIGHT-.MOVEDDOWN+LNSHIFT
.MOVEDDOWN = LNSHIFT
ENDIF
ENDIF
ENDWITH
ENDFOR
ENDFOR
FOR M.I = 1 TO .INHORIZONTALLINES
IF .IAHORIZONTALLINES(M.I).LLBOTTOM
WITH .IAHORIZONTALLINES(M.I)
.LNTOP = .LNTOP+LNSHIFT
ENDWITH
ENDIF
ENDFOR
FOR M.I = 1 TO .INSHAPES
IF .IASHAPES(M.I).LLBOTTOM
WITH .IASHAPES(M.I)
.LNTOP = .LNTOP+LNSHIFT
ENDWITH
ENDIF
ENDFOR
LOCAL LNSTR
FOR M.I = 1 TO .INRECTANGLES
IF .IARECTANGLES(M.I).LNSTRETCH>0
IF .IARECTANGLES(M.I).LNSTRETCH=1
.IARECTANGLES[M.I].LNHEIGHT = .IARECTANGLES(M.I).LNHEIGHT+LNSHIFT
ELSE
IF .IARECTANGLES(M.I).NGROUP>0
LNSTR = 0
FOR J = 1 TO .INSHAPES
IF .IASHAPES(J).NGROUP=.IARECTANGLES(M.I).NGROUP
LNSTR = MAX(LNSTR, .IASHAPES(J).NSTRETCH)
ENDIF
ENDFOR
.IARECTANGLES[M.I].LNHEIGHT = .IARECTANGLES(M.I).LNHEIGHT+LNSTR
ENDIF
ENDIF
ENDIF
IF .IARECTANGLES(M.I).LLBOTTOM
WITH .IARECTANGLES(M.I)
.LNTOP = .LNTOP+LNSHIFT
ENDWITH
ENDIF
ENDFOR
FOR M.I = 1 TO .INVERTICALLINES
IF .IAVERTICALLINES(M.I).LNSTRETCH>0
IF .IAVERTICALLINES(M.I).LNSTRETCH=1
WITH .IAVERTICALLINES(M.I)
.LNHEIGHT = .LNHEIGHT+LNSHIFT
ENDWITH
ELSE
IF .IAVERTICALLINES(M.I).NGROUP>0
LNSTR = 0
FOR J = 1 TO .INSHAPES
IF .IASHAPES(J).NGROUP=.IAVERTICALLINES(M.I).NGROUP
LNSTR = MAX(LNSTR, .IASHAPES(J).NSTRETCH)
ENDIF
ENDFOR
.IAVERTICALLINES[M.I].LNHEIGHT = .IAVERTICALLINES(M.I).LNHEIGHT+LNSTR
ENDIF
ENDIF
ENDIF
IF .IAVERTICALLINES(M.I).LLBOTTOM
WITH .IAVERTICALLINES(M.I)
.LNTOP = .LNTOP+LNSHIFT
ENDWITH
ENDIF
ENDFOR
ENDWITH
RETURN LNSHIFT
ENDFUNC
**
FUNCTION removeifblank
LOCAL III, M.I, LNTOP, LNBOTTOM, LLFAIL, LNSHIFT, LNBOTTOM2, LLANYTHINGABOVE
LNSHIFT = 0
WITH THIS
FOR III = 1 TO .INTOREMOVE
LNTOP = .IATOREMOVE(III, 1)
LNBOTTOM = .IATOREMOVE(III, 2)
.IATOREMOVE(III, 3) = .F.
LLFAIL = .F.
FOR M.I = 1 TO .INRECTANGLES
WITH .IARECTANGLES(M.I)
IF .LNLONGLINE=0
IF  .NOT. ((.LNTOP>LNBOTTOM) .OR. (.LNTOP+.LNHEIGHT<LNTOP))
DO CASE
CASE .LNTOP>LNTOP
LNBOTTOM = .LNTOP
CASE .LNTOP+.LNHEIGHT>LNTOP
LNTOP = .LNTOP+.LNHEIGHT
ENDCASE
IF LNTOP>=LNBOTTOM
LLFAIL = .T.
EXIT
ENDIF
ENDIF
ENDIF
ENDWITH
ENDFOR
IF LLFAIL
LOOP
ENDIF
FOR M.I = 1 TO .INHORIZONTALLINES
WITH .IAHORIZONTALLINES(M.I)
IF BETWEEN(.LNTOP, LNTOP+0.04 , LNBOTTOM-0.04 )
LLFAIL = .T.
EXIT
ENDIF
ENDWITH
ENDFOR
IF LLFAIL
LOOP
ENDIF
FOR M.I = 1 TO .INVERTICALLINES
WITH .IAVERTICALLINES(M.I)
IF .LNLONGLINE=0
IF  .NOT. ((.LNTOP>LNBOTTOM) .OR. (.LNTOP+.LNHEIGHT<LNTOP))
DO CASE
CASE .LNTOP>LNTOP
LNBOTTOM = .LNTOP
CASE .LNTOP+.LNHEIGHT>LNTOP
LNTOP = .LNTOP+.LNHEIGHT
ENDCASE
IF LNTOP>=LNBOTTOM
LLFAIL = .T.
EXIT
ENDIF
ENDIF
ENDIF
ENDWITH
ENDFOR
IF LLFAIL
LOOP
ENDIF
FOR M.I = 1 TO .INSHAPES
WITH .IASHAPES(M.I)
IF  .NOT. ((.LNTOP>LNBOTTOM) .OR. (.LNTOP+.LNHEIGHT<LNTOP))
IF  .NOT. (.LLREMOVEIFBLANK .AND. (EMPTY(.LCOUTPUT) .OR. ISNULL(.LCOUTPUT)))
DO CASE
CASE .LNTOP>LNTOP
LNBOTTOM = .LNTOP
CASE .LNTOP+.LNHEIGHT>LNTOP
LNTOP = .LNTOP+.LNHEIGHT
ENDCASE
IF LNTOP>=LNBOTTOM
LLFAIL = .T.
EXIT
ENDIF
ENDIF
ENDIF
ENDWITH
ENDFOR
IF LLFAIL
LOOP
ENDIF
LLANYTHINGABOVE = .F.
LNBOTTOM2 = -1
FOR M.I = 1 TO .INSHAPES
WITH .IASHAPES(M.I)
IF (.LNTOP+.LNHEIGHT<=LNTOP)
LLANYTHINGABOVE = .T.
IF .LNTOP+.LNHEIGHT>LNBOTTOM2
LNBOTTOM2 = .LNTOP+.LNHEIGHT
ENDIF
ELSE
IF .LNTOP<LNTOP
LLANYTHINGABOVE = .T.
LNBOTTOM2 = LNTOP
ENDIF
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INRECTANGLES
WITH .IARECTANGLES(M.I)
IF (.LNTOP+.LNHEIGHT<=LNTOP)
LLANYTHINGABOVE = .T.
IF .LNTOP+.LNHEIGHT>LNBOTTOM2
LNBOTTOM2 = .LNTOP+.LNHEIGHT
ENDIF
ELSE
IF .LNTOP<LNTOP
LLANYTHINGABOVE = .T.
LNBOTTOM2 = LNTOP
ENDIF
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INHORIZONTALLINES
WITH .IAHORIZONTALLINES(M.I)
IF (.LNTOP<=LNTOP)
LLANYTHINGABOVE = .T.
IF .LNTOP>LNBOTTOM2
LNBOTTOM2 = .LNTOP+.NPENSIZE*10000/72
ENDIF
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INVERTICALLINES
WITH .IAVERTICALLINES(M.I)
IF (.LNTOP+.LNHEIGHT<=LNTOP)
LLANYTHINGABOVE = .T.
IF .LNTOP+.LNHEIGHT>LNBOTTOM2
LNBOTTOM2 = .LNTOP+.LNHEIGHT
ENDIF
ELSE
IF .LNTOP<LNTOP
LLANYTHINGABOVE = .T.
LNBOTTOM2 = LNTOP
ENDIF
ENDIF
ENDWITH
ENDFOR
IF LNBOTTOM2>-1
LNTOP = LNBOTTOM2
ELSE
IF  .NOT. LLANYTHINGABOVE
LNTOP = MIN(LNTOP, 189)
ENDIF
ENDIF
.IATOREMOVE(III, 1) = LNTOP
.IATOREMOVE(III, 2) = LNBOTTOM
.IATOREMOVE(III, 3) = .T.
ENDFOR
LOCAL LNSH, LNOUTREM, LLFOUND, LIFOUND
LOCAL LAOUTREM(1, 2)
LNOUTREM = 0
FOR III = 1 TO .INTOREMOVE
IF .IATOREMOVE(III, 3)
LLFOUND = .F.
LIFOUND = 0
FOR M.I = 1 TO LNOUTREM
IF LAOUTREM(M.I, 1)=-1
LOOP
ENDIF
IF  .NOT. ((LAOUTREM(M.I, 1)>.IATOREMOVE(III, 2)) .OR. (LAOUTREM(M.I, 2)<.IATOREMOVE(III, 1)))
LAOUTREM(M.I, 1) = MIN(.IATOREMOVE(III, 1), LAOUTREM(M.I, 1))
LAOUTREM(M.I, 2) = MAX(.IATOREMOVE(III, 2), LAOUTREM(M.I, 2))
IF LIFOUND=0
ELSE
LAOUTREM(M.I, 1) = MIN(LAOUTREM(M.I, 1), LAOUTREM(LIFOUND, 1))
LAOUTREM(M.I, 2) = MAX(LAOUTREM(M.I, 2), LAOUTREM(LIFOUND, 2))
LAOUTREM(LIFOUND, 1) = -1
ENDIF
LIFOUND = M.I
LLFOUND = .T.
ENDIF
ENDFOR
IF  .NOT. LLFOUND
LNOUTREM = LNOUTREM+1
DIMENSION LAOUTREM(LNOUTREM, 2)
LAOUTREM(LNOUTREM, 1) = .IATOREMOVE(III, 1)
LAOUTREM(LNOUTREM, 2) = .IATOREMOVE(III, 2)
ENDIF
ENDIF
ENDFOR
LNSHIFT = 0
ASORT(LAOUTREM, 1)
FOR III = 1 TO LNOUTREM
IF LAOUTREM(III, 1)=-1
LOOP
ENDIF
LNTOP = LAOUTREM(III, 1)
LNBOTTOM = LAOUTREM(III, 2)
LNSH = LNBOTTOM-LNTOP
LNTOP = LNTOP-LNSHIFT
LNSHIFT = LNSHIFT+LNSH
FOR M.I = 1 TO .INRECTANGLES
WITH .IARECTANGLES(M.I)
IF .LNLONGLINE<>2
IF LNTOP<.LNTOP
.LNTOP = .LNTOP-LNSH
ENDIF
ELSE
IF LNTOP<.LNTOP+.LNHEIGHT
.LNHEIGHT = .LNHEIGHT-LNSH
ENDIF
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INHORIZONTALLINES
WITH .IAHORIZONTALLINES(M.I)
IF LNTOP<.LNTOP
.LNTOP = .LNTOP-LNSH
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INVERTICALLINES
WITH .IAVERTICALLINES(M.I)
IF .LNLONGLINE<>2
IF LNTOP<.LNTOP
.LNTOP = .LNTOP-LNSH
ENDIF
ELSE
IF LNTOP<.LNTOP+.LNHEIGHT
.LNHEIGHT = .LNHEIGHT-LNSH
ENDIF
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INSHAPES
WITH .IASHAPES(M.I)
IF LNTOP<.LNTOP
.LNTOP = .LNTOP-LNSH
ENDIF
ENDWITH
ENDFOR
ENDFOR
ENDWITH
RETURN LNSHIFT
ENDFUNC
**
FUNCTION CutTop
LPARAMETERS TOREPORT, TOSECTION, TNREMAIN, III, M.I, LCTEXT, JJ
LOCAL LLFOUND, LNMINTOP, LNCUTSHIFT, LINESCOUNT, AA, BB
LNCUTSHIFT = 0
LNMINTOP = -1
WITH THIS
FOR M.I = 1 TO .INSHAPES
WITH .IASHAPES(M.I)
IF .LNTOP+.LNHEIGHT>TNREMAIN
.LNPRINTSTATUS = 2
LLFOUND = .T.
IF  .NOT. .LSTRETCHED
.LNPRINTSTATUS = 2
ELSE
LINESCOUNT = _X_WW(.LCOUTPUT, .LCFONTFACE, .LNFONTSIZE, IIF(.LLITALICS, 1, 0), IIF(.LLBOLD, 1, 0), .LNWIDTH/10, @__XFRET, IIF(.LCALIGN="right", 1, 0), .NCODEPAGE)
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
III = 0
LCTEXT = ""
LNHEIGHT = 0
DO WHILE .LNTOP+LNHEIGHT<=TNREMAIN .AND. III<LINESCOUNT
LNFROM = TOINT(SUBSTR(__XFRET, (III+1)*12-11+12, 4))
LNTO = TOINT(SUBSTR(__XFRET, (III+1)*12-11+4+12, 4))
LNHEIGHTPOM = BB*III+AA*(III+1)
IF .LNTOP+LNHEIGHTPOM<=TNREMAIN
LNHEIGHT = LNHEIGHTPOM
III = III+1
IF EMPTY(LCTEXT)
LCTEXT = SUBSTR(.LCOUTPUT, LNFROM, LNTO-LNFROM+1)
ELSE
LCTEXT = LCTEXT+CHR(13)+SUBSTR(.LCOUTPUT, LNFROM, LNTO-LNFROM+1)
ENDIF
ELSE
EXIT
ENDIF
ENDDO
IF III>0
IF III<LINESCOUNT
LOCAL LCREST
LCREST = ""
FOR JJ = III+1 TO LINESCOUNT
LNFROM = TOINT(SUBSTR(__XFRET, JJ*12-11+12, 4))
LNTO = TOINT(SUBSTR(__XFRET, JJ*12-11+4+12, 4))
IF LCREST==""
LCREST = SUBSTR(.LCOUTPUT, LNFROM, LNTO-LNFROM+1)
ELSE
LCREST = LCREST+CHR(13)+SUBSTR(.LCOUTPUT, LNFROM, LNTO-LNFROM+1)
ENDIF
ENDFOR
LNNEWHEIGHT = (LINESCOUNT-III)*AA+(LINESCOUNT-III-1)*BB
LNNEWHEIGHT = LNNEWHEIGHT
LNNEWHEIGHT = .LNHEIGHT-LNHEIGHT
TMPSHAPE = THIS.ADDSHAPE(.LNOBJTYPE, .LNLEFT, .LNTOP, LNHEIGHT, .LNWIDTH, LCTEXT, .LCFONTFACE, .LNFONTSIZE, .LCALIGN, .LLITALICS, .LLBOLD, .LLUNDERLINE, .LLSTRETCH, .LLFLOAT, .LLREMOVEIFBLANK, .LNPENRED, .LNPENGREEN, .LNPENBLUE, .LNPENSIZE, .LNPENPAT, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LNFILLPAT, .LNMODE, .LLBOTTOM, .UNIQUEID+CHR(13)+" ")
TMPSHAPE.LSTRETCHED = .T.
TMPSHAPE.NNUMERICVALUE = .NNUMERICVALUE
TMPSHAPE.CXLSFORMAT = .CXLSFORMAT
.LCOUTPUT = LCREST
.LNTOP = .LNTOP+.LNHEIGHT-LNNEWHEIGHT
.LNHEIGHT = LNNEWHEIGHT
LNCUTSHIFT = TNREMAIN-(TMPSHAPE.LNTOP+TMPSHAPE.LNHEIGHT)
ELSE
.LNPRINTSTATUS = 1
ENDIF
ENDIF
ENDIF
IF .LNPRINTSTATUS=2
LNMINTOP = IIF(LNMINTOP<0, .LNTOP, MIN(LNMINTOP, .LNTOP))
ENDIF
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INVERTICALLINES
WITH .IAVERTICALLINES(M.I)
IF .LNTOP+.LNHEIGHT>TNREMAIN
IF .LNTOP>TNREMAIN
.LNPRINTSTATUS = 2
LLFOUND = .T.
LOOP
ENDIF
THIS.ADDVERTICALLINE("", .PENRED, .PENGREEN, .PENBLUE, .LNLEFT, .LNTOP, TNREMAIN-.LNTOP, .LNSTRETCH, .LLBOTTOM, .NPENPAT, .NPENSIZE)
.LNPRINTSTATUS = 2
.LNHEIGHT = .LNHEIGHT-TNREMAIN+.LNTOP+LNCUTSHIFT
.LNTOP = TNREMAIN-LNCUTSHIFT
LLFOUND = .T.
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INHORIZONTALLINES
WITH .IAHORIZONTALLINES(M.I)
IF .LNTOP>TNREMAIN
IF .LNTOP>TNREMAIN
.LNPRINTSTATUS = 2
LLFOUND = .T.
ENDIF
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INRECTANGLES
WITH .IARECTANGLES(M.I)
IF .LNTOP+.LNHEIGHT>TNREMAIN+1000
IF .LNTOP>TNREMAIN
.LNPRINTSTATUS = 2
LLFOUND = .T.
LOOP
ENDIF
THIS.ADDRECTANGLE("", .LNLEFT, .LNTOP, .LNWIDTH, TNREMAIN-.LNTOP, .LNSTRETCH, .LNPENRED, .LNPENGREEN, .LNPENBLUE, .LNPENSIZE, .LNPENPAT, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LNFILLPAT, .LLBOTTOM, .LCPICTUREPATH, .LNOFFSET,  ,  ,  ,  ,  ,  , M.I)
.LNPRINTSTATUS = 2
.LNHEIGHT = .LNHEIGHT-TNREMAIN+.LNTOP+LNCUTSHIFT
.LNTOP = TNREMAIN-LNCUTSHIFT
LLFOUND = .T.
ENDIF
ENDWITH
ENDFOR
ENDWITH
RETURN IIF(LLFOUND, MAX(LNMINTOP, 0), -1)
ENDFUNC
**
PROCEDURE cleanTop
LPARAMETERS TOREPORT, TOSECTION, TNSHIFT
WITH THIS
FOR M.I = 1 TO .INHORIZONTALLINES
WITH .IAHORIZONTALLINES(M.I)
IF .LNPRINTSTATUS=2
.LNPRINTSTATUS = 1
.LNTOP = .LNTOP-TNSHIFT
ELSE
.LNPRINTSTATUS = -1
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INSHAPES
WITH .IASHAPES(M.I)
IF .LNPRINTSTATUS=2
.LNPRINTSTATUS = 1
.LNTOP = .LNTOP-TNSHIFT
ELSE
.LNPRINTSTATUS = -1
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INRECTANGLES
WITH .IARECTANGLES(M.I)
IF .LNPRINTSTATUS=2
.LNPRINTSTATUS = 1
.LNTOP = .LNTOP-TNSHIFT
ELSE
.LNPRINTSTATUS = -1
ENDIF
ENDWITH
ENDFOR
FOR M.I = 1 TO .INVERTICALLINES
WITH .IAVERTICALLINES(M.I)
IF .LNPRINTSTATUS=2
.LNPRINTSTATUS = 1
.LNTOP = .LNTOP-TNSHIFT
ELSE
.LNPRINTSTATUS = -1
ENDIF
ENDWITH
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE drawTextBox
LPARAMETERS TNINDEX, TOREPORT, TOSECTION
LOCAL LLBACKCOLOR, LNROTATIONXOFFSET, LNROTATIONYOFFSET
LOCAL LNLF, LNWWW, AA, BB, CC, LNTOMTOPPOS, LCPREPARED, LINESCOUNT, LNXFROM, LNXTO
LOCAL LNXSHIFT, LNYSHIFT, LCTEXTTORENDER, LCTEXTWITHOUTTABS, LNXSTART, LNXPOS, LNYPOS, LNOCCURS, LNI, LCSPACE
LOCAL LLTABSMODE, LNWIDTHWITHOUTTABS, LNTABPOS, LNPREVTABPOS, LNCURRENTLINEWIDTH
LCSPACE = SPACE(200)
WITH THIS.IASHAPES(TNINDEX)
IF .LNPRINTSTATUS<>1
RETURN
ENDIF
DO CASE
CASE TOREPORT.CTARGET="DOC"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LCTOP = TOREPORT.TOINCH(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN-TOREPORT.LNTOPPAGEMARGIN)
ELSE
LCTOP = TOREPORT.TOINCH(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LCLEFT = TOREPORT.TOINCH(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
LCFONTSIZE = ALLTRIM(STR(.LNFONTSIZE))+"pt"
IF .LNOBJTYPE=8
LCHEIGHT = TOREPORT.TOINCH(.LNHEIGHT-(2500.0/9))
IF TOSECTION.INOBJECTCODE<>7 .AND. TOSECTION.INOBJECTCODE<>6
LCTOP = TOREPORT.TOINCH(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
ELSE
LCHEIGHT = TOREPORT.TOINCH(.LNHEIGHT)
ENDIF
IF .LCALIGN="right"
LCWIDTH = TOREPORT.TOINCH(.LNWIDTH+(8125.0/9))
LCLEFT = TOREPORT.TOINCH(.LNLEFT-(1000^1)+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
ELSE
IF .LCALIGN="center"
LCWIDTH = TOREPORT.TOINCH(.LNWIDTH+(10000.0/9))
LCLEFT = TOREPORT.TOINCH(.LNLEFT-(5000.0/9)+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
ELSE
LCWIDTH = TOREPORT.TOINCH(.LNWIDTH+(10000.0/9))
ENDIF
IF .LNOBJTYPE<>8
LCWIDTH = TOREPORT.TOINCH(.LNWIDTH+(17500.0/9))
ENDIF
ENDIF
LOCAL LCSTROKEDFILLED, LCFONTCOLOR, LCBACKCOLOR
LCSTROKEDFILLED = "stroked='f' filled='f' "
LCFONTCOLOR = HEXRGB(.LNPENRED, .LNPENGREEN, .LNPENBLUE)
IF LCFONTCOLOR="#000000"
LCFONTCOLOR = ""
ENDIF
IF .LNMODE=0
IF .LNFILLRED<>-1
LCBACKCOLOR = HEXRGB(.LNFILLRED, .LNFILLGREEN, .LNFILLBLUE)
ELSE
LCBACKCOLOR = HEXRGB(255, 255, 255)
ENDIF
ELSE
LCBACKCOLOR = ""
ENDIF
IF .LNOBJTYPE<>8
LNPOMWIDTH = .LNWIDTH*3
ELSE
LNPOMWIDTH = .LNWIDTH
ENDIF
IF ISNULL(.LCOUTPUT) .OR. EMPTY(.LCOUTPUT)
LINESCOUNT = 0
ELSE
LINESCOUNT = _X_WW(.LCOUTPUT, .LCFONTFACE, .LNFONTSIZE, IIF(.LLITALICS, 1, 0), IIF(.LLBOLD, 1, 0), LNPOMWIDTH/10, @__XFRET, IIF(.LCALIGN="right", 1, 0), .NCODEPAGE)
ENDIF
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
LCPREPARED = ""
LNCURRENTLINEWIDTH = .LNWIDTH+(8125.0/9)
LOCAL LNCURRENTHEIGHT
IF .LNOBJTYPE<>8
LNCURRENTHEIGHT = .LNHEIGHT*3
ELSE
LNCURRENTHEIGHT = .LNHEIGHT
ENDIF
FOR IIII = 1 TO LINESCOUNT
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
LNCURRENTLINEWIDTH = MAX(LNCURRENTLINEWIDTH, 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4)))
IF IIII>1 .AND. (AA*IIII+(BB)*(IIII-1)>LNCURRENTHEIGHT+M.IIII*90)
EXIT
ENDIF
LCPREPARED = LCPREPARED+SUBSTR(.LCOUTPUT, LNXFROM, LNXTO-LNXFROM+1)+CHR(13)
ENDFOR
LNCURRENTLINEWIDTH = LNCURRENTLINEWIDTH+200
IIII = MAX(IIII-1, 1)
M.LCHEIGHT = TOREPORT.TOINCH(MAX(.LNHEIGHT, AA*IIII+(BB)*(IIII-1)+(1250.0/9)))
TOREPORT.OUTSHAPE(M.LCLEFT, M.LCTOP, M.LCHEIGHT, TOREPORT.TOINCH(LNCURRENTLINEWIDTH), LCPREPARED, .LCFONTFACE, M.LCFONTSIZE, .LCALIGN, .LLITALICS, .LLBOLD, .LLUNDERLINE, LCSTROKEDFILLED, LCFONTCOLOR, LCBACKCOLOR, .LCLINKNAME, .LCLINKHREF, .LSTRIKED)
CASE TOREPORT.CTARGET="PDF"
DO CASE
CASE TOSECTION.INOBJECTCODE=6
LNTOP = TOREPORT.TOPOINT(TOREPORT.LIFOOTERHEIGHT-.LNTOP+TOREPORT.LNTOPPAGEMARGIN)
CASE TOSECTION.INOBJECTCODE=7
LNTOP = TOREPORT.TOPOINT(TOSECTION.INHEIGHT-.LNTOP+TOREPORT.LNTOPPAGEMARGIN)
OTHERWISE
LNTOP = TOREPORT.TOTOPPOINT(.LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN)
ENDCASE
LNLEFT = TOREPORT.TOPOINT(.LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
*B609214,1 MMT 04/21/2010 Fix bug of Wrong alignment of Multiple lines Text[Start]
lnOldLeft = LNLEFT 
*B609214,1 MMT 04/21/2010 Fix bug of Wrong alignment of Multiple lines Text[End]

LNLEFT = LNLEFT+2
LNLEFTO = LNLEFT
LNBOXWIDTH = TOREPORT.TOPOINT(.LNWIDTH)

*B609214,1 MMT 04/21/2010 Fix bug of Wrong alignment of Multiple lines Text[Start]
lnOldBoxW = LNBOXWIDTH 
*B609214,1 MMT 04/21/2010 Fix bug of Wrong alignment of Multiple lines Text[End]


*B608916,1 MMT 07/09/2009 Fix bug of invoice form prints '****' while exporting to PDF[Start]
*LNBOXWIDTH = LNBOXWIDTH-4
IF '**' $ LCTEXT 
  LNBOXWIDTH = LNBOXWIDTH-10
ELSE 
  LNBOXWIDTH = LNBOXWIDTH-4
ENDIF   
*B608916,1 MMT 07/09/2009 Fix bug of invoice form prints '****' while exporting to PDF[End]

LNHEIGHT = TOREPORT.TOPOINT(.LNHEIGHT)
IF  .NOT. EMPTY(.LCLINKNAME)
TOREPORT.ODOCUMENT.REGISTERDEST(.LCLINKNAME, LNLEFT, LNTOP, LNBOXWIDTH, LNHEIGHT)
ENDIF
IF  .NOT. EMPTY(.LCLINKHREF)
TOREPORT.ODOCUMENT.REGISTERANNOT(.LCLINKHREF, LNLEFT, LNTOP, LNBOXWIDTH, LNHEIGHT)
ENDIF
IF  .NOT. EMPTY(.LCOUTLINE)
TOREPORT.ODOCUMENT.ADDOUTLINE(.LCOUTLINE, LNLEFT, LNTOP+LNHEIGHT, .NOUTLINESTYLE)
ENDIF
LCFONT = "F"+ALLTRIM(STR(TOREPORT.ODOCUMENT.GETFONTREFERENCE(.LCFONTFACE, .LLBOLD, .LLITALICS)))
LLBACKCOLOR = .F.
IF .LNMODE=0
LLBACKCOLOR = .T.
ENDIF
IF  .NOT. (LLBACKCOLOR .OR. .NROTATE>0 .OR. .LLUNDERLINE .OR. .LSTRIKED)
TOREPORT.ODOCUMENT.STARTTEXT()
TOREPORT.ODOCUMENT.SETFONT(LCFONT, .LNFONTSIZE)
TOREPORT.ODOCUMENT.SETCOLOR("n", .LNPENRED, .LNPENGREEN, .LNPENBLUE)
ENDIF
LOCAL LOLINES, LNPOMWIDTH
IF .LNOBJTYPE<>8
LNPOMWIDTH = .LNWIDTH*3
ELSE
LNPOMWIDTH = .LNWIDTH
ENDIF
IF ISNULL(.LCOUTPUT) .OR. EMPTY(.LCOUTPUT)
LINESCOUNT = 0
ELSE
LINESCOUNT = _X_WW(.LCOUTPUT, .LCFONTFACE, .LNFONTSIZE, IIF(.LLITALICS, 1, 0), IIF(.LLBOLD, 1, 0), LNPOMWIDTH/10, @__XFRET, IIF(.LCALIGN="right", 1, 0), .NCODEPAGE)
ENDIF
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
LOCAL _XFRXTABWIDTH, LNCURRENTHEIGHT
IF .LNOBJTYPE<>8
LNCURRENTHEIGHT = .LNHEIGHT*3
ELSE
LNCURRENTHEIGHT = .LNHEIGHT
ENDIF
LNPREVIOUSCP = TOREPORT.ODOCUMENT.NCODEPAGE
IF .NCODEPAGE<>0
TOREPORT.ODOCUMENT.NCODEPAGE = .NCODEPAGE
ENDIF
LOCAL LNWIDTHTOMELT, LLRUNNINGLASTLINE
FOR IIII = 1 TO LINESCOUNT
IF IIII>1 .AND. (AA*IIII+(BB)*(IIII-1)>LNCURRENTHEIGHT+M.IIII*90)
EXIT
ENDIF
LLRUNNINGLASTLINE = (IIII==LINESCOUNT) .OR. (AA*(IIII+1)+(BB)*(IIII)>LNCURRENTHEIGHT+M.IIII*90)
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
LNPOMWIDTH = 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4))
IF  .NOT. LLRUNNINGLASTLINE
IF 13=ASC(SUBSTR(.LCOUTPUT, LNXTO+1, 1))
LLRUNNINGLASTLINE = .T.
ENDIF
ENDIF
LNLF = LNLEFT
LNPOMWIDTH = TOREPORT.TOPOINT(LNPOMWIDTH)
LNROTATIONXOFFSET = 0
LNROTATIONYOFFSET = 0
IF .NROTATE>0
DO CASE
CASE .NROTATIONPOINT=1
LNROTATIONXOFFSET = LNBOXWIDTH/2
LNROTATIONYOFFSET = 0
CASE .NROTATIONPOINT=2
LNROTATIONXOFFSET = LNBOXWIDTH
LNROTATIONYOFFSET = 0
CASE .NROTATIONPOINT=3
LNROTATIONXOFFSET = 0
LNROTATIONYOFFSET = -TOREPORT.TOPOINT(.LNHEIGHT/2)
CASE .NROTATIONPOINT=4
LNROTATIONXOFFSET = LNBOXWIDTH/2
LNROTATIONYOFFSET = -TOREPORT.TOPOINT(.LNHEIGHT/2)
CASE .NROTATIONPOINT=5
LNROTATIONXOFFSET = LNBOXWIDTH
LNROTATIONYOFFSET = -TOREPORT.TOPOINT(.LNHEIGHT/2)
CASE .NROTATIONPOINT=6
LNROTATIONXOFFSET = 0
LNROTATIONYOFFSET = -TOREPORT.TOPOINT(.LNHEIGHT)
CASE .NROTATIONPOINT=7
LNROTATIONXOFFSET = LNBOXWIDTH/2
LNROTATIONYOFFSET = -TOREPORT.TOPOINT(.LNHEIGHT)
CASE .NROTATIONPOINT=8
LNROTATIONXOFFSET = LNBOXWIDTH
LNROTATIONYOFFSET = -TOREPORT.TOPOINT(.LNHEIGHT)
OTHERWISE
LNROTATIONXOFFSET = 0
LNROTATIONYOFFSET = 0
ENDCASE
ENDIF
LNWIDTHTOMELT = 0

*B608916,2 MMT 07/09/2009 Fix bug of invoice form Total charges are shifted left[Start]
IF '**' $ lcText
  LNLEFT = LNLEFT + 10
ENDIF 
IF LEN(LCTEXT) = 1
  LNLEFT = LNLEFT - 7
  LNBOXWIDTH = LNBOXWIDTH + 7
ENDIF 
*B608916,2 MMT 07/09/2009 Fix bug of invoice form Total charges are shifted left[End]
*B609214,1 MMT 04/21/2010 Fix bug of Wrong alignment of Multiple lines Text[Start]
IF .LCALIGN <> "right"
  LNBOXWIDTH  = lnOldBoxW 
  LNLEFT = lnOldLeft  
ENDIF
*B609214,1 MMT 04/21/2010 Fix bug of Wrong alignment of Multiple lines Text[End]


DO CASE
CASE .LCALIGN="right"
LNLF = LNLEFT+LNBOXWIDTH-LNPOMWIDTH
CASE .LCALIGN="center"
LNLF = LNLEFT+(LNBOXWIDTH-LNPOMWIDTH)/2
CASE .LCALIGN="block"
LNWIDTHTOMELT = LNBOXWIDTH-LNPOMWIDTH
ENDCASE


*B608916,2 MMT 07/09/2009 Fix bug of invoice form Total charges are shifted left[Start]
IF LEN(LCTEXT) = 1
  LNLEFT = LNLEFT + 7
  LNBOXWIDTH = LNBOXWIDTH - 7
ENDIF 
*B608916,2 MMT 07/09/2009 Fix bug of invoice form Total charges are shifted left[End]



IF LLRUNNINGLASTLINE
LNWIDTHTOMELT = 0
ENDIF
LNTOMTOPPOS = LNTOP-TOREPORT.TOPOINT((CC)+(AA+BB)*(IIII-1))
IF LLBACKCOLOR
IF  .NOT. TOREPORT.DYNAMICLINEHEIGHT
TOREPORT.ODOCUMENT.ADDBOX(LNLF-2, LNTOMTOPPOS-(TOREPORT.TOPOINT(AA-CC))-1, LNPOMWIDTH+4, -TOREPORT.TOPOINT(AA+BB)-1, 1, 1, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, 0,  ,  ,  )
ELSE
TOREPORT.ODOCUMENT.ADDBOX(LNLEFT-2, LNTOMTOPPOS-(TOREPORT.TOPOINT(AA-CC))-1, LNBOXWIDTH+4, -TOREPORT.TOPOINT(AA+BB)-1, 1, 1, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, 0,  ,  ,  )
ENDIF
ENDIF
IF LLBACKCOLOR .OR. .NROTATE>0 .OR. .LLUNDERLINE .OR. .LSTRIKED
TOREPORT.ODOCUMENT.ADDCONTENT(" q ")
TOREPORT.ODOCUMENT.STARTTEXT()
TOREPORT.ODOCUMENT.SETCOLOR("n", .LNPENRED, .LNPENGREEN, .LNPENBLUE)
TOREPORT.ODOCUMENT.SETFONT(LCFONT, .LNFONTSIZE)
ENDIF
IF .NROTATE>0
TOREPORT.ODOCUMENT.TRANSLATE(LNLEFT+LNROTATIONXOFFSET, LNTOP+LNROTATIONYOFFSET)
TOREPORT.ODOCUMENT.SETPOS(LNLF-(LNLEFT+LNROTATIONXOFFSET), LNTOMTOPPOS-(LNTOP+LNROTATIONYOFFSET))
LNXPOS = LNLF-LNLEFT
LNYPOS = 0
ELSE
TOREPORT.ODOCUMENT.SETPOS(LNLF, LNTOMTOPPOS)
LNXPOS = LNLF
LNYPOS = LNTOMTOPPOS
ENDIF
LCTEXTTORENDER = SUBSTR(.LCOUTPUT, LNXFROM, LNXTO-LNXFROM+1)
LLTABSMODE = .F.
IF CHR(9)$LCTEXTTORENDER
LLTABSMODE = .T.
LCTEXTTORENDER = CHR(9)+LCTEXTTORENDER+CHR(9)
LNOCCURS = OCCURS(CHR(9), LCTEXTTORENDER)
LNXSTART = LNXPOS
= _X_WW("___", .LCFONTFACE, .LNFONTSIZE, IIF(.LLITALICS, 1, 0), IIF(.LLBOLD, 1, 0), 1000000, @__XFRET, IIF(.LCALIGN="right", 1, 0))
_XFRXTABWIDTH = TOREPORT.TOPOINT(10*TOINT(SUBSTR(__XFRET, 0000021, 4)))+1
FOR LNI = 1 TO LNOCCURS-1
TOREPORT.ODOCUMENT.SETPOS(LNXPOS, LNYPOS)
LNTABPOS = AT(CHR(9), LCTEXTTORENDER, LNI)
LCTEXTWITHOUTTABS = SUBSTR(LCTEXTTORENDER, LNTABPOS+1, AT(CHR(9), LCTEXTTORENDER, LNI+1)-LNTABPOS-1)
IF LEN(LCTEXTWITHOUTTABS)>0
TOREPORT.ODOCUMENT.OUTTEXT(LCTEXTWITHOUTTABS, IIF(LNI<>1, 0, .NROTATE))
= _X_WW(LCTEXTWITHOUTTABS, .LCFONTFACE, .LNFONTSIZE, IIF(.LLITALICS, 1, 0), IIF(.LLBOLD, 1, 0), 1000000, @__XFRET, IIF(.LCALIGN="right", 1, 0), .NCODEPAGE)
LNWIDTHWITHOUTTABS = TOREPORT.TOPOINT(10*TOINT(SUBSTR(__XFRET, 0000021, 4)))
ELSE
LNWIDTHWITHOUTTABS = 0
ENDIF
TOREPORT.ODOCUMENT.ENDTEXT()
IF (.LLUNDERLINE .OR. .LSTRIKED) .AND.  .NOT. EMPTY(STRTRAN(STRTRAN(LCTEXTWITHOUTTABS, CHR(9)), " "))
IF .LLUNDERLINE
TOREPORT.ODOCUMENT.ADDLINE(LNXPOS+TOPOINT(AA/30), LNYPOS-TOPOINT(AA/10), LNXPOS+LNWIDTHWITHOUTTABS+TOPOINT(AA/30), LNYPOS-TOPOINT(AA/10), TOPOINT(AA/10)*0.7 , 0, .LNPENRED, .LNPENGREEN, .LNPENBLUE)
ENDIF
IF .LSTRIKED
TOREPORT.ODOCUMENT.ADDLINE(LNXPOS+TOPOINT(AA/30), LNYPOS-TOPOINT(AA/10)+TOREPORT.TOPOINT(AA*0.3 ), LNXPOS+LNWIDTHWITHOUTTABS+TOPOINT(AA/30), LNYPOS-TOPOINT(AA/10)+TOREPORT.TOPOINT(AA*0.3 ), TOPOINT(AA/10)*0.7 , 0, .LNPENRED, .LNPENGREEN, .LNPENBLUE)
ENDIF
ENDIF
LNXPOS = LNXPOS+LNWIDTHWITHOUTTABS
IF LNWIDTHWITHOUTTABS=0 .OR. MOD(LNXPOS-LNXSTART, _XFRXTABWIDTH)<>0
LNXPOS = LNXPOS+_XFRXTABWIDTH-MOD(LNXPOS-LNXSTART, _XFRXTABWIDTH)
ENDIF
TOREPORT.ODOCUMENT.STARTTEXT()
ENDFOR
ELSE
TOREPORT.ODOCUMENT.OUTTEXT(LCTEXTTORENDER, .NROTATE, LNWIDTHTOMELT)
ENDIF
IF LLBACKCOLOR .OR. .NROTATE>0 .OR. .LLUNDERLINE .OR. .LSTRIKED
TOREPORT.ODOCUMENT.ENDTEXT()
IF  .NOT. LLTABSMODE .AND. (.LLUNDERLINE .OR. .LSTRIKED)
IF .NROTATE>0
IF .LLUNDERLINE
TOREPORT.ODOCUMENT.ADDLINE(LNLF-(LNLEFT+LNROTATIONXOFFSET)+TOPOINT(AA/30), (LNTOMTOPPOS-(LNTOP+LNROTATIONYOFFSET))-TOPOINT(AA/10), LNLF-(LNLEFT+LNROTATIONXOFFSET)+LNPOMWIDTH+TOPOINT(AA/30), (LNTOMTOPPOS-(LNTOP+LNROTATIONYOFFSET))-TOPOINT(AA/10), TOPOINT(AA/10)*0.7 , 0, .LNPENRED, .LNPENGREEN, .LNPENBLUE)
ENDIF
IF .LSTRIKED
TOREPORT.ODOCUMENT.ADDLINE(LNLF-(LNLEFT+LNROTATIONXOFFSET)+TOPOINT(AA/30), (LNTOMTOPPOS-(LNTOP+LNROTATIONYOFFSET))-TOPOINT(AA/10)+TOREPORT.TOPOINT(AA*0.3 ), LNLF-(LNLEFT+LNROTATIONXOFFSET)+LNPOMWIDTH+TOPOINT(AA/30), (LNTOMTOPPOS-(LNTOP+LNROTATIONYOFFSET))-TOPOINT(AA/10)+TOREPORT.TOPOINT(AA*0.3 ), TOPOINT(AA/10)*0.7 , 0, .LNPENRED, .LNPENGREEN, .LNPENBLUE)
ENDIF
ELSE
IF .LLUNDERLINE
TOREPORT.ODOCUMENT.ADDLINE(LNLF+TOPOINT(AA/30), LNTOMTOPPOS-TOPOINT(AA/10), LNLF+LNPOMWIDTH+TOPOINT(AA/30), LNTOMTOPPOS-TOPOINT(AA/10), TOPOINT(AA/10)*0.7 , 0, .LNPENRED, .LNPENGREEN, .LNPENBLUE)
ENDIF
IF .LSTRIKED
TOREPORT.ODOCUMENT.ADDLINE(LNLF+TOPOINT(AA/30), LNTOMTOPPOS-TOPOINT(AA/10)+TOREPORT.TOPOINT(AA*0.3 ), LNLF+LNPOMWIDTH+TOPOINT(AA/30), LNTOMTOPPOS-TOPOINT(AA/10)+TOREPORT.TOPOINT(AA*0.3 ), TOPOINT(AA/10)*0.7 , 0, .LNPENRED, .LNPENGREEN, .LNPENBLUE)
ENDIF
ENDIF
ENDIF
TOREPORT.ODOCUMENT.ADDCONTENT(" Q ")
ENDIF
ENDFOR
IF  .NOT. (LLBACKCOLOR .OR. .NROTATE>0 .OR. .LLUNDERLINE .OR. .LSTRIKED)
TOREPORT.ODOCUMENT.ENDTEXT()
ENDIF
TOREPORT.ODOCUMENT.NCODEPAGE = LNPREVIOUSCP
CASE TOREPORT.CTARGET="HTML"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.TOPIXEL(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN-TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNTOP = TOREPORT.TOPIXEL(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNLEFT = TOREPORT.TOPIXEL(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
LCFONTSIZE = ALLTRIM(STR(.LNFONTSIZE))+"pt"
IF .LNOBJTYPE=8
IF TOSECTION.INOBJECTCODE<>7 .AND. TOSECTION.INOBJECTCODE<>6
LNTOP = TOREPORT.TOPIXEL(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
ENDIF
LNALIGN = 0
IF .LCALIGN="right"
LNALIGN = 1
LNWIDTH = .LNWIDTH
LNLEFT = TOREPORT.TOPIXEL(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
ELSE
IF .LCALIGN="center"
LNALIGN = 2
LNWIDTH = .LNWIDTH
LNLEFT = TOREPORT.TOPIXEL(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
ELSE
LNWIDTH = .LNWIDTH
ENDIF
IF .LNOBJTYPE<>8
LNWIDTH = .LNWIDTH+(6875.0/6)
ENDIF
ENDIF
LNWIDTH = TOREPORT.TOPIXEL(LNWIDTH)
IF .LNOBJTYPE<>8
LNPOMWIDTH = .LNWIDTH+(4375.0/3)
ELSE
LNPOMWIDTH = .LNWIDTH
ENDIF
IF ISNULL(.LCOUTPUT) .OR. EMPTY(.LCOUTPUT)
LINESCOUNT = 0
ELSE
LINESCOUNT = _X_WW(.LCOUTPUT, .LCFONTFACE, .LNFONTSIZE, IIF(.LLITALICS, 1, 0), IIF(.LLBOLD, 1, 0), LNPOMWIDTH/10, @__XFRET, IIF(.LCALIGN="right", 1, 0), .NCODEPAGE)
ENDIF
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
LCPREPARED = ""
TOREPORT.ODOCUMENT.SETFONT(.LCFONTFACE, .LNFONTSIZE, .LLBOLD, .LLITALICS)
LOCAL LNCURRENTHEIGHT
IF .LNOBJTYPE<>8
LNCURRENTHEIGHT = .LNHEIGHT*3
ELSE
LNCURRENTHEIGHT = .LNHEIGHT
ENDIF
IF .LNHEIGHT<AA
LNHEIGHT = AA
ELSE
LNHEIGHT = .LNHEIGHT
ENDIF
LNHEIGHT = TOREPORT.TOPIXEL(LNHEIGHT)
FOR IIII = 1 TO LINESCOUNT
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
IF IIII>1 .AND. (AA*IIII+(BB)*(IIII-1)>LNCURRENTHEIGHT+M.IIII*90)
EXIT
ENDIF
LNPOMWIDTH = 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4))
LNLF = LNLEFT
LNPOMWIDTH = TOREPORT.TOPIXEL(LNPOMWIDTH)
DO CASE
CASE .LCALIGN="right"
LNLF = LNLEFT+LNWIDTH-LNPOMWIDTH
CASE .LCALIGN="center"
LNLF = LNLEFT+(LNWIDTH-LNPOMWIDTH)/2
ENDCASE
LNTOMTOPPOS = LNTOP+TOREPORT.TOPIXEL((AA+BB)*(IIII-1))
IF  .NOT. EMPTY(.LCLINKNAME+.LCLINKHREF)
ENDIF
IF IIII>1
.LCOUTLINE = ''
ENDIF
TOREPORT.ODOCUMENT.ADDTEXTBOX(SUBSTR(.LCOUTPUT, LNXFROM, LNXTO-LNXFROM+1), LNLEFT, LNTOMTOPPOS, LNWIDTH, LNHEIGHT, LNALIGN, .LNMODE, .LNPENRED, .LNPENGREEN, .LNPENBLUE, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LCLINKNAME, .LCLINKHREF, .LLUNDERLINE, .LCOUTLINE, .NOUTLINESTYLE, .CTOOLTIP, .LSTRIKED)
ENDFOR
IF LINESCOUNT=0 .AND.  .NOT. EMPTY(.LCLINKNAME+.LCLINKHREF+.LCOUTLINE)
TOREPORT.ODOCUMENT.ADDTEXTBOX("   ", LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, LNALIGN, .LNMODE, .LNPENRED, .LNPENGREEN, .LNPENBLUE, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LCLINKNAME, .LCLINKHREF, .LLUNDERLINE, .LCOUTLINE, .NOUTLINESTYLE, .CTOOLTIP, .LSTRIKED)
ENDIF
OTHERWISE
IF TOREPORT.XFRXSESSION.VFP8MODE .AND. INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = .LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN
ENDIF
LOCAL LNCURRENTHEIGHT
IF .LNOBJTYPE<>8
IF ISNULL(.LCOUTPUT) .OR. EMPTY(.LCOUTPUT)
LNCURRENTHEIGHT = .LNHEIGHT
ELSE
LNPOMWIDTH = .LNWIDTH*3
LINESCOUNT = _X_WW(.LCOUTPUT, .LCFONTFACE, .LNFONTSIZE, IIF(.LLITALICS, 1, 0), IIF(.LLBOLD, 1, 0), LNPOMWIDTH/10, @__XFRET, IIF(.LCALIGN="right", 1, 0), .NCODEPAGE)
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
LNCURRENTHEIGHT = AA*LINESCOUNT+(BB)*(LINESCOUNT-1)
ENDIF
ELSE
LNCURRENTHEIGHT = .LNHEIGHT
ENDIF
TOREPORT.ODOCUMENTWRITER.SENDTEXTBOXPARAMETERS(.NNUMERICVALUE, .CXLSFORMAT, .LABSOLUTE,  , .NROTATE, .NROTATIONPOINT, .LSTRIKED, .NCODEPAGE)
TOREPORT.ODOCUMENTWRITER.ADDTEXTBOX(.LCOUTPUT, .LCFONTFACE, .LNFONTSIZE, .LLBOLD, .LLITALICS, .LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)), LNTOP, .LNWIDTH, M.LNCURRENTHEIGHT, IIF(.LNOBJTYPE<>8, "L", "T"), .LNPENRED, .LNPENGREEN, .LNPENBLUE, .LNMODE, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LCALIGN, .LLUNDERLINE, .UNIQUEID, .LCLINKNAME, .LCLINKHREF, .LCOUTLINE, .NOUTLINESTYLE, .CTOOLTIP, .CNAME)
ENDCASE
ENDWITH
ENDPROC
**
PROCEDURE drawRectangle
LPARAMETERS TNINDEX, TOREPORT, TOSECTION
LOCAL LCTOP, LCTO, LCLEFT, LNWIDTH, LNSEL, LNSECTIONHEIGHT, LNHEIGHT, LCSTR, LCEXT, LNSIZESHIFT, LOALIAS
WITH THIS.IARECTANGLES(TNINDEX)
IF .LNPRINTSTATUS<>1
RETURN
ENDIF
IF .LNLONGLINE=1
TOREPORT.REGISTERVERTICALCOMPONENT(.LNTOP, .LNUNIQUEID)
RETURN
ENDIF
IF .LNLONGLINE=2
TOREPORT.ADJUSTVERTICALCOMPONENT(THIS.IARECTANGLES(TNINDEX), TOSECTION)
ENDIF
IF  .NOT. EMPTY(.LCPICTUREPATH) .AND. TOREPORT.XFRXSESSION.LSUPPRESSPICTURES
RETURN
ENDIF
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
IF .LLABSTOP
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT-TOREPORT.LNTOPPAGEMARGIN+.LNTOP-TOREPORT.LNTOPMARGIN
ELSE
LCTOP = TOREPORT.TOINCH(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT-TOREPORT.LNTOPPAGEMARGIN+.LNTOP-TOREPORT.LNTOPMARGIN)
ENDIF
ELSE
IF .LLABSTOP
LNTOP = .LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN
ELSE
LCTOP = TOREPORT.TOINCH(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
ENDIF
LCLEFT = TOREPORT.TOINCH(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
IF .LLABSTOP
LCHEIGHT = TOREPORT.TOINCH(.LNHEIGHT-(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)+LNTOP)
LCTOP = TOREPORT.TOINCH(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LCHEIGHT = TOREPORT.TOINCH(.LNHEIGHT)
ENDIF
LCWIDTH = TOREPORT.TOINCH(.LNWIDTH)
IF EMPTY(.LCPICTUREPATH)
DO CASE
CASE TOREPORT.CTARGET="DOC"
DO CASE
CASE .LNOFFSET=99
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:oval ID="_x0_1" '
TOREPORT.ADDTOLOG("rectangle: oval")
CASE .LNOFFSET=0
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:rect ID="_x0_1" '
TOREPORT.ADDTOLOG("rectangle: no offset")
OTHERWISE
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:roundrect ID="_x0_1" '
LCSTR = 'arcsize="'+ALLTRIM(STR(.LNOFFSET/(MIN(.LNWIDTH, .LNHEIGHT)/54), 5, 2))+'pt" '
LCSTR = STRTRAN(LCSTR, SET("Point"), ".")
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+LCSTR
ENDCASE
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+" STYLE='position:absolute; "
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'margin-left:'+LCLEFT+';margin-top:'+M.LCTOP
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+';width:'+M.LCWIDTH+';height:'+M.LCHEIGHT
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+"' "
IF .LNFILLPAT=0
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+"filled='f' "
ELSE
IF .LNFILLRED=-1
.LNFILLRED = 255
.LNFILLGREEN = 255
.LNFILLBLUE = 255
ENDIF
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+"fillcolor="+HEXRGB(.LNFILLRED, .LNFILLGREEN, .LNFILLBLUE)+" "
ENDIF
IF .LNPENPAT=0
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+"stroked='f' "
ELSE
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+"strokecolor="+HEXRGB(.LNPENRED, .LNPENGREEN, .LNPENBLUE)+" "
ENDIF
IF .LNPENSIZE<>1
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'strokeweight="'+ALLTRIM(STR(.LNPENSIZE))+'pt" '
ENDIF
DO CASE
CASE .LNPENPAT=1
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="2 2"/>'
CASE .LNPENPAT=2
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longdash"/>'
CASE .LNPENPAT=3
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longdashdot"/>'
CASE .LNPENPAT=4
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longDashDotDot"/>'
ENDCASE
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'</v:roundrect>'
DO CASE
CASE .LNOFFSET=99
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'</v:oval>'
CASE .LNOFFSET=0
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'</v:rect>'
OTHERWISE
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'</v:roundrect>'
ENDCASE
CASE TOREPORT.CTARGET="PDF"
DO CASE
CASE TOSECTION.INOBJECTCODE=7
LNTOP = TOREPORT.TOPOINT(TOSECTION.INHEIGHT-.LNTOP+TOREPORT.LNTOPPAGEMARGIN)
CASE TOSECTION.INOBJECTCODE=6
LNTOP = TOREPORT.TOPOINT(TOREPORT.LIFOOTERHEIGHT-.LNTOP+TOREPORT.LNTOPPAGEMARGIN)
OTHERWISE
LNTOP = TOREPORT.TOTOPPOINT(.LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN)
ENDCASE
LNLEFT = TOREPORT.TOPOINT(.LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
LNHEIGHT = TOREPORT.TOPOINT(.LNHEIGHT)
IF .LLABSTOP
LNTOP2 = TOREPORT.TOTOPPOINT(.LNTOPABS+TOREPORT.LNTOPPAGEMARGIN)
LNHEIGHT = LNHEIGHT+LNTOP2-LNTOP
LNTOP = LNTOP2
ENDIF
LNHEIGHT = LNHEIGHT+TOREPORT.TOPOINT((83.3333333333333^1))
LNWIDTH = TOREPORT.TOPOINT(.LNWIDTH+(250.0/3))
LNSIZESHIFT = MAX(0, (.LNPENSIZE*0.72 )/2)
TOREPORT.ODOCUMENT.ADDBOX(LNLEFT+LNSIZESHIFT, LNTOP-LNSIZESHIFT, LNWIDTH-LNSIZESHIFT*2, LNHEIGHT-LNSIZESHIFT*2, .LNPENSIZE, .LNFILLPAT, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LNPENPAT, .LNPENRED, .LNPENGREEN, .LNPENBLUE, .LNOFFSET)
CASE TOREPORT.CTARGET="HTML"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
IF .LLABSTOP
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT-TOREPORT.LNTOPPAGEMARGIN+.LNTOP-TOREPORT.LNTOPMARGIN
ELSE
LNTOP = TOREPORT.TOPIXEL(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT-TOREPORT.LNTOPPAGEMARGIN+.LNTOP-TOREPORT.LNTOPMARGIN)
ENDIF
ELSE
IF .LLABSTOP
LNTOP = .LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = TOREPORT.TOPIXEL(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
ENDIF
LNLEFT = TOREPORT.TOPIXEL(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
IF .LLABSTOP
LNHEIGHT = TOREPORT.TOPIXEL(.LNHEIGHT-(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)+LNTOP)
LNTOP = TOREPORT.TOPIXEL(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNHEIGHT = TOREPORT.TOPIXEL(.LNHEIGHT)
ENDIF
LNWIDTH = TOREPORT.TOPIXEL(.LNWIDTH)
LNWIDTH = LNWIDTH+TOREPORT.TOPIXEL((104.166666666667^1))
LNHEIGHT = LNHEIGHT+TOREPORT.TOPIXEL((104.166666666667^1))
TOREPORT.ODOCUMENT.ADDBOX(LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, .LNPENSIZE, .LNFILLPAT, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LNPENPAT, .LNPENRED, .LNPENGREEN, .LNPENBLUE)
OTHERWISE
IF TOREPORT.XFRXSESSION.VFP8MODE .AND. INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = .LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN
ENDIF
LNLEFT = .LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING))
IF .LLABSTOP
LNHEIGHT = .LNHEIGHT-(.LNTOPABS+TOREPORT.LNTOPPAGEMARGIN)+LNTOP
LNTOP = .LNTOPABS+TOREPORT.LNTOPPAGEMARGIN
ELSE
LNHEIGHT = .LNHEIGHT
ENDIF
IF EMPTY(.CSCRIPT) .AND. EMPTY(.CSCRIPTNAME)
TOREPORT.ODOCUMENTWRITER.ADDRECTANGLE(LNLEFT, LNTOP, .LNWIDTH, LNHEIGHT, .LNPENSIZE, .LNFILLPAT, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LNPENPAT, .LNPENRED, .LNPENGREEN, .LNPENBLUE, .LNOFFSET, .CNAME)
ELSE
LLSELECTCHANGED = .F.
LOALIAS = CREATEOBJECT("cusSelect")
IF TOREPORT.NPROCESSINGALIAS>0
SELECT (TOREPORT.NPROCESSINGALIAS)
ENDIF
TOREPORT.ODOCUMENTWRITER.EXECUTESCRIPT(LNLEFT, LNTOP, .LNWIDTH, LNHEIGHT, .CSCRIPT, .LCONVERTSCRIPTTOPICTURE, .NDPIFACTOR, .CSCRIPTNAME, .CPICTURETYPE, .CPARAMETERS)
RELEASE LOALIAS
ENDIF
ENDCASE
ELSE
DO CASE
CASE TOREPORT.CTARGET="DOC"
DO CASE
CASE LEFT(.LCPICTUREPATH, 1)="f"
LNSEL = SELECT(0)
SELECT (TOREPORT.NPROCESSINGALIAS)
FPATH = TOREPORT.OFILES.ADDGENFILE(SET("Datasession"), SUBSTR(.LCPICTUREPATH, 2))
SELECT (LNSEL)
CASE LEFT(.LCPICTUREPATH, 1)="p"
FPATH = TOREPORT.OFILES.ADDFILE(SUBSTR(.LCPICTUREPATH, 2))
ENDCASE
IF .NADJTYPE=1
LOCAL CWIDTH, CHEIGHT, LF1, LF2, NBWIDTH, NBHEIGHT
CWIDTH = SPACE(2)
CHEIGHT = SPACE(2)
IF 0<=DOPIC(ADDBS(TOREPORT.OFILES.LCFILEDIR)+JUSTFNAME(FPATH), "", 0, @CWIDTH, @CHEIGHT, 0, 0, "")
NBWIDTH = STR2WORD(M.CWIDTH)
NBHEIGHT = STR2WORD(M.CHEIGHT)
LF1 = .LNWIDTH/M.NBWIDTH
LF2 = .LNHEIGHT/M.NBHEIGHT
LF1 = MIN(M.LF1, M.LF2)
LCWIDTH = TOREPORT.TOINCH(M.NBWIDTH*LF1)
LCHEIGHT = TOREPORT.TOINCH(M.NBHEIGHT*LF1)
ENDIF
ENDIF
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:shapetype id="_x0000_t75" coordsize="21600,21600"'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' stroked="f">'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' <v:stroke joinstyle="miter"/>'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' <v:formulas>'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'  <v:f eqn=""/>'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' </v:formulas>'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' <o:lock v:ext="edit" aspectratio="t"/>'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'</v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t75"'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+" STYLE='position:absolute; "
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'margin-left:'+LCLEFT+';margin-top:'+M.LCTOP
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+';width:'+M.LCWIDTH+';height:'+M.LCHEIGHT
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+"'>"
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' <v:imagedata src="'+FPATH+'" o:title="untitled"/>'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+' <w:wrap anchory="page"/>'
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'</v:shape>'
CASE TOREPORT.CTARGET="PDF"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.TOPOINT(LNSECTIONHEIGHT-.LNTOP+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNTOP = TOREPORT.TOTOPPOINT(.LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNLEFT = TOREPORT.TOPOINT(.LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
LNHEIGHT = TOREPORT.TOPOINT(.LNHEIGHT)
LNWIDTH = TOREPORT.TOPOINT(.LNWIDTH)
DO CASE
CASE LEFT(.LCPICTUREPATH, 1)="f"
LNSEL = SELECT(0)
SELECT (TOREPORT.NPROCESSINGALIAS)
TOREPORT.ODOCUMENT.ADDGENPICTURE(SET("Datasession"), SUBSTR(.LCPICTUREPATH, 2), LNLEFT, LNTOP, LNHEIGHT, LNWIDTH, .NADJTYPE, .LCMYK, .LNEG, .CMASK, TOREPORT.LCREPORTDIRECTORY, .NROTATE)
SELECT (LNSEL)
CASE LEFT(.LCPICTUREPATH, 1)="p"
TOREPORT.ODOCUMENT.ADDPICTURE(SUBSTR(.LCPICTUREPATH, 2), LNLEFT, LNTOP, LNHEIGHT, LNWIDTH, .NADJTYPE, .LCMYK, .LNEG, .CMASK, TOREPORT.LCREPORTDIRECTORY, .NROTATE)
ENDCASE
CASE TOREPORT.CTARGET="HTML"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
IF .LLABSTOP
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT-TOREPORT.LNTOPPAGEMARGIN+.LNTOP-TOREPORT.LNTOPMARGIN
ELSE
LNTOP = TOREPORT.TOPIXEL(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT-TOREPORT.LNTOPPAGEMARGIN+.LNTOP-TOREPORT.LNTOPMARGIN)
ENDIF
ELSE
IF .LLABSTOP
LNTOP = .LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = TOREPORT.TOPIXEL(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
ENDIF
LNLEFT = TOREPORT.TOPIXEL(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
IF .LLABSTOP
LNHEIGHT = TOREPORT.TOPIXEL(.LNHEIGHT-(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)+LNTOP+(625.0/6))
LNTOP = TOREPORT.TOPIXEL(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNHEIGHT = TOREPORT.TOPIXEL(.LNHEIGHT+(625.0/6))
ENDIF
LNWIDTH = TOREPORT.TOPIXEL(.LNWIDTH+(625.0/6))
DO CASE
CASE LEFT(.LCPICTUREPATH, 1)="f"
LNSEL = SELECT(0)
SELECT (TOREPORT.NPROCESSINGALIAS)
TOREPORT.ODOCUMENT.ADDGENPICTURE(SET("Datasession"), SUBSTR(.LCPICTUREPATH, 2), LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, .NADJTYPE, TOREPORT.LCREPORTDIRECTORY)
SELECT (LNSEL)
CASE LEFT(.LCPICTUREPATH, 1)="p"
TOREPORT.ODOCUMENT.ADDPICTURE(SUBSTR(.LCPICTUREPATH, 2), LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, .NADJTYPE, TOREPORT.LCREPORTDIRECTORY)
ENDCASE
OTHERWISE
IF TOREPORT.XFRXSESSION.VFP8MODE .AND. INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = .LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN
ENDIF
LNLEFT = .LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING))
IF .LLABSTOP
LNHEIGHT = .LNHEIGHT-(.LNTOPABS+TOREPORT.LNTOPPAGEMARGIN)+LNTOP
LNTOP = .LNTOPABS+TOREPORT.LNTOPPAGEMARGIN
ELSE
LNHEIGHT = .LNHEIGHT
ENDIF
LOCAL LCFILE
LCFILE = ""
IF LEFT(.LCPICTUREPATH, 1)="f"
IF TYPE("toReport.XFRXSession.cDirectory")="C"
LCFILE = ADDBS(TOREPORT.XFRXSESSION.CDIRECTORY)+"X"+SUBSTR(SYS(2015), 4, 9)
LNSEL = SELECT(0)
SELECT (TOREPORT.NPROCESSINGALIAS)
LCEXT = EXTRACTBMP(SUBSTR(.LCPICTUREPATH, 2), LCFILE+".upc")
RENAME (LCFILE+".upc") TO (LCFILE+"."+LCEXT)
LCFILE = LCFILE+"."+LCEXT
SELECT (LNSEL)
ENDIF
ELSE
LCFILE = SUBSTR(.LCPICTUREPATH, 2)
ENDIF
LOCAL CWIDTH, CHEIGHT, LF1, LF2, NBWIDTH, NBHEIGHT, NREALWIDTH, NREALHEIGHT
NREALWIDTH = 0
NREALHEIGHT = 0
NBWIDTH = .LNWIDTH
NBHEIGHT = LNHEIGHT
IF .NADJTYPE=1
CWIDTH = SPACE(2)
CHEIGHT = SPACE(2)
IF 0<=DOPIC(LCFILE, "", 0, @CWIDTH, @CHEIGHT, 0, 0, "")
NBWIDTH = STR2WORD(M.CWIDTH)
NBHEIGHT = STR2WORD(M.CHEIGHT)
NREALWIDTH = NBWIDTH
NREALHEIGHT = NBHEIGHT
LF1 = .LNWIDTH/M.NBWIDTH
LF2 = .LNHEIGHT/M.NBHEIGHT
LF1 = MIN(M.LF1, M.LF2)
NBWIDTH = M.NBWIDTH*LF1
NBHEIGHT = M.NBHEIGHT*LF1
ENDIF
ENDIF
IF  .NOT. EMPTY(LCFILE)
TOREPORT.ODOCUMENTWRITER.ADDPICTURE(LNLEFT, LNTOP, NBWIDTH, NBHEIGHT, .LNPENSIZE, .LNFILLPAT, .LNFILLRED, .LNFILLGREEN, .LNFILLBLUE, .LNPENPAT, .LNPENRED, .LNPENGREEN, .LNPENBLUE, .LNOFFSET, LCFILE, .CNAME, .NADJTYPE, NREALWIDTH, NREALHEIGHT)
IF LEFT(.LCPICTUREPATH, 1)="f"
IF  .NOT. EMPTY(LCFILE)
ERASE (LCFILE)
ENDIF
ENDIF
ENDIF
ENDCASE
ENDIF
ENDWITH
ENDPROC
**
PROCEDURE drawVerticalLine
LPARAMETERS TNINDEX, TOREPORT, TOSECTION
LOCAL LCTOP, LCTO, LCLEFT, LNWIDTH, LNSEL, LNSECTIONHEIGHT, LNSIZESHIFT
WITH THIS.IAVERTICALLINES(TNINDEX)
IF .LNPRINTSTATUS<>1
RETURN
ENDIF
IF .LNLONGLINE=1
TOREPORT.REGISTERVERTICALCOMPONENT(.LNTOP, .LNUNIQUEID)
RETURN
ENDIF
IF .LNLONGLINE=2
TOREPORT.ADJUSTVERTICALCOMPONENT(THIS.IAVERTICALLINES(TNINDEX), TOSECTION)
ENDIF
IF .NPENPAT=0
RETURN
ENDIF
DO CASE
CASE TOREPORT.CTARGET="DOC"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
IF .LLABSTOP
LCTOP = TOREPORT.TOINCH(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
LCTO = TOREPORT.TOINCH(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN+.LNHEIGHT-TOREPORT.LNTOPPAGEMARGIN)
ELSE
LCTOP = TOREPORT.TOINCH(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN-TOREPORT.LNTOPPAGEMARGIN)
LCTO = TOREPORT.TOINCH(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN+.LNHEIGHT-TOREPORT.LNTOPPAGEMARGIN)
ENDIF
ELSE
IF .LLABSTOP
LCTOP = TOREPORT.TOINCH(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
LCTO = TOREPORT.TOINCH(.LNTOP+TOREPORT.LICURRENTPOS+.LNHEIGHT-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPMARGINSHIFT+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LCTOP = TOREPORT.TOINCH(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPMARGINSHIFT+TOREPORT.LNTOPPAGEMARGIN)
LCTO = TOREPORT.TOINCH(.LNTOP+TOREPORT.LICURRENTPOS+.LNHEIGHT-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPMARGINSHIFT+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
ENDIF
LCLEFT = TOREPORT.TOINCH(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:LINE ID="_x0000_s1038" '
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+" STYLE='position:absolute' "
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'FROM="'+M.LCLEFT+','+M.LCTOP+'" TO="'+M.LCLEFT+','+M.LCTO+'" '
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'coordsize="21600,21600" '
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+"strokecolor="+HEXRGB(.PENRED, .PENGREEN, .PENBLUE)+" "
IF .NPENSIZE<>1
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'strokeweight="'+ALLTRIM(STR(.NPENSIZE))+'pt">'
ENDIF
DO CASE
CASE .NPENPAT=1
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="2 2"/>'
CASE .NPENPAT=2
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longdash"/>'
CASE .NPENPAT=3
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longdashdot"/>'
CASE .NPENPAT=4
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longDashDotDot"/>'
ENDCASE
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'</v:LINE>'
CASE TOREPORT.CTARGET="PDF"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
IF .LLABSTOP
LNTOP = TOREPORT.TOTOPPOINT(.LNTOPABS+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNTOP = TOREPORT.TOPOINT(LNSECTIONHEIGHT-.LNTOP+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNTO = TOREPORT.TOPOINT(LNSECTIONHEIGHT-.LNTOP-.LNHEIGHT+TOREPORT.LNTOPPAGEMARGIN)
ELSE
IF .LLABSTOP
LNTOP = TOREPORT.TOTOPPOINT(.LNTOPABS+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNTOP = TOREPORT.TOTOPPOINT(.LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNTO = TOREPORT.TOTOPPOINT(.LNTOP+TOREPORT.LICURRENTPOS+.LNHEIGHT+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNLEFT = TOREPORT.TOPOINT(.LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
LNSIZESHIFT = MAX(0, (.NPENSIZE*0.72 )/2)
TOREPORT.ODOCUMENT.ADDLINE(LNLEFT+LNSIZESHIFT, LNTOP, LNLEFT+LNSIZESHIFT, LNTO, .NPENSIZE, .NPENPAT, .PENRED, .PENGREEN, .PENBLUE)
CASE TOREPORT.CTARGET="HTML"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
IF .LLABSTOP
LNTOP = TOREPORT.TOPIXEL(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNTOP = TOREPORT.TOPIXEL(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN-TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNTO = TOREPORT.TOPIXEL(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN+.LNHEIGHT-TOREPORT.LNTOPPAGEMARGIN)
ELSE
IF .LLABSTOP
LNTOP = TOREPORT.TOPIXEL(.LNTOPABS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNTOP = TOREPORT.TOPIXEL(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPMARGINSHIFT+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNTO = TOREPORT.TOPIXEL(.LNTOP+TOREPORT.LICURRENTPOS+.LNHEIGHT-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPMARGINSHIFT+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNLEFT = TOREPORT.TOPIXEL(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
TOREPORT.ODOCUMENT.ADDLINE(LNLEFT, LNTOP, LNLEFT, LNTO, .NPENSIZE, .NPENPAT, .PENRED, .PENGREEN, .PENBLUE)
OTHERWISE
IF TOREPORT.XFRXSESSION.VFP8MODE .AND. INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
IF .LLABSTOP
LNTOP = .LNTOPABS+TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPPAGEMARGIN
ENDIF
LNTO = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP+.LNHEIGHT-TOREPORT.LNTOPPAGEMARGIN
ELSE
IF .LLABSTOP
LNTOP = .LNTOPABS+TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = .LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN
ENDIF
LNTO = .LNTOP+TOREPORT.LICURRENTPOS+.LNHEIGHT+TOREPORT.LNTOPPAGEMARGIN
ENDIF
LNLEFT = .LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING))
TOREPORT.ODOCUMENTWRITER.ADDLINE(LNLEFT, LNTOP, LNLEFT, LNTO, .NPENSIZE, .NPENPAT, .PENRED, .PENGREEN, .PENBLUE, .CNAME)
ENDCASE
ENDWITH
ENDPROC
**
PROCEDURE drawHorizontalLine
LPARAMETERS TNINDEX, TOREPORT, TOSECTION
LOCAL LCTOP, LCTOP2, LCTO, LCLEFT, LNWIDTH, LNSEL, LNSECTIONHEIGHT
WITH THIS.IAHORIZONTALLINES(TNINDEX)
IF .LNPRINTSTATUS<>1
RETURN
ENDIF
IF .NPENPAT=0
RETURN
ENDIF
DO CASE
CASE TOREPORT.CTARGET="DOC"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LCTOP = TOREPORT.TOINCH(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN-TOREPORT.LNTOPPAGEMARGIN)
LCTOP2 = TOREPORT.TOINCH(.SLHEIGHT+TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN-TOREPORT.LNTOPPAGEMARGIN)
ELSE
LCTOP = TOREPORT.TOINCH(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
LCTOP2 = TOREPORT.TOINCH(.SLHEIGHT+.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LCTO = TOREPORT.TOINCH(.LNLEFT+.LNWIDTH+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
LCLEFT = TOREPORT.TOINCH(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:LINE ID="_x0000_s1038" '
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+" STYLE='position:absolute' "
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'FROM="'+M.LCLEFT+','+M.LCTOP+'" TO="'+M.LCTO+','+M.LCTOP2+'" '
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'coordsize="21600,21600" '
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+"strokecolor="+HEXRGB(.PENRED, .PENGREEN, .PENBLUE)+" "
IF .NPENSIZE<>1
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'strokeweight="'+ALLTRIM(STR(.NPENSIZE))+'pt">'
ENDIF
DO CASE
CASE .NPENPAT=1
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="2 2"/>'
CASE .NPENPAT=2
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longdash"/>'
CASE .NPENPAT=3
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longdashdot"/>'
CASE .NPENPAT=4
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'<v:stroke dashstyle="longDashDotDot"/>'
ENDCASE
TOREPORT.LCOUTPUT = TOREPORT.LCOUTPUT+'</v:LINE>'
CASE TOREPORT.CTARGET="PDF"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.TOPOINT(LNSECTIONHEIGHT-.LNTOP+TOREPORT.LNTOPPAGEMARGIN)
TOREPORT.ADDTOLOG("----horizontal line")
TOREPORT.ADDTOLOG("position type: footer")
TOREPORT.ADDTOLOG("lnTop: "+ALLTRIM(STR(LNTOP)))
TOREPORT.ADDTOLOG(".lnTop: "+ALLTRIM(STR(.LNTOP)))
TOREPORT.ADDTOLOG("toSection.inHeight: "+ALLTRIM(STR(TOSECTION.INHEIGHT)))
TOREPORT.ADDTOLOG("toReport.lnTopPageMargin: "+ALLTRIM(STR(TOREPORT.LNTOPPAGEMARGIN)))
ELSE
LNTOP = TOREPORT.TOTOPPOINT(.LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNTO = TOREPORT.TOPOINT(.LNLEFT+.LNWIDTH+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
LNLEFT = TOREPORT.TOPOINT(.LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
TOREPORT.ODOCUMENT.ADDLINE(LNLEFT, LNTOP, LNTO, LNTOP-TOREPORT.TOPOINT(.SLHEIGHT), .NPENSIZE, .NPENPAT, .PENRED, .PENGREEN, .PENBLUE)
CASE TOREPORT.CTARGET="HTML"
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.TOPIXEL(TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN-TOREPORT.LNTOPPAGEMARGIN)
LNTOP2 = TOREPORT.TOPIXEL(.SLHEIGHT+TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPMARGIN-TOREPORT.LNTOPPAGEMARGIN)
ELSE
LNTOP = TOREPORT.TOPIXEL(.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
LNTOP2 = TOREPORT.TOPIXEL(.SLHEIGHT+.LNTOP+TOREPORT.LICURRENTPOS-TOREPORT.LNTOPMARGIN+TOREPORT.LNTOPPAGEMARGIN)
ENDIF
LNTO = TOREPORT.TOPIXEL(.LNLEFT+.LNWIDTH+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
LNLEFT = TOREPORT.TOPIXEL(.LNLEFT+TOREPORT.LNLEFTOFFSET-TOREPORT.LNLEFTMARGIN+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING)))
TOREPORT.ODOCUMENT.ADDLINE(LNLEFT, LNTOP, LNTO, LNTOP, .NPENSIZE, .NPENPAT, .PENRED, .PENGREEN, .PENBLUE)
OTHERWISE
IF TOREPORT.XFRXSESSION.VFP8MODE .AND. INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT+.LNTOP-TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = .LNTOP+TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN
ENDIF
LNTO = .LNLEFT+.LNWIDTH+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING))
LNLEFT = .LNLEFT+TOREPORT.LNLEFTOFFSET+((TOREPORT.LNACTUALCOLUMN-1)*(TOREPORT.LNCOLUMNWIDTH+TOREPORT.LNCOLUMNSPACING))
TOREPORT.ODOCUMENTWRITER.ADDLINE(LNLEFT, LNTOP, LNTO, LNTOP+.SLHEIGHT, .NPENSIZE, .NPENPAT, .PENRED, .PENGREEN, .PENBLUE, .CNAME)
ENDCASE
ENDWITH
ENDPROC
**
PROCEDURE composeOutput
LPARAMETERS TOREPORT, TOSECTION, TNSECTIONCONTENTHEIGHT
LOCAL M.I, LCTOP, LCTO, LCLEFT, LNWIDTH, LNSEL, LNSECTIONHEIGHT
IF  .NOT. EMPTY(TOREPORT.CPAGESCOPE)
IF TOREPORT.SKIPPAGE()
RETURN
ENDIF
ENDIF
WITH THIS
IF  .NOT. ISNULL(TOREPORT.ODOCUMENTWRITER)
LOCAL LNSECTIONHEIGHT, LNTOP
IF INLIST(TOSECTION.INOBJECTCODE, 7, 6)
IF TOSECTION.INOBJECTCODE=7
LNSECTIONHEIGHT = TOSECTION.INHEIGHT
ELSE
LNSECTIONHEIGHT = TOREPORT.LIFOOTERHEIGHT
ENDIF
LNTOP = TOREPORT.LNPAPERHEIGHT-LNSECTIONHEIGHT-TOREPORT.LNTOPPAGEMARGIN
ELSE
LNTOP = TOREPORT.LICURRENTPOS+TOREPORT.LNTOPPAGEMARGIN
ENDIF
TOREPORT.ODOCUMENTWRITER.NEWSECTION(TOSECTION, TNSECTIONCONTENTHEIGHT, LNTOP)
ENDIF
FOR M.I = 1 TO .INOBJECTS
DO CASE
CASE .IAOBJECTS(M.I, 1)="T"
.DRAWTEXTBOX(.IAOBJECTS(M.I, 2), TOREPORT, TOSECTION)
CASE .IAOBJECTS(M.I, 1)="R"
.DRAWRECTANGLE(.IAOBJECTS(M.I, 2), TOREPORT, TOSECTION)
CASE .IAOBJECTS(M.I, 1)="V"
.DRAWVERTICALLINE(.IAOBJECTS(M.I, 2), TOREPORT, TOSECTION)
CASE .IAOBJECTS(M.I, 1)="H"
.DRAWHORIZONTALLINE(.IAOBJECTS(M.I, 2), TOREPORT, TOSECTION)
ENDCASE
ENDFOR
ENDWITH
RETURN
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS verticalline AS Custom
LNLEFT = 0
LNTOP = 0
LNWIDTH = 0
LNHEIGHT = 0
LNSTRETCH = 0
MOVEDDOWN = 0
LLBOTTOM = .F.
LNPRINTSTATUS = 1
LLABSTOP = .F.
LNTOPABS = 0
LNLONGLINE = 0
LNUNIQUEID = 0
NPENPAT = 0
NPENSIZE = 0
LFLOAT = .F.
NGROUP = 0
PENRED = 0
PENGREEN = 0
PENBLUE = 0
CNAME = ""
**
PROCEDURE Init
LPARAMETERS TNLEFT, TNTOP, TNHEIGHT, TNSTRETCH, LLBOTTOM, TNPENPAT, TNPENSIZE, TLFLOAT, TNGROUP, LNLONGLINE, LNUNIQUEID
WITH THIS
.LNLEFT = TNLEFT
.LNTOP = TNTOP
.LNHEIGHT = TNHEIGHT
.LNSTRETCH = TNSTRETCH
.LLBOTTOM = LLBOTTOM
IF EMPTY(LNLONGLINE)
LNLONGLINE = 0
ENDIF
.LNLONGLINE = LNLONGLINE
.LNUNIQUEID = LNUNIQUEID
.NPENPAT = TNPENPAT
.NPENSIZE = TNPENSIZE
.LNWIDTH = .NPENSIZE
.LFLOAT = TLFLOAT
.NGROUP = TNGROUP
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS horizontalline AS Custom
LNLEFT = 0
LNTOP = 0
LNWIDTH = 0
LLFLOAT = .F.
MOVEDDOWN = 0
TYPE = "HORIZONTALLINE"
LLBOTTOM = .F.
LNPRINTSTATUS = 1
NPENPAT = 0
NPENSIZE = 0
PENRED = 0
PENGREEN = 0
PENBLUE = 0
SLHEIGHT = 0
CNAME = ""
**
PROCEDURE Init
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TLFLOAT, TLBOTTOM, TNPENPAT, TNPENSIZE
WITH THIS
.LNLEFT = TNLEFT
.LNTOP = TNTOP
.LNWIDTH = TNWIDTH
.LLFLOAT = TLFLOAT
.LLBOTTOM = TLBOTTOM
.NPENPAT = TNPENPAT
.NPENSIZE = TNPENSIZE
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS rectangle AS Custom
CMASK = ""
LCMYK = .F.
LNEG = .F.
LNLEFT = 0
LNTOP = 0
LNWIDTH = 0
LNHEIGHT = 0
LNSTRETCH = 0
LNPENRED = 0
LNPENGREEN = 0
LNPENBLUE = 0
LNPENSIZE = 0
LNPENPAT = 0
LNFILLRED = 0
LNFILLGREEN = 0
LNFILLBLUE = 0
LNFILLPAT = 0
MOVEDDOWN = 0
LLBOTTOM = .F.
LCPICTUREPATH = ""
LNPRINTSTATUS = 1
LNOFFSET = 0
LLABSTOP = .F.
LNTOPABS = 0
LNLONGLINE = 0
LNUNIQUEID = 0
NADJTYPE = 0
LFLOAT = .F.
NGROUP = 0
NROTATE = 0
CNAME = ""
CSCRIPT = ""
CSCRIPTNAME = ""
CPICTURETYPE = ""
CPARAMETERS = ""
LCONVERTSCRIPTTOPICTURE = .F.
NDPIFACTOR = 1
**
PROCEDURE Init
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNSTRETCH, TNPENRED, TNPENGREEN, TNPENBLUE, TNPENSIZE, TNPENPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNFILLPAT, LLBOTTOM, TCPICTUREPATH, TNOFFSET, TLFLOAT, TNGROUP, TNADJTYPE, LNLONGLINE, LNUNIQUEID
WITH THIS
.LNLEFT = TNLEFT
.LNTOP = TNTOP
.LNWIDTH = TNWIDTH
.LNHEIGHT = TNHEIGHT
.LNSTRETCH = TNSTRETCH
.LNPENRED = TNPENRED
.LNPENGREEN = TNPENGREEN
.LNPENBLUE = TNPENBLUE
.LNPENSIZE = TNPENSIZE
.LNPENPAT = TNPENPAT
.LNFILLRED = TNFILLRED
.LNFILLGREEN = TNFILLGREEN
.LNFILLBLUE = TNFILLBLUE
.LNFILLPAT = TNFILLPAT
.LLBOTTOM = LLBOTTOM
.LCPICTUREPATH = TCPICTUREPATH
.LNOFFSET = TNOFFSET
.LFLOAT = TLFLOAT
.NGROUP = TNGROUP
IF EMPTY(LNLONGLINE)
LNLONGLINE = 0
ENDIF
.LNLONGLINE = LNLONGLINE
.LNUNIQUEID = LNUNIQUEID
.NADJTYPE = TNADJTYPE
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS textboxdata AS Custom
LSTRIKED = .F.
LABSOLUTE = .F.
NROTATE = 0
NSTRETCH = 0
LNOBJTYPE = 0
LNLEFT = 0
LNTOP = 0
LNHEIGHT = 0
LNWIDTH = 0
LCOUTPUT = ""
LCFONTFACE = ""
LNFONTSIZE = 0
LCALIGN = ""
LLITALICS = .F.
LLBOLD = .F.
LLUNDERLINE = .F.
LLSTRETCH = .F.
LLFLOAT = .F.
LLREMOVEIFBLANK = .F.
LNPENRED = 0
LNPENGREEN = 0
LNPENBLUE = 0
LNPENSIZE = 0
LNPENPAT = 0
LNFILLRED = 0
LNFILLGREEN = 0
LNFILLBLUE = 0
LNFILLPAT = 0
MOVEDDOWN = 0
LNMODE = 0
TYPE = "SHAPE"
LLBOTTOM = .F.
LCLINKNAME = ""
LCLINKHREF = ""
LSTRETCHED = .F.
LCOUTLINE = ""
NOUTLINESTYLE = 0
NROTATIONPOINT = 0
LNPRINTSTATUS = 1
NGROUP = 0
UNIQUEID = ""
CTOOLTIP = ""
CNAME = ""
NNUMERICVALUE = .NULL.
CXLSFORMAT = ""
NCODEPAGE = 0
**
PROCEDURE Init
LPARAMETERS TNOBJTYPE, TNLEFT, TNTOP, TNHEIGHT, TNWIDTH, TCOUTPUT, TCFONTFACE, TNFONTSIZE, TCALIGN, TLITALICS, TLBOLD, TLUNDERLINE, TLSTRETCH, TLFLOAT, TLREMOVEIFBLANK, TNPENRED, TNPENGREEN, TNPENBLUE, TNPENSIZE, TNPENPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNFILLPAT, TNMODE
IF TYPE("tvObjType")="L"
RETURN
ENDIF
WITH THIS
.LNOBJTYPE = TNOBJTYPE
.LNLEFT = TNLEFT
.LNTOP = TNTOP
.LNHEIGHT = TNHEIGHT
.LNWIDTH = TNWIDTH
.LCOUTPUT = TCOUTPUT
.LCFONTFACE = TCFONTFACE
.LNFONTSIZE = TNFONTSIZE
.LCALIGN = TCALIGN
.LLITALICS = TLITALICS
.LLBOLD = TLBOLD
.LLUNDERLINE = TLUNDERLINE
.LLSTRETCH = TLSTRETCH
.LLFLOAT = TLFLOAT
.LLREMOVEIFBLANK = TLREMOVEIFBLANK
.LNPENRED = TNPENRED
.LNPENGREEN = TNPENGREEN
.LNPENBLUE = TNPENBLUE
.LNPENSIZE = TNPENSIZE
.LNPENPAT = TNPENPAT
.LNFILLRED = TNFILLRED
.LNFILLGREEN = TNFILLGREEN
.LNFILLBLUE = TNFILLBLUE
.LNFILLPAT = TNFILLPAT
.LNMODE = TNMODE
ENDWITH
ENDPROC
**
ENDDEFINE
**
PROCEDURE setPaperSize
LPARAMETERS LNPAPERSIZE, TNWIDTH, TNHEIGHT
LOCAL LAPS(256, 3)
LAPS(1, 2) = 85000
LAPS(1, 3) = 110000
LAPS(2, 2) = 85000
LAPS(2, 3) = 110000
LAPS(3, 2) = 110000
LAPS(3, 3) = 170000
LAPS(4, 2) = 170000
LAPS(4, 3) = 110000
LAPS(5, 2) = 85000
LAPS(5, 3) = 140000
LAPS(6, 2) = 55000
LAPS(6, 3) = 85000
LAPS(7, 2) = 72500
LAPS(7, 3) = 10500
LAPS(8, 2) = 116929
LAPS(8, 3) = 165354
LAPS(9, 2) = 82677
LAPS(9, 3) = 116929
LAPS(10, 2) = 82677
LAPS(10, 3) = 116929
LAPS(11, 2) = 58268
LAPS(11, 3) = 82677
LAPS(12, 2) = 98425
LAPS(12, 3) = 139370
LAPS(13, 2) = 71654
LAPS(13, 3) = 101181
LAPS(14, 2) = 85000
LAPS(14, 3) = 130000
LAPS(15, 2) = 84646
LAPS(15, 3) = 108268
LAPS(16, 2) = 100000
LAPS(16, 3) = 140000
LAPS(17, 2) = 110000
LAPS(17, 3) = 170000
LAPS(18, 2) = 85000
LAPS(18, 3) = 110000
LAPS(19, 2) = 38750
LAPS(19, 3) = 88750
LAPS(20, 2) = 41250
LAPS(20, 3) = 85000
LAPS(21, 2) = 45000
LAPS(21, 3) = 103750
LAPS(22, 2) = 45000
LAPS(22, 3) = 110000
LAPS(23, 2) = 50000
LAPS(23, 3) = 115000
LAPS(24, 2) = 45000
LAPS(24, 3) = 103750
LAPS(25, 2) = 47500
LAPS(25, 3) = 110000
LAPS(26, 2) = 50000
LAPS(26, 3) = 115000
LAPS(27, 2) = 43307
LAPS(27, 3) = 86614
LAPS(28, 2) = 63779
LAPS(28, 3) = 90157
LAPS(29, 2) = 127559
LAPS(29, 3) = 180315
LAPS(30, 2) = 90157
LAPS(30, 3) = 127559
LAPS(31, 2) = 44881
LAPS(31, 3) = 63779
LAPS(32, 2) = 44881
LAPS(32, 3) = 90157
LAPS(33, 2) = 98425
LAPS(33, 3) = 138976
LAPS(34, 2) = 69291
LAPS(34, 3) = 98425
LAPS(35, 2) = 69291
LAPS(35, 3) = 49212
LAPS(36, 2) = 43307
LAPS(36, 3) = 90551
LAPS(37, 2) = 38750
LAPS(37, 3) = 75000
LAPS(38, 2) = 36250
LAPS(38, 3) = 65000
LAPS(39, 2) = 148750
LAPS(39, 3) = 110000
LAPS(40, 2) = 85000
LAPS(40, 3) = 120000
LAPS(41, 2) = 85000
LAPS(41, 3) = 130000
LAPS(256, 2) = 104330
LAPS(256, 3) = 149606
IF LNPAPERSIZE>0 .AND. LNPAPERSIZE<42
ELSE
LNPAPERSIZE = 256
ENDIF
TNWIDTH = LAPS(LNPAPERSIZE, 2)
TNHEIGHT = LAPS(LNPAPERSIZE, 3)
ENDPROC
**
FUNCTION getNumericValue
LPARAMETERS LCSTR
LOCAL M.I
M.I = AT("=", M.LCSTR)
IF M.I>0
RETURN VAL(SUBSTR(M.LCSTR, M.I+1))
ELSE
RETURN 0
ENDIF
ENDFUNC
**
FUNCTION getCharacterValue
LPARAMETERS LCSTR
LOCAL M.I
M.I = AT("=", M.LCSTR)
IF M.I>0
RETURN ALLTRIM(SUBSTR(M.LCSTR, M.I+1))
ELSE
RETURN ""
ENDIF
ENDFUNC
**
FUNCTION __transform
LPARAMETERS LNVALUE
LOCAL LCVALUE, M.I, POS
IF TYPE("lnvalue")<>"N"
RETURN TRANSFORM(LNVALUE, "")
ENDIF
LCVALUE = ALLTRIM(STR(LNVALUE, 199, 18))
M.I = LEN(LCVALUE)
M.POS = M.I
DO WHILE .T.
IF INLIST(SUBSTR(LCVALUE, M.I, 1), ".", ",")
M.I = M.I-1
EXIT
ENDIF
IF SUBSTR(LCVALUE, M.I, 1)="0"
M.I = M.I-1
ELSE
EXIT
ENDIF
ENDDO
RETURN (LEFT(LCVALUE, M.I))
ENDFUNC
**
FUNCTION hexrgb
LPARAMETERS LNR, LNG, LNB
RETURN "#"+PADL(DEC2HEX(LNR), 2, "0")+PADL(DEC2HEX(LNG), 2, "0")+PADL(DEC2HEX(LNB), 2, "0")
ENDFUNC
**
FUNCTION hexargb
LPARAMETERS LNA, LNR, LNG, LNB
RETURN "#"+PADL(DEC2HEX(LNA), 2, "0")+PADL(DEC2HEX(LNR), 2, "0")+PADL(DEC2HEX(LNG), 2, "0")+PADL(DEC2HEX(LNB), 2, "0")
ENDFUNC
**
FUNCTION dec2hex
LPARAMETERS LNDEC
LOCAL RESULT, LNRM
RESULT = ""
DO WHILE LNDEC>0
LNRM = MOD(LNDEC, 16)
LNDEC = (LNDEC-LNRM)/16
IF LNRM<10
RESULT = ALLTRIM(STR(LNRM))+RESULT
ELSE
RESULT = CHR(LNRM-10+ASC("A"))+RESULT
ENDIF
ENDDO
RETURN IIF(EMPTY(RESULT), "0", RESULT)
ENDFUNC
**
FUNCTION ExtractBMP
LPARAMETERS TCFIELD, TCPATH
LOCAL LNPOS, STR1, STR2, LCBMPNAME, HANDLEIN, HANDLEOUT, LNEND
LOCAL LCEXT
LCBMPNAME = SYS(2015)
COPY TO (LCBMPNAME) FIELDS (TCFIELD) NEXT 1
ERASE (LCBMPNAME+".dbf")
HANDLEIN = FOPEN(LCBMPNAME+".fpt")
HANDLEOUT = FCREATE(TCPATH)
LNEND = FSEEK(HANDLEIN, 0, 2)
= FSEEK(HANDLEIN, 0)
STR1 = FREAD(HANDLEIN, LNEND)
LCEXT = "bmp"
LNPOS = AT("BM", STR1)
LNPOS = AT("BM", STR1)
IF LNPOS=0
LNPOS = AT(CHR(255)+CHR(216)+CHR(255)+CHR(224), STR1)
LCEXT = "jpg"
ENDIF
LNPOS = LNPOS-1
STR1 = RIGHT(STR1, LEN(STR1)-LNPOS)
= FWRITE(HANDLEOUT, STR1)
= FCLOSE(HANDLEIN)
= FCLOSE(HANDLEOUT)
ERASE (LCBMPNAME+".fpt")
RETURN LCEXT
ENDFUNC
**
DEFINE CLASS PDFLScript AS custom
OSCRIPTOBJECT = .NULL.
CSCRIPTMETHOD = ""
NZORDER = 0
CPAGESCOPE = ""
NNUMBERINGTYPE = 0
**
PROCEDURE init
LPARAMETERS TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE
THIS.OSCRIPTOBJECT = TOSCRIPTOBJECT
THIS.CSCRIPTMETHOD = TCSCRIPTMETHOD
IF TYPE("tnZOrder")="L"
THIS.NZORDER = -1
ELSE
THIS.NZORDER = TNZORDER
ENDIF
IF EMPTY(TCPAGESCOPE)
TCPAGESCOPE = ""
ENDIF
THIS.CPAGESCOPE = UPPER(TCPAGESCOPE)
IF EMPTY(TNNUMBERINGTYPE)
TNNUMBERINGTYPE = 0
ENDIF
THIS.NNUMBERINGTYPE = TNNUMBERINGTYPE
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS PDFLScripts AS custom
DIMENSION APDFLSCRIPTS(1)
NPDFLSCRIPTS = 0
**
PROCEDURE add
LPARAMETERS TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE
WITH THIS
.NPDFLSCRIPTS = .NPDFLSCRIPTS+1
DIMENSION .APDFLSCRIPTS(.NPDFLSCRIPTS)
.APDFLSCRIPTS(.NPDFLSCRIPTS) = CREATEOBJECT("PDFLScript", TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE)
ENDWITH
ENDPROC
**
PROCEDURE removeAll
WITH THIS
.APDFLSCRIPTS = .F.
DIMENSION .APDFLSCRIPTS(1)
.NPDFLSCRIPTS = 0
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS xfrxsession AS Custom
DEFAULTPICTUREFORMAT = "jpg"
PICTUREDPI = 0
DYNAMICLINEHEIGHT = .T.
CHECKXFRXLIBVERSION = .T.
VFP8MODE = .T.
LSUPPRESSPICTURES = .F.
NRECORDSTOPROCESS = 0
CADDTEXT = ""
ODOC = .NULL.
COUTPUTNAME = ""
LNOTOPENWORD = .F.
LSILENT = .F.
LNEWSESSION = .F.
CTARGET = ""
CSUBTARGET = ""
CCODEPAGE = ""
NREPORTNUMBER = 0
FILENAME = ""
FDIR = ""
OFILES = .NULL.
NPAGENO = 0
HEADERFILE = ""
CDIRECTORY = ""
ODOCUMENT = .NULL.
OPROGRESS = .NULL.
NPROGRESSTYPE = 0
CAUTHOR = ""
CTITLE = ""
CSUBJECT = ""
CKEYWORDS = ""
CCREATOR = ""
CPRODUCER = ""
CCREATIONDATE = ""
CCOMMENTS = ""
CCATEGORY = ""
CMANAGER = ""
CCOMPANY = ""
CLOGFILE = ""
THATFORM = .NULL.
THAT = .NULL.
OPDFLSCRIPTS = .NULL.
NPAGENOOFFSET = 0
ENCRYPTOR = .NULL.
EMBTYPE = 1
ODOCUMENTWRITER = .NULL.
CPAGESCOPE = .F.
CWORDREADPASSWORD = .F.
CWORDWRITEPASSWORD = .F.
LWORDREQUIREPASSWORD = .F.
NSPLITSKIP = 0
NSPLITCOUNTDOWN = 0
NSPLITFILECOUNTER = 1
LIGNORECURSORPATH = .F.
NUDPAPERWIDTH = 0
NUDPAPERHEIGHT = 0
NUDREDUCEHEIGHTBY = -1
LSHOWERRORS = .F.
CSESSIONDIR = ""
NSESSIONFILEHANDLER = 0
OSTOREDREPORT = .NULL.
OSTOREDSTATE = .NULL.
NLASTERROR = 0
CDEFAULTXLSFORMAT = ""
LAUTOMATICXLSFORMATCONVERSION = .T.
NXLSFORMATCONVERSIONS = 0
DIMENSION AXLSFORMATCONVERSIONS(1)
CSKIPBANDLIST = ""
CARCHIVE = ""
LARCHIVEADDITIVE = .F.
LDELETEFILEAFTER = .F.
CTEXTTOHIGHLIGHT = ""
**
PROCEDURE hightlightText
LPARAMETERS _X____11334
THIS.CTEXTTOHIGHLIGHT = _X____11334
ENDPROC
**
FUNCTION skipBand
LPARAMETERS TOBAND
IF EMPTY(THIS.CSKIPBANDLIST)
RETURN .F.
ENDIF
LOCAL LCCODE
WITH TOBAND
DO CASE
CASE .INOBJECTCODE=0
RETURN ",T,"$THIS.CSKIPBANDLIST
CASE .INOBJECTCODE=1
RETURN ",H,"$THIS.CSKIPBANDLIST
CASE .INOBJECTCODE=2
RETURN ",CH,"$THIS.CSKIPBANDLIST
CASE .INOBJECTCODE=3
RETURN ",GH"+ALLTRIM(STR(.LNLEVEL))+","$THIS.CSKIPBANDLIST
CASE .INOBJECTCODE=4
RETURN ",D,"$THIS.CSKIPBANDLIST
CASE .INOBJECTCODE=5
RETURN ",GF"+ALLTRIM(STR(.LNLEVEL))+","$THIS.CSKIPBANDLIST
CASE .INOBJECTCODE=6
RETURN ",CF,"$THIS.CSKIPBANDLIST
CASE .INOBJECTCODE=7
RETURN ",F,"$THIS.CSKIPBANDLIST
CASE .INOBJECTCODE=8
RETURN ",S,"$THIS.CSKIPBANDLIST
ENDCASE
RETURN .F.
ENDWITH
ENDFUNC
**
PROCEDURE skipBands
LPARAMETERS TCSKIPBANDLIST
THIS.CSKIPBANDLIST = ","+UPPER(ALLTRIM(TCSKIPBANDLIST))+","
ENDPROC
**
FUNCTION convertXLSFormatString
LPARAMETERS TCFROM, TNNUMERICVALUE
IF  .NOT. EMPTY(TCFROM)
LOCAL LNINDEX
LNINDEX = ASCAN(THIS.AXLSFORMATCONVERSIONS, TCFROM)
IF LNINDEX>0
RETURN THIS.AXLSFORMATCONVERSIONS(ASUBSCRIPT(THIS.AXLSFORMATCONVERSIONS, LNINDEX, 1), 2)
ENDIF
IF  .NOT. EMPTY(THIS.CDEFAULTXLSFORMAT)
RETURN THIS.CDEFAULTXLSFORMAT
ENDIF
IF THIS.LAUTOMATICXLSFORMATCONVERSION
LOCAL TCTO, LNLEN, LCPREFIX, LCSUFFIX, LLZERO, LLMONEY
LCPREFIX = ""
LCSUFFIX = ""
TCTO = SPACE(100)
DO CASE
CASE LEFT(UPPER(TCFROM), 2)="@Z"
TCFROM = ALLTRIM(SUBSTR(TCFROM, 3))
LLZERO = .T.
CASE LEFT(UPPER(TCFROM), 2)="@$"
TCFROM = ALLTRIM(SUBSTR(TCFROM, 3))
LCPREFIX = "$"
LLMONEY = .T.
ENDCASE
LNLEN = CONVERTFORMATSTRING(TCFROM, LEN(TCFROM), @TCTO)
IF LNLEN>0
DO CASE
CASE LLZERO
RETURN LEFT(TCTO, LNLEN)+";-"+LEFT(TCTO, LNLEN)+";"
CASE LLMONEY
RETURN LCPREFIX+LEFT(TCTO, LNLEN)+LCSUFFIX
OTHERWISE
RETURN LCPREFIX+LEFT(TCTO, LNLEN)+LCSUFFIX
ENDCASE
ENDIF
ENDIF
ELSE
IF  .NOT. EMPTY(THIS.CDEFAULTXLSFORMAT)
RETURN THIS.CDEFAULTXLSFORMAT
ENDIF
ENDIF
LOCAL LUVALUE, LNDECS
LUVALUE = TNNUMERICVALUE
LNDECS = _XFDEC()
IF LNDECS>0
RETURN "#0."+REPLICATE("0", LNDECS)
ELSE
RETURN "#0"
ENDIF
ENDFUNC
**
PROCEDURE setDefaultXLSFormat
LPARAMETERS TCDEFAULTXLSFORMAT
THIS.CDEFAULTXLSFORMAT = TCDEFAULTXLSFORMAT
ENDPROC
**
PROCEDURE addXLSFormatConversion
LPARAMETERS TCFROM, TCTO
WITH THIS
.NXLSFORMATCONVERSIONS = .NXLSFORMATCONVERSIONS+1
DIMENSION .AXLSFORMATCONVERSIONS(.NXLSFORMATCONVERSIONS, 2)
.AXLSFORMATCONVERSIONS(.NXLSFORMATCONVERSIONS, 1) = TCFROM
.AXLSFORMATCONVERSIONS(.NXLSFORMATCONVERSIONS, 2) = TCTO
ENDWITH
ENDPROC
**
PROCEDURE suppressPictures
LPARAMETERS TLPRINTPICTURES
THIS.LSUPPRESSPICTURES =  .NOT. TLPRINTPICTURES
ENDPROC
**
FUNCTION TransformReport
LPARAMETERS TOXFF, TLSUMMARY, TLPLAIN, TNPAGENO
IF TYPE("toXFF")<>"O" .OR. ISNULL(TOXFF)
RETURN -1
ENDIF
IF (THIS.CTARGET="XFF" .OR. THIS.CTARGET="XML") .AND. THIS.ODOCUMENTWRITER.LCNTMODE
LOCAL LOXFCONT
LOXFCONT = THIS.ODOCUMENTWRITER.OXFCONT
LNRETVAL = THIS.SETPARAMS( , THIS.CDIRECTORY,  ,  ,  ,  , "CNT",  ,  ,  ,  , 1)
THIS.SETOTHERPARAMS(LOXFCONT, THIS, TOXFF)
THIS.ODOCUMENTWRITER.OXFCONT.LASTINITED(1)
RETURN
ENDIF
IF TYPE("gnStopXFRX")="N"
GNSTOPXFRX = 0
ENDIF
TOXFF.INDEX()
LOCAL LOREPORT
LOREPORT = CREATEOBJECT("cusURReport", THIS, "", THIS.CTARGET, TLSUMMARY)
LOREPORT.DYNAMICLINEHEIGHT = THIS.DYNAMICLINEHEIGHT
LOCAL LNMODE
LNMODE = 0
LNMODE = 1
LNMODE = 2
IF TLPLAIN .OR. UPPER(THIS.CTARGET)="XLS"
LNMODE = 1
ELSE
LNMODE = 0
ENDIF
LOREPORT.LPLAIN = (LNMODE>0)
THIS.NREPORTNUMBER = 0
THIS.SETREPORTPARAMS(LOREPORT)
TOXFF.GOTOPAGE(1, LOREPORT)
LOREPORT.ODOCUMENT = THIS.ODOCUMENT
LOREPORT.CCODEPAGE = THIS.CCODEPAGE
LOREPORT.CHEADERFILE = THIS.HEADERFILE
LOREPORT.TNREPORTNUMBER = THIS.NREPORTNUMBER+1
LOREPORT.LCFILENAME = THIS.FILENAME
LOREPORT.ODOCUMENT = THIS.ODOCUMENT
LOREPORT.OFILES = THIS.OFILES
LOREPORT.CLOGFILE = THIS.CLOGFILE
LOCAL LOSECTION
LOSECTION = CREATEOBJECT("cusURSection", 4)
LOSECTION.INHEIGHT = 0
LOCAL LNHEIGHT, LLFIRSTPAGE, LLSHOWHEADER, LLSHOWFOOTER, LNLASTPAGE, LNFIRSTPAGE, LLNEXTPAGEONNEWREPORT, LNTOTALPAGES, LNCURRENTPAGE
LLNEXTPAGEONNEWREPORT = .F.
LLFIRSTPAGE = .T.
THIS.NPAGENO = 0
_PAGENO = 1
LNCURRENTPAGE = 0
IF EMPTY(TNPAGENO) .OR. THIS.CTARGET="HTML"
THIS.INITIALIZESESSIONDIR()
IF  .NOT. EMPTY(TNPAGENO)
LNFIRSTPAGE = M.TNPAGENO
LNLASTPAGE = M.TNPAGENO
ELSE
IF  .NOT. EMPTY(THIS.CPAGESCOPE)
LNFIRSTPAGE = 1
LNLASTPAGE = _GETLASTPAGE(THIS.CPAGESCOPE)
ELSE
LNFIRSTPAGE = 1
LNLASTPAGE = TOXFF.PAGECOUNT
LNTOTALPAGES = TOXFF.PAGECOUNT
ENDIF
ENDIF
FOR LNI = M.LNFIRSTPAGE TO M.LNLASTPAGE
IF (TYPE("gnStopXFRX")="N" .AND. GNSTOPXFRX>0)
EXIT
ENDIF
LLNEXTPAGEONNEWREPORT = TOXFF.GOTOPAGE(M.LNI, M.LOREPORT) .OR. LLNEXTPAGEONNEWREPORT
IF  .NOT. EMPTY(THIS.CPAGESCOPE) .AND.  .NOT. _PAGENOCHECK(M.LNI, THIS.CPAGESCOPE)
LOOP
ENDIF
LNCURRENTPAGE = LNCURRENTPAGE+1
IF TYPE("this.oProgress")="O" .AND.  .NOT. ISNULL(THIS.OPROGRESS)
THIS.OPROGRESS.UPDATEPROGRESS(1, LNCURRENTPAGE, 0)
ENDIF
IF LLNEXTPAGEONNEWREPORT .OR. LLFIRSTPAGE
IF  .NOT. LLFIRSTPAGE
LOREPORT.AFTERREPORT()
LOREPORT.TNREPORTNUMBER = LOREPORT.TNREPORTNUMBER+1
THIS.NREPORTNUMBER = THIS.NREPORTNUMBER+1
THIS.NPAGENO = THIS.NPAGENO+1
_PAGENO = _PAGENO+1
ENDIF
LOREPORT.INITIALIZEPROPERTIES(LLFIRSTPAGE)
IF LLFIRSTPAGE
TOXFF.INITFONTS(M.LOREPORT.ODOCUMENT, THIS.CTARGET, M.TNPAGENO)
ENDIF
ELSE
IF M.LNMODE=0
LOREPORT.NEWPAGE()
ENDIF
ENDIF
LLNEXTPAGEONNEWREPORT = .F.
TOBUFFER = CREATEOBJECT("buffer")
TOBUFFER.RESET()
LLSHOWHEADER = M.LNMODE=0 .OR. M.LLFIRSTPAGE
LLSHOWFOOTER = M.LNMODE=0 .OR. M.LNI=M.LNLASTPAGE
LLFIRSTPAGE = .F.
IF THIS.CTARGET="FDOC" .OR. THIS.CTARGET="FRTF"
THIS.VFP8MODE = .F.
LNHEIGHT = TOXFF.FILLBUFFER(TOBUFFER, THIS.CSESSIONDIR, M.LNMODE, M.LLSHOWHEADER, M.LLSHOWFOOTER, "header")
LOSECTION.INOBJECTCODE = 1
TOBUFFER.COMPOSEOUTPUT(LOREPORT, LOSECTION, 1)
TOBUFFER = CREATEOBJECT("buffer")
TOBUFFER.RESET()
LNHEIGHT = TOXFF.FILLBUFFER(TOBUFFER, THIS.CSESSIONDIR, M.LNMODE, M.LLSHOWHEADER, M.LLSHOWFOOTER, "detail")
LOSECTION.INOBJECTCODE = 4
TOBUFFER.COMPOSEOUTPUT(LOREPORT, LOSECTION, 1)
TOBUFFER = CREATEOBJECT("buffer")
TOBUFFER.RESET()
LNHEIGHT = TOXFF.FILLBUFFER(TOBUFFER, THIS.CSESSIONDIR, M.LNMODE, M.LLSHOWHEADER, M.LLSHOWFOOTER, "footer")
LOSECTION.INOBJECTCODE = 7
TOBUFFER.COMPOSEOUTPUT(LOREPORT, LOSECTION, 1)
ELSE
LNHEIGHT = TOXFF.FILLBUFFER(TOBUFFER, THIS.CSESSIONDIR, M.LNMODE, M.LLSHOWHEADER, M.LLSHOWFOOTER)
LOSECTION.INOBJECTCODE = 4
TOBUFFER.COMPOSEOUTPUT(LOREPORT, LOSECTION, 1)
IF LNMODE>0
LOREPORT.LICURRENTPOS = LOREPORT.LICURRENTPOS+M.LNHEIGHT
ENDIF
ENDIF
ENDFOR
LOREPORT.AFTERREPORT()
THIS.FINALIZE()
ELSE
TOXFF.GOTOPAGE(M.TNPAGENO, M.LOREPORT)
LOREPORT.NEWPAGE()
TOBUFFER = CREATEOBJECT("buffer")
TOBUFFER.RESET()
THIS.INITIALIZESESSIONDIR()
TOXFF.FILLBUFFER(M.TOBUFFER, THIS.CSESSIONDIR, M.LNMODE, .T., .T.,  , UPPER(THIS.CTARGET)="CNT")
TOBUFFER.COMPOSEOUTPUT(M.LOREPORT, M.LOSECTION)
ENDIF
LOREPORT.ODOCUMENT = .NULL.
LOREPORT.OFILES = .NULL.
LOREPORT.CLOGFILE = .NULL.
ENDFUNC
**
PROCEDURE setPaperSize
LPARAMETERS NUDPAPERWIDTH, NUDPAPERHEIGHT
THIS.NUDPAPERWIDTH = NUDPAPERWIDTH
THIS.NUDPAPERHEIGHT = NUDPAPERHEIGHT
ENDPROC
**
PROCEDURE ShrinkHeight
LPARAMETERS NUDREDUCEHEIGHTBY
THIS.NUDREDUCEHEIGHTBY = NUDREDUCEHEIGHTBY
ENDPROC
**
PROCEDURE SplitDocument
LPARAMETERS TNSPLITSKIP
THIS.NSPLITSKIP = TNSPLITSKIP
ENDPROC
**
PROCEDURE setEmbeddingType
LPARAMETERS TNEMBTYPE
IF TYPE("tnEmbType")="N"
THIS.EMBTYPE = TNEMBTYPE
ENDIF
ENDPROC
**
PROCEDURE setPermissions
LPARAMETERS TLPRINTDOCUMENT, TLMODIFYDOCUMENT, TLCOPYTEXTANDGRAPHICS, TLADDORMODIFYANNOTATIONS
IF TYPE("this.encryptor")="O"
THIS.ENCRYPTOR.SETPERMISSIONS(TLPRINTDOCUMENT, TLMODIFYDOCUMENT, TLCOPYTEXTANDGRAPHICS, TLADDORMODIFYANNOTATIONS)
ENDIF
ENDPROC
**
PROCEDURE setPasswords
LPARAMETERS TCOWNER, TCUSER, TLREQUIREPASSWORDFIRSTTIME
IF TYPE("this.encryptor")="O"
THIS.ENCRYPTOR.SETPASSWORDS(TCOWNER, TCUSER)
ENDIF
THIS.CWORDREADPASSWORD = TCOWNER
THIS.CWORDWRITEPASSWORD = TCUSER
THIS.LWORDREQUIREPASSWORD = TLREQUIREPASSWORDFIRSTTIME
ENDPROC
**
PROCEDURE setMessageText
LPARAMETERS _X____11334
THIS.CADDTEXT = _X____11334
ENDPROC
**
PROCEDURE registerPDFLScript
LPARAMETERS TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE
THIS.OPDFLSCRIPTS.ADD(TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE)
ENDPROC
**
PROCEDURE unregisterAllPDFLScripts
THIS.OPDFLSCRIPTS.REMOVEALL()
ENDPROC
**
PROCEDURE registerScript
LPARAMETERS TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE
THIS.ODOCUMENTWRITER.OSCRIPTS.ADD(TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE)
ENDPROC
**
PROCEDURE unregisterAllScripts
THIS.ODOCUMENTWRITER.OSCRIPTS.REMOVEALL()
ENDPROC
**
PROCEDURE setThisform
LPARAMETERS TOFORM
THIS.THATFORM = TOFORM
ENDPROC
**
PROCEDURE setThis
LPARAMETERS TOOBJ
THIS.THAT = TOOBJ
ENDPROC
**
PROCEDURE addToLog
LPARAMETERS TCSTR
IF  .NOT. EMPTY(THIS.CLOGFILE)
ADDTOLOG(TCSTR, THIS.CLOGFILE)
ENDIF
ENDPROC
**
PROCEDURE initLog
LPARAMETERS TLSILENT
THIS.SETLOGFILE("_XFRX.log", TLSILENT)
ENDPROC
**
PROCEDURE setLogFile
LPARAMETERS TCLOGFILE, TLSILENT
THIS.CLOGFILE = TCLOGFILE
IF  .NOT. TLSILENT
THIS.ADDTOLOG(REPLICATE("=", 60))
THIS.ADDTOLOG("Log initialized: "+TTOC(DATETIME()))
THIS.ADDTOLOG("XFRX version:"+THIS.GETVERSION())
ENDIF
ENDPROC
**
PROCEDURE Init
THIS.OPDFLSCRIPTS = CREATEOBJECT("PDFLScripts")
THIS.ENCRYPTOR = CREATEOBJECT("pdfencryptor")
DECLARE INTEGER convertFormatString IN hndlib.dll AS convertFormatString STRING @, INTEGER, STRING @
ENDPROC
**
PROCEDURE ResetPageNo
THIS.NPAGENO = 0
ENDPROC
**
PROCEDURE advancePageNo
LPARAMETERS LNSKIP
IF EMPTY(LNSKIP)
LNSKIP = 1
ENDIF
THIS.NPAGENO = THIS.NPAGENO+LNSKIP
ENDPROC
**
PROCEDURE setProgressObj
LPARAMETERS TOOBJ, TNPROGRESSTYPE
THIS.OPROGRESS = TOOBJ
IF EMPTY(TNPROGRESSTYPE)
THIS.NPROGRESSTYPE = 1
ELSE
THIS.NPROGRESSTYPE = TNPROGRESSTYPE
ENDIF
ENDPROC
**
FUNCTION gdiplusSupport
THIS.NLASTERROR = 0
IF ATC("xfrxlib.fll", SET("Library"))=0
SET LIBRARY TO xfrxlib.fll ADDITIVE
ENDIF
IF THIS.NLASTERROR<>0
IF  .NOT. THIS.LSILENT
= MESSAGEBOX("Cannot load xfrxlib.fll", 0, "XFRX")
ENDIF
RETURN -6
ENDIF
RETURN _XFIMAGES()
ENDFUNC
**
FUNCTION ErrorMessage
LPARAMETERS TNERRORNUMBER
DO CASE
CASE TNERRORNUMBER=0
RETURN "OK"
CASE TNERRORNUMBER=-1
RETURN "Cannot load Word or Excel application"
CASE TNERRORNUMBER=-2
RETURN "The Word or Excel application version must be 2000 or higher"
CASE TNERRORNUMBER=-3
RETURN "Cannot create or open the output file"
CASE TNERRORNUMBER=-4
RETURN "Unknown output target"
CASE TNERRORNUMBER=-5
RETURN "Hndlib.dll cannot be loaded (it is missing or an old version is used)"
CASE TNERRORNUMBER=-6
RETURN "Xfrxlib.fll cannot be loaded (it is missing or invalid)"
CASE TNERRORNUMBER=-7
RETURN "Zlib.dll cannot be loaded"
CASE TNERRORNUMBER=-8
RETURN "An old version of xfrxlib.fll is used"
CASE TNERRORNUMBER=-10
RETURN "The existing document is either corrupted or in an unsupported format"
OTHERWISE
RETURN "Unknown error"
ENDCASE
ENDFUNC
**
FUNCTION SetParams
LPARAMETERS TCOUTPUTNAME, TCDIRECTORY, TLNOTOPENWORD, TCCODEPAGE, TLSILENT, TLNEWSESSION, TCTARGET, TCARCHIVE, TLADDITIVE, TLDELETEFILEAFTER, TLAPPENDTOFILE, TNMODE
SET COMPATIBLE FOXPLUS
THIS.ADDTOLOG("SetParams:")
THIS.ADDTOLOG("  Output name    :"+TRANSFORM(TCOUTPUTNAME, ""))
THIS.ADDTOLOG("  Temp directory :"+TRANSFORM(TCDIRECTORY, ""))
THIS.ADDTOLOG("  Not open viewer:"+TRANSFORM(TLNOTOPENWORD, ""))
THIS.ADDTOLOG("  Code page      :"+TRANSFORM(TCCODEPAGE, ""))
THIS.ADDTOLOG("  Silent mode    :"+TRANSFORM(TLSILENT, ""))
THIS.ADDTOLOG("  New Session    :"+TRANSFORM(TLNEWSESSION, ""))
THIS.ADDTOLOG("  Target         :"+TRANSFORM(TCTARGET, ""))
THIS.ADDTOLOG("  VFP version    :"+VERSION())
THIS.NLASTERROR = 0
IF ATC("xfrxlib.fll", SET("Library"))=0
SET LIBRARY TO xfrxlib.fll ADDITIVE
ENDIF
IF THIS.NLASTERROR<>0
IF  .NOT. TLSILENT
= MESSAGEBOX("Cannot load xfrxlib.fll", 0, "XFRX")
ENDIF
RETURN -6
ENDIF
THIS.NLASTERROR = 0
IF _XFIMAGES()=1 .AND. THIS.CHECKXFRXLIBVERSION
LOCAL NXFRXLIBVERSION, NREQUIREDVERSION, LCSTR
LCSTR = _XF_EXTRACTFLLPATH(SET("Library"), "xfrxlib")
*B609633,1 MMT 06/27/2011 Exporting reports to PDF gives error [T20110104.0021][START]
*NREQUIREDVERSION = 124
NREQUIREDVERSION = 129
*B609633,1 MMT 06/27/2011 Exporting reports to PDF gives error [T20110104.0021][END]
NXFRXLIBVERSION = _XFGETVERSION()
IF THIS.NLASTERROR<>0 .OR. M.NXFRXLIBVERSION<>M.NREQUIREDVERSION
IF  .NOT. TLSILENT
= MESSAGEBOX("Error: wrong version of XFRXLIB.FLL!"+CHR(13)+"Current version: "+IIF(EMPTY(NXFRXLIBVERSION), "unknown", ALLTRIM(STR(M.NXFRXLIBVERSION/10, 10, 1)))+CHR(13)+"Required version: "+ALLTRIM(STR(M.NREQUIREDVERSION/10, 10, 1))+CHR(13)+"XFRXLIB.FLL location: "+ALLTRIM(LCSTR), 0, "XFRX")
ENDIF
RETURN -8
ENDIF
ENDIF
DECLARE INTEGER compress2 IN zlib AS cxx STRING @, STRING @, STRING @, INTEGER, INTEGER
LOCAL LA, LB, LD
LA = "Test"
LB = SPACE(500)
LD = SPACE(500)
THIS.NLASTERROR = 0
= CXX(@LB, @LD, @LA, LEN(LA), -1)
IF THIS.NLASTERROR<>0
IF  .NOT. TLSILENT
= MESSAGEBOX("Cannot load zlib.dll", 0, "XFRX")
ENDIF
RETURN -7
ENDIF
DECLARE INTEGER dobmp IN hndlib.Dll AS dopic STRING @, STRING @, INTEGER, STRING @, STRING @, INTEGER, INTEGER, STRING
DECLARE INTEGER mkPDFString IN hndlib.dll STRING, INTEGER, STRING, STRING @, STRING @
DECLARE INTEGER formatBIDIString IN hndlib.dll STRING, INTEGER, STRING
DECLARE INTEGER ww IN hndlib AS x_ww STRING @, STRING @, SHORT, SHORT, SHORT, SHORT, STRING @, SHORT, SHORT
DECLARE INTEGER _xfWordWrap IN xfrxlib.fll AS x_ww_gdiplus STRING @, STRING @, SHORT, SHORT, SHORT, SHORT, STRING @, SHORT, SHORT
DECLARE INTEGER getFParam IN hndlib AS getFParam STRING @, STRING @, SHORT, SHORT, SHORT, SHORT, STRING @, STRING, INTEGER, STRING, INTEGER, STRING
DECLARE INTEGER base64 IN hndlib AS base64 STRING, STRING
DECLARE INTEGER getVersion IN hndlib AS getHNDLIBVersion
DECLARE INTEGER esab64 IN hndlib AS esab64 STRING, STRING
DECLARE INTEGER bmp2wmf IN hndlib AS bmp2wmf STRING, STRING
DECLARE INTEGER ?getPar@@YAHH@Z IN hndlib AS getPar INTEGER
DECLARE INTEGER FindWindow IN win32api STRING, STRING
DECLARE INTEGER ShellExecute IN shell32.Dll INTEGER, STRING, STRING, STRING, STRING, INTEGER
PUBLIC __XFRET
__XFRET = SPACE(65000)
THIS.NLASTERROR = 0
LOCAL NHNDLIBVERSION, NCURRENTVERSION, LCTEMPFILE, LCSTR, LNAT
NHNDLIBVERSION = -1
NCURRENTVERSION = 123
IF GETHNDLIBVERSION()<>NCURRENTVERSION
IF  .NOT. TLSILENT
NHNDLIBVERSION = GETHNDLIBVERSION()
LCTEMPFILE = ADDBS(SYS(2023))+"_"+SUBSTR(SYS(2015), 4)+".txt"
DISPLAY DLLS TO FILE &LCTEMPFILE NOCONSOLE
LCSTR = FILETOSTR(LCTEMPFILE)
LNAT = ATC("getHNDLIBVersion", LCSTR)
LCSTR = ALLTRIM(SUBSTR(LCSTR, LNAT+16))
LNAT = ATC(CHR(13), LCSTR)
LCSTR = LEFT(LCSTR, LNAT-1)
= MESSAGEBOX("Wrong version of hndlib.dll"+CHR(13)+"Current version: "+ALLTRIM(STR(NHNDLIBVERSION))+CHR(13)+"Required version: "+ALLTRIM(STR(NCURRENTVERSION))+CHR(13)+"HNDLIB.DLL location: "+ALLTRIM(LCSTR), 0, "XFRX")
ENDIF
RETURN -5
ENDIF
LOCAL LNRETVAL
IF  .NOT. EMPTY(TCARCHIVE)
LNRETVAL = THIS.CHECKFILE(TCARCHIVE)
IF LNRETVAL<>0
RETURN M.LNRETVAL
ENDIF
ENDIF
THIS.CARCHIVE = TCARCHIVE
THIS.LARCHIVEADDITIVE = TLADDITIVE
THIS.LDELETEFILEAFTER = TLDELETEFILEAFTER
THIS.CPAGESCOPE = .F.
THIS.RESETPAGENO()
IF EMPTY(M.TCDIRECTORY)
THIS.CDIRECTORY = "./"
ELSE
THIS.CDIRECTORY = ADDBS(TCDIRECTORY)
ENDIF
THIS.KILLSESSIONDIR()
THIS.INITIALIZESESSIONDIR()
THIS.ADDTOLOG("Session dir :"+TRANSFORM(THIS.CSESSIONDIR, ""))
THIS.COUTPUTNAME = M.TCOUTPUTNAME
THIS.LNOTOPENWORD = M.TLNOTOPENWORD
THIS.LSILENT = M.TLSILENT
THIS.LNEWSESSION = M.TLNEWSESSION
IF EMPTY(M.TCCODEPAGE)
M.TCCODEPAGE = CPCURRENT()
DO CASE
CASE M.TCCODEPAGE=950
M.TCCODEPAGE = "big5"
CASE M.TCCODEPAGE=936
M.TCCODEPAGE = "GB2312"
ENDCASE
ENDIF
THIS.CCODEPAGE = M.TCCODEPAGE
IF EMPTY(M.TCTARGET)
THIS.CTARGET = "DOC"
ELSE
THIS.CTARGET = UPPER(M.TCTARGET)
ENDIF
DO CASE
CASE THIS.CTARGET="DOC" .OR. THIS.CTARGET="RTD"
IF THIS.CTARGET="RTD"
THIS.CTARGET = "DOC"
THIS.CSUBTARGET = "RTD"
ELSE
THIS.CSUBTARGET = "DOC"
ENDIF
RETURN THIS.OPENDOC()
CASE THIS.CTARGET="PDF"
IF UPPER(JUSTEXT(THIS.COUTPUTNAME))<>"PDF"
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".PDF"
ENDIF
LNRETVAL = THIS.CHECKFILE()
IF LNRETVAL=0
THIS.ODOCUMENT = CREATEOBJECT("pdf", THIS.CDIRECTORY)
LNRETVAL = THIS.ODOCUMENT.INITDOC(THIS.COUTPUTNAME, TLAPPENDTOFILE)
IF LNRETVAL=0
THIS.ODOCUMENT.ENCRYPTOR = THIS.ENCRYPTOR
DO CASE
CASE TYPE("m.tcCodePage")="N"
THIS.CCODEPAGE = M.TCCODEPAGE
CASE TYPE("m.tcCodePage")="C"
DO CASE
CASE UPPER(ALLTRIM(M.TCCODEPAGE))="BIG5"
THIS.CCODEPAGE = 950
OTHERWISE
THIS.CCODEPAGE = STRTRAN(UPPER(M.TCCODEPAGE), "WINDOWS", "")
THIS.CCODEPAGE = STRTRAN(THIS.CCODEPAGE, "-", "")
THIS.CCODEPAGE = VAL(THIS.CCODEPAGE)
ENDCASE
ENDCASE
THIS.ODOCUMENT.NCODEPAGE = THIS.CCODEPAGE
THIS.ODOCUMENT.PICTUREDPI = THIS.PICTUREDPI
IF INLIST(THIS.CCODEPAGE, 950, 932)
THIS.ODOCUMENT.LUSEUNICODEMAPPING = .T.
ENDIF
ENDIF
ENDIF
RETURN M.LNRETVAL
CASE THIS.CTARGET="HTML"
IF UPPER(JUSTEXT(THIS.COUTPUTNAME))<>"HTM" .AND. UPPER(JUSTEXT(THIS.COUTPUTNAME))<>"HTML"
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".HTM"
ENDIF
LNRETVAL = THIS.CHECKFILE()
IF LNRETVAL=0
THIS.ODOCUMENT = CREATEOBJECT("html", THIS.CDIRECTORY)
THIS.ODOCUMENT.INITDOC(THIS.COUTPUTNAME)
ENDIF
RETURN M.LNRETVAL
CASE THIS.CTARGET="MHT"
IF UPPER(JUSTEXT(THIS.COUTPUTNAME))<>"MHT"
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".MHT"
ENDIF
LNRETVAL = THIS.CHECKFILE()
IF LNRETVAL=0
THIS.ODOCUMENT = CREATEOBJECT("html", THIS.CDIRECTORY)
THIS.ODOCUMENT.INITDOC(THIS.COUTPUTNAME)
THIS.ODOCUMENT.LMHT = .T.
THIS.ODOCUMENT.CMHT = '3D'
THIS.CTARGET = "HTML"
ENDIF
RETURN 0
CASE THIS.CTARGET="XLS"
LNRETVAL = THIS.CHECKFILE()
IF LNRETVAL=0
THIS.ODOCUMENTWRITER = CREATEOBJECT("XLSWriter", THIS)
IF THIS.ODOCUMENTWRITER.NERRORCODE<>0
LNRETVAL = THIS.ODOCUMENTWRITER.NERRORCODE
THIS.ODOCUMENTWRITER = .NULL.
ENDIF
ENDIF
RETURN M.LNRETVAL
CASE THIS.CTARGET="RTF"
LNRETVAL = THIS.CHECKFILE()
IF LNRETVAL=0
THIS.ODOCUMENTWRITER = CREATEOBJECT("RTFWriter", THIS)
ENDIF
RETURN M.LNRETVAL
CASE THIS.CTARGET="CNT"
IF EMPTY(TNMODE)
THIS.CTARGET = "XFF"
THIS.ODOCUMENTWRITER = CREATEOBJECT("XFFWriter")
THIS.ODOCUMENTWRITER.LCNTMODE = .T.
ELSE
THIS.ODOCUMENTWRITER = CREATEOBJECT("CNTWriter")
ENDIF
RETURN 0
CASE THIS.CTARGET="BATCHER"
THIS.ODOCUMENTWRITER = CREATEOBJECT("BatchWriter")
RETURN 0
CASE THIS.CTARGET="FDOC"
LNRETVAL = THIS.CHECKFILE()
IF M.LNRETVAL=0
THIS.ODOCUMENTWRITER = CREATEOBJECT("DOCFlowLayoutWriter", THIS)
IF THIS.ODOCUMENTWRITER.NERRORCODE<>0
LNRETVAL = THIS.ODOCUMENTWRITER.NERRORCODE
THIS.ODOCUMENTWRITER = .NULL.
ELSE
LNRETVAL = 0
ENDIF
ENDIF
RETURN M.LNRETVAL
CASE THIS.CTARGET="FRTF"
LNRETVAL = THIS.CHECKFILE()
IF M.LNRETVAL=0
THIS.ODOCUMENTWRITER = CREATEOBJECT("RTFFlowLayoutWriter", THIS)
IF THIS.ODOCUMENTWRITER.NERRORCODE<>0
LNRETVAL = THIS.ODOCUMENTWRITER.NERRORCODE
THIS.ODOCUMENTWRITER = .NULL.
ELSE
LNRETVAL = 0
ENDIF
ENDIF
RETURN M.LNRETVAL
CASE THIS.CTARGET="PLAIN"
THIS.ODOCUMENTWRITER = CREATEOBJECT("PlainTextWriter", THIS)
RETURN 0
CASE THIS.CTARGET="XFF"
IF  .NOT. EMPTY(THIS.COUTPUTNAME) .AND. EMPTY(JUSTEXT(THIS.COUTPUTNAME))
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".XFF"
ENDIF
DO CASE
CASE TYPE("m.tcCodePage")="N"
THIS.CCODEPAGE = ALLTRIM(STR(M.TCCODEPAGE))
CASE TYPE("m.tcCodePage")="C"
THIS.CCODEPAGE = STRTRAN(UPPER(M.TCCODEPAGE), "WINDOWS", "")
THIS.CCODEPAGE = STRTRAN(THIS.CCODEPAGE, "-", "")
OTHERWISE
THIS.CCODEPAGE = ALLTRIM(STR(CPCURRENT()))
ENDCASE
THIS.ODOCUMENTWRITER = CREATEOBJECT("XFFWriter")
THIS.ODOCUMENTWRITER.CTEMPDIR = THIS.CDIRECTORY
THIS.ODOCUMENTWRITER.CCODEPAGE = THIS.CCODEPAGE
THIS.ODOCUMENTWRITER.DEFAULTPICTUREFORMAT = THIS.DEFAULTPICTUREFORMAT
THIS.ODOCUMENTWRITER.PICTUREDPI = THIS.PICTUREDPI
RETURN 0
CASE THIS.CTARGET="XML"
IF  .NOT. EMPTY(THIS.COUTPUTNAME) .AND. LEN(SUBSTR(THIS.COUTPUTNAME, AT(".", THIS.COUTPUTNAME)))=0
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".XML"
ENDIF
THIS.ODOCUMENTWRITER = CREATEOBJECT("XMLWriter")
DO CASE
CASE TYPE("m.tcCodePage")="N" .AND. M.TCCODEPAGE>0
THIS.CCODEPAGE = ALLTRIM(STR(M.TCCODEPAGE))
CASE TYPE("m.tcCodePage")="C"
LCPOM = STRTRAN(UPPER(M.TCCODEPAGE), "WINDOWS", "")
LCPOM = STRTRAN(LCPOM, "-", "")
IF  .NOT. EMPTY(LCPOM)
THIS.CCODEPAGE = LCPOM
ENDIF
ENDCASE
RETURN 0
CASE THIS.CTARGET="ODT"
THIS.ODOCUMENT = CREATEOBJECT("ODT", THIS.CDIRECTORY)
IF  .NOT. EMPTY(THIS.COUTPUTNAME) .AND. LEN(SUBSTR(THIS.COUTPUTNAME, AT(".", THIS.COUTPUTNAME)))=0
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".ODT"
ENDIF
THIS.ODOCUMENTWRITER = CREATEOBJECT("OOWBoxLayoutWriter", THIS)
RETURN 0
CASE THIS.CTARGET="FODT"
THIS.ODOCUMENT = CREATEOBJECT("ODT", THIS.CDIRECTORY)
IF  .NOT. EMPTY(THIS.COUTPUTNAME) .AND. LEN(SUBSTR(THIS.COUTPUTNAME, AT(".", THIS.COUTPUTNAME)))=0
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".ODT"
ENDIF
THIS.ODOCUMENTWRITER = CREATEOBJECT("OOWFlowLayoutWriter", THIS)
RETURN 0
CASE THIS.CTARGET="ODS"
THIS.ODOCUMENT = CREATEOBJECT("ODT", THIS.CDIRECTORY)
IF  .NOT. EMPTY(THIS.COUTPUTNAME) .AND. LEN(SUBSTR(THIS.COUTPUTNAME, AT(".", THIS.COUTPUTNAME)))=0
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".ods"
ENDIF
THIS.ODOCUMENTWRITER = CREATEOBJECT("OOCBoxLayoutWriter", THIS)
RETURN 0
CASE THIS.CTARGET="FODS"
THIS.ODOCUMENT = CREATEOBJECT("ODT", THIS.CDIRECTORY)
IF  .NOT. EMPTY(THIS.COUTPUTNAME) .AND. LEN(SUBSTR(THIS.COUTPUTNAME, AT(".", THIS.COUTPUTNAME)))=0
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".ods"
ENDIF
THIS.ODOCUMENTWRITER = CREATEOBJECT("OOCFlowLayoutWriter", THIS)
RETURN 0
CASE THIS.CTARGET="XPS"
LNRETVAL = THIS.CHECKFILE()
IF LNRETVAL=0
THIS.ODOCUMENTWRITER = CREATEOBJECT("XPSWriter", THIS)
ENDIF
RETURN M.LNRETVAL
OTHERWISE
RETURN -4
ENDCASE
ENDFUNC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
IF THIS.CTARGET="HTML"
DO CASE
CASE TYPE("tuPar1")="C" .AND. UPPER(TUPAR1)="HTML_ONCLICKLINK"
THIS.ODOCUMENT.ONCLICKLINK = TUPAR2
CASE TYPE("tuPar1")="C" .AND. UPPER(TUPAR1)="HTML_TARGETLINKS"
THIS.ODOCUMENT.CLINKALIAS = TUPAR2
CASE TYPE("tuPar1")="C" .AND. UPPER(TUPAR1)="HTML_FONT_SIZE_IN_PX"
THIS.ODOCUMENT.LUSEPIXELS =  .NOT. EMPTY(TUPAR2)
OTHERWISE
THIS.ODOCUMENT.SETOUTLINE(TUPAR2)
IF  .NOT. EMPTY(TUPAR3)
THIS.ODOCUMENT.SETOUTLINETYPE(TUPAR3)
ENDIF
ENDCASE
ENDIF
IF THIS.CTARGET="PDF"
DO CASE
CASE TYPE("tuPar1")="C" .AND. UPPER(TUPAR1)="PRINT_BOOKMARKS"
THIS.ODOCUMENT.SETOUTLINE(TUPAR2)
OTHERWISE
ENDCASE
ENDIF
IF ISNULL(THIS.ODOCUMENTWRITER)
RETURN
ENDIF
THIS.ODOCUMENTWRITER.SETOTHERPARAMS(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
ENDPROC
**
FUNCTION checkFile
LPARAMETERS TCFILENAME
IF EMPTY(TCFILENAME)
TCFILENAME = THIS.COUTPUTNAME
ENDIF
IF FILE(FULLPATH(THIS.COUTPUTNAME))
LOCAL _TMP_H
_TMP_H = FOPEN(FULLPATH(THIS.COUTPUTNAME), 1)
IF _TMP_H<>-1
= FCLOSE(_TMP_H)
ELSE
IF  .NOT. THIS.LSILENT
= MESSAGEBOX("Cannot access "+THIS.COUTPUTNAME+"!", 16, "XFRX")
ENDIF
RETURN -3
ENDIF
ENDIF
RETURN 0
ENDFUNC
**
FUNCTION OpenDoc
LOCAL LCPREVERROR
PRIVATE LNERROR
IF 0<>THIS.CHECKFILE()
RETURN -3
ENDIF
LCPREVERROR = ON("error")
LNERROR = 0
ON ERROR LNERROR=ERROR()
IF  .NOT. THIS.LNOTOPENWORD .AND.  .NOT. THIS.LNEWSESSION
THIS.ODOC = GETOBJECT( , "Word.Application")
ELSE
LNERROR = 1
ENDIF
IF LNERROR<>0 .OR. TYPE("this.odoc")<>"O" .OR. ISNULL(THIS.ODOC)
LNERROR = 0
THIS.ODOC = CREATEOBJECT("Word.Application")
ENDIF
ON ERROR &LCPREVERROR
IF TYPE("This.oDoc")<>"O" .OR. ISNULL(THIS.ODOC)
IF  .NOT. THIS.LSILENT
= MESSAGEBOX("Cannot access Word application!", 16, "XFRX")
ENDIF
RETURN -1
ENDIF
IF VAL(THIS.ODOC.VERSION)<9
IF  .NOT. THIS.LSILENT
= MESSAGEBOX("Sorry, Word 2000 or higher is required!", 16, "XFRX")
ENDIF
THIS.ODOC.QUIT(0)
RETURN -2
ENDIF
RETURN 0
ENDFUNC
**
PROCEDURE setAuthor
LPARAMETERS TCAUTHOR
THIS.CAUTHOR = TCAUTHOR
ENDPROC
**
PROCEDURE setTitle
LPARAMETERS TCTITLE
THIS.CTITLE = TCTITLE
ENDPROC
**
PROCEDURE setSubject
LPARAMETERS TCSUBJECT
THIS.CSUBJECT = TCSUBJECT
ENDPROC
**
PROCEDURE setKeywords
LPARAMETERS TCKEYWORDS
THIS.CKEYWORDS = TCKEYWORDS
ENDPROC
**
PROCEDURE setCreator
LPARAMETERS TCCREATOR
THIS.CCREATOR = TCCREATOR
ENDPROC
**
PROCEDURE setProducer
LPARAMETERS TCPRODUCER
THIS.CPRODUCER = TCPRODUCER
ENDPROC
**
PROCEDURE setCreationDate
LPARAMETERS TCCREATIONDATE
THIS.CCREATIONDATE = TCCREATIONDATE
ENDPROC
**
PROCEDURE setComments
LPARAMETERS TCCOMMENTS
THIS.CCOMMENTS = TCCOMMENTS
ENDPROC
**
PROCEDURE setCategory
LPARAMETERS TCCATEGORY
THIS.CCATEGORY = TCCATEGORY
ENDPROC
**
PROCEDURE setManager
LPARAMETERS TCMANAGER
THIS.CMANAGER = TCMANAGER
ENDPROC
**
PROCEDURE setCompany
LPARAMETERS TCCOMPANY
THIS.CCOMPANY = TCCOMPANY
ENDPROC
**
PROCEDURE setPageRange
LPARAMETERS TUFROM, TUTO
DO CASE
CASE TYPE("tuFrom")="N"
IF TYPE("tuTo")="N"
THIS.CPAGESCOPE = ALLTRIM(STR(TUFROM))+"-"+ALLTRIM(STR(TUTO))
ELSE
THIS.CPAGESCOPE = ALLTRIM(STR(TUFROM))+"-100000"
ENDIF
CASE TYPE("tuFrom")="C"
THIS.CPAGESCOPE = TUFROM
ENDCASE
ENDPROC
**
PROCEDURE setReportParams
LPARAMETERS OREPORT
OREPORT.SETSCRIPTS(THIS.OPDFLSCRIPTS)
OREPORT.SETADDTEXT(THIS.CADDTEXT)
OREPORT.CTMPFILE = THIS.CDIRECTORY+ALLTRIM(SUBSTR(SYS(2015), 3, 10))+".tmx"
OREPORT.ODOCUMENTWRITER = THIS.ODOCUMENTWRITER
IF THIS.NREPORTNUMBER=0
THIS.NSPLITCOUNTDOWN = THIS.NSPLITSKIP
THIS.NSPLITFILECOUNTER = 1
THIS.FILENAME = THIS.CDIRECTORY+SYS(3)
THIS.FDIR = THIS.FILENAME+"_files"
THIS.FILENAME = THIS.FILENAME+".tmp"
THIS.HEADERFILE = THIS.CDIRECTORY+ALLTRIM(SUBSTR(SYS(2015), 3, 10))+".tmp"
THIS.OFILES = CREATEOBJECT("xfrxFiles", THIS.FDIR, THIS.FILENAME)
DO CASE
CASE THIS.CTARGET="DOC"
THIS.ODOCUMENT = .NULL.
CASE THIS.CTARGET="PDF"
THIS.ODOCUMENT.SETAUTHOR(THIS.CAUTHOR)
THIS.ODOCUMENT.SETTITLE(THIS.CTITLE)
THIS.ODOCUMENT.SETSUBJECT(THIS.CSUBJECT)
THIS.ODOCUMENT.SETKEYWORDS(THIS.CKEYWORDS)
THIS.ODOCUMENT.SETCREATOR(THIS.CCREATOR)
THIS.ODOCUMENT.SETPRODUCER(THIS.CPRODUCER)
THIS.ODOCUMENT.SETCOMPANY(THIS.CCOMPANY)
THIS.ODOCUMENT.SETCOMMENTS(THIS.CCOMMENTS)
THIS.ODOCUMENT.SETCATEGORY(THIS.CCATEGORY)
THIS.ODOCUMENT.SETMANAGER(THIS.CMANAGER)
THIS.ENCRYPTOR.COMPUTEKEYS()
THIS.ODOCUMENT.CEMBTYPE = THIS.EMBTYPE
CASE THIS.CTARGET="ODT" .OR. THIS.CTARGET="FODT"
THIS.ODOCUMENT.SETTITLE(THIS.CTITLE)
THIS.ODOCUMENT.SETSUBJECT(THIS.CSUBJECT)
THIS.ODOCUMENT.SETKEYWORDS(THIS.CKEYWORDS)
THIS.ODOCUMENT.SETCOMMENTS(THIS.CCOMMENTS)
ENDCASE
IF THIS.CTARGET="HTML"
THIS.ODOCUMENT.SETAUTHOR(THIS.CAUTHOR)
THIS.ODOCUMENT.SETTITLE(THIS.CTITLE)
THIS.ODOCUMENT.SETSUBJECT(THIS.CSUBJECT)
THIS.ODOCUMENT.SETKEYWORDS(THIS.CKEYWORDS)
ENDIF
IF THIS.CTARGET<>"HTML"
OREPORT.SETAUTHOR(THIS.CAUTHOR)
OREPORT.SETTITLE(THIS.CTITLE)
OREPORT.SETSUBJECT(THIS.CSUBJECT)
OREPORT.SETKEYWORDS(THIS.CKEYWORDS)
OREPORT.SETCREATOR(THIS.CCREATOR)
OREPORT.SETPRODUCER(THIS.CPRODUCER)
OREPORT.SETCOMPANY(THIS.CCOMPANY)
OREPORT.SETCOMMENTS(THIS.CCOMMENTS)
OREPORT.SETCATEGORY(THIS.CCATEGORY)
OREPORT.SETMANAGER(THIS.CMANAGER)
ENDIF
ENDIF
OREPORT.NSPLITSKIP = THIS.NSPLITSKIP
OREPORT.NSPLITCOUNTDOWN = THIS.NSPLITCOUNTDOWN
ENDPROC
**
FUNCTION ProcessReport
LPARAMETERS TCREPORTNAME, TCFORCLAUSE, TLSUMMARY, TCSCOPECLAUSE, TCWHILECLAUSE, TLPLAIN
LOCAL OREPORT, LISEL, LOSTATE
LOCAL LCSAFETY
LCSAFETY = SET("safety")
SET SAFETY OFF
IF TYPE("tcReportName")<>"L"
IF EMPTY(M.TCREPORTNAME)
RETURN .F.
ENDIF
IF  .NOT. THIS.LSILENT
WAIT WINDOW NOWAIT "Processing..."
ENDIF
TCREPORTNAME = ALLTRIM(M.TCREPORTNAME)
IF EMPTY(JUSTEXT(M.TCREPORTNAME))
TCREPORTNAME = M.TCREPORTNAME+".frx"
ENDIF
LISEL = SELECT(0)
OREPORT = CREATEOBJECT("cusURReport", THIS, TCREPORTNAME, THIS.CTARGET, TLSUMMARY, THIS.CLOGFILE)
IF TYPE("oReport")<>"O"
IF  .NOT. THIS.LSILENT
= MESSAGEBOX(M.TCREPORTNAME+" not found!")
ENDIF
RETURN .F.
ENDIF
IF EMPTY(M.TCFORCLAUSE)
TCFORCLAUSE = ".t."
ENDIF
THIS.ADDTOLOG("Report Name: "+ALLTRIM(TCREPORTNAME))
THIS.ADDTOLOG("For Clause : "+ALLTRIM(TCFORCLAUSE))
OREPORT.LPLAIN = TLPLAIN
OREPORT.NRECORDSTOPROCESS = THIS.NRECORDSTOPROCESS
THIS.SETREPORTPARAMS(OREPORT)
SELECT (M.LISEL)
IF OREPORT.NEEDSPREPROCESSING()
LOCAL LCOLDTARGET, LOOLDWRITER, LNOLDPAGENO
LCOLDTARGET = OREPORT.CTARGET
OREPORT.CTARGET = "CXXXX"
LOOLDWRITER = OREPORT.ODOCUMENTWRITER
OREPORT.TOPROGRESS = .NULL.
OREPORT.ODOCUMENTWRITER = CREATEOBJECT("BatchWriter")
LNOLDPAGENO = _PAGENO
_PageTotal = 1
OREPORT.SETUPREPORT(THIS.FILENAME, THIS.HEADERFILE, THIS.NREPORTNUMBER+1, THIS.OFILES, TCFORCLAUSE, THIS.CCODEPAGE, .T., THIS.ODOCUMENT, .NULL., THIS.NPROGRESSTYPE, THIS.CLOGFILE, TCSCOPECLAUSE, TCWHILECLAUSE, THIS)
OREPORT.RUNREPORT(.NULL., .T.)
_PageTotal = _PAGENO-LNOLDPAGENO+1
_PAGENO = LNOLDPAGENO
OREPORT.CTARGET = LCOLDTARGET
OREPORT.ODOCUMENTWRITER = LOOLDWRITER
OREPORT.IOVARIABLES.RESETALLVARIABLES()
OREPORT.IOSECTIONS.RESET()
OREPORT.NTABLERELATIONS = 0
OREPORT.NCURRENTREPORTPAGENO = 1
OREPORT.CPAGESCOPE = THIS.CPAGESCOPE
ENDIF
IF THIS.NREPORTNUMBER=0
_PAGENO = THIS.NPAGENO+1
OREPORT.CPAGESCOPE = THIS.CPAGESCOPE
OREPORT.SETUPREPORT(THIS.FILENAME, THIS.HEADERFILE, THIS.NREPORTNUMBER+1, THIS.OFILES, TCFORCLAUSE, THIS.CCODEPAGE, .T., THIS.ODOCUMENT, THIS.OPROGRESS, THIS.NPROGRESSTYPE, THIS.CLOGFILE, TCSCOPECLAUSE, TCWHILECLAUSE, THIS)
LOSTATE = OREPORT.RUNREPORT(.NULL.)
ELSE
OREPORT.NCURRENTREPORTPAGENOOFFSET = THIS.NPAGENOOFFSET
_PAGENO = THIS.NPAGENO+1
OREPORT.SETUPREPORT(THIS.FILENAME, THIS.HEADERFILE, THIS.NREPORTNUMBER+1, THIS.OFILES, TCFORCLAUSE, THIS.CCODEPAGE, .F., THIS.ODOCUMENT, THIS.OPROGRESS, THIS.NPROGRESSTYPE, THIS.CLOGFILE, TCSCOPECLAUSE, TCWHILECLAUSE, THIS)
LOSTATE = OREPORT.RUNREPORT(.NULL.)
ENDIF
ELSE
OREPORT = THIS.OSTOREDREPORT
OREPORT.NRECORDSTOPROCESS = THIS.NRECORDSTOPROCESS
LOSTATE = OREPORT.RUNREPORT(THIS.OSTOREDSTATE)
ENDIF
IF ISNULL(LOSTATE)
THIS.NPAGENOOFFSET = THIS.NPAGENOOFFSET+OREPORT.NCURRENTREPORTPAGENO
THIS.NREPORTNUMBER = THIS.NREPORTNUMBER+1
THIS.NPAGENO = _PAGENO
IF  .NOT. EMPTY(OREPORT.CTMPFILE)
ERASE (OREPORT.CTMPFILE)
ENDIF
SET SAFETY &LCSAFETY
THIS.OSTOREDREPORT = .NULL.
THIS.OSTOREDSTATE = .NULL.
RETURN .T.
ELSE
THIS.OSTOREDREPORT = OREPORT
THIS.OSTOREDSTATE = LOSTATE
RETURN .F.
ENDIF
ENDFUNC
**
PROCEDURE WordFooter
LPARAMETERS LCFILENAME
LOCAL LCSTR
_STRTOFILE(GETTEMPLATE(4), THIS.HEADERFILE, .T.)
_STRTOFILE(GETTEMPLATE(2), LCFILENAME, .T.)
LOCAL _TMP_FILE, H1, H2, LCSTR
_TMP_FILE = THIS.CDIRECTORY+ALLTRIM(SUBSTR(SYS(2015), 3, 10))+".tmp"
LOCAL LLSAF
LLSAF = SET("safety")
SET SAFETY OFF
COPY FILE (THIS.FILENAME) TO (_TMP_FILE)
COPY FILE (THIS.HEADERFILE) TO (THIS.FILENAME)
H1 = FOPEN(_TMP_FILE)
H2 = FOPEN(THIS.FILENAME, 1)
= FSEEK(H2, 0, 2)
DO WHILE  .NOT. FEOF(H1)
LCSTR = FREAD(H1, 2048)
= FWRITE(H2, LCSTR)
ENDDO
= FCLOSE(H1)
= FCLOSE(H2)
IF  .NOT. EMPTY(THIS.HEADERFILE)
ERASE (THIS.HEADERFILE)
ENDIF
IF  .NOT. EMPTY(_TMP_FILE)
ERASE (_TMP_FILE)
ENDIF
SET SAFETY &LLSAF
ENDPROC
**
FUNCTION getVersion
RETURN "12.6.0001"+" License granted to: demo version"
ENDFUNC
**
FUNCTION getDocName
LOCAL LCEXT, LCOUT
IF THIS.NSPLITSKIP>0
LCEXT = JUSTEXT(THIS.COUTPUTNAME)
IF  .NOT. EMPTY(LCEXT)
LCOUT = LEFT(THIS.COUTPUTNAME, RAT(".", THIS.COUTPUTNAME)-1)+PADL(ALLTRIM(STR(THIS.NSPLITFILECOUNTER)), 2, "0")+"."+LCEXT
ELSE
LCOUT = THIS.COUTPUTNAME+ALLTRIM(STR(THIS.NSPLITFILECOUNTER))
ENDIF
THIS.NSPLITFILECOUNTER = THIS.NSPLITFILECOUNTER+1
ELSE
LCOUT = THIS.COUTPUTNAME
ENDIF
RETURN ADDBS(JUSTPATH(FULLPATH(LCOUT)))+JUSTFNAME(LCOUT)
ENDFUNC
**
PROCEDURE AnotherDOCPlease
LOCAL LCOUTPUT, LNDOT
THIS.OFILES.PROCESSFILES()
THIS.WORDFOOTER(THIS.FILENAME)
LCOUTPUT = THIS.GETDOCNAME()
IF FILE(LCOUTPUT)
ERASE (LCOUTPUT)
ENDIF
THIS.ODOC.DOCUMENTS.OPEN(FULLPATH(THIS.FILENAME))
THIS.ODOC.ACTIVEWINDOW.VIEW.TYPE = 3
THIS.ODOC.ACTIVEDOCUMENT.SAVEAS(LCOUTPUT, 0)
IF  .NOT. THIS.LNOTOPENWORD
THIS.ODOC.VISIBLE = .T.
ENDIF
IF  .NOT. EMPTY(THIS.FDIR)
ERASE FULLPATH(THIS.FDIR)+"\*.*"
ENDIF
ENDPROC
**
FUNCTION finalize
LOCAL LURETVAL
LURETVAL = .T.
DO CASE
CASE THIS.CTARGET="DOC"
LOCAL __TMP_WND
THIS.OFILES.PROCESSFILES()
THIS.WORDFOOTER(THIS.FILENAME)
THIS.ODOC.OPTIONS.CONFIRMCONVERSIONS = .F.
THIS.ODOC.DOCUMENTS.OPEN(FULLPATH(THIS.FILENAME))
THIS.ODOC.ACTIVEWINDOW.VIEW.TYPE = 3
IF  .NOT. EMPTY(THIS.CWORDREADPASSWORD)
THIS.ODOC.ACTIVEDOCUMENT.PASSWORD = THIS.CWORDREADPASSWORD
ENDIF
IF  .NOT. EMPTY(THIS.CWORDWRITEPASSWORD)
THIS.ODOC.ACTIVEDOCUMENT.WRITEPASSWORD = THIS.CWORDWRITEPASSWORD
ENDIF
LOCAL LLSAF, LCOUTPUT
LLSAF = SET("safety")
SET SAFETY OFF
LCOUTPUT = THIS.GETDOCNAME()
IF FILE(LCOUTPUT)
ERASE (LCOUTPUT)
ENDIF
IF THIS.CSUBTARGET="RTD"
THIS.ODOC.ACTIVEDOCUMENT.SAVEAS(LCOUTPUT, 6)
ELSE
THIS.ODOC.ACTIVEDOCUMENT.SAVEAS(LCOUTPUT, 0)
ENDIF
IF  .NOT. EMPTY(THIS.FILENAME)
ERASE FULLPATH(THIS.FILENAME)
ENDIF
IF  .NOT. EMPTY(THIS.FDIR)
ERASE FULLPATH(THIS.FDIR)+"\*.*"
ENDIF
IF DIRECTORY(THIS.FDIR)
RD FULLPATH(THIS.FDIR)
ENDIF
SET SAFETY &LLSAF
IF THIS.LNOTOPENWORD
THIS.ODOC.QUIT(0)
ELSE
THIS.ODOC.ACTIVEWINDOW.VIEW.TYPE = 3
IF ( .NOT. EMPTY(THIS.CWORDREADPASSWORD) .OR.  .NOT. EMPTY(THIS.CWORDWRITEPASSWORD)) .AND. THIS.LWORDREQUIREPASSWORD
THIS.ODOC.ACTIVEDOCUMENT.CLOSE()
THIS.ODOC.DOCUMENTS.OPEN(FULLPATH(THIS.COUTPUTNAME))
ENDIF
THIS.ODOC.VISIBLE = .T.
__TMP_WND = THIS.ODOC.WINDOWSTATE
IF __TMP_WND=0
THIS.ODOC.WINDOWSTATE = 1
ENDIF
THIS.ODOC.APPLICATION.ACTIVATE()
ENDIF
CASE THIS.CTARGET="PDF"
THIS.ODOCUMENT.WRITEPAGES()
THIS.ODOCUMENT.WRITEFONTOBJS()
THIS.ODOCUMENT.WRITETRAILER()
THIS.ODOCUMENT.FINISH()
IF  .NOT. THIS.LNOTOPENWORD
* MAH
* = SHELLEXECUTE(FINDWINDOW(0, _SCREEN.CAPTION), "open", THIS.COUTPUTNAME, "", "", 1)
ENDIF
CASE THIS.CTARGET="HTML"
THIS.ODOCUMENT.ENDDOC()
THIS.ODOCUMENT.FINISH()
IF  .NOT. THIS.LNOTOPENWORD
IF  .NOT. THIS.LNEWSESSION
* MAH
* = SHELLEXECUTE(FINDWINDOW(0, _SCREEN.CAPTION), "open", THIS.COUTPUTNAME, "", "", 1)
ELSE
* MAH
* = SHELLEXECUTE(FINDWINDOW(0, _SCREEN.CAPTION), "opennew", THIS.COUTPUTNAME, "", "", 1)
ENDIF
ENDIF
OTHERWISE
LOCAL LNACTUALSELECTEDALIAS
LNACTUALSELECTEDALIAS = SELECT(0)
THIS.ODOCUMENTWRITER.FINALIZE(THIS)
LURETVAL = THIS.ODOCUMENTWRITER
IF  .NOT. THIS.LSILENT
WAIT CLEAR
ENDIF
IF  .NOT. THIS.LNOTOPENWORD
THIS.ODOCUMENTWRITER.SHOWDOCUMENT()
ENDIF
THIS.ODOCUMENTWRITER = .NULL.
IF THIS.CTARGET="XFF" .AND. LURETVAL.LCNTMODE
LNRETVAL = THIS.SETPARAMS( , THIS.CDIRECTORY,  ,  ,  ,  , "CNT",  ,  ,  ,  , 1)
THIS.SETOTHERPARAMS(LURETVAL.OXFCONT, THIS, LURETVAL)
LURETVAL.OXFCONT.LASTINITED(1)
ENDIF
SELECT (LNACTUALSELECTEDALIAS)
ENDCASE
IF  .NOT. EMPTY(THIS.CARCHIVE)
LOCAL LOZIP
LOZIP = CREATEOBJECT("eqzip")
IF FILE(THIS.CARCHIVE) .AND. THIS.LARCHIVEADDITIVE
LOZIP.OPENARCHIVE(THIS.CARCHIVE, 2)
ELSE
LOZIP.OPENARCHIVE(THIS.CARCHIVE)
ENDIF
LOZIP.APPENDFILE(THIS.COUTPUTNAME, JUSTFNAME(THIS.COUTPUTNAME))
IF THIS.CTARGET="HTML"
FOR M.I = 1 TO THIS.ODOCUMENT.NOUTFILES
LOZIP.APPENDFILE(THIS.ODOCUMENT.AOUTFILES(M.I))
ENDFOR
ENDIF
LOZIP.CLOSEFILE()
LOZIP.CLOSEARCHIVE()
IF (THIS.LDELETEFILEAFTER)
LOCAL LCSAFETYSETTING
LCSAFETYSETTING = SET("safety")
SET SAFETY OFF
ERASE (THIS.COUTPUTNAME)
SET SAFETY &LCSAFETYSETTING
ENDIF
ENDIF
IF  .NOT. THIS.LSILENT
WAIT CLEAR
ENDIF
THIS.KILLSESSIONDIR()
THIS.ADDTOLOG("report finalized: "+TTOC(DATETIME()))
RETURN LURETVAL
ENDFUNC
**
PROCEDURE Destroy
THIS.KILLSESSIONDIR()
THIS.ADDTOLOG("XFRX session destroyed: "+TTOC(DATETIME()))
THIS.ADDTOLOG(REPLICATE("=", 60))
ENDPROC
**
PROCEDURE InitializeSessionDir
IF EMPTY(THIS.CSESSIONDIR)
LOCAL LLOK, LNLOOPCNT
LNLOOPCNT = 0
DO WHILE  .NOT. LLOK
LNLOOPCNT = LNLOOPCNT+1
IF LNLOOPCNT=1000
EXIT
ENDIF
THIS.CSESSIONDIR = THIS.CDIRECTORY+"X"+SUBSTR(SYS(2015), 4, 9)
IF DIRECTORY(THIS.CSESSIONDIR)
LOOP
ENDIF
MD (THIS.CSESSIONDIR)
LLOK = .T.
ENDDO
ENDIF
ENDPROC
**
PROCEDURE killSessionDir
IF  .NOT. EMPTY(THIS.CSESSIONDIR) .AND. DIRECTORY(THIS.CSESSIONDIR)
LOCAL LCSAFETY
LCSAFETY = SET("Safety")
SET SAFETY OFF
ERASE (ADDBS(THIS.CSESSIONDIR)+"*.*")
ERASE (ADDBS(THIS.CSESSIONDIR)+"*.*")
RD (THIS.CSESSIONDIR)
SET SAFETY &LCSAFETY
THIS.CSESSIONDIR = ""
ENDIF
ENDPROC
**
PROCEDURE showErrors
THIS.LSHOWERRORS = .T.
ENDPROC
**
PROCEDURE Error
LPARAMETERS TCCODE, TCMETH, TCLINE
DO CASE
CASE TCCODE=1426
CASE TCCODE=1429
CASE TCCODE=1162 .AND. INLIST(UPPER(TCMETH), "OPENCURSORS", "CLOSECURSORS")
OTHERWISE
LOCAL _XFERROR(1)
THIS.ADDTOLOG("###ERROR:"+TRANSFORM(TCCODE, "")+" in "+ALLTRIM(TCMETH)+" @ "+TRANSFORM(TCLINE, ""))
= AERROR(_XFERROR)
THIS.ADDTOLOG("         "+TRANSFORM(_XFERROR(2), ""))
IF THIS.LSHOWERRORS
TCCODE = "error 'error: "+TRANSFORM(TCCODE, "")+" in "+ALLTRIM(TCMETH)+" @ "+TRANSFORM(TCLINE, "")+CHR(13)+TRANSFORM(_XFERROR(2), "")+"'"
&TCCODE
ENDIF
ENDCASE
THIS.NLASTERROR = TCCODE
ENDPROC
**
FUNCTION openXFF
LPARAMETERS TCFILENAME
LOCAL LOWRITER
LOWRITER = CREATEOBJECT("XFFWriter")
LOWRITER.OPEN(TCFILENAME)
RETURN LOWRITER
ENDFUNC
**
ENDDEFINE
**
DEFINE CLASS xfrxFiles AS Custom
LCFILEDIR = ""
LCFILENAME = ""
DIMENSION IAFILES(1)
DIMENSION IAPARAMS(1)
INFILES = 0
INPICTURES = 0
**
FUNCTION GetFDir
RETURN THIS.LCFILEDIR
ENDFUNC
**
PROCEDURE xlsFiles
LPARAMETERS TNHANDLE
LOCAL II, LTLEFT, LCTOP, LCWIDTH, LCHEIGHT, FPATH
WITH THIS
FOR II = 1 TO .INPICTURES
LCLEFT = TOINCH(.IAPARAMS(M.II, 1))
LCTOP = TOINCH(.IAPARAMS(M.II, 2))
LCWIDTH = TOINCH(.IAPARAMS(M.II, 3))
LCHEIGHT = TOINCH(.IAPARAMS(M.II, 4))
FPATH = "pic"+ALLTRIM(STR(.IAPARAMS(M.II, 5)))
FPUTS(TNHANDLE, '<v:shapetype id="_x0000_t75" coordsize="21600,21600"')
FPUTS(TNHANDLE, ' o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"')
FPUTS(TNHANDLE, ' stroked="f">')
FPUTS(TNHANDLE, ' <v:stroke joinstyle="miter"/>')
FPUTS(TNHANDLE, ' <v:formulas>')
FPUTS(TNHANDLE, '  <v:f eqn=""/>')
FPUTS(TNHANDLE, ' </v:formulas>')
FPUTS(TNHANDLE, ' <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>')
FPUTS(TNHANDLE, ' <o:lock v:ext="edit" aspectratio="t"/>')
FPUTS(TNHANDLE, '</v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t75"')
FPUTS(TNHANDLE, " STYLE='position:absolute; ")
FWRITE(TNHANDLE, 'margin-left:'+LCLEFT+';margin-top:'+M.LCTOP)
FWRITE(TNHANDLE, ';width:'+M.LCWIDTH+';height:'+M.LCHEIGHT)
FWRITE(TNHANDLE, "'>")
FPUTS(TNHANDLE, ' <v:imagedata src="'+FPATH+'" o:title="untitled"/>')
FPUTS(TNHANDLE, '   <x:ClientData ObjectType="Pict">')
FPUTS(TNHANDLE, '    <x:SizeWithCells/>')
FPUTS(TNHANDLE, '    <x:CF>Bitmap</x:CF>')
FPUTS(TNHANDLE, '    <x:AutoPict/>')
FPUTS(TNHANDLE, '   </x:ClientData>')
FPUTS(TNHANDLE, '</v:shape>')
ENDFOR
ENDWITH
ENDPROC
**
FUNCTION addFile
LPARAMETERS TCPATH, LNLEFT, LNTOP, TNWIDTH, TNHEIGHT
LOCAL LNPOS, LCEXACT
WITH THIS
IF LEFT(TCPATH, 1)='"'
TCPATH = ALLTRIM(TCPATH)
TCPATH = SUBSTR(TCPATH, 2, LEN(TCPATH)-2)
ENDIF
LCEXACT = SET("EXACT")
SET EXACT ON
LNPOS = ASCAN(.IAFILES, TCPATH)
SET EXACT &LCEXACT
IF LNPOS=0
.INFILES = .INFILES+1
DIMENSION .IAFILES(.INFILES)
.IAFILES(.INFILES) = TCPATH
LNPOS = .INFILES
ENDIF
.INPICTURES = .INPICTURES+1
DIMENSION .IAPARAMS(.INPICTURES, 5)
.IAPARAMS(.INPICTURES, 1) = LNLEFT
.IAPARAMS(.INPICTURES, 2) = LNTOP
.IAPARAMS(.INPICTURES, 3) = TNWIDTH
.IAPARAMS(.INPICTURES, 4) = TNHEIGHT
.IAPARAMS(.INPICTURES, 5) = LNPOS
IF  .NOT. DIRECTORY(.LCFILEDIR)
MD (.LCFILEDIR)
ENDIF
_XFRXPREPAREFILE(TCPATH, THIS.LCFILEDIR+"/pic"+ALLTRIM(STR(LNPOS)), "")
ENDWITH
RETURN JUSTFNAME(THIS.LCFILEDIR)+"/"+"pic"+ALLTRIM(STR(LNPOS))
ENDFUNC
**
FUNCTION addGenFile
LPARAMETERS TNDATASESSIONID, TCFIELD
LOCAL LA, LB, LC, LD, LNDATASESSIONID
WITH THIS
IF  .NOT. DIRECTORY(.LCFILEDIR)
MD (.LCFILEDIR)
ENDIF
.INFILES = .INFILES+1
DIMENSION .IAFILES(.INFILES)
TCPATH = THIS.LCFILEDIR+"/"+"pic"+ALLTRIM(STR(.INFILES))
LNDATASESSIONID = SET("Datasession")
IF TNDATASESSIONID<>LNDATASESSIONID
SET DATASESSION TO TNDATASESSIONID
= EXTRACTBMP(TCFIELD, TCPATH)
SET DATASESSION TO LNDATASESSIONID
ELSE
= EXTRACTBMP(TCFIELD, TCPATH)
ENDIF
.IAFILES(.INFILES) = "###"+TCPATH
RETURN JUSTFNAME(THIS.LCFILEDIR)+"/"+"pic"+ALLTRIM(STR(.INFILES))
ENDWITH
ENDFUNC
**
PROCEDURE processFiles
LPARAMETERS TCREPORTDIR, TNSHEETCNT
IF EMPTY(M.TNSHEETCNT)
TNSHEETCNT = 0
ENDIF
WITH THIS
IF .INFILES>0 .OR. TNSHEETCNT>0
IF  .NOT. DIRECTORY(.LCFILEDIR)
MD (.LCFILEDIR)
ENDIF
_STRTOFILE('<xml xmlns:o="urn:schemas-microsoft-com:office:office">', .LCFILEDIR+"\filelist.xml")
_STRTOFILE('<o:MainFile HRef="../'+JUSTFNAME(.LCFILENAME)+'"/>', .LCFILEDIR+"\filelist.xml", .T.)
LOCAL II
FOR II = 1 TO .INFILES
LCFNAME = JUSTFNAME(.IAFILES(II))
_STRTOFILE('<o:File HRef="'+LCFNAME+'"/>', .LCFILEDIR+"\filelist.xml", .T.)
IF  .NOT. FILE(THIS.LCFILEDIR+"\"+LCFNAME)
IF  .NOT. _XFRXPREPAREFILE(.IAFILES(II), THIS.LCFILEDIR+"\pic"+ALLTRIM(STR(II)), TCREPORTDIR)
ENDIF
ENDIF
ENDFOR
FOR II = 1 TO M.TNSHEETCNT
_STRTOFILE('<o:File HRef="'+"sheet"+ALLTRIM(STR(M.II))+".htm"+'"/>', .LCFILEDIR+"\filelist.xml", .T.)
ENDFOR
_STRTOFILE('</xml>', .LCFILEDIR+"\filelist.xml", .T.)
ENDIF
ENDWITH
ENDPROC
**
PROCEDURE Init
LPARAMETERS TCFDIR, TCFNAME
THIS.LCFILEDIR = TCFDIR
THIS.LCFILENAME = TCFNAME
ENDPROC
**
ENDDEFINE
**
FUNCTION getTemplate
LPARAMETERS LNTYPE
DO CASE
CASE LNTYPE=1
RETURN '<html xmlns:o="urn:schemas-microsoft-com:office:office"'+CHR(13)+CHR(10)+'xmlns:v="urn:schemas-microsoft-com:vml"'+CHR(13)+CHR(10)+'xmlns:w="urn:schemas-microsoft-com:office:word"'+CHR(13)+CHR(10)+'xmlns="http://www.w3.org/TR/REC-html40">'+CHR(13)+CHR(10)+''+CHR(13)+CHR(10)+'<head>'+CHR(13)+CHR(10)+'<meta http-equiv=Content-Type content="text/html; charset=UR_CHARSET">'+CHR(13)+CHR(10)+'<meta name=ProgId content=Word.Document>'+CHR(13)+CHR(10)+'<meta name=Generator content="Microsoft Word 9">'+CHR(13)+CHR(10)+'<meta name=Originator content="Microsoft Word 9">'+CHR(13)+CHR(10)+'<link rel=File-List href="./UR_FDIR/filelist.xml">'+CHR(13)+CHR(10)+'<title>UR_TITLE</title>'+CHR(13)+CHR(10)+'<!--[if gte mso 9]><xml>'+CHR(13)+CHR(10)+'<o:DocumentProperties>'+CHR(13)+CHR(10)+'<o:Author>UR_AUTHOR</o:Author>'+CHR(13)+CHR(10)+'<o:Template>Normal</o:Template>'+CHR(13)+CHR(10)+'<o:LastAuthor></o:LastAuthor>'+CHR(13)+CHR(10)+'<o:Revision>1</o:Revision>'+CHR(13)+CHR(10)+'<o:TotalTime>0</o:TotalTime>'+CHR(13)+CHR(10)+'<o:Pages></o:Pages>'+CHR(13)+CHR(10)+'<o:Category>UR_CATEGORY</o:Category>'+CHR(13)+CHR(10)+'<o:Manager>UR_MANAGER</o:Manager>'+CHR(13)+CHR(10)+'<o:Company>UR_COMPANY</o:Company>'+CHR(13)+CHR(10)+'<o:Keywords>UR_KEYWORDS</o:Keywords>'+CHR(13)+CHR(10)+'<o:Subject>UR_SUBJECT</o:Subject>'+CHR(13)+CHR(10)+'<o:Description>UR_COMMENTS</o:Description>'+CHR(13)+CHR(10)+'<o:Lines></o:Lines>'+CHR(13)+CHR(10)+'<o:Paragraphs></o:Paragraphs>'+CHR(13)+CHR(10)+'<o:Version>9.2720</o:Version>'+CHR(13)+CHR(10)+'</o:DocumentProperties>'+CHR(13)+CHR(10)+'</xml><![endif]-->'+CHR(13)+CHR(10)+'<style>'+CHR(13)+CHR(10)+'<!--'+CHR(13)+CHR(10)+'/* Style Definitions */'+CHR(13)+CHR(10)+'p.MsoNormal, li.MsoNormal, div.MsoNormal'+CHR(13)+CHR(10)+'{mso-style-parent:"";'+CHR(13)+CHR(10)+'margin:0cm;'+CHR(13)+CHR(10)+'margin-bottom:.0001pt;'+CHR(13)+CHR(10)+'mso-pagination:widow-orphan;'+CHR(13)+CHR(10)+'font-size:12.0pt;'+CHR(13)+CHR(10)+'font-family:"Times New Roman";'+CHR(13)+CHR(10)+'mso-fareast-font-family:"Times New Roman";}'+CHR(13)+CHR(10)+'@page Section1'+CHR(13)+CHR(10)+'{size:UR_WIDTHpt UR_HEIGHTpt;'+CHR(13)+CHR(10)+'margin:UR_TOP_MARGINpt UR_RIGHT_MARGINpt UR_BOTTOM_MARGINpt UR_LEFT_MARGINpt;'+CHR(13)+CHR(10)+'UR_ORIENTATION'+CHR(13)+CHR(10)+'mso-header-margin:0pt;'+CHR(13)+CHR(10)+'mso-footer-margin:0pt;'+CHR(13)+CHR(10)+'mso-paper-source:0;}'+CHR(13)+CHR(10)+'div.Section1'+CHR(13)+CHR(10)+'{page:Section1;}'+CHR(13)+CHR(10)
CASE LNTYPE=2
RETURN '</body>'+CHR(13)+CHR(10)+'</html>'+CHR(13)+CHR(10)
CASE LNTYPE=-3
RETURN '@page SectionUR_SECNUM'+CHR(13)+CHR(10)+'{size:UR_WIDTHpt UR_HEIGHTpt;'+CHR(13)+CHR(10)+'margin:UR_TOP_MARGINpt UR_RIGHT_MARGINpt UR_BOTTOM_MARGINpt UR_LEFT_MARGINpt;'+CHR(13)+CHR(10)+'UR_ORIENTATION'+CHR(13)+CHR(10)+'mso-header-margin:UR_HEADER_MARGINpt;'+CHR(13)+CHR(10)+'mso-footer-margin:UR_FOOTER_MARGINpt;'+CHR(13)+CHR(10)+'UR_PAGE_HEADER'+CHR(13)+CHR(10)+'UR_PAGE_FOOTER'+CHR(13)+CHR(10)+'mso-paper-source:0;}'+CHR(13)+CHR(10)+'div.SectionUR_SECNUM'+CHR(13)+CHR(10)+'{page:SectionUR_SECNUM;}'+CHR(13)+CHR(10)
CASE LNTYPE=3
RETURN '@page SectionUR_SECNUM'+CHR(13)+CHR(10)+'{size:UR_WIDTHpt UR_HEIGHTpt;'+CHR(13)+CHR(10)+'margin:UR_TOP_MARGINpt UR_RIGHT_MARGINpt UR_BOTTOM_MARGINpt UR_LEFT_MARGINpt;'+CHR(13)+CHR(10)+'UR_ORIENTATION'+CHR(13)+CHR(10)+'mso-header-margin:0pt;'+CHR(13)+CHR(10)+'mso-footer-margin:0pt;'+CHR(13)+CHR(10)+'mso-paper-source:0;}'+CHR(13)+CHR(10)+'div.SectionUR_SECNUM'+CHR(13)+CHR(10)+'{page:SectionUR_SECNUM;}'+CHR(13)+CHR(10)
CASE LNTYPE=4
RETURN '-->'+CHR(13)+CHR(10)+'</style>'+CHR(13)+CHR(10)+'</head>'+CHR(13)+CHR(10)+''+CHR(13)+CHR(10)+"<body style='tab-interval:36.0pt'>"+CHR(13)+CHR(10)
CASE LNTYPE=5
RETURN '<html xmlns:o="urn:schemas-microsoft-com:office:office"'+CHR(13)+CHR(10)+'xmlns:v="urn:schemas-microsoft-com:vml"'+CHR(13)+CHR(10)+'xmlns:w="urn:schemas-microsoft-com:office:word"'+CHR(13)+CHR(10)+'xmlns="http://www.w3.org/TR/REC-html40">'+CHR(13)+CHR(10)+''+CHR(13)+CHR(10)+'<head>'+CHR(13)+CHR(10)+'<meta http-equiv=Content-Type content="text/html; charset=UR_CHARSET">'+CHR(13)+CHR(10)+'<meta name=ProgId content=Word.Document>'+CHR(13)+CHR(10)+'<meta name=Generator content="Microsoft Word 9">'+CHR(13)+CHR(10)+'<meta name=Originator content="Microsoft Word 9">'+CHR(13)+CHR(10)+'<link rel=File-List href="UR_FDIR/filelist.xml">'+CHR(13)+CHR(10)+'<title>UR_TITLE</title>'+CHR(13)+CHR(10)+'<!--[if gte mso 9]><xml>'+CHR(13)+CHR(10)+'<w:WordDocument>'+CHR(13)+CHR(10)+'<w:View>Print</w:View><w:Zoom>100%</w:Zoom></w:WordDocument>'+CHR(13)+CHR(10)+'<o:DocumentProperties>'+CHR(13)+CHR(10)+'<o:Author>UR_AUTHOR</o:Author>'+CHR(13)+CHR(10)+'<o:Template>Normal</o:Template>'+CHR(13)+CHR(10)+'<o:LastAuthor></o:LastAuthor>'+CHR(13)+CHR(10)+'<o:Revision>1</o:Revision>'+CHR(13)+CHR(10)+'<o:TotalTime>0</o:TotalTime>'+CHR(13)+CHR(10)+'<o:Pages></o:Pages>'+CHR(13)+CHR(10)+'<o:Category>UR_CATEGORY</o:Category>'+CHR(13)+CHR(10)+'<o:Manager>UR_MANAGER</o:Manager>'+CHR(13)+CHR(10)+'<o:Company>UR_COMPANY</o:Company>'+CHR(13)+CHR(10)+'<o:Keywords>UR_KEYWORDS</o:Keywords>'+CHR(13)+CHR(10)+'<o:Subject>UR_SUBJECT</o:Subject>'+CHR(13)+CHR(10)+'<o:Description>UR_COMMENTS</o:Description>'+CHR(13)+CHR(10)+'<o:Lines></o:Lines>'+CHR(13)+CHR(10)+'<o:Paragraphs></o:Paragraphs>'+CHR(13)+CHR(10)+'<o:Version>9.2720</o:Version>'+CHR(13)+CHR(10)+'</o:DocumentProperties>'+CHR(13)+CHR(10)+'</xml><![endif]-->'+CHR(13)+CHR(10)+'<style>'+CHR(13)+CHR(10)+'<!--'+CHR(13)+CHR(10)+'/* Style Definitions */'+CHR(13)+CHR(10)+'p.MsoNormal, li.MsoNormal, div.MsoNormal'+CHR(13)+CHR(10)+'{mso-style-parent:"";'+CHR(13)+CHR(10)+'margin:0cm;'+CHR(13)+CHR(10)+'margin-bottom:.0001pt;'+CHR(13)+CHR(10)+'mso-pagination:widow-orphan;'+CHR(13)+CHR(10)+'font-size:12.0pt;'+CHR(13)+CHR(10)+'font-family:"Times New Roman";'+CHR(13)+CHR(10)+'mso-fareast-font-family:"Times New Roman";}'+CHR(13)+CHR(10)
ENDCASE
ENDFUNC
**
FUNCTION getPHeight2
LPARAMETERS TCOUTPUT, TNWIDTH, TCFONTNAME, TNFONTSIZE, TNITAL, TNBOLD, TNJUST, TNCODEPAGE
LOCAL III, AA, BB, LOLINES
IF EMPTY(TCOUTPUT) .OR. ISNULL(TCOUTPUT)
RETURN 0
ENDIF
IF EMPTY(TNCODEPAGE)
TNCODEPAGE = 0
ENDIF
LINESCOUNT = _X_WW(TCOUTPUT, TCFONTNAME, TNFONTSIZE, TNITAL, TNBOLD, TNWIDTH, @__XFRET, TNJUST, TNCODEPAGE)
IF LINESCOUNT<2
RETURN 0
ENDIF
AA = TOINT(SUBSTR(__XFRET, 1, 4))
BB = TOINT(SUBSTR(__XFRET, 5, 4))
RETURN (LINESCOUNT*AA)+MAX(0, (LINESCOUNT-1)*BB)
ENDFUNC
**
FUNCTION str2word
LPARAMETERS CSTR
RETURN ASC(LEFT(CSTR, 1))+ASC(SUBSTR(CSTR, 2, 1))*256
ENDFUNC
**
DEFINE CLASS pdfencryptor AS Custom
OWNERPASSWORD = CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))+CHR(32+INT(RAND()*100))
USERPASSWORD = ""
O = SPACE(32)
U = SPACE(32)
P = (-64^1)
DOCUMENTID = ""
TYPE = 0
DICTIONARYOBJECT = 0
KEY = SPACE(5)
**
PROCEDURE setPermissions
LPARAMETERS TLPRINTDOCUMENT, TLMODIFYDOCUMENT, TLCOPYTEXTANDGRAPHICS, TLADDORMODIFYANNOTATIONS
THIS.P = 4294967232 +IIF(TLPRINTDOCUMENT, 4, 0)+IIF(TLMODIFYDOCUMENT, 8, 0)+IIF(TLCOPYTEXTANDGRAPHICS, 16, 0)+IIF(TLADDORMODIFYANNOTATIONS, 32, 0)-4294967296 
ENDPROC
**
PROCEDURE init
LOCAL M.I
FOR M.I = 1 TO 16
THIS.DOCUMENTID = THIS.DOCUMENTID+CHR(INT(RAND()*255))
ENDFOR
DECLARE INTEGER computeKeys IN hndlib.dll AS computeKeys STRING @, STRING @, INTEGER, STRING @, STRING @, STRING @, STRING @
DECLARE INTEGER encryptPDFContent IN hndlib AS encryptPDFContent STRING @, INTEGER, INTEGER, INTEGER, STRING @
DECLARE INTEGER encryptFile IN hndlib AS encryptFile STRING @, STRING @, INTEGER, INTEGER, STRING @
ENDPROC
**
PROCEDURE setPasswords
LPARAMETERS TCOWNER, TCUSER
THIS.TYPE = 1
IF  .NOT. EMPTY(TCOWNER)
THIS.OWNERPASSWORD = TCOWNER
ENDIF
THIS.USERPASSWORD = TCUSER
ENDPROC
**
PROCEDURE computeKeys
LOCAL LCOK, LCUK, LCKEY
LCOK = SPACE(32)
LCUK = SPACE(32)
LCKEY = SPACE(5)
WITH THIS
IF .TYPE>0
COMPUTEKEYS(.OWNERPASSWORD, .USERPASSWORD, .P, .DOCUMENTID, @LCOK, @LCUK, @LCKEY)
.U = LCUK
.O = LCOK
.KEY = LCKEY
ENDIF
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS annot AS Custom
LCNAME = ""
LNLEFT = 0
LNTOP = 0
LNWIDTH = 0
LNHEIGHT = 0
LNPAGE = 0
LNDESTPAGE = 0
LNDESTLEFT = 0
LNDESTTOP = 0
LNOBJ = 0
ENDDEFINE
**
DEFINE CLASS fileObject AS Custom
CHECKSUM = 0
CFILENAME = ""
NWIDTH = -1
NHEIGHT = -1
NOBJECTNO = -1
ENDDEFINE
**
DEFINE CLASS PDFUnicodeBuilder AS Custom
NMAPPOINTER = 0
COUTPUTSTRING = ""
NNEXTAVAILABLE = 0
NCODEPAGE = 0
**
PROCEDURE init
DECLARE INTEGER _hn_MakeUnicodeString IN hndlib.dll AS _hn_MakeUnicodeString STRING, INTEGER, INTEGER, INTEGER, STRING, STRING, INTEGER
ENDPROC
**
PROCEDURE reset
THIS.NMAPPOINTER = 0
THIS.NNEXTAVAILABLE = 0
ENDPROC
**
FUNCTION releaseMapPointer
RETURN _HN_MAKEUNICODESTRING("", -1, THIS.NMAPPOINTER, 0, "", "", 0)
ENDFUNC
**
PROCEDURE makeString
LPARAMETERS CTEXT
LOCAL LCOUTPUTSTRING, LCRETVAL
LCOUTPUTSTRING = SPACE(LEN(CTEXT)*2)
LCRETVAL = SPACE(50)
= _HN_MAKEUNICODESTRING(CTEXT, LEN(CTEXT), THIS.NMAPPOINTER, THIS.NNEXTAVAILABLE, @LCOUTPUTSTRING, @LCRETVAL, THIS.NCODEPAGE)
THIS.COUTPUTSTRING = LEFT(LCOUTPUTSTRING, 2*TOINT(LEFT(LCRETVAL, 4)))
THIS.NMAPPOINTER = TOINT(SUBSTR(LCRETVAL, 5, 4))
THIS.NNEXTAVAILABLE = TOINT(SUBSTR(LCRETVAL, 9, 4))
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS pdf AS Custom
LUSEUNICODEMAPPING = .F.
PICTUREDPI = 0
NFILEOBJECTS = 0
DIMENSION AFILEOBJECTS(1)
FHANDLE = 0
CURRENTOBJ = 3
LNPAGES = 0
CONTENTSTRING = ""
NFONT = 0
DIMENSION AFONTS(1)
DIMENSION AANOTS(1)
NANOTS = 0
ANNOTOBJ = 13000
NOUTLINES = 0
DIMENSION AOUTLINES(1)
NTOTALOFFSET = 0
CURRENTPAGEOBJ = 0
PAGEWIDTH = 0
PAGEHEIGHT = 0
CPAGEOBJLIST = ""
CPAGEOBJLISTAPPEND = ""
_XFRXOFF = ""
NPICTURES = 0
DIMENSION APICTURES(1)
CTEMPDIR = ""
CAUTHOR = ""
CTITLE = ""
CSUBJECT = ""
CKEYWORDS = ""
CCREATOR = ""
CPRODUCER = ""
CCREATIONDATE = ""
CCOMMENTS = ""
CCATEGORY = ""
CMANAGER = ""
CCOMPANY = ""
ENCRYPTOR = .NULL.
CEMBTYPE = 1
NCODEPAGE = CPCURRENT()
NLASTFONTREFERENCE = 0
LADDMODE = .F.
NPREVOFFSET = 0
NPAGESOBJECT = -1
LSHOWOUTLINE = .T.
OPDFUNICODEBUILDER = .NULL.
NROOTOBJECT = 1
**
PROCEDURE Init
LPARAMETERS TCTEMPDIR
THIS.CTEMPDIR = TCTEMPDIR
THIS.OPDFUNICODEBUILDER = CREATEOBJECT("PDFUnicodeBuilder")
DECLARE INTEGER compress2 IN zlib AS cxx STRING @, STRING @, STRING @, INTEGER, INTEGER
LOCAL LA, LB, LD
LA = "Test"
LB = SPACE(500)
LD = SPACE(500)
= CXX(@LB, @LD, @LA, LEN(LA), -1)
ENDPROC
**
PROCEDURE Destroy
THIS.RELEASEUNICODEMAPS()
THIS.FINISH()
ENDPROC
**
PROCEDURE setOutline
LPARAMETERS TLSHOW
THIS.LSHOWOUTLINE = TLSHOW
ENDPROC
**
PROCEDURE setSubject
LPARAMETERS TCSUBJECT
THIS.CSUBJECT = TCSUBJECT
ENDPROC
**
PROCEDURE setKeywords
LPARAMETERS TCKEYWORDS
THIS.CKEYWORDS = TCKEYWORDS
ENDPROC
**
PROCEDURE setCreator
LPARAMETERS TCCREATOR
THIS.CCREATOR = TCCREATOR
ENDPROC
**
PROCEDURE setProducer
LPARAMETERS TCPRODUCER
THIS.CPRODUCER = TCPRODUCER
ENDPROC
**
PROCEDURE setCreationDate
LPARAMETERS TCCREATIONDATE
THIS.CCREATIONDATE = TCCREATIONDATE
ENDPROC
**
PROCEDURE setComments
LPARAMETERS TCCOMMENTS
THIS.CCOMMENTS = TCCOMMENTS
ENDPROC
**
PROCEDURE setCategory
LPARAMETERS TCCATEGORY
THIS.CCATEGORY = TCCATEGORY
ENDPROC
**
PROCEDURE setManager
LPARAMETERS TCMANAGER
THIS.CMANAGER = TCMANAGER
ENDPROC
**
PROCEDURE setCompany
LPARAMETERS TCCOMPANY
THIS.CCOMPANY = TCCOMPANY
ENDPROC
**
PROCEDURE setAuthor
LPARAMETERS TCAUTHOR
THIS.CAUTHOR = TCAUTHOR
ENDPROC
**
PROCEDURE setTitle
LPARAMETERS TCTITLE
THIS.CTITLE = TCTITLE
ENDPROC
**
PROCEDURE RegisterAnnot
LPARAMETERS TCNAME, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT
LOCAL III, LNDESTPAGE, LNDESTLEFT, LNDESTTOP
LNDESTPAGE = 0
LNDESTLEFT = 0
LNDESTTOP = 0
WITH THIS
IF LEFT(TCNAME, 1)="#"
TCNAME = SUBSTR(TCNAME, 2)
FOR III = 1 TO .NANOTS
IF .AANOTS(III).LCNAME==TCNAME
LNDESTPAGE = .AANOTS(III).LNDESTPAGE
LNDESTLEFT = .AANOTS(III).LNDESTLEFT
LNDESTTOP = .AANOTS(III).LNDESTTOP
EXIT
ENDIF
ENDFOR
ENDIF
.NANOTS = .NANOTS+1
DIMENSION .AANOTS(.NANOTS)
.AANOTS(.NANOTS) = CREATEOBJECT("annot")
WITH .AANOTS(.NANOTS)
.LCNAME = TCNAME
.LNLEFT = TNLEFT
.LNTOP = TNTOP
.LNWIDTH = TNWIDTH
.LNHEIGHT = TNHEIGHT
.LNPAGE = THIS.CURRENTPAGEOBJ
.LNDESTPAGE = LNDESTPAGE
.LNDESTLEFT = LNDESTLEFT
.LNDESTTOP = LNDESTTOP
ENDWITH
ENDWITH
ENDPROC
**
PROCEDURE RegisterDest
LPARAMETERS TCNAME, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT
LOCAL III, LLFOUND
WITH THIS
FOR III = 1 TO .NANOTS
IF .AANOTS(III).LCNAME==TCNAME
.AANOTS(III).LNDESTPAGE = THIS.CURRENTPAGEOBJ
.AANOTS(III).LNDESTLEFT = TNLEFT
.AANOTS(III).LNDESTTOP = TNTOP
LLFOUND = .T.
ENDIF
ENDFOR
IF LLFOUND
RETURN
ENDIF
.NANOTS = .NANOTS+1
DIMENSION .AANOTS(.NANOTS)
.AANOTS(.NANOTS) = CREATEOBJECT("annot")
WITH .AANOTS(.NANOTS)
.LCNAME = TCNAME
.LNDESTPAGE = THIS.CURRENTPAGEOBJ
.LNDESTLEFT = TNLEFT
.LNDESTTOP = TNTOP
ENDWITH
ENDWITH
ENDPROC
**
FUNCTION getFontReference
LPARAMETERS TCFONTNAME, LLBOLD, LLITAL
LOCAL LCFONT, LNPOS
LCFONT = ALLTRIM(TCFONTNAME)+IIF(LLBOLD, ",Bold", "")+IIF(LLITAL, ",Italic", "")
LCEXACT = SET("EXACT")
SET EXACT ON
LNPOS = ASCAN(THIS.AFONTS, LCFONT)
SET EXACT &LCEXACT
THIS.NLASTFONTREFERENCE = ASUBSCRIPT(THIS.AFONTS, LNPOS, 1)
RETURN THIS.NLASTFONTREFERENCE
ENDFUNC
**
PROCEDURE addFont
LPARAMETERS TCFONTNAME, LLBOLD, LLITAL, LNEMBED
LOCAL LCFONT, LNINDEX
LCFONT = ALLTRIM(TCFONTNAME)+IIF(LLBOLD, ",Bold", "")+IIF(LLITAL, ",Italic", "")
WITH THIS
LCEXACT = SET("EXACT")
SET EXACT ON
LNINDEX = ASCAN(.AFONTS, LCFONT)
IF LNINDEX<>0
IF LNEMBED>0
.AFONTS(ASUBSCRIPT(.AFONTS, LNINDEX, 1), 3) = LNEMBED
ENDIF
SET EXACT &LCEXACT
RETURN
ENDIF
SET EXACT &LCEXACT
.NFONT = .NFONT+1
DIMENSION .AFONTS(.NFONT, 6)
.AFONTS(.NFONT, 1) = LCFONT
.AFONTS(.NFONT, 2) = THIS.GETNEWOBJ()
.AFONTS(.NFONT, 3) = LNEMBED
.AFONTS(.NFONT, 4) = SPACE(256)
.AFONTS(.NFONT, 5) = 0
.AFONTS(.NFONT, 6) = 1
THIS.GETNEWOBJ()
ENDWITH
ENDPROC
**
PROCEDURE releaseUnicodeMaps
LOCAL LNI
FOR LNI = 1 TO THIS.NFONT
IF THIS.AFONTS(M.LNI, 5)>0
THIS.OPDFUNICODEBUILDER.NMAPPOINTER = THIS.AFONTS(M.LNI, 5)
THIS.OPDFUNICODEBUILDER.RELEASEMAPPOINTER()
ENDIF
ENDFOR
ENDPROC
**
PROCEDURE AddLine
LPARAMETERS X, Y, X0, Y0, LW, TNPENPAT, TR, TG, TB
IF M.LW=0
M.LW = 0.12 
ELSE
M.LW = M.LW*0.72 
ENDIF
IF TYPE("m.tr")<>"N"
M.TR = 0
M.TG = 0
M.TB = 0
ENDIF
THIS.ADDCONTENT(" q ")
THIS.SETCOLOR("S", TR, TG, TB)
DO CASE
CASE TNPENPAT=1
THIS.ADDCONTENT(" [2.2] 0 d ")
CASE TNPENPAT=2
THIS.ADDCONTENT(" [11 4] 0 d ")
CASE TNPENPAT=3
THIS.ADDCONTENT(" [5 4 2 4] 0 d ")
CASE TNPENPAT=4
THIS.ADDCONTENT(" [5 2 2 2 2 2] 0 d ")
ENDCASE
THIS.CONTENTSTRING = THIS.CONTENTSTRING+ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y))+" m "+ALLTRIM(_XFN2S(M.X0))+" "+ALLTRIM(_XFN2S(M.Y0))+" l "+ALLTRIM(_XFN2S(M.LW))+" w S "
THIS.ADDCONTENT(" Q ")
ENDPROC
**
FUNCTION makecolor
LPARAMETERS TC
LOCAL LCCOLOR
LCCOLOR = ALLTRIM(STR(TC/255, 5, 2))
LCCOLOR = STRTRAN(LCCOLOR, SET("Point"), ".")
RETURN LCCOLOR
ENDFUNC
**
FUNCTION makecolors
LPARAMETERS TR, TG, TB
RETURN THIS.MAKECOLOR(TR)+" "+THIS.MAKECOLOR(TG)+" "+THIS.MAKECOLOR(TB)
ENDFUNC
**
PROCEDURE setColor
LPARAMETERS CTYPE, TR, TG, TB
IF TR=-1
DO CASE
CASE CTYPE="S"
THIS.ADDCONTENT("0.0 0.0 0.0 RG ")
CASE CTYPE="n"
THIS.ADDCONTENT("0.0 0.0 0.0 rg ")
OTHERWISE
THIS.ADDCONTENT("1.0 1.0 1.0 rg ")
ENDCASE
ELSE
THIS.ADDCONTENT(THIS.MAKECOLORS(TR, TG, TB)+IIF(CTYPE="S", " RG ", " rg "))
ENDIF
ENDPROC
**
PROCEDURE addBox
LPARAMETERS X, Y, W, H, LW, NFILL, FR, FG, FB, TNPENPAT, SR, SG, SB, NOFFSET, TNPENSIZE
LOCAL LCSTR
IF M.LW=0
M.LW = 0.12 
ELSE
M.LW = M.LW*0.72 
ENDIF
IF M.NFILL=0 .AND. M.TNPENPAT=0
RETURN
ENDIF
THIS.ADDCONTENT("q")
DO CASE
CASE M.TNPENPAT=1
THIS.ADDCONTENT(" [2.2] 0 d ")
CASE M.TNPENPAT=2
THIS.ADDCONTENT(" [11 4] 0 d ")
CASE M.TNPENPAT=3
THIS.ADDCONTENT(" [5 4 2 4] 0 d ")
CASE M.TNPENPAT=4
THIS.ADDCONTENT(" [5 2 2 2 2 2] 0 d ")
ENDCASE
IF NFILL<>0
THIS.SETCOLOR("f", M.FR, M.FG, M.FB)
ENDIF
IF TNPENPAT<>0
THIS.SETCOLOR("S", M.SR, M.SG, M.SB)
ENDIF
LOCAL KOEF, KOEF2
KOEF3 = 100
IF EMPTY(NOFFSET)
NOFFSET = 0
ENDIF
IF M.NOFFSET>0
IF M.NOFFSET=99
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y-M.H/2))+" m ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W/M.KOEF3))+" "+ALLTRIM(_XFN2S(M.Y+M.H/7))+" ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+(M.KOEF3-1)*M.W/M.KOEF3))+" "+ALLTRIM(_XFN2S(M.Y+M.H/7))+" ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W))+" "+ALLTRIM(_XFN2S(M.Y-M.H/2))+" c ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+(M.KOEF3-1)*M.W/M.KOEF3))+" "+ALLTRIM(_XFN2S(M.Y-M.H-M.H/7))+" ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W/M.KOEF3))+" "+ALLTRIM(_XFN2S(M.Y-M.H-M.H/7))+" ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y-M.H/2))+" c ")
ELSE
M.KOEF2 = 1
LNOFFSET = MIN(M.W/2, M.H/2, NOFFSET)
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y-LNOFFSET))+" m")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W*(1-M.KOEF2)))+" "+ALLTRIM(_XFN2S(M.Y-M.H*(1-M.KOEF2))))
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W*(1-M.KOEF2)))+" "+ALLTRIM(_XFN2S(M.Y-M.H*(1-M.KOEF2))))
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+LNOFFSET))+" "+ALLTRIM(_XFN2S(M.Y))+" c ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W-LNOFFSET))+" "+ALLTRIM(_XFN2S(M.Y))+" l ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W*M.KOEF2))+" "+ALLTRIM(_XFN2S(M.Y-M.H*(1-M.KOEF2))))
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W*M.KOEF2))+" "+ALLTRIM(_XFN2S(M.Y-M.H*(1-M.KOEF2))))
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W))+" "+ALLTRIM(_XFN2S(M.Y-LNOFFSET))+" c ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W))+" "+ALLTRIM(_XFN2S(M.Y-M.H+LNOFFSET))+" l ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W*M.KOEF2))+" "+ALLTRIM(_XFN2S(M.Y-M.H*M.KOEF2)))
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W*M.KOEF2))+" "+ALLTRIM(_XFN2S(M.Y-M.H*M.KOEF2)))
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W-LNOFFSET))+" "+ALLTRIM(_XFN2S(M.Y-M.H))+" c ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+LNOFFSET))+" "+ALLTRIM(_XFN2S(M.Y-M.H))+" l ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W*(1-M.KOEF2)))+" "+ALLTRIM(_XFN2S(M.Y-M.H*M.KOEF2)))
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X+M.W*(1-M.KOEF2)))+" "+ALLTRIM(_XFN2S(M.Y-M.H*M.KOEF2)))
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y-M.H+LNOFFSET))+" c ")
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y-LNOFFSET))+" l ")
ENDIF
ELSE
THIS.ADDCONTENT(ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y-M.H))+" "+ALLTRIM(_XFN2S(M.W))+" "+ALLTRIM(_XFN2S(M.H))+" re ")
ENDIF
THIS.CONTENTSTRING = THIS.CONTENTSTRING+ALLTRIM(_XFN2S(LW))+" w h "
DO CASE
CASE NFILL=0
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"S "
CASE TNPENPAT=0
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"f "
OTHERWISE
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"B "
ENDCASE
THIS.ADDCONTENT("Q ")
ENDPROC
**
PROCEDURE startText
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"BT "
ENDPROC
**
PROCEDURE Endtext
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"ET "
ENDPROC
**
PROCEDURE setPos
LPARAMETERS X, Y
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"1 0 0 1 "+ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y))+" Tm "
ENDPROC
**
PROCEDURE translate
LPARAMETERS X, Y
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"1 0 0 1 "+ALLTRIM(_XFN2S(M.X))+" "+ALLTRIM(_XFN2S(M.Y))+" cm "
ENDPROC
**
PROCEDURE setFont
LPARAMETERS CCODE, NSIZE
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"/"+M.CCODE+" "+ALLTRIM(_XFN2S(M.NSIZE))+" Tf "
ENDPROC
**
PROCEDURE outText
LPARAMETERS CTEXT, TNFI, TNWIDTHTOMELT
IF EMPTY(TNWIDTHTOMELT)
TNWIDTHTOMELT = 0
ENDIF
LOCAL LCFONT
WITH THIS
IF .CEMBTYPE=1
IF .AFONTS(.NLASTFONTREFERENCE, 3)>0
ELSE
ENDIF
ENDIF
CFONTMAP = .AFONTS(.NLASTFONTREFERENCE, 4)
IF  .NOT. EMPTY(TNFI)
IF TYPE("tnFi")="N"
.ADDCONTENT(PDFROTATIONMATRIX(TNFI))
ENDIF
ENDIF
IF THIS.LUSEUNICODEMAPPING
LOCAL LCOUTPUTSTRING, LCSTRING
LCSTRING = M.CTEXT
.OPDFUNICODEBUILDER.NMAPPOINTER = .AFONTS(.NLASTFONTREFERENCE, 5)
.OPDFUNICODEBUILDER.NNEXTAVAILABLE = .AFONTS(.NLASTFONTREFERENCE, 6)
.OPDFUNICODEBUILDER.NCODEPAGE = THIS.NCODEPAGE
.OPDFUNICODEBUILDER.MAKESTRING(M.LCSTRING)
.AFONTS(.NLASTFONTREFERENCE, 5) = .OPDFUNICODEBUILDER.NMAPPOINTER
.AFONTS(.NLASTFONTREFERENCE, 6) = .OPDFUNICODEBUILDER.NNEXTAVAILABLE
.CONTENTSTRING = .CONTENTSTRING+"<"+.OPDFUNICODEBUILDER.COUTPUTSTRING+">"+"Tj "
.MAKESTRING(M.CTEXT, "", @CFONTMAP)
ELSE
LOCAL SP
SP = OCCURS(" ", M.CTEXT)
IF M.TNWIDTHTOMELT>0 .AND. M.SP>0
.CONTENTSTRING = .CONTENTSTRING+ALLTRIM(_XFN2S(M.TNWIDTHTOMELT/M.SP))+" Tw "
ELSE
.CONTENTSTRING = .CONTENTSTRING+" 0 Tw "
ENDIF
.CONTENTSTRING = .CONTENTSTRING+.MAKESTRING(M.CTEXT, "", @CFONTMAP)+"Tj "
ENDIF
.AFONTS(.NLASTFONTREFERENCE, 4) = CFONTMAP
ENDWITH
ENDPROC
**
PROCEDURE newLine
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"T* "
ENDPROC
**
PROCEDURE addContent
LPARAMETERS TCSTR
THIS.CONTENTSTRING = THIS.CONTENTSTRING+" "+TCSTR
ENDPROC
**
FUNCTION initDoc
LPARAMETERS TCNAME, TLADD
LOCAL LNERROR, LNOFFSET, PDFREADER, LOALIAS
LOALIAS = CREATEOBJECT("cusSelect")
IF EMPTY(TCNAME)
TCNAME = SYS(3)+".pdf"
ENDIF
IF  .NOT. EMPTY(TLADD) .AND. FILE(TCNAME)
LOCAL LNREPLACEFROM, LNREPLACETO, LNCURRENTPAGE, LNAT
LNREPLACEFROM = 99999999
LNREPLACETO = LNREPLACEFROM
DO CASE
CASE TYPE("tlAdd")="L"
CASE TYPE("tlAdd")="N"
LNREPLACEFROM = INT(TLADD)-0.5 
LNREPLACETO = LNREPLACEFROM
CASE TYPE("tlAdd")="C"
TLADD = UPPER(ALLTRIM(TLADD))
LNAT = AT("R", TLADD)
IF LNAT>0
TLADD = SUBSTR(TLADD, LNAT+1)
LNAT = AT(":", TLADD)
IF LNAT>0
LNREPLACEFROM = VAL(LEFT(TLADD, LNAT-1))
LNREPLACETO = VAL(SUBSTR(TLADD, LNAT+1))
IF LNREPLACETO=0
LNREPLACETO = LNREPLACEFROM
ENDIF
ELSE
LNREPLACEFROM = VAL(TLADD)
LNREPLACETO = LNREPLACEFROM
ENDIF
ENDIF
ENDCASE
THIS.LADDMODE = .T.
PDFREADER = CREATEOBJECT("pdfReader")
IF PDFREADER.OPENDOCUMENT(TCNAME)<0
RETURN -3
ENDIF
LNERROR = 0
THIS.NPREVOFFSET = PDFREADER.GETXREFOFFSET()
IF THIS.NPREVOFFSET<0
LNERROR = -10
ELSE
IF PDFREADER.READTRAILER() .AND. PDFREADER.READXREF(THIS.NPREVOFFSET) .AND. PDFREADER.SEEKOBJECT(PDFREADER.NROOTOBJ, PDFREADER.NROOTGEN)
PDFREADER.READCATALOG()
IF PDFREADER.SEEKOBJECT(PDFREADER.NPAGESOBJ, PDFREADER.NPAGESGEN)
THIS.NPAGESOBJECT = PDFREADER.NPAGESOBJ
PDFREADER.READPAGES()
ELSE
LNERROR = -10
ENDIF
ELSE
LNERROR = -10
ENDIF
ENDIF
PDFREADER.CLOSEDOCUMENT()
IF LNERROR<>0
RETURN LNERROR
ENDIF
THIS.FHANDLE = FOPEN(TCNAME, 2)
THIS.NTOTALOFFSET = FSEEK(THIS.FHANDLE, 0, 2)
LNCURRENTPAGE = 0
SELECT (PDFREADER.CPAGESCURSORNAME)
SCAN ALL
LNCURRENTPAGE = LNCURRENTPAGE+1
IF LNCURRENTPAGE>=LNREPLACEFROM .AND. LNCURRENTPAGE<=LNREPLACETO
LOOP
ENDIF
IF LNCURRENTPAGE<LNREPLACEFROM
IF EMPTY(THIS.CPAGEOBJLIST)
THIS.CPAGEOBJLIST = ALLTRIM(STR(OBJ))+" "+ALLTRIM(STR(GENERATION))+" R"
ELSE
THIS.CPAGEOBJLIST = THIS.CPAGEOBJLIST+CHR(13)+ALLTRIM(STR(OBJ))+" "+ALLTRIM(STR(GENERATION))+" R"
ENDIF
ENDIF
IF LNCURRENTPAGE>LNREPLACETO
IF EMPTY(THIS.CPAGEOBJLISTAPPEND)
THIS.CPAGEOBJLISTAPPEND = ALLTRIM(STR(OBJ))+" "+ALLTRIM(STR(GENERATION))+" R"
ELSE
THIS.CPAGEOBJLISTAPPEND = THIS.CPAGEOBJLISTAPPEND+CHR(13)+ALLTRIM(STR(OBJ))+" "+ALLTRIM(STR(GENERATION))+" R"
ENDIF
ENDIF
THIS.LNPAGES = THIS.LNPAGES+1
ENDSCAN
ELSE
THIS.FHANDLE = FCREATE(TCNAME)
THIS.LADDMODE = .F.
THIS.NTOTALOFFSET = 0
ENDIF
IF THIS.FHANDLE<0
RETURN -3
ENDIF
RELEASE LOALIAS
IF EMPTY(THIS._XFRXOFF)
THIS._XFRXOFF = "X"+SUBSTR(SYS(2015), 4, 9)
ENDIF
IF USED(THIS._XFRXOFF)
ZAP IN (THIS._XFRXOFF)
ELSE
LOCAL SEL
SEL = SELECT(0)
SELECT 0
CREATE CURSOR (THIS._XFRXOFF) (OBJ I, OFFSET I)
INDEX ON OBJ TAG OBJ
IF SELECT(0)==SEL
SELECT 0
ELSE
SELECT (SEL)
ENDIF
ENDIF
IF  .NOT. THIS.LADDMODE
THIS.WRITESTR("%PDF-1.4")
THIS.WRITESTR("%âãÏÓ")
THIS.WRITESTR("%generated by XFRX, (c) 2005 www.eqeus.com")
THIS.CURRENTOBJ = 1
THIS.NROOTOBJECT = THIS.CURRENTOBJ
THIS.CURRENTOBJ = THIS.CURRENTOBJ+1
THIS.NPAGESOBJECT = THIS.CURRENTOBJ
THIS.ADDFONT("Arial",  ,  , 0)
ELSE
THIS.CURRENTOBJ = PDFREADER.NOBJECTCOUNT+2
THIS.NROOTOBJECT = THIS.CURRENTOBJ
ENDIF
PUBLIC XFRXGOUTPUT
XFRXGOUTPUT = SPACE(65536)
DECLARE INTEGER compress2 IN zlib AS cxx STRING @, STRING @, STRING @, INTEGER, INTEGER
DECLARE INTEGER ?getgl@@YAHPAUHDC__@@HHPBDFFF@Z IN hndlib AS getGl INTEGER, INTEGER, INTEGER, STRING @, SHORT, SHORT, SHORT
DECLARE INTEGER ?getOutput@@YAHH@Z IN hndlib AS getoutput INTEGER
DECLARE INTEGER ?getRange@@YAHPAUHDC__@@HPBDFFF@Z IN hndlib AS getrange INTEGER, INTEGER, STRING @, SHORT, SHORT, SHORT
DECLARE INTEGER mkPDFString IN hndlib.dll STRING, INTEGER, STRING, STRING @, STRING @
DECLARE INTEGER formatBIDIString IN hndlib.dll STRING, INTEGER, STRING
DECLARE INTEGER dobmp IN hndlib.Dll AS dopic STRING @, STRING @, INTEGER, STRING @, STRING @, INTEGER, INTEGER, STRING
RETURN 0
ENDFUNC
**
PROCEDURE addPDFObject
LPARAMETERS TNOBJNO
INSERT INTO (THIS._XFRXOFF) VALUES (TNOBJNO, THIS.NTOTALOFFSET)
THIS.WRITESTR(ALLTRIM(STR(TNOBJNO))+" 0 obj")
ENDPROC
**
PROCEDURE writeAnnots
LOCAL III, LCANNOTNAME
FOR M.III = 1 TO THIS.NANOTS
IF THIS.AANOTS(M.III).LNOBJ>0
THIS.ADDPDFOBJECT(THIS.AANOTS(M.III).LNOBJ)
THIS.WRITESTR("<<")
THIS.WRITESTR("/Type /Annot")
THIS.WRITESTR("/Subtype /Link")
THIS.WRITESTR("/Rect ["+ALLTRIM(STR(THIS.AANOTS(III).LNLEFT))+" "+ALLTRIM(STR(THIS.AANOTS(M.III).LNTOP))+" "+ALLTRIM(STR(THIS.AANOTS(M.III).LNLEFT+THIS.AANOTS(M.III).LNWIDTH))+" "+ALLTRIM(STR(THIS.AANOTS(M.III).LNTOP-THIS.AANOTS(M.III).LNHEIGHT))+"]")
THIS.WRITESTR("/Border [0 0 0]")
IF THIS.AANOTS(M.III).LNDESTPAGE=0 .AND. (UPPER(LEFT(THIS.AANOTS(M.III).LCNAME, 4))="HTTP" .OR. UPPER(LEFT(THIS.AANOTS(M.III).LCNAME, 6))="MAILTO")
THIS.WRITESTR("/A <</S /URI ")
THIS.WRITEDICTRECORD("URI", THIS.AANOTS(M.III).LCNAME, THIS.AANOTS(M.III).LNOBJ)
THIS.WRITESTR(" >>")
ELSE
THIS.WRITESTR("/Dest ["+ALLTRIM(STR(THIS.AANOTS(M.III).LNDESTPAGE))+" 0 R /XYZ "+ALLTRIM(STR(THIS.AANOTS(M.III).LNDESTLEFT))+" "+ALLTRIM(STR(THIS.AANOTS(M.III).LNDESTTOP))+" 0]")
ENDIF
THIS.WRITESTR(">>")
THIS.WRITESTR("endobj")
ENDIF
ENDFOR
ENDPROC
**
PROCEDURE WritePages
LOCAL M.I
THIS.ADDPDFOBJECT(THIS.NPAGESOBJECT)
THIS.WRITESTR("<<")
THIS.WRITESTR(" /Type /Pages")
THIS.WRITESTR(" /Kids [")
THIS.WRITESTR(THIS.CPAGEOBJLIST+" "+IIF( .NOT. EMPTY(THIS.CPAGEOBJLIST) .AND.  .NOT. EMPTY(THIS.CPAGEOBJLISTAPPEND), CHR(13), "")+THIS.CPAGEOBJLISTAPPEND)
THIS.WRITESTR("]")
THIS.WRITESTR(" /Count "+ALLTRIM(STR(THIS.LNPAGES)))
THIS.WRITESTR(">>")
THIS.WRITESTR("endobj")
THIS.WRITEANNOTS()
THIS.WRITECATALOG()
ENDPROC
**
FUNCTION getNextCount
LPARAMETERS TNPREV
LOCAL LNPREV, LNRECNO, LNTOTAL
IF EOF(THIS._XFRXOFF)
RETURN 0
ENDIF
IF VARTYPE(TNPREV)<>"N"
LNPREV = -1
ELSE
LNPREV = TNPREV
ENDIF
LNTOTAL = 0
LNRECNO = RECNO(THIS._XFRXOFF)
DO WHILE  .NOT. EOF(THIS._XFRXOFF)
IF LNPREV<>-1 .AND. OBJ<>LNPREV+1
EXIT
ENDIF
LNTOTAL = LNTOTAL+1
LNPREV = OBJ
SKIP IN (THIS._XFRXOFF)
ENDDO
GOTO (LNRECNO) IN (THIS._XFRXOFF)
RETURN LNTOTAL
ENDFUNC
**
PROCEDURE writeEncryptionDictionary
WITH THIS
.ENCRYPTOR.DICTIONARYOBJECT = .GETNEWOBJ()
.ADDPDFOBJECT(.ENCRYPTOR.DICTIONARYOBJECT)
.WRITESTR("<< ")
.WRITESTR("/P "+ALLTRIM(STR(.ENCRYPTOR.P)))
.WRITESTR("/Filter /Standard")
.WRITESTR("/V 1")
.WRITESTR("/R 2")
.WRITESTR("/O "+.MAKESTRING(.ENCRYPTOR.O))
.WRITESTR("/U "+.MAKESTRING(.ENCRYPTOR.U))
.WRITESTR(">> endobj")
ENDWITH
ENDPROC
**
PROCEDURE writeDictRecord
LPARAMETERS TCNAME, _X____11334, TCOBJECT, TCSTRDELIMITER
LOCAL LCTEXT
WITH THIS
IF .ENCRYPTOR.TYPE>0
IF EMPTY(TCOBJECT)
TCOBJECT = .CURRENTOBJ
ENDIF
LCTEXT = _X____11334
LCTEXT = STRTRAN(LCTEXT, CHR(10))
IF  .NOT. EMPTY(TCSTRDELIMITER)
LCTEXT = STRTRAN(LCTEXT, CHR(13), TCSTRDELIMITER)
ENDIF
ENCRYPTPDFCONTENT(@LCTEXT, LEN(M.LCTEXT), TCOBJECT, 0, THIS.ENCRYPTOR.KEY)
.WRITESTR("/"+TCNAME+" "+.MAKESTRING(LCTEXT))
ELSE
.WRITESTR("/"+TCNAME+" "+.MAKESTRING(_X____11334, TCSTRDELIMITER))
ENDIF
ENDWITH
ENDPROC
**
PROCEDURE WriteTrailer
LOCAL SEL, LCTEXT
WITH THIS
IF .ENCRYPTOR.TYPE>0
.WRITEENCRYPTIONDICTIONARY()
ENDIF
.CURRENTOBJ = THIS.GETNEWOBJ()
.ADDPDFOBJECT(THIS.CURRENTOBJ)
.WRITESTR("<< ")
.WRITEDICTRECORD("Author", .CAUTHOR)
.WRITEDICTRECORD("Title", .CTITLE)
.WRITEDICTRECORD("Subject", .CSUBJECT)
.WRITEDICTRECORD("Keywords", .CKEYWORDS)
.WRITEDICTRECORD("Creator", .CCREATOR)
.WRITEDICTRECORD("Producer", .CPRODUCER)
.WRITEDICTRECORD("CreationDate", "D:"+TTOC(DATETIME(), 1))
.WRITESTR(">> endobj")
GOTO TOP IN (THIS._XFRXOFF)
SEL = SELECT(0)
SELECT (THIS._XFRXOFF)
LOCAL LNXREFSTART, LNNEXT, III
LNXREFSTART = .NTOTALOFFSET
.WRITESTR("xref")
LNNEXT = .GETNEXTCOUNT(0)
.WRITESTR("0 "+ALLTRIM(STR(LNNEXT+1)))
.WRITESTR("0000000000 65535 f")
IF LNNEXT=0
LNNEXT = THIS.GETNEXTCOUNT()
IF LNNEXT>0
.WRITESTR(ALLTRIM(STR(OBJ))+" "+ALLTRIM(STR(LNNEXT)))
ENDIF
ENDIF
DO WHILE LNNEXT<>0
FOR M.III = 1 TO LNNEXT
THIS.WRITESTR(PADL(ALLTRIM(STR(OFFSET)), 10, "0")+" 00000 n")
SKIP IN (._XFRXOFF)
ENDFOR
LNNEXT = THIS.GETNEXTCOUNT()
IF LNNEXT>0
.WRITESTR(ALLTRIM(STR(OBJ))+" "+ALLTRIM(STR(LNNEXT)))
ENDIF
ENDDO
USE IN (THIS._XFRXOFF)
SELECT (SEL)
.WRITESTR("trailer")
.WRITESTR("<<")
IF .ENCRYPTOR.TYPE>0
.WRITESTR("/ID ["+.MAKESTRING(.ENCRYPTOR.DOCUMENTID)+.MAKESTRING(.ENCRYPTOR.DOCUMENTID)+"]")
.WRITESTR("/Encrypt "+ALLTRIM(STR(.ENCRYPTOR.DICTIONARYOBJECT))+" 0 R")
ENDIF
.WRITESTR("/Size "+ALLTRIM(STR(.GETNEWOBJ())))
.WRITESTR("/Root "+ALLTRIM(STR(.NROOTOBJECT))+" 0 R")
.WRITESTR("/Info "+ALLTRIM(STR(.CURRENTOBJ-1))+" 0 R")
IF THIS.LADDMODE
.WRITESTR("/Prev "+ALLTRIM(STR(THIS.NPREVOFFSET)))
ENDIF
.WRITESTR(">>")
.WRITESTR("startxref")
.WRITESTR(ALLTRIM(STR(LNXREFSTART)))
.WRITESTR("%%EOF")
ENDWITH
ENDPROC
**
PROCEDURE WriteFontObjs
WITH THIS
LOCAL III, LCFONT, LLBOLD, LLITALICS, LNFONTFILEOBJECT, LNFONTFILELENGTH, CTFN, HND, STR, CTFN2, CTFN3, LCFONTNAME
LOCAL LLSUBSET, LNFLAGS, LCFNFN, LCCP, JJ, LLSPECIALCODEPAGE, I, LCGLYPHWIDTHS
LOCAL ADIFFS(255, 2)
ADIFFS = 0
LNFONTFILELENGTH = 0
LCGLYPHWIDTHS = SPACE(1000)
FOR M.I = 1 TO 255
IF M.I>129 .AND. M.I<>170
ADIFFS(M.I, 1) = 1
ELSE
ADIFFS(M.I, 1) = 0
ENDIF
ADIFFS(M.I, 2) = ""
ENDFOR
IF INLIST(THIS.NCODEPAGE, 1250, 1251, 1257, 1254, 1253, 1255)
LLSPECIALCODEPAGE = .T.
ENDIF
FILLUNICODEARRAY(THIS.NCODEPAGE, @ADIFFS)
LOCAL LNTRUETYPEFONTDEF
FOR M.III = 1 TO .NFONT
LCFONT = .AFONTS(M.III, 1)
LLBOLD = .F.
LLITALICS = .F.
IF ",Bold"$LCFONT
LLBOLD = .T.
ENDIF
IF ",Italic"$LCFONT
LLITALICS = .T.
ENDIF
LCFONT = STRTRAN(LCFONT, ",Bold")
LCFONT = STRTRAN(LCFONT, ",Italic")
LCFONTNAME = ALLTRIM(.AFONTS(M.III, 1))
LCFONTNAME = STRTRAN(LCFONTNAME, " ", "#20")
LCFONTNAME = STRTRAN(LCFONTNAME, "(", "#28")
LCFONTNAME = STRTRAN(LCFONTNAME, ")", "#29")
LNTRUETYPEFONTDEF = .AFONTS(M.III, 2)
IF .AFONTS(M.III, 3)>0
ELSE
DO CASE
CASE LLSPECIALCODEPAGE
LCFNFN = UPPER(.AFONTS(M.III, 1))
IF LCFNFN=="ARIAL" .OR. LCFNFN=="ARIAL CE" .OR. LCFNFN=="ARIAL CE,BOLD" .OR. LCFNFN=="ARIAL CE,ITALIC" .OR. LCFNFN=="ARIAL,BOLD" .OR. LCFNFN=="ARIAL,ITALIC" .OR. LCFNFN=="COURIER NEW" .OR. LCFNFN=="COURIER NEW,BOLD" .OR. LCFNFN=="COURIER NEW CE" .OR. LCFNFN=="COURIER NEW CE,BOLD" .OR. LCFNFN=="COURIER NEW CE,ITALIC" .OR. LCFNFN=="COURIER NEW,ITALIC" .OR. LCFNFN=="TIMES NEW ROMAN" .OR. LCFNFN=="TIMES NEW ROMAN,BOLD" .OR. LCFNFN=="TIMES NEW ROMAN CE" .OR. LCFNFN=="TIMES NEW ROMAN CE,BOLD" .OR. LCFNFN=="TIMES NEW ROMAN CE,ITALIC" .OR. LCFNFN=="TIMES NEW ROMAN,ITALIC"
LCCP = .AFONTS(M.III, 4)
FOR JJ = 1 TO LEN(LCCP)
IF SUBSTR(LCCP, M.JJ, 1)=CHR(33)
IF ADIFFS(M.JJ, 1)>0
.AFONTS(M.III, 3) = 1
EXIT
ENDIF
ENDIF
ENDFOR
ENDIF
ENDCASE
ENDIF
LNFONTFILELENGTH = 0
IF THIS.LUSEUNICODEMAPPING .OR. THIS.CEMBTYPE>1 .OR. (THIS.CEMBTYPE=1 .AND. .AFONTS(M.III, 3)>0)
LLSUBSET = (.AFONTS(M.III, 3)=1 .OR. (.AFONTS(M.III, 3)=0 .AND. THIS.CEMBTYPE=3))
CTFN = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)
CTFN2 = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)
DO WHILE CTFN=CTFN2
CTFN2 = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)
ENDDO
LOCAL LNCODEPAGE
LNFONTFILELENGTH = GETFPARAM(M.CTFN, M.LCFONT, 10, IIF(M.LLBOLD, 1, 0), IIF(M.LLITALICS, 1, 0), IIF(THIS.LUSEUNICODEMAPPING, 10, IIF(LLSUBSET, 8, 9)), @__XFRET, .AFONTS(M.III, 4), THIS.NCODEPAGE, CTFN2, .AFONTS(M.III, 5), @LCGLYPHWIDTHS)
ERASE (CTFN2)
ENDIF
THIS.ADDPDFOBJECT(LNTRUETYPEFONTDEF)
THIS.WRITESTR("<<")
THIS.WRITESTR("/Type /Font")
THIS.WRITESTR("/Subtype /TrueType")
IF  .NOT. THIS.LUSEUNICODEMAPPING
IF LLSPECIALCODEPAGE
THIS.WRITE("/Encoding <</BaseEncoding /WinAnsiEncoding /Differences [128 /Euro")
LCCP = .AFONTS(M.III, 4)
FOR JJ = 129 TO LEN(LCCP)
IF SUBSTR(LCCP, M.JJ, 1)=CHR(33)
IF  .NOT. EMPTY(ADIFFS(M.JJ-1, 2))
THIS.WRITE(" "+ALLTRIM(STR(M.JJ-1))+" /"+ADIFFS(M.JJ-1, 2))
ENDIF
ENDIF
ENDFOR
THIS.WRITESTR(" ] /Type /Encoding>>")
ELSE
THIS.WRITESTR("/Encoding <</BaseEncoding /WinAnsiEncoding /Differences [128 /Euro 141 /u008D] /Type /Encoding>>")
ENDIF
ENDIF
THIS.WRITESTR(THIS.GETWIDTHS(LCGLYPHWIDTHS, LCFONT, LLITALICS, LLBOLD))
THIS.WRITESTR("/BaseFont /"+LCFONTNAME)
THIS.WRITESTR("/FontDescriptor "+ALLTRIM(STR(.AFONTS(M.III, 2)+1))+" 0 R")
THIS.WRITESTR(" >>")
THIS.WRITESTR("endobj")
THIS.ADDPDFOBJECT(.AFONTS(M.III, 2)+1)
THIS.WRITESTR("<<")
THIS.WRITESTR("/Type /FontDescriptor")
THIS.WRITESTR("/FontName /"+LCFONTNAME)
IF THIS.LUSEUNICODEMAPPING
THIS.WRITESTR("/Flags 4")
ELSE
LNFLAGS = GETFPARAM("", M.LCFONT, 10, IIF(M.LLBOLD, 1, 0), IIF(M.LLITALICS, 1, 0), 7, @__XFRET, "", 0, "", 0, "")
THIS.WRITESTR("/Flags "+ALLTRIM(STR(LNFLAGS)))
ENDIF
THIS.WRITESTR("/FontBBox [-100 -300 2000 1000]")
THIS.WRITESTR("/StemV 100")
THIS.WRITESTR("/ItalicAngle 0")
THIS.WRITESTR("/CapHeight 1000")
THIS.WRITESTR("/Ascent 1000")
THIS.WRITESTR("/Descent -300")
IF M.LNFONTFILELENGTH>0
LNFONTFILEOBJECT = THIS.GETNEWOBJ()
THIS.WRITESTR("/FontFile2 "+ALLTRIM(STR(M.LNFONTFILEOBJECT))+" 0 R")
ENDIF
THIS.WRITESTR(">>")
THIS.WRITESTR("endobj")
IF LNFONTFILELENGTH>0
THIS.ADDPDFOBJECT(LNFONTFILEOBJECT)
THIS.WRITESTR("<<")
THIS.WRITESTR("/Length "+ALLTRIM(STR(LNFONTFILELENGTH)))
IF THIS.ENCRYPTOR.TYPE>0
ENCRYPTFILE(M.CTFN, M.CTFN2, M.LNFONTFILEOBJECT, 0, THIS.ENCRYPTOR.KEY)
ERASE (M.CTFN)
CTFN = M.CTFN2
ENDIF
HND = FOPEN(CTFN)
DO WHILE  .NOT. FEOF(M.HND)
STR = FREAD(M.HND, 2000)
THIS.WRITE(M.STR)
ENDDO
= FCLOSE(HND)
ERASE (CTFN)
THIS.WRITESTR("endstream")
THIS.WRITESTR("endobj")
ENDIF
ENDFOR
ENDWITH
ENDPROC
**
FUNCTION getWidthsFromString
LPARAMETERS TCWIDTHS
LOCAL LNI, LCSTR
LCSTR = "/FirstChar 0 /LastChar 255 /Widths ["
FOR LNI = 0 TO 255
LCSTR = LCSTR+ALLTRIM(STR(TOSHORT(SUBSTR(TCWIDTHS, LNI*2+1, 2))))+" "
ENDFOR
LCSTR = LCSTR+"]"
RETURN LCSTR
ENDFUNC
**
FUNCTION getWidths
LPARAMETERS TCWIDTHS, CFONT, LITALICS, LBOLD
LOCAL TO, FROM, LCSTR, M.I, SSTR
IF  .NOT. EMPTY(TCWIDTHS)
RETURN THIS.GETWIDTHSFROMSTRING(TCWIDTHS)
ENDIF
GETFPARAM("", CFONT, 1000, IIF(LBOLD, 1, 0), IIF(LITALICS, 1, 0), 1, @__XFRET, "", 0, "", 0, "")
FROM = TOINT(SUBSTR(__XFRET, 13, 4))
TO = TOINT(SUBSTR(__XFRET, 17, 4))
GETFPARAM("FFNNTT", CFONT, 1000, IIF(LBOLD, 1, 0), IIF(LITALICS, 1, 0), 2, @__XFRET, "", THIS.NCODEPAGE, "", 0, "")
LCSTR = "/FirstChar "+ALLTRIM(STR(M.FROM))+CHR(13)
LCSTR = LCSTR+"/LastChar "+ALLTRIM(STR(M.TO))+CHR(13)
LCSTR = LCSTR+"/Widths ["
FOR M.I = 0 TO M.TO-M.FROM
LNVALUE = ROUND((10*TOINT(SUBSTR(__XFRET, M.I*4+1, 4))*72)/10000, 0)
IF M.I=0
SSTR = ALLTRIM(STR(LNVALUE))
ELSE
SSTR = " "+ALLTRIM(STR(LNVALUE))
ENDIF
LCSTR = LCSTR+SSTR
ENDFOR
LCSTR = LCSTR+"]"
RETURN LCSTR
ENDFUNC
**
PROCEDURE addOutline
LPARAMETERS TNOUTLINENAME, TNLEFT, TNTOP, TNSTYLE
WITH THIS
.NOUTLINES = .NOUTLINES+1
DIMENSION .AOUTLINES(.NOUTLINES, 5)
.AOUTLINES(.NOUTLINES, 1) = TNOUTLINENAME
.AOUTLINES(.NOUTLINES, 2) = TNLEFT
.AOUTLINES(.NOUTLINES, 3) = TNTOP
.AOUTLINES(.NOUTLINES, 4) = THIS.CURRENTPAGEOBJ
.AOUTLINES(.NOUTLINES, 5) = TNSTYLE
ENDWITH
ENDPROC
**
FUNCTION makestring
LPARAMETERS LCSTRING, LCCR, TCFONTMAP
RETURN "("+THIS.MAKESTRING2(LCSTRING, LCCR, @TCFONTMAP)+")"
ENDFUNC
**
FUNCTION makestring2
LPARAMETERS LCSTRING, LCCR, TCFONTMAP
LOCAL LN
LCSTRINGOUT = SPACE(LEN(LCSTRING)*2)
IF TYPE("tcFontMap")<>"C"
TCFONTMAP = ""
ENDIF
IF EMPTY(LCCR)
LCCR = ""
ENDIF
IF THIS.NCODEPAGE=1255
LCSTRING = _XFFORMATBIDISTRING(LCSTRING)
ENDIF
LN = MKPDFSTRING(LCSTRING, LEN(LCSTRING), LCCR, @LCSTRINGOUT, @TCFONTMAP)
RETURN LEFT(LCSTRINGOUT, LN)
ENDFUNC
**
PROCEDURE writeOutlines
THIS.ADDPDFOBJECT(THIS.CURRENTOBJ)
THIS.WRITESTR("<<")
THIS.WRITESTR("/Count "+ALLTRIM(STR(THIS.NOUTLINES)))
THIS.WRITESTR("/First "+ALLTRIM(STR(THIS.CURRENTOBJ+1))+" 0 R")
THIS.WRITESTR("/Last "+ALLTRIM(STR(THIS.CURRENTOBJ+THIS.NOUTLINES))+" 0 R")
THIS.WRITESTR(">>")
THIS.WRITESTR("endobj")
LOCAL M.III
FOR M.III = 1 TO THIS.NOUTLINES
THIS.CURRENTOBJ = THIS.CURRENTOBJ+1
THIS.ADDPDFOBJECT(THIS.CURRENTOBJ)
THIS.WRITESTR("<<")
THIS.WRITESTR("/Count 0")
IF TYPE("this.aOutlines(m.iii,5)")="N"
THIS.WRITESTR("/F "+ALLTRIM(STR(THIS.AOUTLINES(M.III, 5))))
ENDIF
THIS.WRITEDICTRECORD("Title", ALLTRIM(THIS.AOUTLINES(M.III, 1)),  , ", ")
THIS.WRITESTR("/Dest ["+ALLTRIM(STR(THIS.AOUTLINES(M.III, 4)))+" 0 R /XYZ "+ALLTRIM(STR(THIS.AOUTLINES(M.III, 2)))+" "+ALLTRIM(STR(THIS.AOUTLINES(M.III, 3)))+" 0]")
IF M.III>1
THIS.WRITESTR("/Prev "+ALLTRIM(STR(THIS.CURRENTOBJ-1))+" 0 R")
ENDIF
IF M.III<THIS.NOUTLINES
THIS.WRITESTR("/Next "+ALLTRIM(STR(THIS.CURRENTOBJ+1))+" 0 R")
ENDIF
THIS.WRITESTR(">>")
THIS.WRITESTR("endobj")
ENDFOR
ENDPROC
**
PROCEDURE writeCatalog
THIS.ADDPDFOBJECT(THIS.NROOTOBJECT)
THIS.WRITESTR("<<")
THIS.WRITESTR("/Type /Catalog")
THIS.WRITESTR("/Pages "+ALLTRIM(STR(THIS.NPAGESOBJECT))+" 0 R")
IF THIS.NOUTLINES>0 .AND. THIS.LSHOWOUTLINE
THIS.WRITESTR("/PageMode /UseOutlines")
THIS.CURRENTOBJ = THIS.CURRENTOBJ+1
THIS.WRITESTR("/Outlines "+ALLTRIM(STR(THIS.CURRENTOBJ))+" 0 R")
ENDIF
THIS.WRITESTR(">>")
THIS.WRITESTR("endobj")
IF THIS.NOUTLINES>0 .AND. THIS.LSHOWOUTLINE
THIS.WRITEOUTLINES()
ENDIF
ENDPROC
**
PROCEDURE flushFonts
WITH THIS
LOCAL M.III
FOR M.III = 1 TO .NFONT
THIS.WRITESTR("/F"+ALLTRIM(STR(M.III))+" "+ALLTRIM(STR(THIS.AFONTS(M.III, 2)))+" 0 R")
ENDFOR
ENDWITH
ENDPROC
**
PROCEDURE newPage
LPARAMETERS LNHEIGHT, LNWIDTH
THIS.CURRENTPAGEOBJ = THIS.GETNEWOBJ()
IF EMPTY(THIS.CPAGEOBJLIST)
THIS.CPAGEOBJLIST = ALLTRIM(STR(THIS.CURRENTPAGEOBJ))+" 0 R"
ELSE
THIS.CPAGEOBJLIST = THIS.CPAGEOBJLIST+CHR(13)+ALLTRIM(STR(THIS.CURRENTPAGEOBJ))+" 0 R"
ENDIF
THIS.LNPAGES = THIS.LNPAGES+1
THIS.CONTENTSTRING = ""
THIS.PAGEWIDTH = LNWIDTH
THIS.PAGEHEIGHT = LNHEIGHT
ENDPROC
**
PROCEDURE StartContent
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
FUNCTION getNewObj
THIS.CURRENTOBJ = THIS.CURRENTOBJ+1
RETURN THIS.CURRENTOBJ
ENDFUNC
**
PROCEDURE flushPage
LOCAL OUTPUT, OUTLEN, INPUT, VYSL, RETVAL, M.III, LNOBJ, CONTE, ANNOT, I
THIS.ADDPDFOBJECT(THIS.CURRENTPAGEOBJ)
THIS.WRITESTR("<<")
THIS.WRITESTR("/Type /Page")
THIS.WRITESTR("/Parent "+ALLTRIM(STR(THIS.NPAGESOBJECT))+" 0 R")
THIS.WRITESTR("/MediaBox [0 0 "+ALLTRIM(__STR(THIS.PAGEWIDTH, 8, 3))+" "+ALLTRIM(__STR(THIS.PAGEHEIGHT, 8, 3))+"]")
ANNOT = THIS.GETNEWOBJ()
THIS.WRITESTR("/Annots "+ALLTRIM(STR(ANNOT))+" 0 R")
THIS.WRITESTR("/Resources <<")
THIS.WRITESTR("/Font <<")
THIS.FLUSHFONTS()
THIS.WRITESTR(">>")
THIS.WRITEPICTURES()
THIS.WRITESTR(">>")
CONTE = THIS.GETNEWOBJ()
THIS.WRITESTR(" /Contents "+ALLTRIM(STR(CONTE))+" 0 R")
THIS.WRITESTR(">>")
THIS.WRITESTR("endobj")
THIS.ADDPDFOBJECT(CONTE)
OUTLEN = SPACE(4)
INPUT = THIS.CONTENTSTRING
RETVAL = CXX(@XFRXGOUTPUT, @OUTLEN, @INPUT, LEN(INPUT), -1)
IF RETVAL<>0
VYSL = 0
ELSE
VYSL = 0
FOR M.I = 1 TO 4
VYSL = VYSL+256**(M.I-1)*ASC(SUBSTR(OUTLEN, M.I, 1))
ENDFOR
ENDIF
THIS.WRITESTR("  <<")
THIS.WRITESTR("/Length "+ALLTRIM(STR(VYSL)))
THIS.WRITESTR("/Filter [/FlateDecode]")
THIS.WRITESTR(">>")
THIS.WRITESTR("stream")
IF THIS.ENCRYPTOR.TYPE>0
ENCRYPTPDFCONTENT(@XFRXGOUTPUT, VYSL, CONTE, 0, THIS.ENCRYPTOR.KEY)
ENDIF
THIS.WRITESTR(LEFT(XFRXGOUTPUT, VYSL))
THIS.WRITESTR("endstream")
THIS.WRITESTR("endobj")
THIS.ADDPDFOBJECT(ANNOT)
THIS.WRITESTR("[")
FOR M.III = 1 TO THIS.NANOTS
IF THIS.AANOTS(M.III).LNPAGE=THIS.CURRENTPAGEOBJ
LNOBJ = THIS.GETNEWOBJ()
THIS.WRITESTR(ALLTRIM(STR(LNOBJ))+" 0 R")
THIS.AANOTS(M.III).LNOBJ = LNOBJ
ENDIF
ENDFOR
THIS.WRITESTR("]")
THIS.WRITESTR("endobj")
ENDPROC
**
PROCEDURE writeStr
LPARAMETERS TCSTR
LOCAL LNSIZE
LNSIZE = FPUTS(THIS.FHANDLE, TCSTR)
THIS.NTOTALOFFSET = THIS.NTOTALOFFSET+LNSIZE
ENDPROC
**
PROCEDURE Write
LPARAMETERS TCSTR
LOCAL LNSIZE
LNSIZE = FWRITE(THIS.FHANDLE, TCSTR)
THIS.NTOTALOFFSET = THIS.NTOTALOFFSET+LNSIZE
ENDPROC
**
PROCEDURE finish
= FCLOSE(THIS.FHANDLE)
RELEASE XFRXGOUTPUT
ENDPROC
**
PROCEDURE writepictures
LOCAL M.III
WITH THIS
IF .NPICTURES=0
RETURN
ENDIF
.WRITESTR("/XObject << ")
FOR M.III = 1 TO .NPICTURES
.WRITESTR("/Im"+ALLTRIM(STR(.APICTURES(M.III)))+" "+ALLTRIM(STR(.APICTURES(M.III)))+" 0 R ")
ENDFOR
.WRITESTR(" >> ")
.NPICTURES = 0
.APICTURES = -100
ENDWITH
ENDPROC
**
PROCEDURE addGenPicture
LPARAMETERS TNSESSIONNO, TCFIELD, NLEFT, NTOP, TNHEIGHT, TNWIDTH, NADJTYPE, LCMYK, LNEG, TCMASK, LCREPORTDIR, TNROTATE
LOCAL LCFILE, LNSESSIONNO
LCFILE = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)
LNSESSIONNO = SET("Datasession")
IF LNSESSIONNO<>TNSESSIONNO
SET DATASESSION TO TNSESSIONNO
= EXTRACTBMP(TCFIELD, LCFILE)
SET DATASESSION TO LNSESSIONNO
ELSE
= EXTRACTBMP(TCFIELD, LCFILE)
ENDIF
THIS.ADDPICTURE(LCFILE, NLEFT, NTOP, TNHEIGHT, TNWIDTH, NADJTYPE, LCMYK, LNEG, TCMASK, LCREPORTDIR, TNROTATE, .T.)
ERASE (LCFILE)
ENDPROC
**
FUNCTION getFileObject
LPARAMETERS TCNAME
WITH THIS
LOCAL I
FOR I = 1 TO .NFILEOBJECTS
IF .AFILEOBJECTS(M.I).CHECKSUM=SYS(2007, FILETOSTR(M.TCNAME), 0, 1)
RETURN .AFILEOBJECTS(M.I)
ENDIF
ENDFOR
ENDWITH
RETURN .NULL.
ENDFUNC
**
PROCEDURE addFileObject
LPARAMETERS TNOBJ, TCFILE, NBWIDTH, NBHEIGHT
WITH THIS
.NFILEOBJECTS = .NFILEOBJECTS+1
DIMENSION .AFILEOBJECTS(.NFILEOBJECTS)
.AFILEOBJECTS(.NFILEOBJECTS) = CREATEOBJECT("fileObject")
.AFILEOBJECTS(.NFILEOBJECTS).CFILENAME = M.TCFILE
.AFILEOBJECTS(.NFILEOBJECTS).NWIDTH = M.NBWIDTH
.AFILEOBJECTS(.NFILEOBJECTS).NHEIGHT = M.NBHEIGHT
.AFILEOBJECTS(.NFILEOBJECTS).NOBJECTNO = M.TNOBJ
.AFILEOBJECTS(.NFILEOBJECTS).CHECKSUM = SYS(2007, FILETOSTR(M.TCFILE), 0, 1)
ENDWITH
ENDPROC
**
FUNCTION addPicture
LPARAMETERS TCFILE, NLEFT, NTOP, TNHEIGHT, TNWIDTH, NADJTYPE, LCMYK, LNEG, TCMASK, LCREPORTDIR, TNROTATE, TLFROMGENFIELD
LOCAL LNOBJ, STR, LENGTH, CTFN, LC2TFN, LCPREPFILE, LCPREPFILE2
LOCAL LF1, LF2, NBWIDTH, NBHEIGHT, LNSTOREDREFERENCE
IF TNWIDTH<1 .OR. TNHEIGHT<1
RETURN
ENDIF
WITH THIS
IF TYPE("tnRotate")<>"N"
TNROTATE = 0
ENDIF
IF EMPTY(TCMASK)
TCMASK = ""
ENDIF
IF EMPTY(LCREPORTDIR)
LCREPORTDIR = ""
ENDIF
CTFN = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)
LCPREPFILE = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)
LOCAL CTFN, LCWIDTH, LCHEIGHT
LCWIDTH = SPACE(2)
LCHEIGHT = SPACE(2)
LC2TFN = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)
IF  .NOT. _XFRXPREPAREFILE(M.TCFILE, M.LCPREPFILE, LCREPORTDIR)
RETURN .F.
ENDIF
IF  .NOT. EMPTY(THIS.PICTUREDPI) .AND.  .NOT. TLFROMGENFIELD
LOCAL LCEXTENSION, LCFILENAME2, LCTEMPORARYNAME, LCCURRENTEXT
LCCURRENTEXT = UPPER(JUSTEXT(M.LCPREPFILE))
DO CASE
CASE LCCURRENTEXT="JPG" .OR. LCCURRENTEXT="JPEG"
LCPICTURETYPE = "image/jpeg"
LCEXTENSION = "jpg"
CASE LCCURRENTEXT="TIF"
LCPICTURETYPE = "image/tiff"
LCEXTENSION = "tif"
CASE LCCURRENTEXT="GIF"
LCPICTURETYPE = "image/gif"
LCEXTENSION = "gif"
CASE LCCURRENTEXT="PNG"
LCPICTURETYPE = "image/png"
LCEXTENSION = "png"
OTHERWISE
LCPICTURETYPE = "image/bmp"
LCEXTENSION = "bmp"
ENDCASE
LCFILENAME2 = FORCEPATH(SYS(2015), SYS(2023))+"."+LCEXTENSION
IF 1=_XFSAVEIMAGE(M.LCPREPFILE, M.LCFILENAME2, LCPICTURETYPE, TNWIDTH, TNHEIGHT, THIS.PICTUREDPI)
ERASE (LCPREPFILE)
LCPREPFILE = M.LCFILENAME2
ENDIF
ENDIF
LNSTOREDREFERENCE = THIS.GETFILEOBJECT(M.LCPREPFILE)
IF ISNULL(LNSTOREDREFERENCE)
LOCAL LCFILETOREFERENCE
LCFILETOREFERENCE = M.LCPREPFILE
LNOBJ = THIS.GETNEWOBJ()
.ADDPDFOBJECT(LNOBJ)
LENGTH = DOPIC(M.LCPREPFILE, M.CTFN, M.LNOBJ+1, @LCWIDTH, @LCHEIGHT, IIF(LCMYK, 1, 0), IIF(LNEG, 1, 0), TCMASK)
IF M.LENGTH<1
LCPREPFILE2 = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)
= _XF_CONVERTIMAGE(M.LCPREPFILE, LCPREPFILE2, "image/bmp")
LCPREPFILE = M.LCPREPFILE2
LENGTH = DOPIC(M.LCPREPFILE, M.CTFN, M.LNOBJ+1, @LCWIDTH, @LCHEIGHT, IIF(LCMYK, 1, 0), IIF(LNEG, 1, 0), TCMASK)
ERASE (M.LCPREPFILE)
ENDIF
IF M.LENGTH<1
ERASE (M.LCFILETOREFERENCE)
ERASE (M.CTFN)
ERASE (M.LC2TFN)
RETURN .F.
ENDIF
IF THIS.ENCRYPTOR.TYPE>0
ENCRYPTFILE(M.CTFN, M.LC2TFN, M.LNOBJ, 0, THIS.ENCRYPTOR.KEY)
ERASE (M.CTFN)
CTFN = M.LC2TFN
ENDIF
HND = FOPEN(CTFN)
DO WHILE  .NOT. FEOF(HND)
STR = FREAD(HND, 2000)
.WRITE(STR)
ENDDO
= FCLOSE(HND)
ERASE (M.CTFN)
.WRITESTR("endstream")
.WRITESTR("endobj")
.ADDPDFOBJECT(THIS.GETNEWOBJ())
.WRITESTR(ALLTRIM(STR(M.LENGTH)))
.WRITESTR("endobj")
NBWIDTH = STR2WORD(M.LCWIDTH)
NBHEIGHT = STR2WORD(M.LCHEIGHT)
THIS.ADDFILEOBJECT(M.LNOBJ, M.LCFILETOREFERENCE, NBWIDTH, NBHEIGHT)
ERASE (M.LCFILETOREFERENCE)
ELSE
NBWIDTH = LNSTOREDREFERENCE.NWIDTH
NBHEIGHT = LNSTOREDREFERENCE.NHEIGHT
LNOBJ = LNSTOREDREFERENCE.NOBJECTNO
ERASE (M.LCPREPFILE)
ENDIF
IF NADJTYPE=0
NADJTYPE = 1
ENDIF
IF NADJTYPE=1
LF1 = M.TNWIDTH/M.NBWIDTH
LF2 = M.TNHEIGHT/M.NBHEIGHT
LF1 = MIN(M.LF1, M.LF2)
TNWIDTH = M.NBWIDTH*LF1
TNHEIGHT = M.NBHEIGHT*LF1
ENDIF
THIS.CONTENTSTRING = THIS.CONTENTSTRING+" q "
IF TNROTATE<>0
LOCAL LNSIN, LNCOS, LCTRANMATRIX
TNROTATE = PI()*TNROTATE/180
LNCOS = COS(TNROTATE)
LNSIN = SIN(TNROTATE)
THIS.TRANSLATE(M.NLEFT, M.NTOP)
LCTRANMATRIX = ALLTRIM(__STR(LNCOS, 6, 3))+" "+ALLTRIM(__STR(LNSIN, 6, 3))+" "+ALLTRIM(__STR(-LNSIN, 6, 3))+" "+ALLTRIM(__STR(LNCOS, 6, 3))+" 0 0 cm "
THIS.CONTENTSTRING = THIS.CONTENTSTRING+LCTRANMATRIX
THIS.CONTENTSTRING = THIS.CONTENTSTRING+ALLTRIM(STR(M.TNWIDTH))+" 0 0 "+ALLTRIM(STR(M.TNHEIGHT))+" 0 "+ALLTRIM(STR(-M.TNHEIGHT))+" cm "
ELSE
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"1 0 0 1 "+ALLTRIM(STR(M.NLEFT))+" "+ALLTRIM(STR(M.NTOP-M.TNHEIGHT))+" cm "
THIS.CONTENTSTRING = THIS.CONTENTSTRING+ALLTRIM(STR(M.TNWIDTH))+" 0 0 "+ALLTRIM(STR(M.TNHEIGHT))+" 0 0 cm "
ENDIF
IF ASCAN(.APICTURES, LNOBJ)<1
.NPICTURES = .NPICTURES+1
DIMENSION .APICTURES(.NPICTURES)
.APICTURES(.NPICTURES) = LNOBJ
ENDIF
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"/Im"+ALLTRIM(STR(M.LNOBJ))+" Do "
THIS.CONTENTSTRING = THIS.CONTENTSTRING+"Q "
ENDWITH
ENDFUNC
**
ENDDEFINE
**
FUNCTION _strtofile
LPARAMETERS TCSTR, TCHEADERFILE, LADD
RETURN STRTOFILE(TCSTR, TCHEADERFILE, LADD)
ENDFUNC
**
FUNCTION __strtofile
LPARAMETERS TCSTR, TCHEADERFILE, LADD
LOCAL HN
IF  .NOT. LADD .OR.  .NOT. FILE(TCHEADERFILE)
HN = FCREATE(TCHEADERFILE)
ELSE
HN = FOPEN(TCHEADERFILE, 11)
IF HN>0
FSEEK(HN, 0, 2)
ENDIF
ENDIF
IF HN<0
RETURN .F.
ENDIF
FPUTS(HN, TCSTR)
FCLOSE(HN)
RETURN .T.
ENDFUNC
**
FUNCTION str2word
LPARAMETERS CSTR
RETURN ASC(LEFT(CSTR, 1))+ASC(SUBSTR(CSTR, 2, 1))*256
ENDFUNC
**
FUNCTION _xfN2S
LPARAMETERS CNUM
LOCAL LC
LC = ALLTRIM(STR(CNUM, 16, 4))
LC = STRTRAN(LC, SET("Point"), ".")
RETURN LC
ENDFUNC
**
PROCEDURE addToLog
LPARAMETERS LCSTRING, LCFILENAME
STRTOFILE(LCSTRING+CHR(13)+CHR(10), LCFILENAME, .T.)
ENDPROC
**
DEFINE CLASS pdfl AS Custom
ODOCUMENT = .NULL.
CFONTREF = ""
NFONTSIZE = 10
CFONTNAME = "Arial"
LBOLD = .F.
LITALICS = .F.
LUNDERLINE = .F.
NFR = 0
NFG = 0
NFB = 0
NBR = 255
NBG = 255
NBB = 255
NXPOS = 0
NYPOS = 0
LPOSCHANGED = .F.
LINTEXT = .F.
NFONTREFERENCENUMBER = 0
**
PROCEDURE setEmbeddingType
LPARAMETERS TNEMBTYPE
IF TYPE("tnEmbType")="N"
THIS.ODOCUMENT.CEMBTYPE = TNEMBTYPE
ENDIF
ENDPROC
**
PROCEDURE setForeColor
LPARAMETERS TFR, TFG, TFB
WITH THIS
.NFR = M.TFR
.NFG = M.TFG
.NFB = M.TFB
ENDWITH
ENDPROC
**
PROCEDURE setBackColor
LPARAMETERS TBR, TBG, TBB
WITH THIS
.NBR = M.TBR
.NBG = M.TBG
.NBB = M.TBB
ENDWITH
ENDPROC
**
PROCEDURE setColor
LPARAMETERS TFR, TFG, TFB, TBR, TBG, TBB
WITH THIS
.NFR = M.TFR
.NFG = M.TFG
.NFB = M.TFB
.NBR = M.TBR
.NBG = M.TBG
.NBB = M.TBB
ENDWITH
ENDPROC
**
PROCEDURE AddLine
LPARAMETERS X0, Y0, X1, Y1, LNWIDTH, LNPATTERN, TNROTATION
WITH THIS
IF TYPE("tnRotation")<>"N"
TNROTATION = 0
ENDIF
.MANAGETEXT()
.ODOCUMENT.ADDCONTENT(" q ")
.ODOCUMENT.TRANSLATE(M.X0, M.Y0)
.ODOCUMENT.ADDCONTENT(PDFROTATIONMATRIX(TNROTATION))
.ODOCUMENT.ADDLINE(0, 0, M.X1-M.X0, M.Y1-M.Y0, M.LNWIDTH, M.LNPATTERN, .NFR, .NFG, .NFB)
.ODOCUMENT.ADDCONTENT(" Q ")
ENDWITH
ENDPROC
**
PROCEDURE addBox
LPARAMETERS X0, Y0, NWIDTH, NHEIGHT, NSIZE, NFILL, TNPENPAT, NOFFSET
WITH THIS
.MANAGETEXT()
.ODOCUMENT.ADDBOX(M.X0, M.Y0, M.NWIDTH, M.NHEIGHT, M.NSIZE, M.NFILL, .NBR, .NBG, .NBB, M.TNPENPAT, .NFR, .NFG, .NFB, M.NOFFSET)
ENDWITH
ENDPROC
**
PROCEDURE setPos
LPARAMETERS TXPOS, TYPOS
THIS.NXPOS = M.TXPOS
THIS.NYPOS = M.TYPOS
THIS.LPOSCHANGED = .T.
ENDPROC
**
PROCEDURE manageText
IF THIS.LINTEXT
THIS.ODOCUMENT.ENDTEXT()
THIS.LINTEXT = .F.
ENDIF
ENDPROC
**
PROCEDURE newLine
WITH THIS
GETFPARAM("", .CFONTNAME, .NFONTSIZE, IIF(.LBOLD, 1, 0), IIF(.LITALICS, 1, 0), 1, @__XFRET, "", 0, "", 0, "")
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
.SETPOS(.NXPOS, .NYPOS-TOPOINT(AA+BB))
ENDWITH
ENDPROC
**
PROCEDURE outText
LPARAMETERS _X____11334, TNROTATION
WITH THIS
.ODOCUMENT.SETCOLOR("f", .NFR, .NFG, .NFB)
IF TYPE("tnRotation")<>"N"
TNROTATION = 0
ENDIF
IF TNROTATION<>0 .OR. .LUNDERLINE
IF .LINTEXT
.ODOCUMENT.ENDTEXT()
.LINTEXT = .F.
ENDIF
.ODOCUMENT.ADDCONTENT(" q ")
ENDIF
IF TNROTATION<>0
.ODOCUMENT.TRANSLATE(.NXPOS, .NYPOS)
.LPOSCHANGED = .F.
.ODOCUMENT.ADDCONTENT(PDFROTATIONMATRIX(TNROTATION))
ENDIF
IF .LUNDERLINE
GETFPARAM("", .CFONTNAME, .NFONTSIZE, IIF(.LBOLD, 1, 0), IIF(.LITALICS, 1, 0), 1, @__XFRET, "", 0, "", 0, "")
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
.ODOCUMENT.ADDLINE(TOPOINT(AA/30), -TOPOINT(AA/10), 20+TOPOINT(AA/30), 0-TOPOINT(AA/10), TOPOINT(AA/10), 0, .NFR, .NFG, .NFB)
ENDIF
IF  .NOT. .LINTEXT
.ODOCUMENT.STARTTEXT()
.LINTEXT = .T.
ENDIF
IF TNROTATION<>0
.ODOCUMENT.SETPOS(0, 0)
.LPOSCHANGED = .F.
ENDIF
IF .LPOSCHANGED
.ODOCUMENT.SETPOS(.NXPOS, .NYPOS)
.LPOSCHANGED = .F.
ENDIF
.ODOCUMENT.SETFONT(.CFONTREF, .NFONTSIZE)
.ODOCUMENT.OUTTEXT(_X____11334, 0)
IF TNROTATION<>0
.ODOCUMENT.ENDTEXT()
.LINTEXT = .F.
.ODOCUMENT.ADDCONTENT(" Q ")
ENDIF
ENDWITH
ENDPROC
**
PROCEDURE setFont
LPARAMETERS TCFONTNAME, TNSIZE, TLBOLD, TLITALIC, TLUNDERLINE, TNEMBED
WITH THIS
IF EMPTY(TNEMBED)
TNEMBED = 0
ENDIF
.ODOCUMENT.ADDFONT(M.TCFONTNAME, M.TLBOLD, M.TLITALIC, TNEMBED)
.NFONTREFERENCENUMBER = .ODOCUMENT.GETFONTREFERENCE(M.TCFONTNAME, M.TLBOLD, M.TLITALIC)
.CFONTREF = "F"+ALLTRIM(STR(.NFONTREFERENCENUMBER))
.NFONTSIZE = M.TNSIZE
.CFONTNAME = M.TCFONTNAME
.LBOLD = M.TLBOLD
.LITALICS = M.TLITALIC
.LUNDERLINE = M.TLUNDERLINE
ENDWITH
ENDPROC
**
PROCEDURE Init
DECLARE INTEGER ww IN hndlib AS x_ww STRING @, STRING @, SHORT, SHORT, SHORT, SHORT, STRING @, SHORT, SHORT
DECLARE INTEGER _xfWordWrap IN xfrxlib.fll AS x_ww_gdiplus STRING @, STRING @, SHORT, SHORT, SHORT, SHORT, STRING @, SHORT, SHORT
DECLARE INTEGER getFParam IN hndlib AS getFParam STRING @, STRING @, SHORT, SHORT, SHORT, SHORT, STRING @, STRING, INTEGER, STRING, INTEGER, STRING
DECLARE INTEGER ?getPar@@YAHH@Z IN hndlib AS getPar INTEGER
DECLARE INTEGER FindWindow IN win32api STRING, STRING
DECLARE INTEGER ShellExecute IN shell32.Dll INTEGER, STRING, STRING, STRING, STRING, INTEGER
ENDPROC
**
PROCEDURE startPath
LPARAMETERS TNX, TNY
WITH THIS
.MANAGETEXT()
.ODOCUMENT.SETCOLOR("S", .NFR, .NFG, .NFB)
.ODOCUMENT.SETCOLOR("", .NBR, .NBG, .NBB)
.ODOCUMENT.ADDCONTENT(TSTR(TNX)+" "+TSTR(TNY)+" m ")
ENDWITH
ENDPROC
**
PROCEDURE appendLine
LPARAMETERS TNX, TNY
WITH THIS
.ODOCUMENT.ADDCONTENT(TSTR(TNX)+" "+TSTR(TNY)+" l ")
ENDWITH
ENDPROC
**
PROCEDURE appendBezier
LPARAMETERS TNX, TNY, TNX1, TNY1, TNX2, TNY2
WITH THIS
.ODOCUMENT.ADDCONTENT(TSTR(M.TNX)+" "+TSTR(M.TNY)+" "+TSTR(M.TNX1)+" "+TSTR(M.TNY1)+" "+TSTR(M.TNX2)+" "+TSTR(M.TNY2)+" c ")
ENDWITH
ENDPROC
**
PROCEDURE closePath
WITH THIS
.ODOCUMENT.ADDCONTENT(" h ")
ENDWITH
ENDPROC
**
PROCEDURE stroke
WITH THIS
.ODOCUMENT.ADDCONTENT(" S ")
ENDWITH
ENDPROC
**
PROCEDURE Fill
WITH THIS
.ODOCUMENT.ADDCONTENT(" f ")
ENDWITH
ENDPROC
**
PROCEDURE strokeandfill
WITH THIS
.ODOCUMENT.ADDCONTENT(" B ")
ENDWITH
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TCPIC, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNADJTYPE, TNROTATE
THIS.MANAGETEXT()
THIS.ODOCUMENT.ADDPICTURE(M.TCPIC, M.TNLEFT, M.TNTOP, M.TNHEIGHT, M.TNWIDTH, M.TNADJTYPE,  ,  ,  ,  , TNROTATE)
ENDPROC
**
FUNCTION createDocument
LPARAMETERS TCNAME, TLADD
PUBLIC __XFRET
__XFRET = SPACE(10000)
WITH THIS
.ODOCUMENT = CREATEOBJECT("pdf", "")
IF .ODOCUMENT.INITDOC(TCNAME, TLADD)<>0
RETURN -1
ENDIF
.ODOCUMENT.ADDFONT("Arial",  ,  , 0)
.CFONTREF = "F"+ALLTRIM(STR(.ODOCUMENT.GETFONTREFERENCE("Arial")))
.NFONTSIZE = 10
.ODOCUMENT.ENCRYPTOR = CREATEOBJECT("pdfencryptor")
RETURN 0
ENDWITH
ENDFUNC
**
PROCEDURE newPage
LPARAMETERS TWIDTH, THEIGHT
WITH THIS
IF EMPTY(TWIDTH)
TWIDTH = "letter"
ENDIF
IF TYPE("twidth")="C"
DO CASE
CASE TWIDTH="A4"
TWIDTH = 595
THEIGHT = 842
OTHERWISE
TWIDTH = 612
THEIGHT = 792
ENDCASE
ENDIF
.ODOCUMENT.NEWPAGE(THEIGHT, TWIDTH)
ENDWITH
ENDPROC
**
PROCEDURE attachToPDFDocument
LPARAMETERS TOSESSION
WITH THIS
.ODOCUMENT = TOSESSION.ODOCUMENT
.ODOCUMENT.ADDFONT("Arial",  ,  , 0)
.CFONTREF = "F"+ALLTRIM(STR(.ODOCUMENT.GETFONTREFERENCE("Arial")))
.NFONTSIZE = 10
ENDWITH
ENDPROC
**
PROCEDURE addAd
THIS.ODOCUMENT.SETCOLOR("f", 0, 0, 0)
THIS.ODOCUMENT.STARTTEXT()
THIS.ODOCUMENT.SETPOS(30, 30)
THIS.ODOCUMENT.SETFONT("F1", 10)
*THIS.ODOCUMENT.OUTTEXT("Created with XFRX, www.eqeus.com, commercial use prohibited.")
THIS.ODOCUMENT.ENDTEXT()
ENDPROC
**
PROCEDURE endPage
THIS.MANAGETEXT()
THIS.ADDAD()
THIS.ODOCUMENT.FLUSHPAGE()
ENDPROC
**
PROCEDURE finishDocument
WITH THIS
.ODOCUMENT.WRITEPAGES()
.ODOCUMENT.WRITEFONTOBJS()
.ODOCUMENT.WRITETRAILER()
.ODOCUMENT.FINISH()
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS html AS Custom
FHANDLE = 0
FHANDLE2 = 0
FHANDLE3 = 0
FHANDLE4 = 0
CFILENAME = ""
CFILENAME2 = ""
CFILENAME3 = ""
CFILENAME4 = ""
LNPAGES = 0
NFONT = 0
CFONTREF = ''
NFONTSIZE = 10
CFONTNAME = 'Arial'
LBOLD = .F.
LITALICS = .F.
CTEMPDIR = ""
NPAGEHEIGHT = 0
NPAGEWIDTH = 0
CTITLE = ''
CGENERATOR = 'XFRX'
CAUTHOR = ''
CDESCRIPTION = ''
CKEYWORDS = ''
CSUBJECT = ''
NLEFTMARGIN = 10000
NTOPMARGIN = 10000
NBOTTOMMARGIN = 10000
NRIGHTMARGIN = 10000
LMHT = .F.
LOUTLINE = .F.
CMHT = ''
NPICTURE = 0
NOUTLINES = 0
NOUTLINETYPE = 0
DIMENSION APICTURENAMEB64(1)
DIMENSION APICTUREPATH(1)
DIMENSION AFONTS(1)
DIMENSION AOUTLINES(1)
CTEXTTOHIGHLIGHT = ""
ONCLICKLINK = ""
CLINKALIAS = ""
NOUTFILES = 0
DIMENSION AOUTFILES(1)
LUSEPIXELS = .F.
**
PROCEDURE addOutFile
LPARAMETERS TCFILENAME
WITH THIS
.NOUTFILES = .NOUTFILES+1
DIMENSION .AOUTFILES(.NOUTFILES)
.AOUTFILES(.NOUTFILES) = TCFILENAME
ENDWITH
ENDPROC
**
PROCEDURE Init
LPARAMETERS TCTEMPDIR
IF EMPTY(TCTEMPDIR)
THIS.CTEMPDIR = SYS(2023)
ELSE
THIS.CTEMPDIR = TCTEMPDIR
ENDIF
THIS.NOUTFILES = 0
ENDPROC
**
PROCEDURE setTitle
LPARAMETERS TCTITLE
THIS.CTITLE = TCTITLE
ENDPROC
**
PROCEDURE setGenerator
LPARAMETERS TCGENERATOR
THIS.CGENERATOR = TCGENERATOR
ENDPROC
**
PROCEDURE setAuthor
LPARAMETERS TCAUTHOR
THIS.CAUTHOR = TCAUTHOR
ENDPROC
**
PROCEDURE setKeywords
LPARAMETERS TCKEYWORDS
THIS.CKEYWORDS = TCKEYWORDS
ENDPROC
**
PROCEDURE setDescription
LPARAMETERS TCDESCRIPTION
THIS.CDESCRIPTION = TCDESCRIPTION
ENDPROC
**
PROCEDURE setSubject
LPARAMETERS TCSUBJECT
THIS.CSUBJECT = TCSUBJECT
ENDPROC
**
PROCEDURE setOutLine
LPARAMETERS TLOUTLINE
THIS.LOUTLINE = TLOUTLINE
ENDPROC
**
PROCEDURE setOutLineType
LPARAMETERS TNOUTLINETYPE
THIS.NOUTLINETYPE = TNOUTLINETYPE
ENDPROC
**
PROCEDURE setPageMargins
LPARAMETERS TNLEFTMARGIN, TNTOPMARGIN, TNRIGHTMARGIN, TNBOTTOMMARGIN
THIS.NLEFTMARGIN = TNLEFTMARGIN
THIS.NTOPMARGIN = TNTOPMARGIN
THIS.NBOTTOMMARGIN = TNBOTTOMMARGIN
THIS.NRIGHTMARGIN = TNRIGHTMARGIN
ENDPROC
**
FUNCTION initDoc
LPARAMETERS TCNAME
LOCAL LCTITLE
IF EMPTY(TCNAME)
TCNAME = SYS(3)+".htm"
ENDIF
THIS.CFILENAME = TCNAME
THIS.CFILENAME2 = THIS.CFILENAME+'2'
THIS.CFILENAME3 = THIS.CFILENAME+'3'
THIS.CFILENAME4 = THIS.CFILENAME+'4'
RETURN 0
ENDFUNC
**
FUNCTION BeginDoc
LPARAMETERS TNREPORTNUMBER, TCCODEPAGE
LOCAL NFILE
NFILE = 2
IF THIS.LMHT .AND. THIS.LOUTLINE
THIS.LOUTLINE = .F.
ENDIF
IF TNREPORTNUMBER=1
IF THIS.LOUTLINE .AND.  .NOT. THIS.LMHT
THIS.CFILENAME2 = JUSTSTEMPATH(THIS.CFILENAME)+'_frm22.'+JUSTEXT(THIS.CFILENAME)
THIS.CFILENAME3 = JUSTSTEMPATH(THIS.CFILENAME)+'_frm1.'+JUSTEXT(THIS.CFILENAME)
THIS.CFILENAME4 = THIS.CFILENAME
THIS.CFILENAME = JUSTSTEMPATH(THIS.CFILENAME)+'_frm2.'+JUSTEXT(THIS.CFILENAME)
ENDIF
THIS.FHANDLE2 = FCREATE(THIS.CFILENAME)
IF THIS.FHANDLE2<0
RETURN -1
ENDIF
THIS.FHANDLE = FCREATE(THIS.CFILENAME2)
IF THIS.FHANDLE<0
RETURN -1
ENDIF
IF THIS.LOUTLINE
THIS.FHANDLE3 = FCREATE(THIS.CFILENAME3)
IF THIS.FHANDLE3<0
RETURN -1
ENDIF
THIS.FHANDLE4 = FCREATE(THIS.CFILENAME4)
IF THIS.FHANDLE4<0
RETURN -1
ENDIF
ENDIF
IF THIS.LOUTLINE
NFILE = 4
ENDIF
IF THIS.LMHT
THIS.WRITESTR('From: <Saved by XFRX>', NFILE)
THIS.WRITESTR('Subject: '+THIS.CTITLE, NFILE)
THIS.WRITESTR('Date: '+DTOC(DATE())+' '+TIME(), NFILE)
THIS.WRITESTR('MIME-Version: 1.0', NFILE)
THIS.WRITESTR('Content-Type: multipart/related; boundary="----=_NextPart__"; type=text/html', NFILE)
THIS.WRITESTR('X-MimeOLE: Produced By XFRX', NFILE)
THIS.WRITESTR('', NFILE)
THIS.WRITESTR('This is a multi-part message in MIME format.', NFILE)
THIS.WRITESTR('', NFILE)
THIS.WRITESTRHEADER('------=_NextPart__')
THIS.WRITESTRHEADER('Content-Type: text/html')
THIS.WRITESTRHEADER('Content-Transfer-Encoding: quoted-printable')
IF THIS.LOUTLINE
THIS.WRITESTR('------=_NextPart__', NFILE)
THIS.WRITESTR('Content-Type: text/html', NFILE)
THIS.WRITESTR('Content-Transfer-Encoding: quoted-printable', NFILE)
THIS.WRITESTR('------=_NextPart__', 3)
THIS.WRITESTR('Content-Type: text/html', 3)
THIS.WRITESTR('Content-Transfer-Encoding: quoted-printable', 3)
ENDIF
IF THIS.LOUTLINE
THIS.WRITESTRHEADER('Content-Location: file:///C:/main_xfrx.htm')
THIS.WRITESTRHEADER('')
THIS.WRITESTR('Content-Location: file:///C:/frameset_xfrx.htm', NFILE)
THIS.WRITESTR('', NFILE)
THIS.WRITESTR('Content-Location: file:///C:/bookmarks_xfrx.htm', 3)
THIS.WRITESTR('', 3)
ELSE
THIS.WRITESTRHEADER('Content-Location: ')
THIS.WRITESTRHEADER('')
ENDIF
ENDIF
THIS.WRITESTRHEADER('<html>')
THIS.WRITESTRHEADER('<head>')
IF THIS.LOUTLINE
THIS.WRITESTR('<html>', NFILE)
THIS.WRITESTR('<head>', NFILE)
THIS.WRITESTR('<html>', 3)
THIS.WRITESTR('<head>', 3)
ENDIF
IF LEN(ALLTRIM(THIS.CGENERATOR))>0
THIS.WRITESTR('<meta name='+THIS.CMHT+'"generator"   content='+THIS.CMHT+'"'+ALLTRIM(THIS.CGENERATOR)+'">', NFILE)
ENDIF
IF LEN(ALLTRIM(THIS.CAUTHOR))>0
THIS.WRITESTR('<meta name='+THIS.CMHT+'"author"      content='+THIS.CMHT+'"'+ALLTRIM(THIS.CAUTHOR)+'">', NFILE)
ENDIF
IF LEN(ALLTRIM(THIS.CDESCRIPTION))>0
THIS.WRITESTR('<meta name='+THIS.CMHT+'"description" content='+THIS.CMHT+'"'+ALLTRIM(THIS.CDESCRIPTION)+'">', NFILE)
ENDIF
IF LEN(ALLTRIM(THIS.CKEYWORDS))>0
THIS.WRITESTR('<meta name='+THIS.CMHT+'"keywords"    content='+THIS.CMHT+'"'+ALLTRIM(THIS.CKEYWORDS)+'">', NFILE)
ENDIF
IF LEN(ALLTRIM(THIS.CSUBJECT))>0
THIS.WRITESTR('<meta name='+THIS.CMHT+'"subject"     content='+THIS.CMHT+'"'+ALLTRIM(THIS.CSUBJECT)+'">', NFILE)
ENDIF
IF EMPTY(TCCODEPAGE)
TCCODEPAGE = "windows-"+ALLTRIM(STR(CPCURRENT()))
ENDIF
IF TYPE("tcCodePage")="N"
TCCODEPAGE = "windows-"+ALLTRIM(STR(TCCODEPAGE))
ENDIF
THIS.WRITESTRHEADER('<meta http-equiv='+THIS.CMHT+'"content-type" content='+THIS.CMHT+'"text/html; charset='+THIS.CMHT+ALLTRIM(TCCODEPAGE)+'">')
IF THIS.LOUTLINE
THIS.WRITESTR('<meta http-equiv='+THIS.CMHT+'"content-type" content='+THIS.CMHT+'"text/html; charset='+THIS.CMHT+ALLTRIM(TCCODEPAGE)+'">', NFILE)
THIS.WRITESTR('<meta http-equiv='+THIS.CMHT+'"content-type" content='+THIS.CMHT+'"text/html; charset='+THIS.CMHT+ALLTRIM(TCCODEPAGE)+'">', 3)
ENDIF
THIS.WRITESTRHEADER('')
IF THIS.LOUTLINE
THIS.WRITESTR('', NFILE)
ENDIF
LOCAL LCTITLE
IF LEN(ALLTRIM(THIS.CTITLE))>0
LCTITLE = THIS.CTITLE
ELSE
LCTITLE = JUSTFNAME(THIS.CFILENAME)
IF THIS.LOUTLINE .AND.  .NOT. THIS.LMHT
LCTITLE = JUSTFNAME(THIS.CFILENAME4)
ENDIF
LCTITLE = JUSTSTEM(M.LCTITLE)
ENDIF
THIS.CTITLE = M.LCTITLE
THIS.WRITESTR('<title>'+THIS.CTITLE+'</title>', NFILE)
THIS.WRITESTR('', NFILE)
THIS.WRITESTR('</head>', NFILE)
IF THIS.LOUTLINE
THIS.WRITESTR('<frameset cols='+THIS.CMHT+'"182,*" framespacing='+THIS.CMHT+'"2" border='+THIS.CMHT+'"0" frameborder='+THIS.CMHT+'"100">', NFILE)
LOCAL LCFILE1, LCFILE2
IF THIS.LMHT
LCFILE1 = 'file://C:/bookmarks_xfrx.htm'
LCFILE2 = 'file://C:/main_xfrx.htm'
ELSE
LCFILE1 = THIS.CFILENAME3
LCFILE2 = THIS.CFILENAME
ENDIF
THIS.WRITESTR('<frame name='+THIS.CMHT+'"contents" target='+THIS.CMHT+'"main" src='+THIS.CMHT+'" '+LCFILE1+'" scrolling='+THIS.CMHT+'"auto">', NFILE)
THIS.WRITESTR('<frame name='+THIS.CMHT+'"detail" src='+THIS.CMHT+'" '+LCFILE2+'" target='+THIS.CMHT+'"detail" scrolling='+THIS.CMHT+'"auto">', NFILE)
THIS.WRITESTR('<noframes>', NFILE)
THIS.WRITESTR('<body>', NFILE)
THIS.WRITESTR('<p>Stránky uívají rámce které Vá browser nepodporuje </p>', NFILE)
THIS.WRITESTR('</body>', NFILE)
THIS.WRITESTR('</noframes>', NFILE)
THIS.WRITESTR('</frameset>', NFILE)
THIS.WRITESTR('</html>', NFILE)
ENDIF
THIS.WRITESTRHEADER('<style type='+THIS.CMHT+'"text/css">')
THIS.WRITESTRHEADER('div {position:absolute;overflow:hidden;}')
THIS.WRITESTRHEADER('div.page {position:relative;overflow:visible;}')
ENDIF
ENDFUNC
**
PROCEDURE BeginDocEnd
FOR LNFONT = 1 TO THIS.NFONT
LCFONT = THIS.AFONTS(LNFONT)
LCTEXT = 'div.font'+ALLTRIM(STR(LNFONT))+' {position:absolute;overflow:hidden;'
LCTEXT = LCTEXT+LCFONT+'text-decoration:none;text-align:left;}'
THIS.WRITESTRHEADER(LCTEXT)
ENDFOR
THIS.WRITESTRHEADER('</style>')
THIS.WRITESTRHEADER('<style type='+THIS.CMHT+'"text/css" media='+THIS.CMHT+'"screen">')
THIS.WRITESTRHEADER('div {position:absolute;overflow:hidden;}')
THIS.WRITESTRHEADER('.basenotprint {position:absolute;overflow:hidden;border-width:1px;border-style:solid;border-color:RGB(192,192,192);background-color:RGB(192,192,192);}')
THIS.WRITESTRHEADER('</style>')
THIS.WRITESTRHEADER('<style type='+THIS.CMHT+'"text/css" media='+THIS.CMHT+'"print">')
THIS.WRITESTRHEADER('div {position:absolute;overflow:hidden;}')
THIS.WRITESTRHEADER('.basenotprint {position:absolute;visiblity:hidden;}')
THIS.WRITESTRHEADER('</style>')
THIS.WRITESTRHEADER('</head>')
THIS.WRITESTRHEADER('<body>')
ENDPROC
**
FUNCTION EndDoc
LOCAL LCBEGINFONT, LCENDFONT, LCLINE
THIS.WRITESTR('</body>')
THIS.WRITESTR('</html>')
IF THIS.LMHT
WITH THIS
THIS.WRITESTR('')
THIS.WRITESTR('------=_NextPart__')
FOR M.I = 1 TO .NPICTURE
LFHANDLE = FOPEN(.APICTURENAMEB64(M.I))
IF LFHANDLE<0
RETURN -1
ENDIF
THIS.WRITESTR('Content-Type: image/'+JUSTEXT(.APICTUREPATH(M.I)))
THIS.WRITESTR('Content-Transfer-Encoding: base64')
THIS.WRITESTR('Content-Location: file:///'+.APICTUREPATH(M.I))
THIS.WRITESTR('')
= FSEEK(.FHANDLE, 0, 2)
DO WHILE  .NOT. FEOF(LFHANDLE)
LCSTR = FREAD(LFHANDLE, 2048)
= FWRITE(.FHANDLE, LCSTR)
ENDDO
= FSEEK(.FHANDLE, 0, 2)
THIS.WRITESTR('')
THIS.WRITESTR('------=_NextPart__')
FCLOSE(LFHANDLE)
ERASE (.APICTURENAMEB64(M.I))
ENDFOR
LCDIR = JUSTSTEMPATH(THIS.CFILENAME)+'_filesMHT'
IF DIRECTORY(LCDIR)
RD (LCDIR)
ENDIF
ENDWITH
ENDIF
IF THIS.LOUTLINE
WITH THIS
THIS.WRITESTR3('<title></title>')
THIS.WRITESTR3('</head>')
THIS.WRITESTR3('<BASE TARGET='+THIS.CMHT+'"detail" >')
THIS.WRITESTR3('<br>')
IF .NOUTLINETYPE=3
M.COUNTER = 2
ELSE
M.COUNTER = 1
ENDIF
FOR M.J = 1 TO M.COUNTER
FOR M.I = 1 TO .NOUTLINES
IF .NOUTLINETYPE=1 .AND. .AOUTLINES(M.I, 4)=1
LOOP
ENDIF
IF .NOUTLINETYPE=2 .AND. .AOUTLINES(M.I, 4)=0
LOOP
ENDIF
IF .NOUTLINETYPE=3 .AND. .AOUTLINES(M.I, 4)=0 .AND. M.J=1
LOOP
ENDIF
IF .NOUTLINETYPE=3 .AND. .AOUTLINES(M.I, 4)=1 .AND. M.J=2
LOOP
ENDIF
IF EMPTY(.AOUTLINES(M.I, 1))
.AOUTLINES(M.I, 1) = .AOUTLINES(M.I, 2)
ENDIF
IF  .NOT. EMPTY(.AOUTLINES(M.I, 3))
DO CASE
CASE .AOUTLINES(M.I, 3)=1
LCBEGINFONT = '<i>'
LCENDFONT = '</i>'
CASE .AOUTLINES(M.I, 3)=2
LCBEGINFONT = '<b>'
LCENDFONT = '</b>'
CASE .AOUTLINES(M.I, 3)=3
LCBEGINFONT = '<i><b>'
LCENDFONT = '</b></i>'
ENDCASE
ELSE
LCBEGINFONT = ''
LCENDFONT = ''
ENDIF
IF .AOUTLINES(M.I, 4)=1 .AND. (.NOUTLINETYPE=0 .OR. .NOUTLINETYPE=3)
LCBEGINFONT = LCBEGINFONT+'<big>'
LCENDFONT = LCENDFONT+'</big>'
ENDIF
THIS.WRITESTR3('<nobr>'+LCBEGINFONT+'<a href='+THIS.CMHT+'"'+.AOUTLINES(M.I, 2)+'">'+.AOUTLINES(M.I, 1)+'</a>'+LCENDFONT+'</nobr><br>')
ENDFOR
ENDFOR
THIS.WRITESTR3('</html>')
ENDWITH
ENDIF
ENDFUNC
**
PROCEDURE NewPage
LPARAMETERS TNHEIGHT, TNWIDTH
LOCAL LCTEXT
THIS.LNPAGES = THIS.LNPAGES+1
IF THIS.LNPAGES>1
THIS.ENDPAGE()
ENDIF
IF TYPE('tnWidth')='L'
TNWIDTH = 1056
TNHEIGHT = 950
ENDIF
IF TNHEIGHT>1000
ENDIF
THIS.NPAGEHEIGHT = TNHEIGHT
THIS.NPAGEWIDTH = TNWIDTH
LCTEXT = '<div class='+THIS.CMHT+'"page" style='+THIS.CMHT+'"width:'+ALLTRIM(STR(TNWIDTH))+';height:'+ALLTRIM(STR(TNHEIGHT))+';'
IF THIS.LNPAGES<>1
LCTEXT = LCTEXT+'page-break-before:always;'
ENDIF
THIS.WRITESTR(LCTEXT+'"><a name='+THIS.CMHT+'"'+'XFRXPAGE_'+ALLTRIM(STR(THIS.LNPAGES))+THIS.CMHT+'">')
IF THIS.LOUTLINE
WITH THIS
.NOUTLINES = .NOUTLINES+1
DIMENSION .AOUTLINES(.NOUTLINES, 4)
.AOUTLINES(.NOUTLINES, 1) = 'Page '+ALLTRIM(STR(THIS.LNPAGES))
.AOUTLINES(.NOUTLINES, 2) = THIS.CFILENAME+'#'+'XFRXPAGE_'+ALLTRIM(STR(THIS.LNPAGES))
.AOUTLINES(.NOUTLINES, 3) = 2
.AOUTLINES(.NOUTLINES, 4) = 1
ENDWITH
ENDIF
ENDPROC
**
PROCEDURE EndPage
THIS.ADDLINE(0, THIS.NPAGEHEIGHT-2, THIS.NPAGEWIDTH-2, THIS.NPAGEHEIGHT-1, 1, 0, 192, 192, 192, .T.)
THIS.WRITESTR('</div>')
ENDPROC
**
PROCEDURE AddBox
LPARAMETERS TNXPOS, TNYPOS, TNWIDTH, TNHEIGHT, TNLINEWIDTH, TNFILLPAT, TNBACKRED, TNBACKGREEN, TNBACKBLUE, TNPENPAT, TNRED, TNGREEN, TNBLUE, TLNOTPRINT
LOCAL LLWIDTH, LLHEIGHT, LCLINE, LCPATERN, LCBACKCOLOR, LBBORDER
LCCOLOR = THIS.MAKEFORECOLORS(TNRED, TNGREEN, TNBLUE)
LCBACKCOLOR = THIS.MAKEBACKCOLORS(TNBACKRED, TNBACKGREEN, TNBACKBLUE)
IF TNLINEWIDTH=0
TNLINEWIDTH = 1
ENDIF
IF  .NOT. (TLNOTPRINT)
LCLINE = ' <div class='+THIS.CMHT+'"base" style='+THIS.CMHT+'"'
ELSE
LCLINE = ' <div class='+THIS.CMHT+'"basenotprint" style='+THIS.CMHT+'"'
ENDIF
LBBORDER = .T.
IF TNWIDTH=0 .OR. TNWIDTH=1
LCLINE = LCLINE+'border-width:0px;border-left-width:'+ALLTRIM(STR(TNLINEWIDTH))+'px;'
TNWIDTH = 1
LBBORDER = .F.
ENDIF
IF TNHEIGHT=0 .OR. TNHEIGHT=1
LCLINE = LCLINE+'border-width:0px;border-top-width:'+ALLTRIM(STR(TNLINEWIDTH))+'px;'
TNHEIGHT = 1
LBBORDER = .F.
ENDIF
LCLINE = LCLINE+'top:'+ALLTRIM(STR(TNYPOS))+'px;'
LCLINE = LCLINE+'left:'+ALLTRIM(STR(TNXPOS))+'px;'
LCLINE = LCLINE+'height:'+ALLTRIM(STR(TNHEIGHT))+'px;'
LCLINE = LCLINE+'width:'+ALLTRIM(STR(TNWIDTH))+'px;'
IF  .NOT. (TLNOTPRINT)
IF LBBORDER
LCLINE = LCLINE+'border-width:'+ALLTRIM(STR(TNLINEWIDTH))+'px;'
ENDIF
LCPATTERN = ''
DO CASE
CASE TNPENPAT=0
LCPATTERN = 'none'
CASE TNPENPAT=1
LCPATTERN = 'dotted'
CASE TNPENPAT=2
LCPATTERN = 'dashed'
CASE TNPENPAT=3
LCPATTERN = 'dashed'
CASE TNPENPAT=4
LCPATTERN = 'dotted'
CASE TNPENPAT=8
LCPATTERN = 'solid'
OTHERWISE
LCPATTERN = 'solid'
ENDCASE
LCLINE = LCLINE+'border-style:'+LCPATTERN+';'
LCLINE = LCLINE+'border-color:'+LCCOLOR+';'
IF TNFILLPAT=1
LCLINE = LCLINE+'background-color:'+LCBACKCOLOR+';'
ELSE
LCLINE = LCLINE+'background-color:transparent;'
ENDIF
ENDIF
LCLINE = LCLINE+'"></div>'
THIS.WRITESTR(LCLINE)
ENDPROC
**
PROCEDURE SetFont
LPARAMETERS TCFONTNAME, TNSIZE, TLBOLD, TLITALIC
WITH THIS
.CFONTREF = THIS.GETFONTREFERENCE(TCFONTNAME, TNSIZE, TLBOLD, TLITALIC)
.NFONTSIZE = TNSIZE
.CFONTNAME = TCFONTNAME
.LBOLD = TLBOLD
.LITALICS = TLITALIC
ENDWITH
ENDPROC
**
FUNCTION getFontReference
LPARAMETERS TCFONTNAME, TNSIZE, TLBOLD, TLITAL
LOCAL LCFONT, LNPOS
LCFONT = 'font-family:'+ALLTRIM(TCFONTNAME)+';'
LCFONT = LCFONT+'font-style:'+IIF(TLITAL, 'italic', 'normal')+';'
IF  .NOT. THIS.LUSEPIXELS
LCFONT = LCFONT+'font-size:'+ALLTRIM(STR(TNSIZE))+'pt;'
ELSE
LCFONT = LCFONT+'font-size:'+ALLTRIM(__STR(TNSIZE/76*100, 10, 2))+'px;'
ENDIF
LCFONT = LCFONT+'font-weight:'+IIF(TLBOLD, 'bold', 'normal')+';'
LCEXACT = SET("EXACT")
SET EXACT ON
LNPOS = ASCAN(THIS.AFONTS, LCFONT)
SET EXACT &LCEXACT
RETURN 'font'+ALLTRIM(STR(LNPOS))
ENDFUNC
**
PROCEDURE AddFont
LPARAMETERS TCFONTNAME, TNSIZE, TLBOLD, TLITAL
LOCAL LCFONT
LCFONT = 'font-family:'+ALLTRIM(TCFONTNAME)+';'
LCFONT = LCFONT+'font-style:'+IIF(TLITAL, 'italic', 'normal')+';'
IF  .NOT. THIS.LUSEPIXELS
LCFONT = LCFONT+'font-size:'+ALLTRIM(STR(TNSIZE))+'pt;'
ELSE
LCFONT = LCFONT+'font-size:'+ALLTRIM(__STR(TNSIZE/76*100, 10, 2))+'px;'
ENDIF
LCFONT = LCFONT+'font-weight:'+IIF(TLBOLD, 'bold', 'normal')+';'
WITH THIS
LCEXACT = SET("EXACT")
SET EXACT ON
IF ASCAN(.AFONTS, LCFONT)<>0
SET EXACT &LCEXACT
RETURN
ENDIF
SET EXACT &LCEXACT
.NFONT = .NFONT+1
DIMENSION .AFONTS(.NFONT)
.AFONTS(.NFONT) = LCFONT
ENDWITH
ENDPROC
**
PROCEDURE AddLine
LPARAMETERS TNXPOS1, TNYPOS1, TNXPOS2, TNYPOS2, TNLINEWIDTH, TNPATTERN, TNRED, TNGREEN, TNBLUE, TLNOTPRINT
LOCAL LLWIDTH, LLHEIGHT
LLWIDTH = TNXPOS2-TNXPOS1
LLHEIGHT = TNYPOS2-TNYPOS1
IF LLWIDTH=0
ENDIF
IF LLHEIGHT=0
ENDIF
THIS.ADDBOX(TNXPOS1, TNYPOS1, LLWIDTH, LLHEIGHT, TNLINEWIDTH, 1, TNRED, TNGREEN, TNBLUE, TNPATTERN, TNRED, TNGREEN, TNBLUE, TLNOTPRINT)
ENDPROC
**
PROCEDURE AddTextBox
LPARAMETERS _X____11334, TNXPOS, TNYPOS, TNWIDTH, TNHEIGHT, TNALIGN, TNMODE, TNRED, TNGREEN, TNBLUE, TNBACKRED, TNBACKGREEN, TNBACKBLUE, TCLINKNAME, TCLINKHREF, TLUNDERLINE, TCOUTLINE, TLOUTLINESTYLE, TCTOOLTIP, TLSTRIKED
IF TNBACKRED=255 .AND. TNBACKGREEN=255 .AND. TNBACKBLUE=255
TNMODE = 1
ENDIF
LCCOLOR = THIS.MAKEFORECOLORS(TNRED, TNGREEN, TNBLUE)
LCBACKCOLOR = THIS.MAKEBACKCOLORS(TNBACKRED, TNBACKGREEN, TNBACKBLUE)
LCLINE = ' <div class='+THIS.CMHT+'"'+THIS.CFONTREF+'" style='+THIS.CMHT+'"'
LCLINE = LCLINE+'top:'+ALLTRIM(STR(TNYPOS))+'px;'
LCLINE = LCLINE+'left:'+ALLTRIM(STR(TNXPOS))+'px;'
LCLINE = LCLINE+'height:'+ALLTRIM(STR(TNHEIGHT))+'px;'
LCLINE = LCLINE+'width:'+ALLTRIM(STR(TNWIDTH))+'px;'
LCLINE = LCLINE+'border-width:0px;'
LCLINE = LCLINE+'border-color:'+LCCOLOR+';'
LCALIGN = ''
DO CASE
CASE TNALIGN=0
CASE TNALIGN=1
LCALIGN = 'text-align: right;'
CASE TNALIGN=2
LCALIGN = 'text-align: center;'
ENDCASE
LCLINE = LCLINE+LCALIGN
LCLINE = LCLINE+'color:'+LCCOLOR+';'
DO CASE
CASE TNMODE=0
LCLINE = LCLINE+'background-color:'+LCBACKCOLOR+';'
CASE TNMODE=1
LCLINE = LCLINE+'background-color:transparent;'
ENDCASE
IF  .NOT. EMPTY(TCTOOLTIP)
LCLINE = LCLINE+'" title = '+THIS.CMHT+'"'+TCTOOLTIP+THIS.CMHT
ENDIF
LCLINE = LCLINE+'">'
LCLINKNAME = ''
_X____11334 = STRTRAN(_X____11334,"<","&lt;")
_X____11334 = STRTRAN(_X____11334,">","&gt;")
IF  .NOT. EMPTY(THIS.CTEXTTOHIGHLIGHT)
LOCAL LNOCCURENCE, LNPOS, LCOLDTEXT, LNPREVPOS
LNPOS = ATC(THIS.CTEXTTOHIGHLIGHT, _X____11334)
IF LNPOS>0
LCOLDTEXT = _X____11334
_X____11334 = ""
LNOCCURENCE = 1
LNPREVPOS = 1
DO WHILE LNPOS>0
TCSTR = SUBSTR(LCOLDTEXT, LNPOS, LEN(THIS.CTEXTTOHIGHLIGHT))
_X____11334 = _X____11334+SUBSTR(LCOLDTEXT, LNPREVPOS, LNPOS-LNPREVPOS)+'<spanx>'+TCSTR+'</span>'
LNPREVPOS = LNPOS+LEN(THIS.CTEXTTOHIGHLIGHT)
LNOCCURENCE = LNOCCURENCE+1
LNPOS = ATC(THIS.CTEXTTOHIGHLIGHT, LCOLDTEXT, LNOCCURENCE)
ENDDO
_X____11334 = _X____11334+SUBSTR(LCOLDTEXT, LNPREVPOS)
ENDIF
ENDIF
_X____11334 = STRTRAN(_X____11334, CHR(13), "<BR>")
IF THIS.LMHT
_X____11334 = STRTRAN(_X____11334, "=", "=3D")
ENDIF
IF _X____11334=="   "
_X____11334 = " &nbsp; "
ELSE
_X____11334 = STRTRAN(TRIM(_X____11334),"  ","&nbsp; ")
ENDIF
_X____11334 = STRTRAN(TRIM(_X____11334)," ","&nbsp;")
_X____11334 = STRTRAN(TRIM(_X____11334), "-", "&#8209;")
IF TLUNDERLINE
_X____11334 = "<u>"+_X____11334+"</u>"
ENDIF
IF TLSTRIKED
_X____11334 = "<s>"+_X____11334+"</s>"
ENDIF
_X____11334 = STRTRAN(_X____11334, "<spanx>", '<span style="background-color:yellow">')
IF THIS.LOUTLINE .AND.  .NOT. EMPTY(TCOUTLINE)
WITH THIS
.NOUTLINES = .NOUTLINES+1
IF EMPTY(TCLINKNAME)
TCLINKNAME = 'OutLine'+ALLTRIM(STR(.NOUTLINES))
ENDIF
DIMENSION .AOUTLINES(.NOUTLINES, 4)
.AOUTLINES(.NOUTLINES, 1) = TCOUTLINE
IF THIS.LMHT
.AOUTLINES(.NOUTLINES, 2) = 'c:/main_xfrx.htm'+'#'+TCLINKNAME
ELSE
.AOUTLINES(.NOUTLINES, 2) = THIS.CFILENAME+'#'+TCLINKNAME
ENDIF
.AOUTLINES(.NOUTLINES, 3) = TLOUTLINESTYLE
.AOUTLINES(.NOUTLINES, 4) = 0
ENDWITH
ENDIF
LOCAL LCONCLICKSTRING
LCONCLICKSTRING = ""
IF  .NOT. EMPTY(TCLINKHREF)
IF  .NOT. EMPTY(THIS.ONCLICKLINK)
IF SEEK(ALLTRIM(SUBSTR(TCLINKHREF, 2)), THIS.CLINKALIAS, "linkname")
LOCAL LOSELECT
LOSELECT = CREATEOBJECT("cusSelect")
SELECT (THIS.CLINKALIAS)
LCONCLICKSTRING = 'onclick="'+STRTRAN(THIS.ONCLICKLINK, "<<pageno>>", ALLTRIM(STR(PAGE)))+'" '
LCONCLICKSTRING = LCONCLICKSTRING+'title="Page: '+ALLTRIM(STR(PAGE))+'" '
RELEASE LOSELECT
ENDIF
ENDIF
ENDIF
IF  .NOT. EMPTY(TCLINKNAME)
IF EMPTY(TCLINKHREF)
LCLINE = LCLINE+'<a name='+THIS.CMHT+'"'+ALLTRIM(TCLINKNAME)+'">'+_X____11334+'</a>'
ELSE
LCLINE = LCLINE+'<a name='+THIS.CMHT+'"'+ALLTRIM(TCLINKNAME)+'" href='+THIS.CMHT+'"'+ALLTRIM(TCLINKHREF)+'"'+LCONCLICKSTRING+'>'+_X____11334+'</a>'
ENDIF
ELSE
IF  .NOT. EMPTY(TCLINKHREF)
LCLINE = LCLINE+'<a href='+THIS.CMHT+'"'+ALLTRIM(TCLINKHREF)+'" '+LCONCLICKSTRING+'>'+_X____11334+'</a>'
ELSE
LCLINE = LCLINE+_X____11334
ENDIF
ENDIF
LCLINE = LCLINE+'</div>'
LCLINE = LCLINE+LCLINKNAME
THIS.WRITESTR(LCLINE)
ENDPROC
**
PROCEDURE addGenPicture
LPARAMETERS TNSESSIONNO, TCFIELD, NLEFT, NTOP, NHEIGHT, NWIDTH, NADJTYPE, LCREPORTDIR
LOCAL LCFILE, LCEXT, LNSESSIONNO
LCDIR = JUSTSTEMPATH(THIS.CFILENAME)+'_files'
IF  .NOT. THIS.LMHT
LCDIR = JUSTSTEMPATH(THIS.CFILENAME)+'_files'
ELSE
LCDIR = JUSTSTEMPATH(THIS.CFILENAME)+'_filesMHT'
ENDIF
IF  .NOT. DIRECTORY(LCDIR)
MD (LCDIR)
ENDIF
LCFILE = LCDIR+'\'+SUBSTR(SYS(2015), 3, 10)
LNSESSIONNO = SET("Datasession")
IF LNSESSIONNO<>TNSESSIONNO
SET DATASESSION TO TNSESSIONNO
LCEXT = EXTRACTBMP(TCFIELD, LCFILE+".upc")
SET DATASESSION TO LNSESSIONNO
ELSE
LCEXT = EXTRACTBMP(TCFIELD, LCFILE+".upc")
ENDIF
RENAME (LCFILE+".upc") TO (LCFILE+"."+LCEXT)
LCFILE = LCFILE+"."+LCEXT
THIS.ADDPICTURE(LCFILE, NLEFT, NTOP, NHEIGHT, NWIDTH, NADJTYPE, LCREPORTDIR)
ENDPROC
**
FUNCTION AddPicture
LPARAMETERS TCFILENAME, TNXPOS, TNYPOS, TNWIDTH, TNHEIGHT, TNADJTYPE, LCREPORTDIR
IF EMPTY(LCREPORTDIR)
LCREPORTDIR = ""
ENDIF
IF  .NOT. THIS.LMHT
LCDIR = JUSTSTEMPATH(THIS.CFILENAME)+'_files'
ELSE
LCDIR = JUSTSTEMPATH(THIS.CFILENAME)+'_filesMHT'
ENDIF
IF  .NOT. DIRECTORY(LCDIR)
MD (LCDIR)
ENDIF
IF AT(LCDIR, TCFILENAME)=0
LCFILE = LCDIR+'\'+JUSTFNAME(TCFILENAME)
IF  .NOT. _XFRXPREPAREFILE(M.TCFILENAME, LCFILE, LCREPORTDIR)
RETURN .F.
ENDIF
TCFILENAME = LCFILE
THIS.ADDOUTFILE(TCFILENAME)
ENDIF
IF TNADJTYPE=1
LOCAL LCWIDTH, LCHEIGHT, LF1, LF2, NBWIDTH, NBHEIGHT
LCWIDTH = SPACE(2)
LCHEIGHT = SPACE(2)
IF 0<=DOPIC(TCFILENAME, "", 0, @LCWIDTH, @LCHEIGHT, 0, 0, "")
NBWIDTH = STR2WORD(M.LCWIDTH)
NBHEIGHT = STR2WORD(M.LCHEIGHT)
LF1 = M.TNWIDTH/M.NBWIDTH
LF2 = M.TNHEIGHT/M.NBHEIGHT
LF1 = MIN(M.LF1, M.LF2)
TNWIDTH = M.NBWIDTH*LF1
TNHEIGHT = M.NBHEIGHT*LF1
ENDIF
ENDIF
IF  .NOT. THIS.LMHT
LIPOS = RAT('\', TCFILENAME, 2)
TCFILENAME = SUBSTR(TCFILENAME, LIPOS+1)
ENDIF
LCLINE = '<div class='+THIS.CMHT+'"base" style='+THIS.CMHT+'"'
LCLINE = LCLINE+'top:'+ALLTRIM(STR(TNYPOS))+'px;'
LCLINE = LCLINE+'left:'+ALLTRIM(STR(TNXPOS))+'px;'
LCLINE = LCLINE+'height:'+ALLTRIM(STR(TNHEIGHT))+'px;'
LCLINE = LCLINE+'width:'+ALLTRIM(STR(TNWIDTH))+'px;'
LCLINE = LCLINE+'">'
IF  .NOT. THIS.LMHT
LCLINE = LCLINE+'<img src='+THIS.CMHT+'"'+TCFILENAME+'" '
ELSE
LS_TCFILENAME = 'C:/'+JUSTFNAME(TCFILENAME)
LCLINE = LCLINE+'<img src='+THIS.CMHT+'"file:///'+LS_TCFILENAME+'" '
IF ASCAN(THIS.APICTUREPATH, LS_TCFILENAME)=0
LCFILENAME64 = JUSTPATH(TCFILENAME)+'\B64_'+JUSTFNAME(TCFILENAME)
= BASE64(TCFILENAME, LCFILENAME64)
ERASE (TCFILENAME)
WITH THIS
.NPICTURE = .NPICTURE+1
DIMENSION .APICTURENAMEB64(.NPICTURE)
DIMENSION .APICTUREPATH(.NPICTURE)
.APICTURENAMEB64(.NPICTURE) = LCFILENAME64
.APICTUREPATH(.NPICTURE) = LS_TCFILENAME
ENDWITH
ENDIF
ERASE (TCFILENAME)
ENDIF
IF TNADJTYPE=2 .OR. TNADJTYPE=1
LCLINE = LCLINE+'height='+THIS.CMHT+'"'+ALLTRIM(STR(TNHEIGHT))+'" '
LCLINE = LCLINE+'width='+THIS.CMHT+'"'+ALLTRIM(STR(TNWIDTH))+'" '
ENDIF
LCLINE = LCLINE+' >'
LCLINE = LCLINE+'</div>'
THIS.WRITESTR(LCLINE)
ENDFUNC
**
FUNCTION makebackcolors
LPARAMETERS TRED, TGREEN, TBLUE
IF TYPE('tRed')='L'
RETURN 'RGB(255,255,255)'
ENDIF
IF TRED=-1
RETURN 'RGB(255,255,255)'
ENDIF
RETURN 'RGB('+ALLTRIM(STR(TRED))+','+ALLTRIM(STR(TGREEN))+','+ALLTRIM(STR(TBLUE))+')'
ENDFUNC
**
FUNCTION MakeForeColors
LPARAMETERS TRED, TGREEN, TBLUE
IF TYPE('tRed')='L'
RETURN 'RGB(0,0,0)'
ENDIF
IF TRED=-1
RETURN 'RGB(0,0,0)'
ENDIF
RETURN 'RGB('+ALLTRIM(STR(TRED))+','+ALLTRIM(STR(TGREEN))+','+ALLTRIM(STR(TBLUE))+')'
ENDFUNC
**
PROCEDURE WriteStr
LPARAMETERS TCSTR, TLFILE
IF EMPTY(TLFILE)
LNSIZE = FPUTS(THIS.FHANDLE, TCSTR)
ELSE
DO CASE
CASE TLFILE=1
LNSIZE = FPUTS(THIS.FHANDLE, TCSTR)
CASE TLFILE=2
LNSIZE = FPUTS(THIS.FHANDLE2, TCSTR)
CASE TLFILE=3
LNSIZE = FPUTS(THIS.FHANDLE3, TCSTR)
CASE TLFILE=4
LNSIZE = FPUTS(THIS.FHANDLE4, TCSTR)
CASE TLFILE=5
LNSIZE = FPUTS(THIS.FHANDLE5, TCSTR)
ENDCASE
ENDIF
ENDPROC
**
PROCEDURE WriteStr3
LPARAMETERS TCSTR
LNSIZE = FPUTS(THIS.FHANDLE3, TCSTR)
ENDPROC
**
PROCEDURE WriteStrHeader
LPARAMETERS TCSTR
LNSIZE = FPUTS(THIS.FHANDLE2, TCSTR)
ENDPROC
**
PROCEDURE Write
LPARAMETERS TCSTR
LOCAL LNSIZE
LNSIZE = FWRITE(THIS.FHANDLE, TCSTR)
ENDPROC
**
PROCEDURE Finish
WITH THIS
THIS.BEGINDOCEND()
IF  .NOT. THIS.LOUTLINE
= FSEEK(.FHANDLE, 0, 0)
= FSEEK(.FHANDLE2, 0, 2)
DO WHILE  .NOT. FEOF(.FHANDLE)
LCSTR = FREAD(.FHANDLE, 2048)
= FWRITE(.FHANDLE2, LCSTR)
ENDDO
= FCLOSE(THIS.FHANDLE2)
= FCLOSE(THIS.FHANDLE)
ERASE (THIS.CFILENAME2)
ELSE
IF THIS.LMHT
= FSEEK(.FHANDLE3, 0, 0)
= FSEEK(.FHANDLE2, 0, 0)
= FSEEK(.FHANDLE, 0, 0)
= FSEEK(.FHANDLE4, 0, 2)
DO WHILE  .NOT. FEOF(.FHANDLE3)
LCSTR = FREAD(.FHANDLE3, 2048)
= FWRITE(.FHANDLE4, LCSTR)
ENDDO
DO WHILE  .NOT. FEOF(.FHANDLE2)
LCSTR = FREAD(.FHANDLE2, 2048)
= FWRITE(.FHANDLE4, LCSTR)
ENDDO
DO WHILE  .NOT. FEOF(.FHANDLE)
LCSTR = FREAD(.FHANDLE, 2048)
= FWRITE(.FHANDLE4, LCSTR)
ENDDO
ELSE
= FSEEK(.FHANDLE, 0, 0)
= FSEEK(.FHANDLE2, 0, 2)
DO WHILE  .NOT. FEOF(.FHANDLE)
LCSTR = FREAD(.FHANDLE, 2048)
= FWRITE(.FHANDLE2, LCSTR)
ENDDO
ENDIF
= FCLOSE(THIS.FHANDLE2)
= FCLOSE(THIS.FHANDLE)
= FCLOSE(THIS.FHANDLE3)
= FCLOSE(THIS.FHANDLE4)
ERASE (THIS.CFILENAME2)
IF THIS.LMHT
ERASE (THIS.CFILENAME3)
ERASE (THIS.CFILENAME)
RENAME (THIS.CFILENAME4) TO (THIS.CFILENAME)
ELSE
ENDIF
ENDIF
ENDWITH
RELEASE XFRXGOUTPUT
ENDPROC
**
ENDDEFINE
**
FUNCTION JUSTSTEMPATH
PARAMETER AC_FILE
LOCAL LC_OUTPUT
LC_OUTPUT = ''
IF LEN(JUSTPATH(AC_FILE))>0
LC_OUTPUT = JUSTPATH(AC_FILE)+'\'
ENDIF
LC_OUTPUT = LC_OUTPUT+JUSTSTEM(AC_FILE)
RETURN LC_OUTPUT
ENDFUNC
**
FUNCTION _XFRXprepareFile
LPARAMETERS TCFILE, LCPREPFILE, LCREPORTDIR
IF FILE(M.TCFILE)
= _XFRXCOPY(M.TCFILE, M.LCPREPFILE)
ELSE
TCFILE = JUSTFNAME(M.TCFILE)
IF FILE(TCFILE)
= _XFRXCOPY(M.TCFILE, M.LCPREPFILE)
ELSE
IF EMPTY(LCREPORTDIR)
LCREPORTDIR = ""
ENDIF
TCFILE = ADDBS(LCREPORTDIR)+TCFILE
IF FILE(TCFILE)
= _XFRXCOPY(M.TCFILE, M.LCPREPFILE)
ELSE
RETURN .F.
ENDIF
ENDIF
ENDIF
RETURN .T.
ENDFUNC
**
PROCEDURE _XFRXCOPY
LPARAMETERS TCFILE, TCOUT
LOCAL HND, HNDO, LCSTR
HND = FOPEN(TCFILE, 0)
HNDO = FCREATE(TCOUT)
DO WHILE  .NOT. FEOF(HND)
LCSTR = FREAD(HND, 2048)
= FWRITE(HNDO, LCSTR)
ENDDO
FCLOSE(HND)
FCLOSE(HNDO)
ENDPROC
**
PROCEDURE _xfGetImageSize
LPARAMETERS TCPATH, TNWIDTH, TNHEIGHT
LOCAL CWIDTH, CHEIGHT, LF1, LF2, NBWIDTH, NBHEIGHT
CWIDTH = SPACE(2)
CHEIGHT = SPACE(2)
IF 0<=DOPIC(TCPATH, "", 0, @CWIDTH, @CHEIGHT, 0, 0, "")
TNWIDTH = STR2WORD(M.CWIDTH)
TNHEIGHT = STR2WORD(M.CHEIGHT)
ELSE
LOCAL LCFILENAME2
LCFILENAME2 = FORCEPATH(SYS(2015), SYS(2023))+".jpg"
= _XF_CONVERTIMAGE(M.TCPATH, M.LCFILENAME2, "image/jpeg")
IF 0<=DOPIC(LCFILENAME2, "", 0, @CWIDTH, @CHEIGHT, 0, 0, "")
TNWIDTH = STR2WORD(M.CWIDTH)
TNHEIGHT = STR2WORD(M.CHEIGHT)
ENDIF
ERASE (M.LCFILENAME2)
ENDIF
ENDPROC
**
DEFINE CLASS txtboxparams AS Custom
NNUMERICVALUE = .NULL.
CXLSFORMAT = ""
LABSOLUTE = .F.
NEMBEDDING = 0
NROTATE = 0
NROTATIONPOINT = 0
LSTRIKED = 0
NCODEPAGE = 0
ENDDEFINE
**
DEFINE CLASS DocumentWriter AS Custom
NFILEHANDLE = 0
CSESSIONDIR = ""
OFILES = .NULL.
CFILENAME = ""
CFDIR = ""
CTEMPDIR = ""
CCODEPAGE = ALLTRIM(STR(CPCURRENT()))
OSCRIPTS = .NULL.
NPAGES = 0
NSECTIONS = 0
OTXTBOX = .NULL.
LSILENT = .F.
NERRORCODE = 0
NFORECOLORRED = 0
NFORECOLORGRE = 0
NFORECOLORBLU = 0
NBACKCOLORRED = 255
NBACKCOLORGRE = 255
NBACKCOLORBLU = 255
NPENSIZE = 10
NPENPAT = 8
NPAGEHEIGHT = 0
NPAGEWIDTH = 0
NREPORT = 0
NCURRENTREPORTPAGE = 0
**
PROCEDURE executeScript
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCSCRIPT, LLCONVERTTOPICTURE, TNDPIFACTOR, TCSCRIPTNAME, TCPICTURETYPE, TCPARAMETERS
RETURN
ENDPROC
**
PROCEDURE showDocument
RETURN
ENDPROC
**
PROCEDURE drawLine
LPARAMETERS X1, Y1, X2, Y2
WITH THIS
.ADDLINE(X1, Y1, X2, Y2, .NPENSIZE, .NPENPAT, .NFORECOLORRED, .NFORECOLORGRE, .NFORECOLORBLU)
ENDWITH
ENDPROC
**
PROCEDURE outText
LPARAMETERS _X____11334
IF ISNULL(_X____11334)
RETURN
ENDIF
= FWRITE(THIS.NFILEHANDLE, _X____11334)
ENDPROC
**
PROCEDURE outTextln
LPARAMETERS _X____11334
IF ISNULL(_X____11334)
RETURN
ENDIF
= FPUTS(THIS.NFILEHANDLE, _X____11334)
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE init
THIS.OTXTBOX = CREATEOBJECT("txtboxparams")
THIS.OSCRIPTS = CREATEOBJECT("PDFLScripts")
ENDPROC
**
PROCEDURE destroy
THIS.OTXTBOX = .NULL.
THIS.OSCRIPTS = .NULL.
ENDPROC
**
PROCEDURE finalize
LPARAMETERS _X____11333
THIS.ENDPAGE()
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
THIS.NSECTIONS = THIS.NSECTIONS+1
IF THIS.NSECTIONS>1
THIS.ENDSECTION()
ENDIF
ENDPROC
**
PROCEDURE endSection
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE ProcessScripts
LPARAMETERS TNORDER
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
THIS.NPAGES = THIS.NPAGES+1
THIS.NPAGEHEIGHT = TNHEIGHT
THIS.NPAGEWIDTH = TNWIDTH
IF THIS.NPAGES>1
THIS.ENDPAGE()
ENDIF
THIS.NCURRENTREPORTPAGE = THIS.NCURRENTREPORTPAGE+1
ENDPROC
**
PROCEDURE endPage
THIS.PROCESSSCRIPTS(1)
THIS.ENDSECTION()
THIS.NSECTIONS = 0
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
THIS.NREPORT = THIS.NREPORT+1
ENDPROC
**
PROCEDURE endReport
THIS.ENDPAGE()
THIS.NPAGES = 0
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE SendTextBoxParameters
LPARAMETERS TNNUMERICVALUE, TCXLSFORMAT, TLABSOLUTE, TNEMBEDDING, TNROTATE, TNROTATIONPOINT, TLSTRIKED, TNCODEPAGE
THIS.OTXTBOX.NNUMERICVALUE = TNNUMERICVALUE
THIS.OTXTBOX.CXLSFORMAT = TCXLSFORMAT
IF EMPTY(TNROTATE)
THIS.OTXTBOX.NROTATE = 0
ELSE
THIS.OTXTBOX.NROTATE = MOD(TNROTATE, 360)
ENDIF
IF EMPTY(TNROTATIONPOINT)
THIS.OTXTBOX.NROTATIONPOINT = 0
ELSE
THIS.OTXTBOX.NROTATIONPOINT = TNROTATIONPOINT
ENDIF
THIS.OTXTBOX.LABSOLUTE = TLABSOLUTE
IF EMPTY(TNEMBEDDING)
THIS.OTXTBOX.NEMBEDDING = 0
ELSE
THIS.OTXTBOX.NEMBEDDING = TNEMBEDDING
ENDIF
THIS.OTXTBOX.LSTRIKED = TLSTRIKED
IF EMPTY(TNCODEPAGE)
THIS.OTXTBOX.NCODEPAGE = 0
ELSE
THIS.OTXTBOX.NCODEPAGE = TNCODEPAGE
ENDIF
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS BatchWriter AS DocumentWriter
ENDDEFINE
**
DEFINE CLASS PlainTextWriter AS FlowLayoutWriter
NCURRENTLINE = 0
NCURRENTPAGE = 1
NLINESPERPAGE = 60
NCHARSPERLINE = 80
NLEFTMARGIN = 2
NTOPMARGIN = 2
NCPIVERTICAL = 5.2 
NCPIHORIZONTAL = 10
LSHOWHOROZONTALLINES = .T.
**
PROCEDURE setOtherParams
LPARAMETERS TCNAME, TUVALUE, P3, P4, P5, P6, P7, P8, P9, P10
DO CASE
CASE UPPER(ALLTRIM(TCNAME))=="PLAIN_CPI_VERTICAL"
THIS.NCPIVERTICAL = TUVALUE
CASE UPPER(ALLTRIM(TCNAME))=="PLAIN_CPI_HORIZONTAL"
THIS.NCPIHORIZONTAL = TUVALUE
CASE UPPER(ALLTRIM(TCNAME))=="PLAIN_SHOW_LINES"
THIS.LSHOWHOROZONTALLINES = TUVALUE
ENDCASE
ENDPROC
**
FUNCTION newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
THIS.NCHARSPERLINE = THIS.NCPIHORIZONTAL*TNWIDTH/10000
THIS.NLINESPERPAGE = THIS.NCPIVERTICAL*TNHEIGHT/10000
RETURN DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDFUNC
**
PROCEDURE endPage
DODEFAULT()
THIS.NCURRENTPAGE = THIS.NCURRENTPAGE+1
ENDPROC
**
PROCEDURE Init
LPARAMETERS _X____11333
DODEFAULT(_X____11333, .T.)
ENDPROC
**
PROCEDURE finalize
LPARAMETERS _X____11333
THIS.ENDPAGE()
DODEFAULT(_X____11333)
ENDPROC
**
PROCEDURE showDocument
MODIFY FILE (THIS.COUTPUTNAME)
RETURN
ENDPROC
**
PROCEDURE outputMatrix
IF RECCOUNT(THIS._X____11335)=0
RETURN
ENDIF
LOCAL LCPIVOTSALIAS, LRPIVOTSALIAS, LCOBJECTSALIAS, LCNUMVAL, LLFIRST, LCCLASSESALIAS, LNCLASS
LCPIVOTSALIAS = THIS.CPIVOTSALIAS
LRPIVOTSALIAS = THIS.RPIVOTSALIAS
LCOBJECTSALIAS = THIS._X____11335
LCCLASSESALIAS = THIS._X____11332
SELECT (LCOBJECTSALIAS)
IF THIS.NLINES>0
INDEX ON X0 TAG X0 ADDITIVE
SET ORDER TO x0
FOR LNX = 1 TO THIS.NLINES
LLFIRST = .T.
LCPARAGRAPHSTYLE = ""
LNXPOS = 0
THIS.NCURRENTLINE = THIS.NCURRENTLINE+1
NLINETOGOTO = ((THIS.NCURRENTPAGE-1)*THIS.NLINESPERPAGE)+(THIS.ALINESARRAY(LNX, 4)/THIS.NPAGEHEIGHT)*THIS.NLINESPERPAGE
NLINETOGOTO = INT(NLINETOGOTO)-THIS.NTOPMARGIN
IF NLINETOGOTO>THIS.NCURRENTLINE
THIS.OUTTEXT(REPLICATE(CHR(13)+CHR(10), NLINETOGOTO-THIS.NCURRENTLINE))
THIS.NCURRENTLINE = NLINETOGOTO
ENDIF
SCAN ALL FOR LINE=LNX .AND. TYPE<>"X"
LCTEXT = ALLTRIM(&LCOBJECTSALIAS->TEXT)
LNCLASS = CLASS
IF  .NOT. EMPTY(LNCLASS)
GOTO (LNCLASS) IN (LCCLASSESALIAS)
DO CASE
CASE (&LCCLASSESALIAS->ALIGN = "right")
LNSPACES = (XX/THIS.NPAGEWIDTH)*THIS.NCHARSPERLINE-LEN(LCTEXT)-LNXPOS
CASE (&LCCLASSESALIAS->ALIGN = "center")
LNSPACES = ((X0+(XX-X0)/2)/THIS.NPAGEWIDTH)*THIS.NCHARSPERLINE-LEN(LCTEXT)/2-LNXPOS
OTHERWISE
LNSPACES = (X0/THIS.NPAGEWIDTH)*THIS.NCHARSPERLINE-LNXPOS
ENDCASE
ELSE
LNSPACES = (X0/THIS.NPAGEWIDTH)*THIS.NCHARSPERLINE-LNXPOS
ENDIF
LNSPACES = INT(LNSPACES)-THIS.NLEFTMARGIN
IF (TYPE="L")
LCTEXT = REPLICATE("-", ((XX-X0+1)/THIS.NPAGEWIDTH)*THIS.NCHARSPERLINE)
ENDIF
IF LNSPACES>0
THIS.OUTTEXT(SPACE(LNSPACES))
ELSE
LNSPACES = 0
ENDIF
THIS.OUTTEXT(LCTEXT)
LNXPOS = LNXPOS+LNSPACES+LEN(LCTEXT)
ENDSCAN
THIS.OUTTEXT(CHR(13)+CHR(10))
ENDFOR
RETURN
ENDIF
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
IF  .NOT. THIS.LSHOWHOROZONTALLINES
RETURN
ENDIF
IF (TNLTO-TNLEFT)>(TNTTO-TNTOP)
THIS.ADDXOBJECT("L", TNLEFT, TNLTO, TNTOP, TNTTO, "---",  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE)
ENDIF
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS DOCFlowLayoutWriter AS FlowLayoutWriter
NSTYLESFILEHANDLE = 0
NCURRENTPOSITION = 0
ODOCWRITER = .NULL.
LFIRSTINHEADER = .T.
LFIRSTINMAIN = .T.
LFIRSTINFOOTER = .T.
NHEADEROFFSET = 0
NMAINOFFSET = 0
NFOOTEROFFSET = 0
ODOC = .NULL.
**
FUNCTION Init
LPARAMETERS _X____11333
THIS.LSILENT = _X____11333.LSILENT
THIS.COUTPUTNAME = _X____11333.COUTPUTNAME
DODEFAULT(_X____11333, .F., .T.)
LOCAL LODOC
LOCAL LNERROR, LCPREVERROR
LCPREVERROR = ON("error")
LNERROR = 0
ON ERROR LNERROR=ERROR()
IF  .NOT. _X____11333.LNOTOPENWORD .AND.  .NOT. _X____11333.LNEWSESSION
LODOC = GETOBJECT( , "Word.Application")
ELSE
LNERROR = 1
ENDIF
IF LNERROR<>0 .OR. TYPE("loDoc")<>"O" .OR. ISNULL(LODOC)
LNERROR = 0
LODOC = CREATEOBJECT("Word.Application")
ENDIF
ON ERROR &LCPREVERROR
IF TYPE("loDoc")<>"O" .OR. ISNULL(LODOC)
IF  .NOT. THIS.LSILENT
= MESSAGEBOX("Cannot access Word application!", 16, "XFRX")
ENDIF
THIS.NERRORCODE = -1
RETURN -1
ENDIF
IF VAL(LODOC.VERSION)<9
IF  .NOT. THIS.LSILENT
= MESSAGEBOX("Sorry, Word 2000 or higher is required!", 16, "XFRX")
ENDIF
LODOC.QUIT()
THIS.NERRORCODE = -2
RETURN -2
ENDIF
THIS.ODOC = LODOC
THIS.ODOCWRITER = CREATEOBJECT("DOCWriter")
THIS.ODOCWRITER.CCODEPAGE = _X____11333.CCODEPAGE
THIS.ODOCWRITER.INITDOCUMENT()
THIS.ODOCWRITER.INITFILEHEADER()
ENDFUNC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
DODEFAULT(TNREPORTNO, TCCODEPAGE, TOREPORT)
THIS.ODOCWRITER.INITIALIZEFROMREPORTOBJECT(TOREPORT)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
THIS.NCURRENTPOSITION = 0
THIS.LFIRSTINHEADER = .T.
THIS.LFIRSTINMAIN = .T.
THIS.LFIRSTINFOOTER = .T.
THIS.NHEADEROFFSET = 0
THIS.NMAINOFFSET = 0
THIS.NFOOTEROFFSET = 0
THIS.ODOCWRITER.NEWPAGE(TNWIDTH, TNHEIGHT)
THIS.ODOCWRITER.NHEADERMARGIN = 0
THIS.ODOCWRITER.NFOOTERMARGIN = 0
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.ADDXOBJECT("R", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, IIF(THIS.LBELOWTEXT, "B", "---"),  , TNPENSIZE, 8, TNPENRED, TNPENGREEN, TNPENBLUE, .F., TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET,  ,  ,  ,  , FILETOSTR(TCPATH))
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.ADDXOBJECT("R", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, IIF(THIS.LBELOWTEXT, "B", "-x-"),  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, .F., TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET)
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.ADDXOBJECT("L", TNLEFT, TNLTO, TNTOP, TNTTO, IIF(THIS.LBELOWTEXT, "B", "-x-"),  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE)
ENDPROC
**
PROCEDURE outputMatrix
IF RECCOUNT(THIS._X____11335)=0
RETURN
ENDIF
DO CASE
CASE THIS.NCURRENTSECTIONTYPE=0 .OR. THIS.NCURRENTSECTIONTYPE=1
IF THIS.ODOCWRITER.CMODE<>"header"
THIS.NCURRENTPOSITION = 0
THIS.ODOCWRITER.CMODE = "header"
ENDIF
CASE THIS.NCURRENTSECTIONTYPE=7
IF THIS.ODOCWRITER.CMODE<>"footer"
THIS.NCURRENTPOSITION = 0
THIS.ODOCWRITER.CMODE = "footer"
ENDIF
OTHERWISE
IF THIS.ODOCWRITER.CMODE<>"main"
THIS.NCURRENTPOSITION = 0
THIS.ODOCWRITER.CMODE = "main"
ENDIF
ENDCASE
LOCAL LCPIVOTSALIAS, LRPIVOTSALIAS, LCOBJECTSALIAS, LCNUMVAL, LLFIRST, LCCLASSESALIAS, LNLINEHEIGHT, LNUPSHIFT, LNLEFTSHIFT, LNMARGINTOP, LCZORDER, LNSIZESHIFT, LCIMAGEFILE, LCCLASS
LCPIVOTSALIAS = THIS.CPIVOTSALIAS
LRPIVOTSALIAS = THIS.RPIVOTSALIAS
LCOBJECTSALIAS = THIS._X____11335
LCCLASSESALIAS = THIS._X____11332
SELECT (LCOBJECTSALIAS)
IF THIS.NLINES>0
INDEX ON IIF(TYPE="L" .OR. TYPE="R" .OR. TYPE="X", -100000, X0) TAG X0 ADDITIVE
SET ORDER TO x0
FOR LNX = 1 TO THIS.NLINES
SET ORDER TO
SCAN ALL FOR LINE=LNX
IF TYPE="T"
EXIT
ENDIF
IF TYPE<>"X"
REPLACE TEXT WITH "B"
ENDIF
ENDSCAN
SET ORDER TO x0
DO CASE
CASE THIS.ODOCWRITER.CMODE="header" .AND. THIS.LFIRSTINHEADER
THIS.LFIRSTINHEADER = .F.
THIS.NHEADEROFFSET = THIS.ALINESARRAY(LNX, 3)
THIS.ODOCWRITER.NHEADERMARGIN = THIS.NHEADEROFFSET
CASE THIS.ODOCWRITER.CMODE="footer" .AND. THIS.LFIRSTINFOOTER
THIS.LFIRSTINFOOTER = .F.
THIS.NFOOTEROFFSET = THIS.ODOCWRITER.NPAPERHEIGHT-THIS.ALINESARRAY(LNX, 3)
THIS.ODOCWRITER.NFOOTERMARGIN = THIS.ODOCWRITER.NPAPERHEIGHT-THIS.ALINESARRAY(THIS.NLINES, 4)
THIS.ODOCWRITER.NBOTTOMMARGIN = THIS.ODOCWRITER.NPAPERHEIGHT-THIS.ALINESARRAY(1, 3)
CASE THIS.ODOCWRITER.CMODE="main" .AND. THIS.LFIRSTINMAIN
THIS.LFIRSTINHEADER = .F.
THIS.LFIRSTINMAIN = .F.
THIS.NMAINOFFSET = THIS.ALINESARRAY(LNX, 3)
THIS.ODOCWRITER.NTOPMARGIN = THIS.NMAINOFFSET
ENDCASE
DO CASE
CASE THIS.ODOCWRITER.CMODE="header"
LNUPSHIFT = THIS.NHEADEROFFSET
CASE THIS.ODOCWRITER.CMODE="footer"
LNUPSHIFT = THIS.ODOCWRITER.NPAPERHEIGHT-THIS.NFOOTEROFFSET
OTHERWISE
LNUPSHIFT = THIS.NMAINOFFSET
ENDCASE
LNLEFTSHIFT = THIS.ODOCWRITER.NLEFTMARGIN
LLFIRST = .T.
LCPARAGRAPHSTYLE = ""
SCAN ALL FOR LINE=LNX
IF TYPE="T"
GO (&LCOBJECTSALIAS->CLASS) IN (LCCLASSESALIAS)
DO CASE
CASE (&LCCLASSESALIAS->ALIGN = "right")
LCPARAGRAPHSTYLE = LCPARAGRAPHSTYLE+" right "+ALLTRIM(__STR(((XX-LNLEFTSHIFT)/10000)*96, 13, 1))+"px"
CASE (&LCCLASSESALIAS->ALIGN = "center")
LCPARAGRAPHSTYLE = LCPARAGRAPHSTYLE+" center "+ALLTRIM(__STR(((X0+(XX-X0)/2-LNLEFTSHIFT)/10000)*96, 13, 1))+"px"
OTHERWISE
LCPARAGRAPHSTYLE = LCPARAGRAPHSTYLE+" left "+ALLTRIM(__STR(((IIF(X0-LNLEFTSHIFT<=0, 10, X0-LNLEFTSHIFT))/10000)*96, 13, 1))+"px"
ENDCASE
ENDIF
ENDSCAN
LNLINEHEIGHT = THIS.ALINESARRAY(LNX, 4)-THIS.ALINESARRAY(LNX, 3)
LNMARGINTOP = 0
IF THIS.NCURRENTPOSITION+LNUPSHIFT<THIS.ALINESARRAY(LNX, 3)
LNMARGINTOP = (THIS.ALINESARRAY(LNX, 4)-THIS.NCURRENTPOSITION-LNUPSHIFT)-LNLINEHEIGHT
DO WHILE LNMARGINTOP>(3125.0/2)
LNMARGINTOP = LNMARGINTOP-(3125.0/2)
THIS.ODOCWRITER.WRITELN("<p style='margin:0cm;margin-bottom:.0001pt;"  +"line-height:15px;mso-line-height-rule:exactly;'>&nbsp;</p>")
THIS.NCURRENTPOSITION = THIS.NCURRENTPOSITION+(3125.0/2)
ENDDO
ENDIF
LCPARAGRAPHSTYLE = LCPARAGRAPHSTYLE+";margin:0cm;margin-bottom:.0001pt;"+"margin-top:"+__STR((LNMARGINTOP/10000)*96, 13, 1)+"px;"+"line-height:"+ALLTRIM(__STR((((LNLINEHEIGHT*0.97 )/10000)*96), 13, 1))+"px;mso-line-height-rule:exactly;"
SCAN ALL FOR LINE=LNX
IF INLIST(TYPE, "X", "T")
GO (&LCOBJECTSALIAS->CLASS) IN (LCCLASSESALIAS)
LCCLASS = " class=x"+ALLTRIM(STR(&LCOBJECTSALIAS->CLASS))
LCTEXTVALUE = &LCOBJECTSALIAS->TEXT
LCTEXTVALUE = STRTRAN(TRIM(M.LCTEXTVALUE),"  ","&nbsp; ")
LCTEXTVALUE = STRTRAN(TRIM(M.LCTEXTVALUE),"  ","&nbsp; ")
LCTEXTVALUE = STRTRAN(M.LCTEXTVALUE,"<","&lt;")
LCTEXTVALUE = STRTRAN(M.LCTEXTVALUE,">","&gt;")
IF  .NOT. EMPTY(OBJLINKHREF) .OR.  .NOT. EMPTY(OBJLINKNAME)
IF THIS.ODOCWRITER.CMODE<>"main"
LCTEXTVALUE = "<span "+M.LCCLASS+">"+LCTEXTVALUE+"</span>"
ENDIF
ENDIF
IF  .NOT. EMPTY(OBJLINKNAME)
IF EMPTY(OBJLINKHREF)
LCTEXTVALUE = '<a name="'+ALLTRIM(OBJLINKNAME)+'">'+LCTEXTVALUE+'</a>'
ELSE
LCTEXTVALUE = '<a name="'+ALLTRIM(OBJLINKNAME)+'" href="'+ALLTRIM(OBJLINKHREF)+'">'+LCTEXTVALUE+'</a>'
ENDIF
ELSE
IF  .NOT. EMPTY(OBJLINKHREF)
LCTEXTVALUE = '<a href="'+ALLTRIM(OBJLINKHREF)+'">'+LCTEXTVALUE+'</a>'
ENDIF
ENDIF
ENDIF
IF LLFIRST
THIS.ODOCWRITER.WRITELN("<p style='tab-stops:"+LCPARAGRAPHSTYLE+"'>")
LLFIRST = .F.
ENDIF
DO CASE
CASE TYPE="T"
THIS.ODOCWRITER.WRITELN("<span style='mso-tab-count:1'></span><span ")
THIS.ODOCWRITER.WRITE(M.LCCLASS+">"+M.LCTEXTVALUE+"</span>")
CASE TYPE="L"
IF TEXT="B"
LCZORDER = "z-index:-1000;"
ELSE
LCZORDER = ""
LCZORDER = "z-index:-1000;"
ENDIF
LCFR = ALLTRIM(__STR(((X0-LNLEFTSHIFT)/10000)*96, 13, 1))+"px,"
LCFR = LCFR+ALLTRIM(__STR(((Y0-THIS.NCURRENTPOSITION-LNUPSHIFT)/10000)*96, 13, 1))+"px"
LCTO = ALLTRIM(__STR(((XX-LNLEFTSHIFT)/10000)*96, 13, 1))+"px,"
LCTO = LCTO+ALLTRIM(__STR(((YY-THIS.NCURRENTPOSITION-LNUPSHIFT)/10000)*96, 13, 1))+"px"
THIS.ODOCWRITER.WRITELN([<v:line style='position:absolute;]+LCZORDER+[' from="]+LCFR+'" to="'+LCTO+'"')
THIS.ODOCWRITER.WRITE("strokecolor="+HEXRGB(PENRED, PENGREEN, PENBLUE)+" ")
IF PENSIZE<>1
THIS.ODOCWRITER.WRITE('strokeweight="'+ALLTRIM(STR(PENSIZE))+'pt">')
ELSE
THIS.ODOCWRITER.WRITE('>')
ENDIF
DO CASE
CASE PENPAT=1
THIS.ODOCWRITER.WRITELN('<v:stroke dashstyle="2 2"/>')
CASE PENPAT=2
THIS.ODOCWRITER.WRITELN('<v:stroke dashstyle="longdash"/>')
CASE PENPAT=3
THIS.ODOCWRITER.WRITELN('<v:stroke dashstyle="longdashdot"/>')
CASE PENPAT=4
THIS.ODOCWRITER.WRITELN('<v:stroke dashstyle="longDashDotDot"/>')
ENDCASE
THIS.ODOCWRITER.WRITELN('</v:line>')
CASE TYPE="X" .OR.  .NOT. EMPTY(OBJPICTURE)
IF TEXT="B"
LCZORDER = "z-index:-1000;"
ELSE
LCZORDER = ""
LCZORDER = "z-index:-1000;"
ENDIF
THIS.ODOCWRITER.WRITELN('<v:shape ')
THIS.ODOCWRITER.WRITE(" STYLE='position:absolute;"+LCZORDER)
THIS.ODOCWRITER.WRITE('margin-left:'+ALLTRIM(__STR(((X0-LNLEFTSHIFT)/10000)*96, 13, 1))+"px")
THIS.ODOCWRITER.WRITE(';margin-top:'+ALLTRIM(__STR(((Y0-THIS.NCURRENTPOSITION-LNUPSHIFT)/10000)*96, 13, 1))+"px")
THIS.ODOCWRITER.WRITE(';width:'+ALLTRIM(__STR(((XX-X0+200)/10000)*96, 13, 1))+"px")
THIS.ODOCWRITER.WRITE(';height:'+ALLTRIM(__STR(((YY-Y0)/10000)*96+1, 13, 1))+"px'>")
IF EMPTY(OBJPICTURE)
THIS.ODOCWRITER.WRITE([<v:textbox inset="0,0,0,0"><p style='])
DO CASE
CASE &LCCLASSESALIAS->ALIGN = "right"
THIS.ODOCWRITER.WRITE('text-align:right;')
CASE &LCCLASSESALIAS->ALIGN = "center"
THIS.ODOCWRITER.WRITE('text-align:center;')
ENDCASE
THIS.ODOCWRITER.WRITE([margin:0cm;margin-bottom:.0001pt;'>])
THIS.ODOCWRITER.WRITELN("<span class=x"+ALLTRIM(STR(CLASS))+">"+LCTEXTVALUE+"</span>")
THIS.ODOCWRITER.WRITE('</p></v:textbox>')
ELSE
LCIMAGEFILE = THIS.ODOCWRITER.OFILES.ADDFILEASSTRING(OBJPICTURE, THIS.ODOCWRITER.CMODE)
THIS.ODOCWRITER.WRITELN(' <v:imagedata src="'+LCIMAGEFILE+'" o:title="untitled"/>')
ENDIF
THIS.ODOCWRITER.WRITE('</v:shape>')
CASE TYPE="R"
LNSIZESHIFT = PENSIZE/2
DO CASE
CASE OFFSET=99
THIS.ODOCWRITER.WRITELN('<v:oval ')
CASE OFFSET=0
THIS.ODOCWRITER.WRITELN('<v:rect ')
OTHERWISE
THIS.ODOCWRITER.WRITELN('<v:roundrect ')
THIS.ODOCWRITER.WRITE('arcsize="'+ALLTRIM(__STR(OFFSET/(MIN(XX-X0, YY-Y0)/54), 5, 2))+'pt" ')
ENDCASE
IF TEXT="B"
LCZORDER = "z-index:-1000;"
ELSE
LCZORDER = ""
LCZORDER = "z-index:-1000;"
ENDIF
THIS.ODOCWRITER.WRITE(" STYLE='position:absolute;"+LCZORDER)
THIS.ODOCWRITER.WRITE('margin-left:'+ALLTRIM(__STR(((X0-LNLEFTSHIFT)/10000)*96+LNSIZESHIFT, 13, 1))+"px")
THIS.ODOCWRITER.WRITE(';margin-top:'+ALLTRIM(__STR(((Y0-THIS.NCURRENTPOSITION-LNUPSHIFT)/10000)*96+LNSIZESHIFT, 13, 1))+"px")
THIS.ODOCWRITER.WRITE(';width:'+ALLTRIM(__STR(((XX-X0)/10000)*96-2*LNSIZESHIFT, 13, 1))+"px")
THIS.ODOCWRITER.WRITE(';height:'+ALLTRIM(__STR(((YY-Y0)/10000)*96-2*LNSIZESHIFT, 13, 1))+"px'")
IF FILLPAT=0 .OR. (FILLRED=-1 .AND. FILLGREEN=-1 .AND. FILLBLUE=-1)
THIS.ODOCWRITER.WRITE("filled='f' ")
ELSE
THIS.ODOCWRITER.WRITE("fillcolor="+HEXRGB(FILLRED, FILLGREEN, FILLBLUE)+" ")
ENDIF
IF PENPAT=0
THIS.ODOCWRITER.WRITELN("stroked='f' ")
ELSE
THIS.ODOCWRITER.WRITELN("strokecolor="+HEXRGB(PENRED, PENGREEN, PENBLUE)+" ")
ENDIF
IF PENSIZE<>1
THIS.ODOCWRITER.WRITELN('strokeweight="'+ALLTRIM(STR(PENSIZE))+'pt" ')
ENDIF
DO CASE
CASE PENPAT=1
THIS.ODOCWRITER.WRITELN('<v:stroke dashstyle="2 2"/>')
CASE PENPAT=2
THIS.ODOCWRITER.WRITELN('<v:stroke dashstyle="longdash"/>')
CASE PENPAT=3
THIS.ODOCWRITER.WRITELN('<v:stroke dashstyle="longdashdot"/>')
CASE PENPAT=4
THIS.ODOCWRITER.WRITELN('<v:stroke dashstyle="longDashDotDot"/>')
ENDCASE
DO CASE
CASE OFFSET=99
THIS.ODOCWRITER.WRITELN('</v:oval>')
CASE OFFSET=0
THIS.ODOCWRITER.WRITELN('</v:rect>')
OTHERWISE
THIS.ODOCWRITER.WRITELN('</v:roundrect>')
ENDCASE
ENDCASE
ENDSCAN
THIS.ODOCWRITER.WRITELN("</p>")
THIS.NCURRENTPOSITION = THIS.ALINESARRAY(LNX, 4)-LNUPSHIFT
ENDFOR
RETURN
ENDIF
SELECT (THIS.CMATRIXALIAS)
SET ORDER TO pos
LOCAL LCTMPL, LNI, LNXX, LNJ, LNYY
THIS.ODOCWRITER.WRITELN("<table border=1 cellspacing=0 cellpadding=0>")
GOTO TOP IN (LRPIVOTSALIAS)
GOTO TOP IN (THIS.CPIVOTSALIAS)
SELECT (THIS.CMATRIXALIAS)
FOR LNI = 1 TO THIS.NCOLUMNCOUNT
LNXX = &LCPIVOTSALIAS->XX
SKIP IN (LCPIVOTSALIAS)
LNXX = &LCPIVOTSALIAS->XX - LNXX
LNXX = (LNXX/10000)
THIS.ODOCWRITER.WRITE("<col style='width:"+ALLTRIM(__STR(LNXX, 13, 4))+"in'>"+CHR(13)+CHR(10))
ENDFOR
LOCAL LNEMPTYCOLS, LCTEXT, LCPOINT, LNWIDTHSUPTO
LOCAL LNAT, LNLINEOBJ
LCPOINT = SET("Point")
FOR LNJ = 1 TO THIS.NROWCOUNT
LNYY = &LRPIVOTSALIAS->YY 
SKIP IN (LRPIVOTSALIAS)
LNYY = &LRPIVOTSALIAS->YY - LNYY
LNYY = (LNYY/10000)*96
THIS.ODOCWRITER.WRITE("<tr height="+ALLTRIM(__STR(LNYY, 13, 1))+">")
LNEMPTYCOLS = 0
LNWIDTHSUPTO = 0
FOR LNI = 1 TO THIS.NCOLUMNCOUNT
IF SEEK(M.LNI*1000000+M.LNJ)
IF SPANNED
LOOP
ENDIF
IF LNEMPTYCOLS>0
THIS.ODOCWRITER.WRITE(REPLICATE("<td></td>", LNEMPTYCOLS))
ENDIF
LNEMPTYCOLS = 0
LNOBJ = OBJ
GOTO (M.LNOBJ) IN (LCOBJECTSALIAS)
THIS.ODOCWRITER.WRITE("<td class=x"+ALLTRIM(STR(&LCOBJECTSALIAS->CLASS)))
IF  .NOT. EMPTY(STYLE)
LNAT = 0
LNAT = AT("T", STYLE)
THIS.ODOCWRITER.WRITE(" style='")
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
GOTO (M.LNLINEOBJ) IN (LCOBJECTSALIAS)
THIS.ODOCWRITER.WRITE("border-top:"+ALLTRIM(__STR(MAX(&LCOBJECTSALIAS->PENSIZE,1)/2,10,1))+"pt "+IIF(&LCOBJECTSALIAS->PENSIZE=0,"hairline ","solid "))
THIS.ODOCWRITER.WRITE(HEXRGB(&LCOBJECTSALIAS->PENRED, &LCOBJECTSALIAS->PENGREEN, &LCOBJECTSALIAS->PENBLUE)+";")
ENDIF
LNAT = AT("L", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
GOTO (M.LNLINEOBJ) IN (LCOBJECTSALIAS)
THIS.ODOCWRITER.WRITE("border-left:"+ALLTRIM(__STR(MAX(&LCOBJECTSALIAS->PENSIZE,1)/2,10,1))+"pt "+IIF(&LCOBJECTSALIAS->PENSIZE=0,"hairline ","solid "))
THIS.ODOCWRITER.WRITE(HEXRGB(&LCOBJECTSALIAS->PENRED, &LCOBJECTSALIAS->PENGREEN, &LCOBJECTSALIAS->PENBLUE)+";")
ENDIF
THIS.ODOCWRITER.WRITE("'")
GOTO (M.LNOBJ) IN (LCOBJECTSALIAS)
ENDIF
IF COLSPAN>1
THIS.ODOCWRITER.WRITE(" colspan="+ALLTRIM(STR(COLSPAN)))
ENDIF
IF ROWSPAN>1
THIS.ODOCWRITER.WRITE(" rowspan="+ALLTRIM(STR(ROWSPAN)))
ENDIF
LCTEXT = &LCOBJECTSALIAS->TEXT
LCNUMVAL = ALLTRIM(&LCOBJECTSALIAS->NUMVAL)
IF LCNUMVAL<>"NULL"
THIS.ODOCWRITER.WRITE(' x:num="'+LCNUMVAL+'"')
ENDIF
THIS.ODOCWRITER.WRITE(">"+LCTEXT+"</td>")
ELSE
IF LNEMPTYCOLS>=0
LNEMPTYCOLS = LNEMPTYCOLS+1
ELSE
THIS.ODOCWRITER.WRITE("<td></td>")
ENDIF
ENDIF
ENDFOR
THIS.ODOCWRITER.WRITE("</tr>"+CHR(13)+CHR(10))
ENDFOR
*THIS.ODOCWRITER.WRITE("<tr><td colspan=20>Created with XFRX, www.eqeus.com, commercial use prohibited.</td></tr>")
THIS.ODOCWRITER.WRITE("</table>")
ENDPROC
**
PROCEDURE outStyles
LOCAL LCFORMATSTRING
SELECT (THIS._X____11332)
SCAN ALL
THIS.ODOCWRITER.WRITEHEADER(".x"+ALLTRIM(STR(RECNO(THIS._X____11332))))
THIS.ODOCWRITER.WRITEHEADER(" {font-family:"+ALLTRIM(FONT)+";")
THIS.ODOCWRITER.WRITEHEADER(" font-size:"+ALLTRIM(STR(FONTSIZE))+"pt;")
IF BOLD
THIS.ODOCWRITER.WRITEHEADER("font-weight:800;")
ENDIF
IF ITAL
THIS.ODOCWRITER.WRITEHEADER("font-style:italic;")
ENDIF
DO CASE
CASE ALIGN="right"
THIS.ODOCWRITER.WRITEHEADER(" text-align:right;")
CASE ALIGN="center"
THIS.ODOCWRITER.WRITEHEADER(" text-align:center;")
OTHERWISE
THIS.ODOCWRITER.WRITEHEADER(" text-align:left;")
ENDCASE
IF UNDERLINE .OR. STRIKED
LOCAL LCDECORATION
LCDECORATION = ""
IF UNDERLINE
LCDECORATION = "underline"
ENDIF
IF STRIKED
IF EMPTY(LCDECORATION)
LCDECORATION = "line-through"
ELSE
LCDECORATION = LCDECORATION+",line-through"
ENDIF
ENDIF
LCDECORATION = LCDECORATION+";"
THIS.ODOCWRITER.WRITEHEADER(" text-decoration:"+LCDECORATION)
IF UNDERLINE
THIS.ODOCWRITER.WRITEHEADER(" text-underline-style:single;")
ENDIF
ENDIF
THIS.ODOCWRITER.WRITEHEADER(" color:"+HEXRGB(PENRED, PENGREEN, PENBLUE)+";")
IF FILLRED>-1
THIS.ODOCWRITER.WRITEHEADER(" background:"+HEXRGB(FILLRED, FILLGREEN, FILLBLUE)+";")
ENDIF
THIS.ODOCWRITER.WRITEHEADER("vertical-align:top;")
THIS.ODOCWRITER.WRITEHEADER("}"+CHR(13)+CHR(10))
ENDSCAN
ENDPROC
**
PROCEDURE finalize
LPARAMETERS _X____11333
THIS.OUTSTYLES()
THIS.ODOCWRITER.FINALIZE(THIS.COUTPUTNAME, THIS.ODOC)
THIS.ODOC = .NULL.
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS FlowLayoutWriter AS DocumentWriter
_X____11332 = ""
CPIVOTSALIAS = ""
RPIVOTSALIAS = ""
CMATRIXALIAS = ""
_X____11335 = ""
NVERTICALADJUSTMENT = 2
NHORIZONTALADJUSTMENT = 2
NTOPMARGIN = 0
NBOTTOMMARGIN = 0
NLEFTMARGIN = 0
NRIGHTMARGIN = 0
NORIENTATION = 0
NPAPERSIZEINDEX = 1
NCURRENTSECTIONTYPE = -100
NCOLUMNCOUNT = -1
NROWCOUNT = -1
DIMENSION ALINESARRAY(1)
NLINES = 0
DIMENSION ASHEETNAMES(1)
NCURRENTSHEET = 0
CNEXTSHEETNAME = ""
CCODEPAGE = ""
COUTPUTNAME = ""
CSETPOINT = ""
OXLSDOC = .NULL.
LBELOWTEXT = .T.
**
PROCEDURE finalize
LPARAMETERS _X____11333
= FCLOSE(THIS.NFILEHANDLE)
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.NPAGEHEIGHT = TNHEIGHT
THIS.NPAGEWIDTH = TNWIDTH
ENDPROC
**
PROCEDURE Init
LPARAMETERS _X____11333, TLOPENOUTPUTNAME, TLNOFILES
LOCAL LNSEL
DODEFAULT()
LNSEL = SELECT(0)
IF  .NOT. TLNOFILES
THIS.COUTPUTNAME = _X____11333.COUTPUTNAME
THIS.CFILENAME = _X____11333.CDIRECTORY+SYS(3)
THIS.CFILENAME = THIS.CFILENAME+".tmp"
IF TLOPENOUTPUTNAME
THIS.NFILEHANDLE = FCREATE(THIS.COUTPUTNAME)
ELSE
THIS.NFILEHANDLE = FCREATE(THIS.CFILENAME)
ENDIF
ENDIF
THIS.CSESSIONDIR = _X____11333.CSESSIONDIR
THIS._X____11332 = "X"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS._X____11332) (UNIQUEID C (15), BOLD L, ITAL L, UNDERLINE L, STRIKED L, FONT C (50), FONTSIZE I, ALIGN C (10), PENRED I, PENGREEN I, PENBLUE I, FILLRED I, FILLGREEN I, FILLBLUE I, FORMATSTRING C (80))
INDEX ON UNIQUEID TAG UNIQUEID ADDITIVE
THIS.CPIVOTSALIAS = "A"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS.CPIVOTSALIAS) (XX N (9, 3), ORDER I, START L)
INDEX ON XX TAG XX ADDITIVE
THIS.CMATRIXALIAS = "B"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS.CMATRIXALIAS) (XX N (9, 3), YY N (9, 3), OBJ I, SPANNED L, COLSPAN I, ROWSPAN I, STYLE C (20), LINK I)
THIS.RPIVOTSALIAS = "C"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS.RPIVOTSALIAS) (YY N (9, 3), ORDER I, START L)
INDEX ON YY TAG YY ADDITIVE
THIS._X____11335 = "D"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS._X____11335) (TYPE C (1), X0 N (9, 3), XX N (9, 3), Y0 N (9, 3), YY N (9, 3), TEXT M, CLASS I, PENSIZE I, PENPAT I, PENRED I, PENGREEN I, PENBLUE I, NUMVAL C (40), LINE I, FILLPAT I, FILLRED I, FILLGREEN I, FILLBLUE I, OFFSET I, ABSOLUTE L, OBJLINKNAME M, OBJLINKHREF M, OBJTOOLTIP M, OBJPICTURE M NOCPTRANS)
SELECT (LNSEL)
ENDPROC
**
PROCEDURE destroy
USE IN SELECT(THIS._X____11332)
USE IN SELECT(THIS.CPIVOTSALIAS)
USE IN SELECT(THIS.RPIVOTSALIAS)
USE IN SELECT(THIS.CMATRIXALIAS)
USE IN SELECT(THIS._X____11335)
FCLOSE(THIS.NFILEHANDLE)
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
THIS.LBELOWTEXT = .T.
IF TNSECTIONCONTENTHEIGHT=0
RETURN
ENDIF
IF THIS.NCURRENTSECTIONTYPE=TOSECTION.INOBJECTCODE
RETURN
ENDIF
DODEFAULT(TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
THIS.NCURRENTSECTIONTYPE = TOSECTION.INOBJECTCODE
ENDPROC
**
PROCEDURE endSection
LOCAL LCSAFETY
LCSAFETY = SET("Safety")
SET SAFETY OFF
DODEFAULT()
THIS.CLOSEPIVOTS()
IF  .NOT. THIS.GENERATELINES()
THIS.GENERATEMATRIX()
ENDIF
THIS.OUTPUTMATRIX()
THIS.CLEANMATRIX()
THIS.NCURRENTSECTIONTYPE = -100
SET SAFETY &LCSAFETY
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
ENDPROC
**
PROCEDURE endPage
DODEFAULT()
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO)
THIS.NEWPAGE(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
FUNCTION registerClass
LPARAMETERS TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TLUNDERLINE, TLSTRIKED, TCALIGN, TCUNIQUEID, TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFORMATSTRING
IF SEEK(TCUNIQUEID, THIS._X____11332, "uniqueID")
RETURN RECNO(THIS._X____11332)
ELSE
INSERT INTO (THIS._X____11332) VALUES (TCUNIQUEID, TLBOLD, TLITALICS, TLUNDERLINE, TLSTRIKED, TCFONT, TNFONTSIZE, TCALIGN, TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFORMATSTRING)
RETURN RECNO(THIS._X____11332)
ENDIF
ENDFUNC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
THIS.LBELOWTEXT = .F.
LNPOMWIDTH = TNWIDTH
IF TCTYPE="L"
TNWIDTH = 3*TNWIDTH+(TNFONTSIZE*0.9 )*10000/72
ENDIF
LOCAL LNSEL, LNCLASS
LNSEL = SELECT(0)
IF TNMODE=1
TNFILLRED = -1
TNFILLGREEN = -1
TNFILLBLUE = -1
ENDIF
LNCLASS = THIS.REGISTERCLASS(TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TLUNDERLINE, THIS.OTXTBOX.LSTRIKED, TCALIGN, TCUNIQUEID+"|"+ALLTRIM(STR(THIS.NREPORT)), TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, THIS.OTXTBOX.CXLSFORMAT)
LOCAL IIII, LCOUTTEXT, LINESCOUNT, AA, BB, CC
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
LINESCOUNT = 0
ELSE
LINESCOUNT = _X_WW(_X____11334, TCFONT, TNFONTSIZE, IIF(TLITALICS, 1, 0), IIF(TLBOLD, 1, 0), TNWIDTH/10, @__XFRET, IIF(TCALIGN="right", 1, 0), THIS.OTXTBOX.NCODEPAGE)
ENDIF
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
LCOUTTEXT = ""
FOR IIII = 1 TO LINESCOUNT
IF M.IIII>1 .AND. (M.AA*M.IIII+(M.BB)*(M.IIII-1)>M.TNHEIGHT+M.IIII*90)
EXIT
ENDIF
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
LNPOMWIDTH = MAX(LNPOMWIDTH, 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4)))
LNTOMTOPPOS = TNTOP+(AA+BB)*(IIII-1)
IF M.IIII=1
LCOUTTEXT = SUBSTR(_X____11334, LNXFROM, LNXTO-LNXFROM+1)
ELSE
LCOUTTEXT = SUBSTR(_X____11334, LNXFROM, LNXTO-LNXFROM+1)
ENDIF
THIS.ADDXOBJECT("T", TNLEFT, TNLEFT+LNPOMWIDTH, LNTOMTOPPOS, LNTOMTOPPOS+AA+BB, LCOUTTEXT, LNCLASS,  ,  ,  ,  ,  , THIS.OTXTBOX.NNUMERICVALUE,  ,  ,  ,  ,  , THIS.OTXTBOX.LABSOLUTE, TCLINKNAME, TCLINKHREF, TCTOOLTIP)
ENDFOR
SELECT (LNSEL)
ENDPROC
**
PROCEDURE addXObject
LPARAMETERS TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNNUMERICVALUE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET, TLABSOLUTE, TCLINKNAME, TCLINKHREF, TCTOOLTIP, TCPICTURE
IF EMPTY(TCPICTURE)
TCPICTURE = ""
ENDIF
IF EMPTY(TCLINKNAME)
TCLINKNAME = ""
ENDIF
IF EMPTY(TCLINKHREF)
TCLINKHREF = ""
ENDIF
IF EMPTY(TCTOOLTIP)
TCTOOLTIP = ""
ENDIF
IF EMPTY(TNFILLPAT)
TNFILLPAT = 0
ENDIF
IF EMPTY(TNFILLRED)
TNFILLRED = 0
ENDIF
IF EMPTY(TNFILLGREEN)
TNFILLGREEN = 0
ENDIF
IF EMPTY(TNFILLBLUE)
TNFILLBLUE = 0
ENDIF
IF EMPTY(TNOFFSET)
TNOFFSET = 0
ENDIF
IF EMPTY(TNPENSIZE)
TNPENSIZE = 0
ENDIF
IF EMPTY(TNPENPAT)
TNPENPAT = 0
ENDIF
IF EMPTY(TNPENRED) .OR. TNPENRED=-1
TNPENRED = 0
ENDIF
IF EMPTY(TNPENGREEN) .OR. TNPENGREEN=-1
TNPENGREEN = 0
ENDIF
IF EMPTY(TNPENBLUE) .OR. TNPENBLUE=-1
TNPENBLUE = 0
ENDIF
IF TNTYPE="L"
ENDIF
LOCAL LNSEL, LCNEAR, LRPIVOTSALIAS, LCPIVOTSALIAS
LRPIVOTALIAS = THIS.RPIVOTSALIAS
LCPIVOTALIAS = THIS.CPIVOTSALIAS
LNSEL = SELECT(0)
IF EMPTY(TNCLASS)
TNCLASS = 0
ENDIF
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
_X____11334 = ""
ENDIF
LCNEAR = SET("Near")
SET NEAR ON
SELECT (THIS.CPIVOTSALIAS)
SET ORDER TO XX
SEEK TNX0 
LOCAL LLOK
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(&LCPIVOTALIAS->XX - TNX0) < THIS.NHORIZONTALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(&LCPIVOTALIAS->XX - TNX0) < THIS.NHORIZONTALADJUSTMENT
ENDIF
IF LLOK
TNX0 = &LCPIVOTALIAS->XX
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (THIS.CPIVOTSALIAS) VALUES (TNX0, 0, .T.)
ELSE
REPLACE START WITH .T. IN (THIS.CPIVOTSALIAS)
ENDIF
SEEK TNXX 
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(&LCPIVOTALIAS->XX - TNXX) < THIS.NHORIZONTALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(&LCPIVOTALIAS->XX - TNXX) < THIS.NHORIZONTALADJUSTMENT
ENDIF
IF LLOK
TNXX = &LCPIVOTALIAS->XX
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (THIS.CPIVOTSALIAS) VALUES (TNXX, 0, .F.)
ENDIF
SELECT (LRPIVOTALIAS)
SET ORDER TO YY
SEEK TNY0 
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(&LRPIVOTALIAS->YY - TNY0) < THIS.NVERTICALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(&LRPIVOTALIAS->YY - TNY0) < THIS.NVERTICALADJUSTMENT
ENDIF
IF LLOK
TNY0 = &LRPIVOTALIAS->YY
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (LRPIVOTALIAS) VALUES (TNY0, 0, .T.)
ELSE
REPLACE START WITH .T. IN (LRPIVOTALIAS)
ENDIF
SEEK TNYY 
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(&LRPIVOTALIAS->YY - TNYY) < THIS.NVERTICALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(&LRPIVOTALIAS->YY - TNYY) < THIS.NVERTICALADJUSTMENT
ENDIF
IF LLOK
TNYY = &LRPIVOTALIAS->YY
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (LRPIVOTALIAS) VALUES (TNYY, 0, .F.)
ENDIF
LOCAL LUVALUE
LUVALUE = TNNUMERICVALUE
IF VARTYPE(LUVALUE)$"NFIBY"
LUVALUE = IIF(ISNULL(LUVALUE), "NULL", __STR(LUVALUE, _XFWID(), _XFDEC()))
ELSE
LUVALUE = "NULL"
ENDIF
IF TLABSOLUTE
TNTYPE = "X"
ENDIF
INSERT INTO (THIS._X____11335) VALUES (TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, LUVALUE, -1, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET, TLABSOLUTE, TCLINKNAME, TCLINKHREF, TCTOOLTIP, TCPICTURE)
SET NEAR &LCNEAR
SELECT (LNSEL)
ENDPROC
**
PROCEDURE closePivots
LOCAL LCPIVOTSALIAS, LRPIVOTSALIAS, LNI
LCPIVOTSALIAS = THIS.CPIVOTSALIAS
LRPIVOTSALIAS = THIS.RPIVOTSALIAS
LNI = 1
SELECT (THIS.CPIVOTSALIAS)
SET ORDER TO XX
SCAN ALL
REPLACE ORDER WITH M.LNI IN (THIS.CPIVOTSALIAS)
LNI = M.LNI+1
ENDSCAN
THIS.NCOLUMNCOUNT = LNI-1
LNI = 1
SELECT (LRPIVOTSALIAS)
SET ORDER TO YY
SCAN ALL
REPLACE ORDER WITH M.LNI IN (LRPIVOTSALIAS)
LNI = M.LNI+1
ENDSCAN
THIS.NROWCOUNT = LNI-1
ENDPROC
**
PROCEDURE generateMatrix
LOCAL LCPIVOTSALIAS, LRPIVOTSALIAS, LCNUMVAL, LNI
LCPIVOTSALIAS = THIS.CPIVOTSALIAS
LRPIVOTSALIAS = THIS.RPIVOTSALIAS
IF RECCOUNT(THIS._X____11335)=0
RETURN
ENDIF
SELECT (THIS.CMATRIXALIAS)
INDEX ON XX*1000000+YY TAG POS UNIQUE ADDITIVE
SELECT (THIS._X____11335)
SCAN ALL FOR TYPE="T"
= SEEK(X0, THIS.CPIVOTSALIAS, "XX")
LNFROMX = &LCPIVOTSALIAS->ORDER
= SEEK(XX, THIS.CPIVOTSALIAS, "XX")
LNTOX = &LCPIVOTSALIAS->ORDER
= SEEK(Y0, LRPIVOTSALIAS, "YY")
LNFROMY = &LRPIVOTSALIAS->ORDER
= SEEK(YY, LRPIVOTSALIAS, "YY")
LNTOY = &LRPIVOTSALIAS->ORDER
LNOBJ = RECNO(THIS._X____11335)
LLFIRST = .T.
LLFAIL = .F.
FOR LNI = LNFROMX TO LNTOX-1
FOR LNJ = LNFROMY TO LNTOY-1
IF LLFIRST
IF SEEK(M.LNI*1000000+M.LNJ, THIS.CMATRIXALIAS, "pos")
LLFAIL = .T.
EXIT
ENDIF
INSERT INTO (THIS.CMATRIXALIAS) VALUES (M.LNI, M.LNJ, M.LNOBJ, .F., M.LNTOX-M.LNFROMX, M.LNTOY-M.LNFROMY, "", 0)
ELSE
INSERT INTO (THIS.CMATRIXALIAS) VALUES (M.LNI, M.LNJ, M.LNOBJ,  .NOT. LLFIRST, 0, 0, "", M.LNFROMX*1000000+M.LNFROMY)
ENDIF
LLFIRST = .F.
ENDFOR
IF LLFAIL
EXIT
ENDIF
ENDFOR
ENDSCAN
SELECT (THIS._X____11335)
ENDPROC
**
FUNCTION generateLines
LOCAL LCPIVOTSALIAS, LRPIVOTSALIAS, LCOBJECTSALIAS, LCNUMVAL, LLFIRST, LCCLASSESALIAS
LCPIVOTSALIAS = THIS.CPIVOTSALIAS
LRPIVOTSALIAS = THIS.RPIVOTSALIAS
LCOBJECTSALIAS = THIS._X____11335
LCCLASSESALIAS = THIS._X____11332
IF RECCOUNT(THIS._X____11335)=0
RETURN .F.
ENDIF
SELECT (THIS._X____11335)
INDEX ON Y0 TAG Y0 ADDITIVE
SET ORDER TO y0
GOTO TOP
REPLACE LINE WITH 1 WHILE  .NOT. (TYPE="T" .OR. TYPE="L" .AND. TEXT="---")
IF EOF()
SKIP -1
ENDIF
LOCAL LNLINESTARTS, LNLINEENDS, LNSTARTINDEX, LLFAILED, LOINTERVALS, LNLINES, LNCURRENTINDEX, LCPARAGRAPHSTYLE
THIS.NLINES = 0
LNLINESTARTS = Y0
LNLINEENDS = YY
LNCURRENTINDEX = 1
LNSTARTINDEX = LNCURRENTINDEX
LOINTERVALS = CREATEOBJECT("distinctIntervals")
IF (TYPE="T" .OR. TYPE="L" .AND. TEXT="---")
LOINTERVALS.ADD(X0, XX)
ENDIF
REPLACE LINE WITH THIS.NLINES+1
SKIP
DO WHILE  .NOT. EOF() .AND.  .NOT. LLFAILED
IF  .NOT. (TYPE="T" .OR. TYPE="L" .AND. TEXT="---")
REPLACE LINE WITH THIS.NLINES+1
ELSE
LNCURRENTINDEX = LNCURRENTINDEX+1
IF Y0>=LNLINEENDS
THIS.NLINES = THIS.NLINES+1
DIMENSION THIS.ALINESARRAY(THIS.NLINES, 4)
THIS.ALINESARRAY(THIS.NLINES, 1) = LNSTARTINDEX
THIS.ALINESARRAY(THIS.NLINES, 2) = LNCURRENTINDEX-1
THIS.ALINESARRAY(THIS.NLINES, 3) = LNLINESTARTS
THIS.ALINESARRAY(THIS.NLINES, 4) = LNLINEENDS
LNLINESTARTS = Y0
LNLINEENDS = YY
LNSTARTINDEX = LNCURRENTINDEX
LOINTERVALS = .NULL.
LOINTERVALS = CREATEOBJECT("distinctIntervals")
LOINTERVALS.ADD(X0, XX)
REPLACE LINE WITH THIS.NLINES+1
ELSE
IF  .NOT. LOINTERVALS.ADD(X0, XX)
REPLACE LINE WITH THIS.NLINES+1, TYPE WITH "X"
ELSE
LNLINEENDS = MAX(LNLINEENDS, YY)
REPLACE LINE WITH THIS.NLINES+1
ENDIF
ENDIF
ENDIF
SKIP
ENDDO
LOINTERVALS = .NULL.
IF  .NOT. LLFAILED
THIS.NLINES = THIS.NLINES+1
DIMENSION THIS.ALINESARRAY(THIS.NLINES, 4)
THIS.ALINESARRAY(THIS.NLINES, 1) = LNSTARTINDEX
THIS.ALINESARRAY(THIS.NLINES, 2) = LNCURRENTINDEX
THIS.ALINESARRAY(THIS.NLINES, 3) = LNLINESTARTS
THIS.ALINESARRAY(THIS.NLINES, 4) = LNLINEENDS
RETURN .T.
ELSE
THIS.NLINES = -1
RETURN .F.
ENDIF
ENDFUNC
**
PROCEDURE cleanMatrix
LOCAL LCSAFETY
LCSAFETY = SET("safety")
SET SAFETY OFF
ZAP IN (THIS.CPIVOTSALIAS)
ZAP IN (THIS.RPIVOTSALIAS)
ZAP IN (THIS.CMATRIXALIAS)
ZAP IN (THIS._X____11335)
SET SAFETY &LCSAFETY
ENDPROC
**
PROCEDURE outputMatrix
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS XLSWriter AS DocumentWriter
_X____11332 = ""
CPIVOTSALIAS = ""
RPIVOTSALIAS = ""
CMATRIXALIAS = ""
_X____11335 = ""
NVERTICALADJUSTMENT = 180
NHORIZONTALADJUSTMENT = 76
NTOPMARGIN = 0
NBOTTOMMARGIN = 0
NLEFTMARGIN = 0
NRIGHTMARGIN = 0
NORIENTATION = 0
NPAPERSIZEINDEX = 1
DIMENSION ASHEETNAMES(1)
NCURRENTSHEET = 0
CNEXTSHEETNAME = ""
CNEXTSHEETNAMEEXPR = ""
CCODEPAGE = ""
COUTPUTNAME = ""
NPAGEHEIGHT = 0
NPAGEWIDTH = 0
CSETPOINT = ""
OXLSDOC = .NULL.
OREPORT = .NULL.
LDISPLAYGRIDLINES = .T.
LSHEETPERPAGE = .F.
LSHEETPERNPGROUP = .F.
LLEAVEFULLFIELDCONTENT = .F.
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.NPAGEHEIGHT = TNHEIGHT
THIS.NPAGEWIDTH = TNWIDTH
ENDPROC
**
FUNCTION Init
LPARAMETERS _X____11333
LOCAL LNSEL
DODEFAULT()
THIS.LSILENT = _X____11333.LSILENT
LOCAL LOXLSDOC
LOXLSDOC = CREATEOBJECT("Excel.Application")
IF TYPE("loXLSDoc")<>"O" .OR. ISNULL(LOXLSDOC)
IF  .NOT. THIS.LSILENT
= MESSAGEBOX("Cannot access Excel application!", 16, "XFRX")
ENDIF
THIS.NERRORCODE = -1
RETURN -1
ENDIF
IF VAL(LOXLSDOC.VERSION)<9
IF  .NOT. THIS.LSILENT
= MESSAGEBOX("Sorry, Excel 2000 or higher is required!", 16, "XFRX")
ENDIF
LOXLSDOC.QUIT()
THIS.NERRORCODE = -2
RETURN -2
ENDIF
THIS.OXLSDOC = LOXLSDOC
LNSEL = SELECT(0)
THIS.COUTPUTNAME = _X____11333.COUTPUTNAME
IF EMPTY(JUSTEXT(THIS.COUTPUTNAME))
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".xls"
ENDIF
THIS.CFILENAME = _X____11333.CDIRECTORY+SYS(3)
THIS.CFDIR = THIS.CFILENAME+"_files"
IF  .NOT. DIRECTORY(THIS.CFDIR)
MD (THIS.CFDIR)
ENDIF
THIS.CFILENAME = THIS.CFILENAME+".tmp"
THIS.OFILES = CREATEOBJECT("xfrxFiles", THIS.CFDIR, THIS.CFILENAME)
THIS.CSESSIONDIR = _X____11333.CSESSIONDIR
THIS._X____11332 = "X"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS._X____11332) (UNIQUEID C (15), BOLD L, ITAL L, UNDERLINE L, FONT C (50), FONTSIZE I, ALIGN C (10), PENRED I, PENGREEN I, PENBLUE I, FILLRED I, FILLGREEN I, FILLBLUE I, FORMATSTRING C (80))
INDEX ON UNIQUEID TAG UNIQUEID ADDITIVE
THIS.CPIVOTSALIAS = "A"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS.CPIVOTSALIAS) (XX N (13, 3), ORDER I, START L)
INDEX ON XX TAG XX ADDITIVE
THIS.CMATRIXALIAS = "B"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS.CMATRIXALIAS) (XX N (13, 3), YY N (13, 3), OBJ I, SPANNED L, COLSPAN I, ROWSPAN I, STYLE C (80), LINK I)
THIS.RPIVOTSALIAS = "C"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS.RPIVOTSALIAS) (YY N (13, 3), ORDER I, START L)
INDEX ON YY TAG YY ADDITIVE
THIS._X____11335 = "D"+SUBSTR(SYS(2015), 4, 9)
CREATE CURSOR (THIS._X____11335) (TYPE C (1), X0 N (13, 3), XX N (13, 3), Y0 N (13, 3), YY N (13, 3), TEXT M, CLASS I, PENSIZE I, PENPAT I, PENRED I, PENGREEN I, PENBLUE I, NUMVAL C (40), FILLRED I, FILLGREEN I, FILLBLUE I)
SELECT (LNSEL)
ENDFUNC
**
PROCEDURE destroy
USE IN SELECT(THIS._X____11332)
USE IN SELECT(THIS.CPIVOTSALIAS)
USE IN SELECT(THIS.RPIVOTSALIAS)
USE IN SELECT(THIS.CMATRIXALIAS)
USE IN SELECT(THIS._X____11335)
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
IF TOSECTION.INREALOBJECTCODE=7 .AND.  .NOT. EMPTY(THIS.CNEXTSHEETNAMEEXPR)
LOCAL LCSHEETNAME
LCSHEETNAME = THIS.OREPORT.XFEVAL(THIS.CNEXTSHEETNAMEEXPR)
DO WHILE ASCAN(THIS.ASHEETNAMES, LCSHEETNAME)>0
LCSHEETNAME = LCSHEETNAME+ALLTRIM(STR(THIS.NCURRENTSHEET))
ENDDO
THIS.ASHEETNAMES(THIS.NCURRENTSHEET) = LCSHEETNAME
ENDIF
DODEFAULT(TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
ENDPROC
**
PROCEDURE increaseCurrentSheetNumber
THIS.NCURRENTSHEET = THIS.NCURRENTSHEET+1
DIMENSION THIS.ASHEETNAMES(THIS.NCURRENTSHEET)
IF EMPTY(THIS.CNEXTSHEETNAMEEXPR)
IF EMPTY(THIS.CNEXTSHEETNAME)
THIS.ASHEETNAMES(THIS.NCURRENTSHEET) = "sheet"+ALLTRIM(STR(THIS.NCURRENTSHEET))
ELSE
DO WHILE ASCAN(THIS.ASHEETNAMES, THIS.CNEXTSHEETNAME)>0
THIS.CNEXTSHEETNAME = ALLTRIM(THIS.CNEXTSHEETNAME)+ALLTRIM(STR(THIS.NCURRENTSHEET))
ENDDO
THIS.ASHEETNAMES(THIS.NCURRENTSHEET) = THIS.CNEXTSHEETNAME
ENDIF
ENDIF
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
LOCAL LNSEL
LNSEL = SELECT(0)
IF EMPTY(TCCODEPAGE)
TCCODEPAGE = "windows-"+ALLTRIM(STR(CPCURRENT()))
ENDIF
IF TYPE("tcCodePage")="N"
TCCODEPAGE = "windows-"+ALLTRIM(STR(TCCODEPAGE))
ENDIF
THIS.CCODEPAGE = TCCODEPAGE
IF THIS.NCURRENTSHEET>0
THIS.RENDERPAGE(0, 0, 0)
ENDIF
THIS.NTOPMARGIN = TOREPORT.LNTOPMARGIN
THIS.NBOTTOMMARGIN = TOREPORT.LNBOTTOMMARGIN
THIS.NLEFTMARGIN = TOREPORT.LNLEFTMARGIN
THIS.NRIGHTMARGIN = TOREPORT.LNRIGHTMARGIN
THIS.NORIENTATION = TOREPORT.LNORIENTATION
THIS.NPAPERSIZEINDEX = TOREPORT.NPAPERSIZEINDEX
THIS.LSILENT = TOREPORT.XFRXSESSION.LSILENT
TOREPORT.LPLAIN =  .NOT. THIS.LSHEETPERPAGE
TOREPORT.LNEWPAGEGROUPSONNEWPAGE = THIS.LSHEETPERNPGROUP
THIS.OREPORT = TOREPORT
THIS.INCREASECURRENTSHEETNUMBER()
SELECT (LNSEL)
ENDPROC
**
PROCEDURE endReport
DODEFAULT()
THIS.OREPORT = .NULL.
ENDPROC
**
PROCEDURE Finalize
LPARAMETERS _X____11333
THIS.RENDERPAGE(0, 0, 0)
THIS.OFILES.PROCESSFILES( , THIS.NCURRENTSHEET)
THIS.NFILEHANDLE = FCREATE(THIS.CFILENAME)
THIS.OUTTEXT(STRTRAN(THIS.GETTEMPLATE(1), "UR_CHARSET", THIS.CCODEPAGE))
LOCAL LCTMPL
THIS.OUTTEXTLN('<meta name="Excel Workbook Frameset">')
THIS.OUTTEXT(STRTRAN(THIS.GETTEMPLATE(5), "UR_FDIR", JUSTFNAME(THIS.OFILES.GETFDIR())))
THIS.OUTTEXTLN('<xml>')
THIS.OUTTEXTLN('<x:ExcelWorkbook>')
THIS.OUTTEXTLN('  <x:ExcelWorksheets>')
LOCAL I
FOR I = 1 TO THIS.NCURRENTSHEET
THIS.OUTTEXTLN('   <x:ExcelWorksheet>')
THIS.OUTTEXTLN('     <x:Name>'+THIS.ASHEETNAMES(M.I)+'</x:Name>')
THIS.OUTTEXTLN('     <x:WorksheetSource HRef="'+JUSTFNAME(THIS.CFDIR)+"\"+"sheet"+ALLTRIM(STR(M.I))+".htm"+'"/>')
THIS.OUTTEXTLN('   </x:ExcelWorksheet>')
ENDFOR
THIS.OUTTEXTLN('  </x:ExcelWorksheets>')
THIS.OUTTEXTLN('</x:ExcelWorkbook>')
THIS.OUTTEXT('</xml>')
THIS.OUTTEXT('</head>')
THIS.OUTTEXT('</html>')
= FCLOSE(THIS.NFILEHANDLE)
LOCAL LLSAF, LCOUTPUT
LOCAL LOXLSDOC
LOXLSDOC = THIS.OXLSDOC
LCOUTPUT = ADDBS(JUSTPATH(FULLPATH(THIS.COUTPUTNAME)))+JUSTFNAME(THIS.COUTPUTNAME)
IF EMPTY(JUSTEXT(LCOUTPUT))
LCOUTPUT = LCOUTPUT+".xls"
ENDIF
LOXLSDOC.WORKBOOKS.OPEN(FULLPATH(THIS.CFILENAME))
LLSAF = SET("safety")
SET SAFETY OFF
IF FILE(LCOUTPUT)
ERASE (LCOUTPUT)
ENDIF
LOXLSDOC.ACTIVEWORKBOOK.SAVEAS(LCOUTPUT, 1)
IF  .NOT. THIS.LDISPLAYGRIDLINES
FOR I = 1 TO LOXLSDOC.ACTIVEWORKBOOK.SHEETS.COUNT
LOXLSDOC.ACTIVEWORKBOOK.SHEETS(I).SELECT()
LOXLSDOC.ACTIVEWINDOW.DISPLAYGRIDLINES = .F.
ENDFOR
ENDIF
LOXLSDOC.ACTIVEWORKBOOK.SAVE()
LOXLSDOC.ACTIVEWORKBOOK.SHEETS(1).SELECT()
IF  .NOT. EMPTY(THIS.CFILENAME)
ERASE FULLPATH(THIS.CFILENAME)
ENDIF
IF  .NOT. EMPTY(THIS.CFDIR)
IF DIRECTORY(THIS.CFDIR)
ERASE FULLPATH(THIS.CFDIR)+"\*.*"
RD FULLPATH(THIS.CFDIR)
ENDIF
ENDIF
IF _X____11333.LNOTOPENWORD
LOXLSDOC.QUIT()
ELSE
LOXLSDOC.VISIBLE = .T.
ENDIF
THIS.OXLSDOC = .NULL.
SET SAFETY &LLSAF
ENDPROC
**
PROCEDURE outStyles
LOCAL LCFORMATSTRING
SELECT (THIS._X____11332)
SCAN ALL
THIS.OUTTEXT(".x"+ALLTRIM(STR(RECNO(THIS._X____11332))))
THIS.OUTTEXT(" {font-family:"+ALLTRIM(FONT)+";")
THIS.OUTTEXT(" font-size:"+ALLTRIM(STR(FONTSIZE))+"pt;")
IF BOLD
THIS.OUTTEXT("font-weight:800;")
ENDIF
IF ITAL
THIS.OUTTEXT("font-style:italic;")
ENDIF
DO CASE
CASE ALIGN="right"
THIS.OUTTEXT(" text-align:right;")
CASE ALIGN="center"
THIS.OUTTEXT(" text-align:center;")
OTHERWISE
THIS.OUTTEXT(" text-align:left;")
ENDCASE
IF UNDERLINE
THIS.OUTTEXT(" text-decoration:underline;")
THIS.OUTTEXT(" text-underline-style:single;")
ENDIF
THIS.OUTTEXT(" color:"+HEXRGB(PENRED, PENGREEN, PENBLUE)+";")
IF FILLRED>-1
THIS.OUTTEXT(" background:"+HEXRGB(FILLRED, FILLGREEN, FILLBLUE)+";")
ENDIF
THIS.OUTTEXT("vertical-align:top;")
IF  .NOT. EMPTY(FORMATSTRING)
LCFORMATSTRING = STRTRAN(ALLTRIM(FORMATSTRING), '"', "\0022")
LCFORMATSTRING = STRTRAN(LCFORMATSTRING, ".", "\.")
LCFORMATSTRING = STRTRAN(LCFORMATSTRING, ",", "\,")
LCFORMATSTRING = STRTRAN(LCFORMATSTRING, " ", "\\ ")
THIS.OUTTEXT('mso-number-format:"'+LCFORMATSTRING+'"')
ENDIF
THIS.OUTTEXT("}"+CHR(13)+CHR(10))
ENDSCAN
ENDPROC
**
FUNCTION registerClass
LPARAMETERS TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TLUNDERLINE, TCALIGN, TCUNIQUEID, TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFORMATSTRING
IF SEEK(TCUNIQUEID, THIS._X____11332, "uniqueID")
RETURN RECNO(THIS._X____11332)
ELSE
INSERT INTO (THIS._X____11332) VALUES (TCUNIQUEID, TLBOLD, TLITALICS, TLUNDERLINE, TCFONT, TNFONTSIZE, TCALIGN, TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFORMATSTRING)
RETURN RECNO(THIS._X____11332)
ENDIF
ENDFUNC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.OFILES.ADDFILE(TCPATH, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT)
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
IF EMPTY(_X____11334)
RETURN
ENDIF
IF TCTYPE="L"
TNWIDTH = TNWIDTH+(TNFONTSIZE*0.9 )*10000/72
ENDIF
LOCAL LNSEL, LNCLASS
LNSEL = SELECT(0)
IF TNMODE=1
TNFILLRED = -1
TNFILLGREEN = -1
TNFILLBLUE = -1
ENDIF
LNCLASS = THIS.REGISTERCLASS(TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TLUNDERLINE, TCALIGN, TCUNIQUEID, TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, THIS.OTXTBOX.CXLSFORMAT)
LOCAL IIII, LCOUTTEXT, LINESCOUNT, AA, BB, CC
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
LINESCOUNT = 0
ELSE
LINESCOUNT = _X_WW(_X____11334, TCFONT, TNFONTSIZE, IIF(TLITALICS, 1, 0), IIF(TLBOLD, 1, 0), TNWIDTH/10, @__XFRET, IIF(TCALIGN="right", 1, 0), THIS.OTXTBOX.NCODEPAGE)
ENDIF
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
LCOUTTEXT = ""
IF THIS.LLEAVEFULLFIELDCONTENT
LCOUTTEXT = STRTRAN(__XF_HTQ(_X____11334), CHR(13), "<br>")
ELSE
FOR IIII = 1 TO LINESCOUNT
IF M.IIII>1 .AND. (M.AA*M.IIII+(M.BB)*(M.IIII-1)>M.TNHEIGHT+M.IIII*90)
EXIT
ENDIF
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
LNPOMWIDTH = 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4))
LNTOMTOPPOS = TNTOP+(AA+BB)*(IIII-1)
IF M.IIII=1
LCOUTTEXT = __XF_HTQ(SUBSTR(_X____11334, LNXFROM, LNXTO-LNXFROM+1))
ELSE
LCOUTTEXT = LCOUTTEXT+"<br>"+__XF_HTQ(SUBSTR(_X____11334, LNXFROM, LNXTO-LNXFROM+1))
ENDIF
ENDFOR
IF M.IIII=2 .AND. M.TNHEIGHT<M.AA
TNHEIGHT = M.AA
ENDIF
ENDIF
THIS.ADDXOBJECT("T", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, LCOUTTEXT, LNCLASS,  ,  ,  ,  ,  , THIS.OTXTBOX.NNUMERICVALUE)
SELECT (LNSEL)
ENDPROC
**
PROCEDURE addXObject
LPARAMETERS TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNNUMERICVALUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE
IF TYPE("tnfillred")<>"N" .OR. TNFILLRED=-1
TNFILLRED = 255
ENDIF
IF TYPE("tnfillgreen")<>"N" .OR. TNFILLGREEN=-1
TNFILLGREEN = 255
ENDIF
IF TYPE("tnfillblue")<>"N" .OR. TNFILLBLUE=-1
TNFILLBLUE = 255
ENDIF
IF EMPTY(TNPENSIZE)
TNPENSIZE = 0
ENDIF
IF EMPTY(TNPENPAT)
TNPENPAT = 0
ENDIF
IF EMPTY(TNPENRED) .OR. TNPENRED=-1
TNPENRED = 0
ENDIF
IF EMPTY(TNPENGREEN) .OR. TNPENGREEN=-1
TNPENGREEN = 0
ENDIF
IF EMPTY(TNPENBLUE) .OR. TNPENBLUE=-1
TNPENBLUE = 0
ENDIF
IF TNTYPE="L"
ENDIF
LOCAL LNSEL, LCNEAR, LRPIVOTSALIAS, LCPIVOTSALIAS
LRPIVOTALIAS = THIS.RPIVOTSALIAS
LCPIVOTALIAS = THIS.CPIVOTSALIAS
LNSEL = SELECT(0)
IF EMPTY(TNCLASS)
TNCLASS = 0
ENDIF
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
_X____11334 = ""
ENDIF
LCNEAR = SET("Near")
SET NEAR ON
SELECT (THIS.CPIVOTSALIAS)
SET ORDER TO XX
SEEK TNX0 
LOCAL LLOK
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(&LCPIVOTALIAS->XX - TNX0) < THIS.NHORIZONTALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(&LCPIVOTALIAS->XX - TNX0) < THIS.NHORIZONTALADJUSTMENT
ENDIF
IF LLOK
TNX0 = &LCPIVOTALIAS->XX
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (THIS.CPIVOTSALIAS) VALUES (TNX0, 0, .T.)
ELSE
REPLACE START WITH .T. IN (THIS.CPIVOTSALIAS)
ENDIF
SEEK TNXX 
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(&LCPIVOTALIAS->XX - TNXX) < THIS.NHORIZONTALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(&LCPIVOTALIAS->XX - TNXX) < THIS.NHORIZONTALADJUSTMENT
ENDIF
IF LLOK
TNXX = &LCPIVOTALIAS->XX
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (THIS.CPIVOTSALIAS) VALUES (TNXX, 0, .F.)
ENDIF
SELECT (LRPIVOTALIAS)
SET ORDER TO YY
SEEK TNY0 
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(&LRPIVOTALIAS->YY - TNY0) < THIS.NVERTICALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(&LRPIVOTALIAS->YY - TNY0) < THIS.NVERTICALADJUSTMENT
ENDIF
IF LLOK
TNY0 = &LRPIVOTALIAS->YY
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (LRPIVOTALIAS) VALUES (TNY0, 0, .T.)
ELSE
REPLACE START WITH .T. IN (LRPIVOTALIAS)
ENDIF
SEEK TNYY 
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(&LRPIVOTALIAS->YY - TNYY) < THIS.NVERTICALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(&LRPIVOTALIAS->YY - TNYY) < THIS.NVERTICALADJUSTMENT
ENDIF
IF LLOK
TNYY = &LRPIVOTALIAS->YY
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (LRPIVOTALIAS) VALUES (TNYY, 0, .F.)
ENDIF
LOCAL LUVALUE, LCTYPE
LUVALUE = TNNUMERICVALUE
LCTYPE = VARTYPE(LUVALUE)
DO CASE
CASE LCTYPE$"NY"
LUVALUE = IIF(ISNULL(LUVALUE), "NULL", __STR(LUVALUE, _XFWID(), _XFDEC()))
CASE LCTYPE="C"
OTHERWISE
LUVALUE = "NULL"
ENDCASE
INSERT INTO (THIS._X____11335) VALUES (TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, LUVALUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE)
SET NEAR &LCNEAR
SELECT (LNSEL)
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.ADDXOBJECT("R", LNLEFT, LNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT,  ,  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE,  , TNFILLRED, TNFILLGREEN, TNFILLBLUE)
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.ADDXOBJECT("L", TNLEFT, TNLTO, TNTOP, TNTTO,  ,  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE)
ENDPROC
**
PROCEDURE putLineOnMatrix
LPARAMETERS TCSTYLE, TNX, TNY, TNOBJ
LOCAL LNSEL
TCSTYLE = TCSTYLE+ALLTRIM(STR(TNOBJ))
LNSEL = SELECT(0)
SELECT (THIS.CMATRIXALIAS)
IF SEEK(M.TNX*1000000+M.TNY, THIS.CMATRIXALIAS, "pos")
IF  .NOT. SPANNED
REPLACE STYLE WITH ALLTRIM(STYLE)+TCSTYLE
ELSE
LOCAL LNLINK
LNLINK = LINK
IF SEEK(LNLINK, THIS.CMATRIXALIAS, "pos")
REPLACE STYLE WITH ALLTRIM(STYLE)+TCSTYLE
ENDIF
ENDIF
ELSE
INSERT INTO (THIS.CMATRIXALIAS) VALUES (M.TNX, M.TNY, M.TNOBJ, .F., 0, 0, TCSTYLE, 0)
ENDIF
SELECT (LNSEL)
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
IF EMPTY(TUPAR1)
RETURN
ENDIF
DO CASE
CASE TUPAR1="LEAVE_FULL_FIELD_CONTENT"
THIS.LLEAVEFULLFIELDCONTENT =  .NOT. EMPTY(TUPAR2)
CASE TUPAR1="DISPLAY_GRID_LINES"
THIS.LDISPLAYGRIDLINES =  .NOT. EMPTY(TUPAR2)
CASE TUPAR1="SHEET_PER_PAGE"
THIS.LSHEETPERPAGE =  .NOT. EMPTY(TUPAR2)
CASE TUPAR1=="NEXT_SHEET_NAME"
THIS.CNEXTSHEETNAME = TRANSFORM(TUPAR2, "")
CASE TUPAR1="NEXT_SHEET_NAME_EXPR"
THIS.CNEXTSHEETNAMEEXPR = TRANSFORM(TUPAR2, "")
CASE TUPAR1="SHEET_PER_NP_GROUP"
THIS.LSHEETPERNPGROUP =  .NOT. EMPTY(TUPAR2)
CASE TUPAR1="VERTICAL_ADJUSTMENT" .AND. TYPE("tuPar2")="N"
THIS.NVERTICALADJUSTMENT = TUPAR2
CASE TUPAR1="HORIZONTAL_ADJUSTMENT" .AND. TYPE("tuPar2")="N"
THIS.NHORIZONTALADJUSTMENT = TUPAR2
ENDCASE
ENDPROC
**
PROCEDURE NewPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
IF THIS.NCURRENTSHEET>0
THIS.RENDERPAGE(0, 0, 0)
ENDIF
THIS.INCREASECURRENTSHEETNUMBER()
ENDPROC
**
PROCEDURE renderPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.NFILEHANDLE = FCREATE(THIS.CFDIR+"\"+"sheet"+ALLTRIM(STR(THIS.NCURRENTSHEET))+".htm")
LOCAL LCPIVOTSALIAS, LRPIVOTSALIAS, LCNUMVAL
LCPIVOTSALIAS = THIS.CPIVOTSALIAS
LRPIVOTSALIAS = THIS.RPIVOTSALIAS
LOCAL LNI, LNMAXX, LNMAYY
LOCAL FX
FX = THIS.OFILES
IF FX.INPICTURES>0
LOCAL LNMINLEFT, LNMINTOP
FOR LNI = 1 TO FX.INPICTURES
IF LNI=1
LNMINLEFT = FX.IAPARAMS(M.LNI, 1)
LNMINTOP = FX.IAPARAMS(M.LNI, 2)
ELSE
IF FX.IAPARAMS(M.LNI, 1)<LNMINLEFT
LNMINLEFT = FX.IAPARAMS(M.LNI, 1)
ENDIF
IF FX.IAPARAMS(M.LNI, 2)<LNMINLEFT
LNMINTOP = FX.IAPARAMS(M.LNI, 2)
ENDIF
ENDIF
ENDFOR
SELECT (THIS.CPIVOTSALIAS)
SET ORDER TO XX
GOTO TOP
IF M.LNMINLEFT<XX
INSERT INTO (THIS.CPIVOTSALIAS) VALUES (M.LNMINLEFT, 0, .T.)
ELSE
LNMINLEFT = XX
ENDIF
FOR LNI = 1 TO FX.INPICTURES
FX.IAPARAMS(M.LNI, 1) = FX.IAPARAMS(M.LNI, 1)-LNMINLEFT
ENDFOR
SELECT (THIS.RPIVOTSALIAS)
SET ORDER TO YY
GOTO TOP
IF M.LNMINTOP<YY
INSERT INTO (THIS.RPIVOTSALIAS) VALUES (M.LNMINTOP, 0, .T.)
ELSE
LNMINTOP = YY
ENDIF
FOR LNI = 1 TO FX.INPICTURES
FX.IAPARAMS(M.LNI, 2) = FX.IAPARAMS(M.LNI, 2)-M.LNMINTOP
ENDFOR
ENDIF
LNI = 1
SELECT (THIS.CPIVOTSALIAS)
SET ORDER TO XX
SCAN ALL
REPLACE ORDER WITH M.LNI IN (THIS.CPIVOTSALIAS)
LNI = M.LNI+1
ENDSCAN
LNMAXX = LNI-1
LNI = 1
SELECT (LRPIVOTSALIAS)
SET ORDER TO YY
SCAN ALL
REPLACE ORDER WITH M.LNI IN (LRPIVOTSALIAS)
LNI = M.LNI+1
ENDSCAN
LNMAXY = LNI-1
SELECT (THIS.CMATRIXALIAS)
INDEX ON XX*1000000+YY TAG POS UNIQUE ADDITIVE
SELECT (THIS._X____11335)
SCAN ALL FOR TYPE="T"
= SEEK(X0, THIS.CPIVOTSALIAS, "XX")
LNFROMX = &LCPIVOTSALIAS->ORDER
= SEEK(XX, THIS.CPIVOTSALIAS, "XX")
LNTOX = &LCPIVOTSALIAS->ORDER
= SEEK(Y0, LRPIVOTSALIAS, "YY")
LNFROMY = &LRPIVOTSALIAS->ORDER
= SEEK(YY, LRPIVOTSALIAS, "YY")
LNTOY = &LRPIVOTSALIAS->ORDER
LNOBJ = RECNO(THIS._X____11335)
LLFIRST = .T.
LLFAIL = .F.
FOR LNI = LNFROMX TO LNTOX-1
FOR LNJ = LNFROMY TO LNTOY-1
IF LLFIRST
IF SEEK(M.LNI*1000000+M.LNJ, THIS.CMATRIXALIAS, "pos")
LLFAIL = .T.
EXIT
ENDIF
INSERT INTO (THIS.CMATRIXALIAS) VALUES (M.LNI, M.LNJ, M.LNOBJ, .F., M.LNTOX-M.LNFROMX, M.LNTOY-M.LNFROMY, "", 0)
ELSE
INSERT INTO (THIS.CMATRIXALIAS) VALUES (M.LNI, M.LNJ, M.LNOBJ,  .NOT. LLFIRST, 0, 0, "", M.LNFROMX*1000000+M.LNFROMY)
ENDIF
LLFIRST = .F.
ENDFOR
IF LLFAIL
EXIT
ENDIF
ENDFOR
ENDSCAN
SELECT (THIS._X____11335)
SCAN ALL FOR TYPE="L" .OR. TYPE="R"
= SEEK(X0, THIS.CPIVOTSALIAS, "XX")
LNFROMX = &LCPIVOTSALIAS->ORDER
= SEEK(XX, THIS.CPIVOTSALIAS, "XX")
LNTOX = &LCPIVOTSALIAS->ORDER
= SEEK(Y0, LRPIVOTSALIAS, "YY")
LNFROMY = &LRPIVOTSALIAS->ORDER
= SEEK(YY, LRPIVOTSALIAS, "YY")
LNTOY = &LRPIVOTSALIAS->ORDER
IF TYPE="R"
FOR LNJ = LNFROMY TO LNTOY-1
FOR LNI = LNFROMX TO LNTOX-1
IF LNJ=LNFROMY
THIS.PUTLINEONMATRIX("T", LNI, LNJ, RECNO(THIS._X____11335))
ENDIF
IF LNJ=LNTOY-1
THIS.PUTLINEONMATRIX("B", LNI, LNJ, RECNO(THIS._X____11335))
ENDIF
IF LNI=LNFROMX
THIS.PUTLINEONMATRIX("L", LNI, LNJ, RECNO(THIS._X____11335))
ENDIF
IF LNI=LNTOX-1
THIS.PUTLINEONMATRIX("R", LNI, LNJ, RECNO(THIS._X____11335))
ENDIF
THIS.PUTLINEONMATRIX("C", LNI, LNJ, RECNO(THIS._X____11335))
ENDFOR
ENDFOR
ELSE
IF LNFROMX=LNTOX
FOR LNJ = LNFROMY TO LNTOY-1
THIS.PUTLINEONMATRIX("L", LNFROMX, LNJ, RECNO(THIS._X____11335))
ENDFOR
ELSE
FOR LNI = LNFROMX TO LNTOX-1
THIS.PUTLINEONMATRIX("T", LNI, LNFROMY, RECNO(THIS._X____11335))
ENDFOR
ENDIF
ENDIF
ENDSCAN
SELECT (THIS.CMATRIXALIAS)
SET ORDER TO pos
LOCAL LCTMPL
THIS.OUTTEXT(STRTRAN(THIS.GETTEMPLATE(1), "UR_CHARSET", THIS.CCODEPAGE))
LCTMPL = THIS.GETTEMPLATE(4)
LCTMPL = STRTRAN(LCTMPL, "XLS_PAGE_WIDTH", ALLTRIM(STR(THIS.NPAGEWIDTH/10000, 10, 2)))
LCTMPL = STRTRAN(LCTMPL, "XLS_PAGE_HEIGHT", ALLTRIM(STR(THIS.NPAGEHEIGHT/10000, 10, 2)))
LCTMPL = STRTRAN(LCTMPL, "XLS_ORIENTATION", IIF(THIS.NORIENTATION=0, "", "mso-page-orientation:landscape;"))
LCTMPL = STRTRAN(LCTMPL, "XLS_TOP_MARGIN", ALLTRIM(STR(THIS.NTOPMARGIN/10000, 10, 2)))
LCTMPL = STRTRAN(LCTMPL, "XLS_RIGHT_MARGIN", ALLTRIM(STR(0, 10, 2)))
LCTMPL = STRTRAN(LCTMPL, "XLS_BOTTOM_MARGIN", ALLTRIM(STR(THIS.NBOTTOMMARGIN/10000, 10, 2)))
LCTMPL = STRTRAN(LCTMPL, "XLS_LEFT_MARGIN", ALLTRIM(STR(THIS.NLEFTMARGIN/10000, 10, 2)))
LCTMPL = STRTRAN(LCTMPL, "XLS_PAPER_SIZE_INDEX", ALLTRIM(STR(THIS.NPAPERSIZEINDEX)))
THIS.OUTTEXT(LCTMPL)
THIS.OUTTEXT(THIS.GETTEMPLATE(6))
THIS.OUTSTYLES()
THIS.OUTTEXT(THIS.GETTEMPLATE(2))
FX.XLSFILES(THIS.NFILEHANDLE)
FX.INPICTURES = 0
THIS.OUTTEXT(THIS.GETTEMPLATE(3))
GOTO TOP IN (LRPIVOTSALIAS)
GOTO TOP IN (THIS.CPIVOTSALIAS)
SELECT (THIS.CMATRIXALIAS)
FOR LNI = 1 TO LNMAXX
LNXX = &LCPIVOTSALIAS->XX
SKIP IN (LCPIVOTSALIAS)
LNXX = &LCPIVOTSALIAS->XX - LNXX
LNXX = (LNXX/10000)
THIS.OUTTEXT("<col style='width:"+ALLTRIM(__STR(LNXX, 13, 4))+"in'>"+CHR(13)+CHR(10))
ENDFOR
LOCAL LNEMPTYCOLS, LCOBJECTSALIAS, LCTEXT, LCPOINT, LNBOXOBJ
LCPOINT = SET("Point")
LCOBJECTSALIAS = THIS._X____11335
LOCAL LNSUMDIFF, LNDIFF
LNSUMDIFF = 0
FOR LNJ = 1 TO LNMAXY
LNYY = &LRPIVOTSALIAS->YY 
SKIP IN (LRPIVOTSALIAS)
LNYY = &LRPIVOTSALIAS->YY - LNYY
IF ABS(LNSUMDIFF)>50
LNYY = LNYY+LNSUMDIFF
LNSUMDIFF = 0
ENDIF
LNDIFF = LNYY
LNYY = ((LNYY*96)/10000)
LNYY = ROUND(LNYY, 0)
LNSUMDIFF = LNSUMDIFF+(LNDIFF-LNYY*10000/96)
THIS.OUTTEXT("<tr style='height:"+ALLTRIM(__STR(LNYY, 13, 0))+"px'>")
LNEMPTYCOLS = 0
LOCAL LNAT, LNLINEOBJ
FOR LNI = 1 TO LNMAXX
IF SEEK(M.LNI*1000000+M.LNJ)
IF SPANNED
LOOP
ENDIF
IF LNEMPTYCOLS>0
THIS.OUTTEXT(REPLICATE("<td></td>", LNEMPTYCOLS))
ENDIF
LNEMPTYCOLS = 0
LNOBJ = OBJ
GOTO (M.LNOBJ) IN (LCOBJECTSALIAS)
THIS.OUTTEXT("<td class=x"+ALLTRIM(STR(&LCOBJECTSALIAS->CLASS)))
IF  .NOT. EMPTY(STYLE)
LNAT = 0
THIS.OUTTEXT(" style='")
LNAT = RAT("C", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
GOTO (M.LNLINEOBJ) IN (LCOBJECTSALIAS)
IF &LCOBJECTSALIAS->TYPE = "R"
THIS.OUTTEXT("background-color:"+HEXRGB(&LCOBJECTSALIAS->FILLRED, &LCOBJECTSALIAS->FILLGREEN, &LCOBJECTSALIAS->FILLBLUE)+";")
ENDIF
LNBOXOBJ = M.LNLINEOBJ
ELSE
LNBOXOBJ = -1
ENDIF
LNAT = AT("T", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
IF LNLINEOBJ>=LNBOXOBJ
GOTO (M.LNLINEOBJ) IN (LCOBJECTSALIAS)
THIS.OUTTEXT("border-top:"+ALLTRIM(__STR(MAX(&LCOBJECTSALIAS->PENSIZE,1)/2,10,1))+"pt "+IIF(&LCOBJECTSALIAS->PENSIZE=0,"hairline ","solid "))
THIS.OUTTEXT(HEXRGB(&LCOBJECTSALIAS->PENRED, &LCOBJECTSALIAS->PENGREEN, &LCOBJECTSALIAS->PENBLUE)+";")
ENDIF
ENDIF
LNAT = AT("B", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
IF LNLINEOBJ>=LNBOXOBJ
GOTO (M.LNLINEOBJ) IN (LCOBJECTSALIAS)
THIS.OUTTEXT("border-bottom:"+ALLTRIM(__STR(MAX(&LCOBJECTSALIAS->PENSIZE,1)/2,10,1))+"pt "+IIF(&LCOBJECTSALIAS->PENSIZE=0,"hairline ","solid "))
THIS.OUTTEXT(HEXRGB(&LCOBJECTSALIAS->PENRED, &LCOBJECTSALIAS->PENGREEN, &LCOBJECTSALIAS->PENBLUE)+";")
ENDIF
ENDIF
LNAT = AT("L", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
IF LNLINEOBJ>=LNBOXOBJ
GOTO (M.LNLINEOBJ) IN (LCOBJECTSALIAS)
THIS.OUTTEXT("border-left:"+ALLTRIM(__STR(MAX(&LCOBJECTSALIAS->PENSIZE,1)/2,10,1))+"pt "+IIF(&LCOBJECTSALIAS->PENSIZE=0,"hairline ","solid "))
THIS.OUTTEXT(HEXRGB(&LCOBJECTSALIAS->PENRED, &LCOBJECTSALIAS->PENGREEN, &LCOBJECTSALIAS->PENBLUE)+";")
ENDIF
ENDIF
LNAT = AT("R", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
IF LNLINEOBJ>=LNBOXOBJ
GOTO (M.LNLINEOBJ) IN (LCOBJECTSALIAS)
THIS.OUTTEXT("border-right:"+ALLTRIM(__STR(MAX(&LCOBJECTSALIAS->PENSIZE,1)/2,10,1))+"pt "+IIF(&LCOBJECTSALIAS->PENSIZE=0,"hairline ","solid "))
THIS.OUTTEXT(HEXRGB(&LCOBJECTSALIAS->PENRED, &LCOBJECTSALIAS->PENGREEN, &LCOBJECTSALIAS->PENBLUE)+";")
ENDIF
ENDIF
THIS.OUTTEXT("'")
GOTO (M.LNOBJ) IN (LCOBJECTSALIAS)
ENDIF
IF COLSPAN>1
THIS.OUTTEXT(" colspan="+ALLTRIM(STR(COLSPAN)))
ENDIF
IF ROWSPAN>1
THIS.OUTTEXT(" rowspan="+ALLTRIM(STR(ROWSPAN)))
ENDIF
LCTEXT = &LCOBJECTSALIAS->TEXT
LCNUMVAL = ALLTRIM(&LCOBJECTSALIAS->NUMVAL)
IF LCNUMVAL<>"NULL"
THIS.OUTTEXT(' x:num="'+LCNUMVAL+'"')
ENDIF
THIS.OUTTEXT(">"+LCTEXT+"</td>")
ELSE
IF LNEMPTYCOLS>=0
LNEMPTYCOLS = LNEMPTYCOLS+1
ELSE
THIS.OUTTEXT("<td></td>")
ENDIF
ENDIF
ENDFOR
THIS.OUTTEXT("</tr>"+CHR(13)+CHR(10))
ENDFOR
*THIS.OUTTEXT("<tr><td colspan=20>Created with XFRX, www.eqeus.com, commercial use prohibited.</td></tr>")
THIS.OUTTEXT("</table></body></html>")
= FCLOSE(THIS.NFILEHANDLE)
LOCAL LCSAFETY
LCSAFETY = SET("safety")
SET SAFETY OFF
ZAP IN (THIS._X____11332)
ZAP IN (THIS.CPIVOTSALIAS)
ZAP IN (THIS.RPIVOTSALIAS)
ZAP IN (THIS.CMATRIXALIAS)
ZAP IN (THIS._X____11335)
SET SAFETY &LCSAFETY
ENDPROC
**
FUNCTION getTemplate
LPARAMETERS TNTEMPLATE
DO CASE
CASE TNTEMPLATE=1
RETURN '<html xmlns:o="urn:schemas-microsoft-com:office:office"'+CHR(13)+CHR(10)+'xmlns:v="urn:schemas-microsoft-com:vml"'+CHR(13)+CHR(10)+'xmlns:x="urn:schemas-microsoft-com:office:excel"'+CHR(13)+CHR(10)+'xmlns="http://www.w3.org/TR/REC-html40">'+CHR(13)+CHR(10)+'<head>'+CHR(13)+CHR(10)+'<meta http-equiv=Content-Type content="text/html; charset=UR_CHARSET">'+CHR(13)+CHR(10)+'<meta name=ProgId content=Excel.Sheet>'+CHR(13)+CHR(10)+'<meta name=Generator content="Microsoft Excel 9">'+CHR(13)+CHR(10)
CASE TNTEMPLATE=4
RETURN '<style>'+CHR(13)+CHR(10)+'v\:* {behavior:url(#default#VML);}'+CHR(13)+CHR(10)+'o\:* {behavior:url(#default#VML);}'+CHR(13)+CHR(10)+'x\:* {behavior:url(#default#VML);}'+CHR(13)+CHR(10)+'.shape {behavior:url(#default#VML);}'+CHR(13)+CHR(10)+'@page'+CHR(13)+CHR(10)+'   {size:XLS_PAGE_WIDTHin XLS_PAGE_HEIGHTin;'+CHR(13)+CHR(10)+'	margin:XLS_TOP_MARGINin XLS_RIGHT_MARGINin XLS_BOTTOM_MARGINin XLS_LEFT_MARGINin;'+CHR(13)+CHR(10)+'	XLS_ORIENTATION'+CHR(13)+CHR(10)+'	mso-header-margin:0in;'+CHR(13)+CHR(10)+'	mso-footer-margin:0in;}'+CHR(13)+CHR(10)+'</style>'+CHR(13)+CHR(10)+'<xml>'+CHR(13)+CHR(10)+' <x:WorksheetOptions>'+CHR(13)+CHR(10)+'  <x:Print>'+CHR(13)+CHR(10)+'   <x:ValidPrinterInfo/>'+CHR(13)+CHR(10)+'   <x:PaperSizeIndex>XLS_PAPER_SIZE_INDEX</x:PaperSizeIndex>'+CHR(13)+CHR(10)+'   <x:HorizontalResolution>600</x:HorizontalResolution>'+CHR(13)+CHR(10)+'   <x:VerticalResolution>0</x:VerticalResolution>'+CHR(13)+CHR(10)+'  </x:Print>'+CHR(13)+CHR(10)+'  <x:ProtectContents>False</x:ProtectContents>'+CHR(13)+CHR(10)+'  <x:ProtectObjects>False</x:ProtectObjects>'+CHR(13)+CHR(10)+'  <x:ProtectScenarios>False</x:ProtectScenarios>'+CHR(13)+CHR(10)+' </x:WorksheetOptions>'+CHR(13)+CHR(10)+'</xml>		'+CHR(13)+CHR(10)
CASE TNTEMPLATE=5
RETURN '<link rel=File-List href="./UR_FDIR/filelist.xml">'+CHR(13)+CHR(10)+'<xml>'+CHR(13)+CHR(10)+'<o:DocumentProperties>'+CHR(13)+CHR(10)+'<o:Version>9.2720</o:Version>'+CHR(13)+CHR(10)+'</o:DocumentProperties>'+CHR(13)+CHR(10)+'</xml>'
CASE TNTEMPLATE=6
RETURN '<style>'+CHR(13)+CHR(10)+'<!--'+CHR(13)+CHR(10)
CASE TNTEMPLATE=7
RETURN ''+CHR(13)+CHR(10)+'-->'+CHR(13)+CHR(10)+'</style>'+CHR(13)+CHR(10)
CASE TNTEMPLATE=2
RETURN 'br'+CHR(13)+CHR(10)+'{mso-data-placement:same-cell;}'+CHR(13)+CHR(10)+'td'+CHR(13)+CHR(10)+'padding-top:0px;'+CHR(13)+CHR(10)+'padding-right:0px;'+CHR(13)+CHR(10)+'padding-left:0px;'+CHR(13)+CHR(10)+'mso-ignore:padding;'+CHR(13)+CHR(10)+'color:windowtext;'+CHR(13)+CHR(10)+'font-size:10.0pt;'+CHR(13)+CHR(10)+'font-weight:400;'+CHR(13)+CHR(10)+'font-style:normal;'+CHR(13)+CHR(10)+'text-decoration:none;'+CHR(13)+CHR(10)+'font-family:Arial;'+CHR(13)+CHR(10)+'mso-generic-font-family:auto;'+CHR(13)+CHR(10)+'mso-font-charset:0;'+CHR(13)+CHR(10)+'mso-number-format:General;'+CHR(13)+CHR(10)+'text-align:general;'+CHR(13)+CHR(10)+'vertical-align:top;'+CHR(13)+CHR(10)+'border:none;'+CHR(13)+CHR(10)+'mso-background-source:auto;'+CHR(13)+CHR(10)+'mso-pattern:auto;'+CHR(13)+CHR(10)+'mso-protection:locked visible;'+CHR(13)+CHR(10)+'white-space:nowrap;'+CHR(13)+CHR(10)+'mso-rotate:0;}'+CHR(13)+CHR(10)+'-->'+CHR(13)+CHR(10)+'</style>'+CHR(13)+CHR(10)+'</head>'+CHR(13)+CHR(10)+''+CHR(13)+CHR(10)+'<body link=blue vlink=purple>'+CHR(13)+CHR(10)+''+CHR(13)+CHR(10)
CASE TNTEMPLATE=3
RETURN "<table x:str border=0 cellpadding=0 cellspacing=0 style='border-collapse:collapse;table-layout:fixed'>"
ENDCASE
ENDFUNC
**
ENDDEFINE
**
DEFINE CLASS CNTWriter AS DocumentWriter
OXFCONT = .NULL.
NCOUNTER = 0
**
PROCEDURE finalize
LPARAMETERS TOXF
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
THIS.OXFCONT = TUPAR1
THIS.OXFCONT.SETHOSTSINTERFACE(TUPAR2, TUPAR3)
THIS.OXFCONT.NSHEETS = TUPAR3.PAGECOUNT
DIMENSION THIS.OXFCONT.ASHEETS(TUPAR3.PAGECOUNT, 2)
STORE 0 TO THIS.OXFCONT.ASHEETS
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.NEWPAGE(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
THIS.OXFCONT.ADDSHEET(TNHEIGHT, TNWIDTH)
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
LOCAL LLBACKSLASHED
LLBACKSLASHED = .T.
IF TNTTO<TNTOP
LNXX = TNTTO
TNTTO = TNTOP
TNTOP = LNXX
LLBACKSLASHED =  .NOT. LLBACKSLASHED
ENDIF
IF TNLEFT>TNLTO
LNXX = TNLTO
TNLTO = TNLEFT
TNLEFT = LNXX
LLBACKSLASHED =  .NOT. LLBACKSLASHED
ENDIF
THIS.OXFCONT.ADDLINE(TCNAME, TNLEFT, TNTOP, TNLTO-TNLEFT+1, TNTTO-TNTOP+1, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, IIF(LLBACKSLASHED, "\", "/"))
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.OXFCONT.ADDPICTURE(TCNAME, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH)
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.OXFCONT.ADDRECTANGLE(TCNAME, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET)
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
LOCAL LINESCOUNT, AA, BB, CC, IIII, LNXFROM, LNXTO, LNPOMWIDTH, LNLF, LLLNKSENT, LCNAME, LNORIGINALWIDTH
LNORIGINALWIDTH = TNWIDTH
WITH THIS.OXFCONT.ACTIVESHEET
IF TCTYPE="L"
TNWIDTH = TNWIDTH+(17500.0/9)
LNCURRENTLINEWIDTH = TNWIDTH+(17500.0/9)
TNWIDTH = 3*TNWIDTH
ELSE
LNCURRENTLINEWIDTH = TNWIDTH
ENDIF
LINESCOUNT = IIF(ISNULL(_X____11334) .OR. EMPTY(_X____11334), 0, _X_WW(_X____11334, TCFONT, TNFONTSIZE, IIF(TLITALICS, 1, 0), IIF(TLBOLD, 1, 0), TNWIDTH/10, @__XFRET, IIF(TCALIGN="right", 1, 0), THIS.OTXTBOX.NCODEPAGE))
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
THIS.OXFCONT.OTXTBOX = THIS.OTXTBOX
FOR IIII = 1 TO LINESCOUNT
IF IIII>1 .AND. (AA*IIII+(BB)*(IIII-1)>TNHEIGHT+M.IIII*90)
EXIT
ENDIF
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
LNPOMWIDTH = MAX(LNCURRENTLINEWIDTH, 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4))+(17500.0/9))
LNLF = TNLEFT
LNTOMTOPPOS = TNTOP+(AA+BB)*(IIII-1)
LCNAME = IIF(IIII=1, TCNAME, TCNAME+"_"+ALLTRIM(STR(M.IIII)))
IF TCALIGN="right"
LNLF = TNLEFT-(LNPOMWIDTH-LNORIGINALWIDTH)
ENDIF
IF TCALIGN="center"
LNLF = TNLEFT-(LNPOMWIDTH-LNORIGINALWIDTH)/2
ENDIF
THIS.OXFCONT.ADDTEXTBOX(LCNAME, SUBSTR(_X____11334, LNXFROM, LNXTO-LNXFROM+1), TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, LNLF, LNTOMTOPPOS, LNPOMWIDTH, AA+BB, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, IIII)
LLLNKSENT = .T.
STORE "" TO TCLINKNAME, TCLINKHREF, TCOUTLINE
ENDFOR
IF  .NOT. LLLNKSENT .AND. ( .NOT. EMPTY(TCLINKNAME) .OR.  .NOT. EMPTY(TCLINKHREF) .OR.  .NOT. EMPTY(TCOUTLINE))
THIS.OXFCONT.ADDTEXTBOX(TCNAME, "", TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, LNTOP, TNWIDTH, TNHEIGHT, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, 1)
ENDIF
THIS.OXFCONT.OTXTBOX = .NULL.
ENDWITH
ENDPROC
**
ENDDEFINE
**
FUNCTION toInch
LPARAMETERS VALUE
RETURN STRTRAN(ALLTRIM(STR(M.VALUE/10000, 15, 4)), SET("Point"), ".")+"in"
ENDFUNC
**
FUNCTION __str
LPARAMETERS TA, TB, TC
RETURN ALLTRIM(IIF(EMPTY(M.TB), STR(M.TA), IIF(EMPTY(M.TC), STR(M.TA, M.TB), STRTRAN(STR(M.TA, M.TB, M.TC), SET("Point"), "."))))
ENDFUNC
**
FUNCTION __val
LPARAMETERS TA
RETURN VAL(STRTRAN(TA, SET("Point"), "."))
ENDFUNC
**
PROCEDURE __C2RGB
LPARAMETERS LICOLOR, LACOLOR
LOCAL LCPOM
IF LICOLOR=-1
STORE -1 TO LACOLOR
ELSE
LCPOM = RIGHT(TRANSFORM(LICOLOR, "@0"), 6)
LACOLOR(1) = VAL("0x"+RIGHT(LCPOM, 2))
LACOLOR(2) = VAL("0x"+SUBSTR(LCPOM, 3, 2))
LACOLOR(3) = VAL("0x"+LEFT(LCPOM, 2))
ENDIF
ENDPROC
**
FUNCTION __XF_htq
LPARAMETERS _X____11334
_X____11334 = STRTRAN(TRIM(_X____11334),"  ","&nbsp; ")
_X____11334 = STRTRAN(TRIM(_X____11334),"  ","&nbsp; ")
_X____11334 = STRTRAN(_X____11334,"<","&lt;")
_X____11334 = STRTRAN(_X____11334,">","&gt;")
_X____11334 = STRTRAN(_X____11334, CHR(10))
_X____11334 = STRTRAN(_X____11334,CHR(13)+CHR(13),CHR(13)+"&nbsp;"+CHR(13))
_X____11334 = STRTRAN(_X____11334,CHR(13)+CHR(13),CHR(13)+"&nbsp;"+CHR(13))
_X____11334 = STRTRAN(_X____11334,CHR(13)+" ",CHR(13)+"&nbsp;")
IF LEFT(_X____11334, 1)=CHR(13)
_X____11334= "&nbsp;"+CHR(13)+SUBSTR(_X____11334,2)
ENDIF
RETURN _X____11334
ENDFUNC
**
DEFINE CLASS XFFWriter AS DocumentWriter
DEFAULTPICTUREFORMAT = "jpg"
PICTUREDPI = 0
LCNTMODE = .F.
REPORTID = 0
CURRENTPAGE = 0
PAGECOUNT = 0
PAGEWIDTH = 85000
PAGEHEIGHT = 110000
NCOUNTER = 0
NFONTSIZE = 10
CFONTNAME = "Arial"
LBOLD = .F.
LITALICS = .F.
LUNDERLINE = .F.
NX = 0
NY = 0
NFR = 0
NFG = 0
NFB = 0
NBR = 255
NBG = 255
NBB = 255
OXFCONT = .NULL.
OXFRXSESSION = .NULL.
CXFFALIAS = ""
CLINKSALIAS = ""
CFILENAME = ""
CJPGID = ""
NOBJECTNO = 0
NXOFFSET = 0
NYOFFSET = 0
CUNIT = "PT"
OBOUNDINGRECTANGLE = .NULL.
LRESETCURRENTREPORTPAGEONENDPAGE = .F.
NDPIFACTOR = 1
**
PROCEDURE CopyXFF
LPARAMETERS TCTARGETFILENAME
SELECT (THIS.CXFFALIAS)
COPY TO (TCTARGETFILENAME)
ENDPROC
**
PROCEDURE addPage
LPARAMETERS TNWIDTH, TNHEIGHT, TNORIENTATION
LOCAL LCTYPE
LCTYPE = TYPE("tnWidth")
IF EMPTY(M.TNWIDTH) .OR.  .NOT. INLIST(M.LCTYPE, "C", "N")
TNWIDTH = THIS.PAGEWIDTH
TNHEIGHT = THIS.PAGEHEIGHT
ELSE
IF LCTYPE="C"
DO CASE
CASE ALLTRIM(UPPER(M.TNWIDTH))="A4"
TNWIDTH = 82677
TNHEIGHT = 116929
OTHERWISE
TNWIDTH = 85000
TNHEIGHT = 110000
ENDCASE
ELSE
TNWIDTH = THIS.CONVERTUNIT(M.TNWIDTH)
TNHEIGHT = THIS.CONVERTUNIT(M.TNHEIGHT)
ENDIF
ENDIF
THIS.NEWPAGE(M.TNHEIGHT, M.TNWIDTH, THIS.PAGECOUNT+1, TNORIENTATION)
ENDPROC
**
PROCEDURE drawLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNLINEWIDTH, TNPENPATTERN
IF VARTYPE(TNLINEWIDTH)="L"
TNLINEWIDTH = 1
ENDIF
IF VARTYPE(TNPENPATTERN)="L"
TNPENPATTERN = 8
ENDIF
THIS.ADDLINE(THIS.CONVERTUNIT(TNLEFT)+THIS.NXOFFSET, THIS.CONVERTUNIT(TNTOP)+THIS.NYOFFSET, THIS.CONVERTUNIT(TNLTO)+THIS.NXOFFSET, THIS.CONVERTUNIT(TNTTO)+THIS.NYOFFSET, TNLINEWIDTH*THIS.NDPIFACTOR, TNPENPATTERN, THIS.NFR, THIS.NFG, THIS.NFB, "")
ENDPROC
**
PROCEDURE drawPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCFILENAME, TNADJTYPE
IF EMPTY(TNADJTYPE)
TNADJTYPE = 0
ENDIF
THIS.ADDPICTURE(THIS.CONVERTUNIT(TNLEFT)+THIS.NXOFFSET, THIS.CONVERTUNIT(TNTOP)+THIS.NYOFFSET, THIS.CONVERTUNIT(TNWIDTH), THIS.CONVERTUNIT(TNHEIGHT), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, TCFILENAME, "", TNADJTYPE, 0)
ENDPROC
**
PROCEDURE outText
LPARAMETERS _X____11334, TNROTATE, TCLINKNAME, TCLINKREF, TCBOOKMARK, TCTOOLTIP
THIS.DRAWTEXT(_X____11334, TNROTATE, TCLINKNAME, TCLINKREF, TCBOOKMARK, TCTOOLTIP)
ENDPROC
**
PROCEDURE drawText
LPARAMETERS TNLEFT, TNTOP, _X____11334, TNROTATE, TCLINKNAME, TCLINKREF, TCBOOKMARK, TCTOOLTIP
WITH THIS
IF TYPE("tnLeft")="C"
TNTOOPTIP = TCLINKREF
TCBOOKMARK = TCLINKNAME
TCLINKREF = TNROTATE
TCLINKNAME = _X____11334
TNROTATE = TNTOP
_X____11334 = TNLEFT
ELSE
.SETPOS(TNLEFT, TNTOP)
ENDIF
IF EMPTY(TCLINKNAME)
TCLINKNAME = ""
ENDIF
IF EMPTY(TCLINKREF)
TCLINKREF = ""
ENDIF
IF EMPTY(TCBOOKMARK)
TCBOOKMARK = ""
ENDIF
IF EMPTY(TCTOOLTIP)
TCTOOLTIP = ""
ENDIF
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
RETURN
ENDIF
IF EMPTY(TNROTATE)
TNROTATE = 0
ENDIF
LOCAL LNPOMWIDTH, LINESCOUNT, AA, BB, CC, IIII, LNCURRENTLINEWIDTH, LNMAXWIDTH, LNCURRENTHEIGHT
LNPOMWIDTH = 9999999
LINESCOUNT = _X_WW(_X____11334, .CFONTNAME, .NFONTSIZE, IIF(.LITALICS, 1, 0), IIF(.LBOLD, 1, 0), LNPOMWIDTH/10, @__XFRET, IIF("left"="right", 1, 0), THIS.OTXTBOX.NCODEPAGE)
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
IF LINESCOUNT<1
RETURN
ENDIF
LNCURRENTLINEWIDTH = 0
LNCURRENTHEIGHT = 0
LNMAXWIDTH = 0
FOR IIII = 1 TO LINESCOUNT
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
LNCURRENTLINEWIDTH = 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4))*.NDPIFACTOR
LNMAXWIDTH = MAX(LNCURRENTLINEWIDTH, LNMAXWIDTH)
LNCURRENTHEIGHT = (AA*IIII+(BB)*(IIII-1))*.NDPIFACTOR
ENDFOR
.SENDTEXTBOXPARAMETERS(.NULL., "", .F., .F., TNROTATE)
.ADDTEXTBOX(_X____11334, .CFONTNAME, .NFONTSIZE*.NDPIFACTOR, .LBOLD, .LITALICS, .NX+THIS.NXOFFSET, .NY+THIS.NYOFFSET, LNMAXWIDTH, LNCURRENTHEIGHT, "L", .NFR, .NFG, .NFB, 1, .NBR, .NBG, .NBB, "left", .LUNDERLINE, "", TCLINKNAME, TCLINKREF, TCBOOKMARK, 0, TCTOOLTIP, "")
IF TNROTATE=0
.NX = .NX+LNCURRENTLINEWIDTH
.NY = .NY+(LINESCOUNT-1)*(AA+BB)
ELSE
.NX = .NX+LNCURRENTLINEWIDTH*COS(DTOR(TNROTATE))
.NY = .NY-LNCURRENTLINEWIDTH*SIN(DTOR(TNROTATE))
.NX = .NX+((LINESCOUNT-1)*(AA+BB))*COS(DTOR(90-TNROTATE))
.NY = .NY+((LINESCOUNT-1)*(AA+BB))*SIN(DTOR(90-TNROTATE))
ENDIF
ENDWITH
RETURN
ENDPROC
**
FUNCTION DrawTextBox
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, _X____11334, TNALIGN, TNVALIGN, TNROTATE, TNROTATIONPOINT, TCLINKNAME, TCLINKREF, TCBOOKMARK, TCTOOLTIP
WITH THIS
IF EMPTY(TCLINKNAME)
TCLINKNAME = ""
ENDIF
IF EMPTY(TCLINKREF)
TCLINKREF = ""
ENDIF
IF EMPTY(TCBOOKMARK)
TCBOOKMARK = ""
ENDIF
IF EMPTY(TCTOOLTIP)
TCTOOLTIP = ""
ENDIF
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
RETURN
ENDIF
IF EMPTY(TNROTATE)
TNROTATE = 0
ENDIF
IF EMPTY(TNVALIGN)
TNVALIGN = 0
ENDIF
IF EMPTY(TNROTATIONPOINT)
TNROTATIONPOINT = 0
ENDIF
LOCAL TOPOFFSET
TOPOFFSET = 0
IF EMPTY(TNHEIGHT) .OR. TNVALIGN<>0
LOCAL LNPOMWIDTH, LINESCOUNT, AA, BB, CC, IIII, LNCURRENTLINEWIDTH, LNMAXWIDTH, LNCURRENTHEIGHT
LINESCOUNT = _X_WW(_X____11334, .CFONTNAME, .NFONTSIZE, IIF(.LITALICS, 1, 0), IIF(.LBOLD, 1, 0), .CONVERTUNIT(TNWIDTH)/.NDPIFACTOR/10, @__XFRET, IIF("left"="right", 1, 0), THIS.OTXTBOX.NCODEPAGE)
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
IF LINESCOUNT<1
RETURN
ENDIF
LNCURRENTHEIGHT = 0
LNCURRENTHEIGHT = (AA*LINESCOUNT+(BB)*(LINESCOUNT-1))*.NDPIFACTOR
IF EMPTY(TNHEIGHT)
TNVALIGN = 0
ELSE
TNHEIGHT = .CONVERTUNIT(TNHEIGHT)
IF LNCURRENTHEIGHT>TNHEIGHT
LNCURRENTHEIGHT = TNHEIGHT
TNVALIGN = 0
ELSE
IF TNVALIGN=1
TOPOFFSET = (TNHEIGHT-LNCURRENTHEIGHT)/2
ELSE
TOPOFFSET = (TNHEIGHT-LNCURRENTHEIGHT)
ENDIF
ENDIF
ENDIF
ELSE
LNCURRENTHEIGHT = .CONVERTUNIT(TNHEIGHT)
ENDIF
.SENDTEXTBOXPARAMETERS(.NULL., "", .F., .F., TNROTATE, TNROTATIONPOINT)
.ADDTEXTBOX(_X____11334, .CFONTNAME, .NFONTSIZE*.NDPIFACTOR, .LBOLD, .LITALICS, .CONVERTUNIT(TNLEFT)+THIS.NXOFFSET, .CONVERTUNIT(TNTOP)+THIS.NYOFFSET+TOPOFFSET, .CONVERTUNIT(TNWIDTH), LNCURRENTHEIGHT, "T", .NFR, .NFG, .NFB, 1, .NBR, .NBG, .NBB, IIF(EMPTY(TNALIGN), "left", IIF(TNALIGN=1, "center", "right")), .LUNDERLINE, "", TCLINKNAME, TCLINKREF, TCBOOKMARK, 0, TCTOOLTIP, "")
RETURN .CONVERTTOUNIT(LNCURRENTHEIGHT)
ENDWITH
ENDFUNC
**
PROCEDURE setFont
LPARAMETERS TCFONTNAME, TNSIZE, TLBOLD, TLITALIC, TLUNDERLINE
WITH THIS
.NFONTSIZE = M.TNSIZE
.CFONTNAME = M.TCFONTNAME
.LBOLD = M.TLBOLD
.LITALICS = M.TLITALIC
.LUNDERLINE = M.TLUNDERLINE
ENDWITH
ENDPROC
**
PROCEDURE setPos
LPARAMETERS TNX, TNY
THIS.NX = THIS.CONVERTUNIT(TNX)
THIS.NY = THIS.CONVERTUNIT(TNY)
ENDPROC
**
FUNCTION getPageWidth
RETURN THIS.CONVERTTOUNIT(THIS.PAGEWIDTH)
ENDFUNC
**
FUNCTION getPageHeight
RETURN THIS.CONVERTTOUNIT(THIS.PAGEHEIGHT)
ENDFUNC
**
FUNCTION getXPos
RETURN THIS.CONVERTTOUNIT(THIS.NX)
ENDFUNC
**
FUNCTION getYPos
RETURN THIS.CONVERTTOUNIT(THIS.NY)
ENDFUNC
**
FUNCTION getBoundingRectangle
IF ISNULL(THIS.OBOUNDINGRECTANGLE)
RETURN .NULL.
ENDIF
LOCAL LORECTANGLE
LORECTANGLE = CREATEOBJECT("bbox")
LORECTANGLE.NLEFT = THIS.CONVERTTOUNIT((THIS.OBOUNDINGRECTANGLE.NLEFT)*THIS.NDPIFACTOR)
LORECTANGLE.NTOP = THIS.CONVERTTOUNIT((THIS.OBOUNDINGRECTANGLE.NTOP)*THIS.NDPIFACTOR)
LORECTANGLE.NHEIGHT = THIS.CONVERTTOUNIT((THIS.OBOUNDINGRECTANGLE.NHEIGHT-150)*THIS.NDPIFACTOR)
LORECTANGLE.NWIDTH = THIS.CONVERTTOUNIT((THIS.OBOUNDINGRECTANGLE.NWIDTH-150)*THIS.NDPIFACTOR)
RETURN LORECTANGLE
ENDFUNC
**
PROCEDURE drawRectangle
LPARAMETERS TNXPOS, TNYPOS, TNWIDTH, TNHEIGHT, TNLINEWIDTH, TNFILL, TNPENPATTERN, TNROUNDFACTOR
IF VARTYPE(TNLINEWIDTH)="L"
TNLINEWIDTH = 1
ENDIF
IF VARTYPE(TNFILL)="L"
IF THIS.NBR<0 .OR. (THIS.NBR=255 .AND. THIS.NBG=255 .AND. THIS.NBB=255)
TNFILL = 0
ELSE
TNFILL = 1
ENDIF
ENDIF
IF VARTYPE(TNPENPATTERN)="L"
TNPENPATTERN = 8
ENDIF
IF VARTYPE(TNROUNDFACTOR)="L"
TNROUNDFACTOR = 0
ENDIF
THIS.ADDRECTANGLE(THIS.CONVERTUNIT(TNXPOS)+THIS.NXOFFSET, THIS.CONVERTUNIT(TNYPOS)+THIS.NYOFFSET, THIS.CONVERTUNIT(TNWIDTH), THIS.CONVERTUNIT(TNHEIGHT), TNLINEWIDTH, TNFILL, THIS.NBR, THIS.NBG, THIS.NBB, TNPENPATTERN, THIS.NFR, THIS.NFG, THIS.NFB, TNROUNDFACTOR, "myname", -1, 0)
ENDPROC
**
PROCEDURE setColor
LPARAMETERS TFR, TFG, TFB, TBR, TBG, TBB
WITH THIS
.NFR = M.TFR
.NFG = M.TFG
.NFB = M.TFB
IF PARAMETERS()<6
RETURN
ENDIF
.NBR = M.TBR
.NBG = M.TBG
.NBB = M.TBB
ENDWITH
ENDPROC
**
PROCEDURE setForeColor
LPARAMETERS TFR, TFG, TFB
WITH THIS
.NFR = M.TFR
.NFG = M.TFG
.NFB = M.TFB
ENDWITH
RETURN
ENDPROC
**
PROCEDURE setBackColor
LPARAMETERS TBR, TBG, TBB
WITH THIS
.NBR = M.TBR
.NBG = M.TBG
.NBB = M.TBB
ENDWITH
RETURN
ENDPROC
**
PROCEDURE setUnit
LPARAMETERS TCUNIT
IF INLIST(UPPER(TCUNIT), "IN", "CM", "PT", "PX")
THIS.CUNIT = UPPER(M.TCUNIT)
ENDIF
ENDPROC
**
FUNCTION convertUnit
LPARAMETERS TNVALUE
DO CASE
CASE THIS.CUNIT="IN"
RETURN THIS.NDPIFACTOR*TNVALUE*10000
CASE THIS.CUNIT="CM"
RETURN THIS.NDPIFACTOR*TNVALUE*10000/2.54 
CASE THIS.CUNIT="PX"
RETURN THIS.NDPIFACTOR*TNVALUE*10000/96
OTHERWISE
RETURN THIS.NDPIFACTOR*TNVALUE*10000/72
ENDCASE
ENDFUNC
**
FUNCTION convertToUnit
LPARAMETERS TNVALUE
DO CASE
CASE THIS.CUNIT="IN"
RETURN (TNVALUE/THIS.NDPIFACTOR)/10000
CASE THIS.CUNIT="CM"
RETURN (TNVALUE/THIS.NDPIFACTOR)/(500000.0/127)
CASE THIS.CUNIT="PX"
RETURN (TNVALUE/THIS.NDPIFACTOR)/(625.0/6)
OTHERWISE
RETURN (TNVALUE/THIS.NDPIFACTOR)/(1250.0/9)
ENDCASE
ENDFUNC
**
PROCEDURE Init
PUBLIC __XFRET
__XFRET = SPACE(65000)
DECLARE INTEGER compress2 IN zlib AS cxx STRING @, STRING @, STRING @, INTEGER, INTEGER
LOCAL LA, LB, LD
LA = "Test"
LB = SPACE(500)
LD = SPACE(500)
= CXX(@LB, @LD, @LA, LEN(LA), -1)
IF ATC("xfrxlib.fll", SET("Library"))=0
SET LIBRARY TO xfrxlib.fll ADDITIVE
ENDIF
THIS.CXFFALIAS = "X"+SUBSTR(SYS(2015), 4, 9)
THIS.CLINKSALIAS = "L"+SUBSTR(SYS(2015), 4, 9)
DECLARE INTEGER ww IN hndlib AS x_ww STRING @, STRING @, SHORT, SHORT, SHORT, SHORT, STRING @, SHORT, SHORT
DECLARE INTEGER _xfWordWrap IN xfrxlib.fll AS x_ww_gdiplus STRING @, STRING @, SHORT, SHORT, SHORT, SHORT, STRING @, SHORT, SHORT
DODEFAULT()
ENDPROC
**
PROCEDURE goTop
THIS.GOTOPAGE(1)
ENDPROC
**
PROCEDURE goBottom
THIS.GOTOPAGE(THIS.PAGECOUNT)
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
THIS.OXFCONT = TUPAR1
ENDPROC
**
FUNCTION printDocument
LPARAMETERS TCPRINTERNAME, TCJOBNAME, TNFROM, TNTO, TCDEVMODE, TNPAGESPERSHEET, TNALLEVENODD, TNCOPIES, TNUNDERLINEHYPERLINKSONPRINT
RETURN THIS.GDIPAINT("", "tiff", TNFROM, TNTO, 24, 0, 0, 0, 0, "", 1, TCPRINTERNAME, TCJOBNAME, TCDEVMODE, TNPAGESPERSHEET, TNCOPIES, TNALLEVENODD, TNUNDERLINEHYPERLINKSONPRINT)
ENDFUNC
**
FUNCTION savePicture_fast
LPARAMETERS TCFILENAME, TNPAGENO
LOCAL TNPRINTMODE, LNMULTIPAGE, TCTYPE, TNTHUMBNAILHEIGHT, TNTHUMBNAILWIDTH, TNBPP
LOCAL TCFILENAME, TCTYPE, TNFROM, TNTO, TNBPP, TNJPEGQUALITY, TNTHUMBNAILWIDTH, TNTHUMBNAILHEIGHT, TNZOOM, TCFINDSTRING, TNPRINTMODE, TCPRINTERNAME, TCJOBNAME, TCDEVMODE
LOCAL LNMULTIPAGE, LNSEL, LNRETVAL, LCXFTEMP, LLPAGERANGE, LCXFJOBNAME, LCXFPRINTERNAME, TNMODE, TNISDEVMODE
LCXFTEMP = ADDBS(SYS(2023))+"_xf.pcx"
TNPRINTMODE = 0
LNMULTIPAGE = 0
TNBPP = 24
TCTYPE = "image/bmp"
TNTHUMBNAILHEIGHT = 0
TNTHUMBNAILWIDTH = 0
LNSEL = SELECT(0)
SELECT (THIS.CXFFALIAS)
LOCAL XFLOCALE, XFCPCURRENT, XFSCALE
XFSCALE = 1000
XFLOCALE = "."+THIS.CCODEPAGE
XFCPCURRENT = CPCURRENT()
LOCAL SCREENHANDLE, LCTAG2
SCREENHANDLE = 0
LCTAG2 = ""
TNISDEVMODE = 0
SET SAFETY OFF
SET ORDER TO page
SET FILTER TO PAGE=TNPAGENO
GOTO TOP
? SECONDS()-DD
LNRETVAL = _XFBMP2()
? SECONDS()-DD
SELECT (LNSEL)
IF FILE(LCXFTEMP)
ERASE (LCXFTEMP)
ENDIF
RETURN LNRETVAL
SELECT (LNSEL)
ENDFUNC
**
FUNCTION savePicture
LPARAMETERS TCFILENAME, TCTYPE, TNFROM, TNTO, TNBPP, TNJPEGQUALITY, TNTHUMBNAILWIDTH, TNTHUMBNAILHEIGHT, TNPAGESPERSHEET, TNALLEVENODD, TNCOPIES
RETURN THIS.SAVEPICTURE_INTERNAL(TCFILENAME, TCTYPE, TNFROM, TNTO, TNBPP, TNJPEGQUALITY, TNTHUMBNAILWIDTH, TNTHUMBNAILHEIGHT,  ,  , TNPAGESPERSHEET, TNALLEVENODD, TNCOPIES)
ENDFUNC
**
FUNCTION savePicture_internal
LPARAMETERS TCFILENAME, TCTYPE, TNFROM, TNTO, TNBPP, TNJPEGQUALITY, TNTHUMBNAILWIDTH, TNTHUMBNAILHEIGHT, TNZOOM, TCFINDSTRING, TNPAGESPERSHEET, TNALLEVENODD, TNCOPIES
RETURN THIS.GDIPAINT(TCFILENAME, TCTYPE, TNFROM, TNTO, TNBPP, TNJPEGQUALITY, TNTHUMBNAILWIDTH, TNTHUMBNAILHEIGHT, TNZOOM, TCFINDSTRING, 0,  ,  ,  , TNPAGESPERSHEET, TNCOPIES, TNALLEVENODD)
ENDFUNC
**
FUNCTION GDIPaint
LPARAMETERS TCFILENAME, TCTYPE, TNFROM, TNTO, TNBPP, TNJPEGQUALITY, TNTHUMBNAILWIDTH, TNTHUMBNAILHEIGHT, TNZOOM, TCFINDSTRING, TNPRINTMODE, TCPRINTERNAME, TCJOBNAME, TCDEVMODE, TNPAGESPERSHEET, TNCOPIES, TNALLEVENODD, TNUNDERLINEHYPERLINKSONPRINT
IF ATC("xfrxlib.fll", SET("Library"))=0
SET LIBRARY TO xfrxlib.fll ADDITIVE
ENDIF
LOCAL LNMULTIPAGE, LNSEL, LNRETVAL, LCXFTEMP, LLPAGERANGE, LCXFJOBNAME, LCXFPRINTERNAME, TNMODE, TNISDEVMODE, LNPEMFMODE, XFORIENTATION
TNMODE = 0
IF EMPTY(TNFROM)
TNFROM = 1
ENDIF
IF EMPTY(TNTO)
TNTO = THIS.PAGECOUNT
ENDIF
IF EMPTY(TNPAGESPERSHEET)
TNPAGESPERSHEET = 1
ENDIF
IF EMPTY(TNCOPIES)
TNCOPIES = 1
ENDIF
IF EMPTY(TNALLEVENODD)
TNALLEVENODD = 1
ENDIF
IF TNPRINTMODE=1
LCXFPRINTERNAME = TCPRINTERNAME
LCXFJOBNAME = TCJOBNAME
ENDIF
IF  .NOT. EMPTY(THIS.CTEMPDIR)
LCXFTEMP = ADDBS(THIS.CTEMPDIR)+"_xf.pcx"
ELSE
LCXFTEMP = ADDBS(SYS(2023))+"_xf.pcx"
ENDIF
TCTYPE = LOWER(ALLTRIM(TCTYPE))
IF TCTYPE=="jpg"
TCTYPE = "jpeg"
ENDIF
IF TCTYPE=="tif"
TCTYPE = "tiff"
ENDIF
IF TCTYPE="p_emf"
LNPEMFMODE = 1
TCTYPE = "bmp"
ELSE
LNPEMFMODE = 0
ENDIF
IF TCTYPE="f_emf"
LNPEMFMODE = 2
TCTYPE = "bmp"
ENDIF
IF  .NOT. INLIST(TCTYPE, "bmp", "png", "jpeg", "gif", "tiff", "emf")
RETURN -1
ENDIF
IF TCTYPE<>"tiff"
LNMULTIPAGE = .F.
ELSE
LNMULTIPAGE = .T.
ENDIF
IF TYPE("tnBpp")<>"N"
TNBPP = 24
ENDIF
IF EMPTY(TNTHUMBNAILHEIGHT)
TNTHUMBNAILHEIGHT = 0
ENDIF
IF EMPTY(TNTHUMBNAILWIDTH)
TNTHUMBNAILWIDTH = 0
ENDIF
LNMULTIPAGE = IIF(LNMULTIPAGE, 1, 0)
LLPAGERANGE = TYPE("tnFrom")="C"
TCTYPE = "image/"+TCTYPE
LNSEL = SELECT(0)
LOCAL NINDEX
NINDEX = 1
IF LLPAGERANGE
SELECT INC(@NINDEX) AS IND, *, RESERVED2 AS FOUND FROM (THIS.CXFFALIAS) WHERE _PAGENOCHECK(PAGE, TNFROM) AND IIF(TNALLEVENODD=2, MOD(PAGE, 2)=1, IIF(TNALLEVENODD=3, MOD(PAGE, 2)=0, .T.)) INTO CURSOR xffpx
ELSE
IF TYPE("tnto")="N"
SELECT INC(@NINDEX) AS IND, *, RESERVED2 AS FOUND FROM (THIS.CXFFALIAS) WHERE PAGE>=TNFROM AND PAGE<=TNTO AND IIF(TNALLEVENODD=2, MOD(PAGE, 2)=1, IIF(TNALLEVENODD=3, MOD(PAGE, 2)=0, .T.)) INTO CURSOR xffpx READWRITE
ELSE
SELECT INC(@NINDEX) AS IND, *, RESERVED2 AS FOUND FROM (THIS.CXFFALIAS) WHERE PAGE>=TNFROM AND IIF(TNALLEVENODD=2, MOD(PAGE, 2)=1, IIF(TNALLEVENODD=3, MOD(PAGE, 2)=0, .T.)) INTO CURSOR xffpx READWRITE
ENDIF
ENDIF
SET NULL ON
CREATE CURSOR xffp (IND I, FOUND M, REPORTID I, UNIQUEID C (10), PAGE I, RCTYPE C (1), ORDER I, DATA1 M NOCPTRANS, TEXT M, FONT M, FONTSIZE I, BOLD L, ITALICS L, EMBED N (1), OFFSET I, PENSIZE N (9, 3), LEFT N (9, 3), TOP N (9, 3), WIDTH N (9, 3), HEIGHT N (9, 3), TYPE C (3), PENPAT I, FILLPAT I, PENRED I, PENGREEN I, PENBLUE I, MODE I, FILLRED I, FILLGREEN I, FILLBLUE I, ALIGN C (1), UNDERLINE L, STRIKED L, LINKNAME M, LINKHREF M, OUTLINE M, OUTLINEST N (1), TOOLTIP M, LAYER I, SIGNATURE M NOCPTRANS, USER C (10), RESERVED1 M, RESERVED2 M, ROTATE I, NAME C (12), ID I, OLEFT I, OTOP I, OHEIGHT I, HLINK I, PROCESSED L, CP I)
APPEND FROM DBF("xffpx")
USE IN XFFPX
SELECT XFFP
IF  .NOT. EMPTY(TCFINDSTRING)
LOCAL LNOCCURENCE, LNPOS, LCFOUND
LOCATE ALL FOR ATC(TCFINDSTRING, TEXT)>0
DO WHILE FOUND()
LCFOUND = ""
LNOCCURENCE = 0
LNPOS = ATC(TCFINDSTRING, TEXT)
DO WHILE LNPOS>0
LCFOUND = LCFOUND+ALLTRIM(STR(LNPOS))+":"+ALLTRIM(STR(LEN(TCFINDSTRING)))+","
LNOCCURENCE = LNOCCURENCE+1
LNPOS = ATC(TCFINDSTRING, TEXT, LNOCCURENCE+1)
ENDDO
IF LNOCCURENCE>0
REPLACE FOUND WITH ALLTRIM(STR(LNOCCURENCE))+"#"+LCFOUND
ENDIF
CONTINUE
ENDDO
ELSE
REPLACE FOUND WITH "" ALL
ENDIF
IF TYPE("tnUnderlineHyperlinksOnPrint")<>"N"
TNUNDERLINEHYPERLINKSONPRINT = 2
ENDIF
DO CASE
CASE TNUNDERLINEHYPERLINKSONPRINT=2
REPLACE HLINK WITH IIF(UPPER(LEFT(LINKHREF, 8))="VFPDO:\\" .OR. UPPER(LEFT(LINKHREF, 8))="VFPEV:\\", 2, 1) ALL FOR  .NOT. EMPTY(LINKHREF)
CASE TNUNDERLINEHYPERLINKSONPRINT=0
CASE TNUNDERLINEHYPERLINKSONPRINT=1
REPLACE HLINK WITH IIF(UPPER(LEFT(LINKHREF, 8))="VFPDO:\\" .OR. UPPER(LEFT(LINKHREF, 8))="VFPEV:\\", 0, 1) ALL FOR  .NOT. EMPTY(LINKHREF)
ENDCASE
LOCAL LCTEXT, LINESCOUNT, AA, BB, CC, IIII, LNXFROM, LXXTO, LNRECNO, LORECORD, LLXFRETINITIALIZED
IF TYPE("__XFRet")<>"C"
PUBLIC __XFRET
__XFRET = SPACE(65000)
LLXFRETINITIALIZED = .T.
ENDIF
IF LLXFRETINITIALIZED
RELEASE __XFRET
ENDIF
INDEX ON PAGE*100000+IND TAG IND ADDITIVE FOR  .NOT. DELETED()
SET ORDER TO ind
GOTO TOP
IF  .NOT. EOF()
GOTO TOP
LOCAL XFLOCALE, XFCPCURRENT, XFSCALE, XFCURRENTAREA
XFSCALE = 1000
IF TYPE("tnThumbnailWidth")="C"
DO CASE
CASE UPPER(TNTHUMBNAILWIDTH)="DPI"
XFSCALE = 1000*(TNTHUMBNAILHEIGHT/96)
CASE UPPER(TNTHUMBNAILWIDTH)="ZOOM"
XFSCALE = 10*TNTHUMBNAILHEIGHT
ENDCASE
TNTHUMBNAILHEIGHT = 0
TNTHUMBNAILWIDTH = 0
ENDIF
XFORIENTATION = 1
LOCATE ALL FOR RCTYPE="P"
IF FOUND()
IF  .NOT. EMPTY(TNZOOM)
TNTHUMBNAILWIDTH = (XFFP.WIDTH*96/10000)*TNZOOM/100
ENDIF
DO CASE
CASE OFFSET=0
XFORIENTATION = IIF(WIDTH>HEIGHT, 2, 1)
OTHERWISE
XFORIENTATION = OFFSET
ENDCASE
ENDIF
GOTO TOP
XFLOCALE = "."+THIS.CCODEPAGE
XFCPCURRENT = CPCURRENT()
LOCAL SCREENHANDLE, LCTAG2
SCREENHANDLE = 0
IF EMPTY(TCDEVMODE)
LCTAG2 = ""
TNISDEVMODE = 0
ELSE
LCTAG2 = TCDEVMODE
TNISDEVMODE = 1
ENDIF
XFCURRENTAREA = SELECT(0)
LNRETVAL = _XFBMP2()
ELSE
LNRETVAL = -2
ENDIF
USE IN XFFP
SELECT (LNSEL)
IF FILE(LCXFTEMP)
ERASE (LCXFTEMP)
ENDIF
RETURN LNRETVAL
ENDFUNC
**
PROCEDURE executeNamedScript
LPARAMETERS TCSCRIPTNAME, TCPARAMETERS
LOCAL II, LCCALLSTRING
FOR II = 1 TO THIS.OSCRIPTS.NPDFLSCRIPTS
WITH THIS.OSCRIPTS.APDFLSCRIPTS(II)
IF UPPER(ALLTRIM(.CSCRIPTMETHOD))==UPPER(ALLTRIM(TCSCRIPTNAME))
LCCALLSTRING = ".oScriptObject."+ALLTRIM(.CSCRIPTMETHOD)+"(this"+IIF(EMPTY(TCPARAMETERS), "", ","+TCPARAMETERS)+")"
&LCCALLSTRING
ENDIF
ENDWITH
ENDFOR
ENDPROC
**
PROCEDURE executeScript
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCSCRIPT, LLCONVERTTOPICTURE, TNDPIFACTOR, TCSCRIPTNAME, TCPICTURETYPE, TCPARAMETERS
IF EMPTY(TCPICTURETYPE)
TCPICTURETYPE = "jpg"
ENDIF
THIS.OBOUNDINGRECTANGLE = CREATEOBJECT("bbox")
THIS.OBOUNDINGRECTANGLE.NLEFT = TNLEFT
THIS.OBOUNDINGRECTANGLE.NTOP = TNTOP
THIS.OBOUNDINGRECTANGLE.NWIDTH = TNWIDTH
THIS.OBOUNDINGRECTANGLE.NHEIGHT = TNHEIGHT
IF  .NOT. LLCONVERTTOPICTURE
THIS.NXOFFSET = TNLEFT
THIS.NYOFFSET = TNTOP
THIS.SETPOS(0, 0)
THIS.SETUNIT("pt")
IF EMPTY(TCSCRIPTNAME)
EXECSCRIPT(TCSCRIPT, THIS)
ELSE
THIS.EXECUTENAMEDSCRIPT(TCSCRIPTNAME, TCPARAMETERS)
ENDIF
THIS.NXOFFSET = 0
THIS.NYOFFSET = 0
ELSE
LOCAL LOXFF, LCFILENAME
LCFILENAME = ADDBS(SYS(2023))+SYS(3)
LOXFF = CREATEOBJECT("XFFWriter")
LOXFF.CFILENAME = ""
LOXFF.NEWREPORT(1, CPCURRENT(), .NULL.)
IF  .NOT. EMPTY(TNDPIFACTOR)
LOXFF.NDPIFACTOR = TNDPIFACTOR
ENDIF
LOXFF.NEWPAGE(TNHEIGHT*LOXFF.NDPIFACTOR, TNWIDTH*LOXFF.NDPIFACTOR)
THIS.SETPOS(0, 0)
LOXFF.OBOUNDINGRECTANGLE = THIS.OBOUNDINGRECTANGLE
IF EMPTY(TCSCRIPTNAME)
EXECSCRIPT(TCSCRIPT, LOXFF)
ELSE
LOXFF.OSCRIPTS = THIS.OSCRIPTS
LOXFF.EXECUTENAMEDSCRIPT(TCSCRIPTNAME, TCPARAMETERS)
LOXFF.OSCRIPTS = .NULL.
ENDIF
LOXFF.SAVEPICTURE(LCFILENAME, TCPICTURETYPE, 1, 1, 24, 95)
LOXFF.OBOUNDINGRECTANGLE = .NULL.
LOXFF = .NULL.
THIS.ADDPICTURE(TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, LCFILENAME, "", 1, 0)
ERASE (LCFILENAME)
ENDIF
THIS.OBOUNDINGRECTANGLE = .NULL.
ENDPROC
**
PROCEDURE finishDocument
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE createDocument
LPARAMETERS TCNAME
USE IN SELECT(THIS.CXFFALIAS)
USE IN SELECT(THIS.CLINKSALIAS)
THIS.CXFFALIAS = "X"+SUBSTR(SYS(2015), 4, 9)
THIS.CLINKSALIAS = "L"+SUBSTR(SYS(2015), 4, 9)
THIS.CFILENAME = TCNAME
THIS.NEWREPORT(1, CPCURRENT(), .NULL.)
ENDPROC
**
PROCEDURE index
LOCAL LOSELECT, LCSAFETY
LOSELECT = CREATEOBJECT("cusSelect")
SELECT (THIS.CXFFALIAS)
IF UPPER(TAG(1))=="PAGE"
RETURN
ELSE
LCSAFETY = SET("safety")
SET SAFETY OFF
INDEX ON PAGE TAG PAGE ADDITIVE
SET SAFETY &LCSAFETY
ENDIF
ENDPROC
**
FUNCTION openDocument
LPARAMETERS TCNAME, TLCREATELINKFILE
IF  .NOT. FILE(TCNAME)
IF EMPTY(JUSTEXT(TCNAME))
TCNAME = ALLTRIM(TCNAME)+".xff"
IF  .NOT. FILE(TCNAME)
RETURN .F.
ENDIF
ELSE
RETURN .F.
ENDIF
ENDIF
LOCAL LCALIAS
LCALIAS = THIS.CXFFALIAS
USE (TCNAME) ALIAS (LCALIAS) IN 0
IF USED(LCALIAS)
GOTO BOTTOM IN (LCALIAS)
THIS.PAGECOUNT = &LCALIAS->PAGE
IF TLCREATELINKFILE
LOCAL LCLINKSFILE
LCLINKSFILE = ADDBS(JUSTPATH(FULLPATH(TCNAME)))+JUSTSTEM(TCNAME)+"L.xfl"
IF FILE(LCLINKSFILE)
USE (LCLINKSFILE) ALIAS (THIS.CLINKSALIAS) IN 0
ELSE
SELECT PAGE, LINKNAME FROM (LCALIAS) WHERE  NOT EMPTY(LINKNAME) INTO TABLE (LCLINKSFILE)
INDEX ON LEFT(LINKNAME, 40) TAG LINKNAME ADDITIVE
USE (LCLINKSFILE) ALIAS (THIS.CLINKSALIAS)
ENDIF
SELECT (LCALIAS)
ENDIF
RETURN .T.
ELSE
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION goToPage
LPARAMETERS TNPAGENO, TOREPORT
THIS.CURRENTPAGE = TNPAGENO
LOCAL SEL, LLRETVAL
SEL = SELECT(0)
LOCAL LCALIAS
LCALIAS = THIS.CXFFALIAS
SELECT (LCALIAS)
LOCATE ALL FOR RCTYPE="P" .AND. PAGE=TNPAGENO
IF FOUND()
THIS.PAGEWIDTH = WIDTH
THIS.PAGEHEIGHT = HEIGHT
ENDIF
IF TYPE("toReport")="O" .AND.  .NOT. ISNULL(TOREPORT)
TOREPORT.LNPAPERWIDTH = WIDTH
TOREPORT.LNPAPERHEIGHT = HEIGHT
IF OFFSET=0
TOREPORT.LNORIENTATION = IIF(WIDTH>HEIGHT, 1, 0)
ELSE
TOREPORT.LNORIENTATION = OFFSET-1
ENDIF
LOCATE ALL FOR RCTYPE="J" .AND. PAGE=TNPAGENO
IF FOUND()
LCLINE = MLINE(DATA1, ATCLINE("BP", DATA1))
TOREPORT.LNBOTTOMPAGEMARGIN = VAL(SUBSTR(LCLINE, 4))
LCLINE = MLINE(DATA1, ATCLINE("LP", DATA1))
TOREPORT.LNLEFTPAGEMARGIN = VAL(SUBSTR(LCLINE, 4))
LCLINE = MLINE(DATA1, ATCLINE("RP", DATA1))
TOREPORT.LNRIGHTPAGEMARGIN = VAL(SUBSTR(LCLINE, 4))
LCLINE = MLINE(DATA1, ATCLINE("TM", DATA1))
TOREPORT.LNTOPMARGIN = VAL(SUBSTR(LCLINE, 4))
LCLINE = MLINE(DATA1, ATCLINE("TS", DATA1))
TOREPORT.LNTOPMARGINSHIFT = VAL(SUBSTR(LCLINE, 4))
LCLINE = MLINE(DATA1, ATCLINE("LM", DATA1))
TOREPORT.LNLEFTMARGIN = VAL(SUBSTR(LCLINE, 4))
LCLINE = MLINE(DATA1, ATCLINE("RM", DATA1))
TOREPORT.LNRIGHTMARGIN = VAL(SUBSTR(LCLINE, 4))
LCLINE = MLINE(DATA1, ATCLINE("BM", DATA1))
TOREPORT.LNBOTTOMMARGIN = VAL(SUBSTR(LCLINE, 4))
LCLINE = MLINE(DATA1, ATCLINE("UM", DATA1))
TOREPORT.NUPPERMOST = VAL(SUBSTR(LCLINE, 4))
LLRETVAL = .T.
ENDIF
IF TOREPORT.CTARGET="HTML" .OR. TOREPORT.XFRXSESSION.NUDREDUCEHEIGHTBY>=0
TOREPORT.LNPAPERHEIGHT = TOREPORT.LNPAPERHEIGHT-IIF(TOREPORT.XFRXSESSION.NUDREDUCEHEIGHTBY=-1, 16500, TOREPORT.XFRXSESSION.NUDREDUCEHEIGHTBY)
ENDIF
IF TOREPORT.CTARGET="HTML"
TOREPORT.LNTOPMARGIN = TOREPORT.NUPPERMOST
ENDIF
ENDIF
SELECT (SEL)
RETURN LLRETVAL
ENDFUNC
**
PROCEDURE goToLastPage
THIS.CURRENTPAGE = THIS.PAGECOUNT
ENDPROC
**
PROCEDURE createTable
LPARAMETERS TCTABLENAME
LOCAL SEL
SEL = SELECT(0)
SELECT 0
LOCAL LCALIAS
LCALIAS = THIS.CXFFALIAS
IF EMPTY(TCTABLENAME)
CREATE CURSOR (THIS.CXFFALIAS) (REPORTID I, UNIQUEID C (10), PAGE I, RCTYPE C (1), ORDER I, DATA1 M NOCPTRANS, TEXT M, FONT M, FONTSIZE I, BOLD L, ITALICS L, EMBED N (1), OFFSET I, PENSIZE N (9, 3), LEFT N (9, 3), TOP N (9, 3), WIDTH N (9, 3), HEIGHT N (9, 3), TYPE C (3), PENPAT I, FILLPAT I, PENRED I, PENGREEN I, PENBLUE I, MODE I, FILLRED I, FILLGREEN I, FILLBLUE I, ALIGN C (1), UNDERLINE L, STRIKED L, LINKNAME M, LINKHREF M, OUTLINE M, OUTLINEST N (1), TOOLTIP M, LAYER I, SIGNATURE M NOCPTRANS, USER C (10), RESERVED1 M, RESERVED2 M, ROTATE I, NAME C (12), ID I, CP I)
ELSE
CREATE TABLE (TCTABLENAME) FREE (REPORTID I, UNIQUEID C (10), PAGE I, RCTYPE C (1), ORDER I, DATA1 M NOCPTRANS, TEXT M, FONT M, FONTSIZE I, BOLD L, ITALICS L, EMBED N (1), OFFSET I, PENSIZE N (9, 3), LEFT N (9, 3), TOP N (9, 3), WIDTH N (9, 3), HEIGHT N (9, 3), TYPE C (3), PENPAT I, FILLPAT I, PENRED I, PENGREEN I, PENBLUE I, MODE I, FILLRED I, FILLGREEN I, FILLBLUE I, ALIGN C (1), UNDERLINE L, STRIKED L, LINKNAME M, LINKHREF M, OUTLINE M, OUTLINEST N (1), TOOLTIP M, LAYER I, SIGNATURE M NOCPTRANS, USER C (10), RESERVED1 M, RESERVED2 M, ROTATE I, NAME C (12), ID I, CP I)
USE (TCTABLENAME) ALIAS (THIS.CXFFALIAS)
CURSORSETPROP("Buffering", 1)
ENDIF
SELECT (SEL)
ENDPROC
**
PROCEDURE appendBlank
INSERT INTO (THIS.CXFFALIAS) (REPORTID, PAGE) VALUES (THIS.REPORTID, THIS.CURRENTPAGE)
ENDPROC
**
PROCEDURE finalize
LPARAMETERS _X____11333
DODEFAULT(_X____11333)
THIS.APPENDBLANK()
REPLACE RCTYPE WITH "F" IN (THIS.CXFFALIAS)
ENDPROC
**
PROCEDURE destroy
USE IN SELECT(THIS.CXFFALIAS)
USE IN SELECT(THIS.CLINKSALIAS)
DODEFAULT()
ENDPROC
**
PROCEDURE processScripts
LPARAMETERS TNZORDER
WITH THIS
IF .NCURRENTREPORTPAGE=0
RETURN
ENDIF
LOCAL II, LCCALLSTRING, ODOCUMENT, LLPROCESS, LNPAGENUMBER, LCPAGESCOPE
FOR II = 1 TO .OSCRIPTS.NPDFLSCRIPTS
WITH .OSCRIPTS.APDFLSCRIPTS(II)
IF .NZORDER=-1
LOOP
ENDIF
IF .NZORDER=TNZORDER
LLPROCESS = .F.
DO CASE
CASE .NNUMBERINGTYPE=0
LNPAGENUMBER = THIS.CURRENTPAGE
CASE .NNUMBERINGTYPE=1
LNPAGENUMBER = THIS.NCURRENTREPORTPAGE
OTHERWISE
LNPAGENUMBER = _PAGENO
ENDCASE
LCPAGESCOPE = .CPAGESCOPE
IF "ALL"$LCPAGESCOPE .OR. "FIRST"$LCPAGESCOPE .AND. LNPAGENUMBER=1 .OR. "ODD"$LCPAGESCOPE .AND. MOD(LNPAGENUMBER, 2)=1 .OR. "EVEN"$LCPAGESCOPE .AND. MOD(LNPAGENUMBER, 2)=0
LLPROCESS = .T.
ELSE
LLPROCESS = _PAGENOCHECK(LNPAGENUMBER, .CPAGESCOPE)
ENDIF
IF LLPROCESS
LCCALLSTRING = ".oScriptObject."+ALLTRIM(.CSCRIPTMETHOD)+"(this)"
&LCCALLSTRING
ENDIF
ENDIF
ENDWITH
ENDFOR
IF THIS.LRESETCURRENTREPORTPAGEONENDPAGE
THIS.NCURRENTREPORTPAGE = 0
THIS.LRESETCURRENTREPORTPAGEONENDPAGE = .F.
ENDIF
ENDWITH
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORIENTATION
IF EMPTY(TNPAGENO)
TNPAGENO = 0
ENDIF
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO)
IF THIS.CURRENTPAGE=1
*THIS.ADDTEXTBOX("Created with XFRX, www.eqeus.com, commercial use prohibited.", "Arial", 10,  ,  , 6000, TNHEIGHT-4500, 58000, 2000, "L", 0, 0, 0, 1, 0, 0, 0, "left", .F., "x", "", "", "", 0, "", "")
ENDIF
THIS.PAGEWIDTH = TNWIDTH
THIS.PAGEHEIGHT = TNHEIGHT
THIS.CURRENTPAGE = THIS.PAGECOUNT+1
THIS.PAGECOUNT = MAX(THIS.PAGECOUNT, THIS.CURRENTPAGE)
THIS.APPENDBLANK()
REPLACE RCTYPE WITH "P", OFFSET WITH IIF(TYPE("tnOrientation")<>"N", 0, TNORIENTATION+1), ORDER WITH TNPAGENO, WIDTH WITH TNWIDTH, HEIGHT WITH TNHEIGHT IN (THIS.CXFFALIAS)
THIS.PROCESSSCRIPTS(0)
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.NEWPAGE(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
PROCEDURE eu_Render
LPARAMETERS NFRXRECNO, NLEFT, NTOP, NWIDTH, NHEIGHT, NOBJECTCONTINUATIONTYPE, CCONTENTSTOBERENDERED, GDIPLUSIMAGE, TOLISTENER, STYLES, NVALUE, NDEFAULTCODEPAGE
LOCAL LNSELECT
LNSELECT = SELECT(0)
NLEFT = M.NLEFT*10000/960+IIF(_XF_GETBUILDVERSION()<2107, 2000, 0)
NTOP = M.NTOP*10000/960+IIF(_XF_GETBUILDVERSION()<2107, 2000, 0)
NWIDTH = M.NWIDTH*10000/960
NHEIGHT = M.NHEIGHT*10000/960
DO CASE
CASE M.STYLES.OBJTYPE=8
THIS.EU_DRAWTEXTBOX(CCONTENTSTOBERENDERED, "T", M.NLEFT, M.NTOP, M.NWIDTH, M.NHEIGHT, M.STYLES, M.NVALUE, NDEFAULTCODEPAGE)
CASE M.STYLES.OBJTYPE=5
THIS.EU_DRAWTEXTBOX(CCONTENTSTOBERENDERED, "L", M.NLEFT, M.NTOP, M.NWIDTH, M.NHEIGHT, M.STYLES, .NULL., NDEFAULTCODEPAGE)
CASE M.STYLES.OBJTYPE=6
THIS.EU_DRAWLINE(NLEFT, NTOP, NWIDTH, NHEIGHT, M.STYLES)
CASE M.STYLES.OBJTYPE=7
THIS.EU_DRAWRECTANGLE(M.NLEFT, M.NTOP, M.NWIDTH, M.NHEIGHT, M.STYLES, M.NFRXRECNO, M.NOBJECTCONTINUATIONTYPE)
CASE M.STYLES.OBJTYPE=17
THIS.EU_DRAWPICTURE(M.NLEFT, M.NTOP, M.NWIDTH, M.NHEIGHT, M.STYLES, M.CCONTENTSTOBERENDERED, M.GDIPLUSIMAGE)
ENDCASE
SELECT (M.LNSELECT)
ENDPROC
**
PROCEDURE eu_DrawTextbox
LPARAMETERS LCTEXT, TCTYPE, LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, STYLES, NVALUE, NDEFAULTCODEPAGE
LOCAL CLINKNAME, CLINKHREF, COUTLINE, NOUTLINESTYLE, CTOOLTIP, CSTR, LCSTR
CLINKNAME = ""
CLINKHREF = ""
COUTLINE = ""
NOUTLINESTYLE = 0
CTOOLTIP = ""
LOCAL LA(1)
LOCAL LCSTR, LNI, LNEMBEDDING, LCXLSFORMAT, LNNUMERICVALUE, LNROTATE, LNCODEPAGE
LCXLSFORMAT = ""
LNNUMERICVALUE = .NULL.
LNROTATE = 0
IF  .NOT. EMPTY(M.STYLES.USER)
FOR LNI = 1 TO ALINES(LA, M.STYLES.USER, 05)
LCSTR = LA(LNI)
DO CASE
CASE LEFT(LCSTR, 10)=="#UR ROTATE"
CSTR = EVALUATE(SUBSTR(LCSTR, 11))
LNROTATE = CSTR
CASE LEFT(LCSTR, 11)=="#UR A NAME="
CSTR = EVALUATE(SUBSTR(LCSTR, 12))
CSTR = CHRTRANC(CSTR, CHR(13)+CHR(10)+CHR(9), "")
IF VARTYPE(CSTR)="C"
CLINKNAME = CSTR
ENDIF
CASE LEFT(LCSTR, 11)=="#UR A HREF="
CSTR = EVALUATE(SUBSTR(LCSTR, 12))
CSTR = CHRTRANC(CSTR, CHR(13)+CHR(10)+CHR(9), "")
CLINKHREF = CSTR
CASE LEFT(LCSTR, 12)=="#UR OUTLINE="
CSTR = EVALUATE(SUBSTR(LCSTR, 13))
COUTLINE = CSTR
CASE LEFT(LCSTR, 12)=="#UR TOOLTIP="
CSTR = EVALUATE(SUBSTR(LCSTR, 13))
CTOOLTIP = CSTR
CASE LEFT(LCSTR, 17)=="#UR OUTLINESTYLE="
CSTR = EVALUATE(SUBSTR(LCSTR, 18))
NOUTLINESTYLE = CSTR
CASE LEFT(LCSTR, 9)=="#UR XLSF="
LCXLSFORMAT = EVALUATE(SUBSTR(LCSTR, 10))
ENDCASE
ENDFOR
LNEMBEDDING = "#UR INCLUDEFONT"$M.STYLES.USER
IF LNEMBEDDING
IF "SUBSET"$M.STYLES.USER
LNEMBEDDING = 1
ELSE
LNEMBEDDING = 2
ENDIF
ELSE
LNEMBEDDING = 0
ENDIF
ENDIF
LNCODEPAGE = NDEFAULTCODEPAGE
IF M.STYLES.FONTCHARSET=1 .OR. M.STYLES.FONTCHARSET=0
LCTEXT = STRCONV(STRCONV(LCTEXT, 6), 2)
ELSE
LCTEXT = STRCONV(STRCONV(LCTEXT, 6, M.STYLES.FONTCHARSET, 2), 2)
LOCAL LCOUT
LCOUT = SPACE(50)
IF TRANSLATECHARSETINFO(M.STYLES.FONTCHARSET, @LCOUT, 1)>0
LNCODEPAGE = TOINT(SUBSTR(LCOUT, 5, 4))
ENDIF
ENDIF
LCTEXT = STRTRAN(LCTEXT, CHR(13)+CHR(10), CHR(13))
LCTEXT = STRTRAN(LCTEXT, CHR(10), CHR(13))
IF M.STYLES.OFFSET<>0
LCTEXT = ALLTRIM(LCTEXT)
ENDIF
IF LCXLSFORMAT="TEXT"
LCXLSFORMAT = ""
ELSE
IF VARTYPE(NVALUE)$"NFIBY"
LNNUMERICVALUE = NVALUE
ENDIF
IF EMPTY(LCXLSFORMAT) .AND.  .NOT. ISNULL(LNNUMERICVALUE)
LOCAL LCPICTUREFORMAT
LCPICTUREFORMAT = ALLTRIM(M.STYLES.PICTURE)
IF LEFT(LCPICTUREFORMAT, 1)='"'
LCPICTUREFORMAT = SUBSTR(LCPICTUREFORMAT, 2, LEN(LCPICTUREFORMAT)-2)
ENDIF
LCPICTUREFORMAT = __XFRXFIXPICTURE(LCPICTUREFORMAT)
LCXLSFORMAT = THIS.OXFRXSESSION.CONVERTXLSFORMATSTRING(LCPICTUREFORMAT, LNNUMERICVALUE)
ENDIF
ENDIF
THIS.SENDTEXTBOXPARAMETERS(LNNUMERICVALUE, LCXLSFORMAT, .F., LNEMBEDDING, LNROTATE,  , M.STYLES.FONTSTRIKETHROUGH, LNCODEPAGE)
LOCAL LCALIGN
LCALIGN = "left"
IF M.STYLES.OFFSET=2
LCALIGN = "center"
ENDIF
IF M.STYLES.OFFSET=1
LCALIGN = "right"
ENDIF
IF "@I"$M.STYLES.PICTURE
LCALIGN = "center"
ENDIF
IF "@J"$M.STYLES.PICTURE
LCALIGN = "right"
ENDIF
IF "<FJ>"$M.STYLES.USER
LCALIGN = "block"
ENDIF

*B608916,1 MMT 07/09/2009 Fix bug of invoice form prints '****' while exporting to PDF[Start]
IF TYPE("LNNUMERICVALUE") = 'N' AND '**' $ LCTEXT AND !EMPTY(LCPICTUREFORMAT)
  LCTEXT = TRANSFORM(LNNUMERICVALUE,LCPICTUREFORMAT)
  LNLEFT = LNLEFT + 10
  LNWIDTH = LNWIDTH-10
ENDIF 
IF LEN(LCTEXT) = 1
  LNLEFT = LNLEFT - 1
  LNWIDTH = LNWIDTH + 1
ENDIF 
*B608916,1 MMT 07/09/2009 Fix bug of invoice form prints '****' while exporting to PDF[End]


THIS.ADDTEXTBOX(LCTEXT, M.STYLES.FONTFACE, M.STYLES.FONTSIZE, M.STYLES.FONTBOLD, M.STYLES.FONTITALIC, LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, TCTYPE, M.STYLES.PENRED, M.STYLES.PENGREEN, M.STYLES.PENBLUE, M.STYLES.MODE, M.STYLES.FILLRED, M.STYLES.FILLGREEN, M.STYLES.FILLBLUE, LCALIGN, M.STYLES.FONTUNDERLINE, "_U"+ALLTRIM(STR(M.STYLES.FRXRECNO)), CLINKNAME, CLINKHREF, COUTLINE, NOUTLINESTYLE, CTOOLTIP, "")

ENDPROC
**
PROCEDURE eu_DrawRectangle
LPARAMETERS LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, M.STYLES, NFRXRECNO, NOBJECTCONTINUATIONTYPE
LOCAL LCSCRIPT, LLCONVERTSCRIPTTOPICTURE, LLINSCRIPTGRABMODE, LNDPIFACTOR, LNAT, LCPICTURETYPE
LCSCRIPT = ""
LCSCRIPTNAME = ""
LNDPIFACTOR = 1
LCPICTURETYPE = ""
LCPARAMETERS = ""
IF  .NOT. EMPTY(M.STYLES.USER)
FOR LNI = 1 TO ALINES(LA, M.STYLES.USER, 05)
LCSTR = LA(LNI)
DO CASE
CASE LEFT(LCSTR, 14)=="#UR SCRIPT END"
LLINSCRIPTGRABMODE = .F.
CASE LLINSCRIPTGRABMODE
LCSCRIPT = LCSCRIPT+CHR(13)+LCSTR
CASE LEFT(LCSTR, 15)=="#UR SCRIPT NAME"
LCSCRIPTNAME = GETWORD(SUBSTR(LCSTR, 16))
LCSTR = SUBSTR(LCSTR, 16+LEN(LCSCRIPTNAME))
LLCONVERTSCRIPTTOPICTURE = "PICTURE"$UPPER(LCSTR)
IF LLCONVERTSCRIPTTOPICTURE
LNDPIFACTOR = VAL(SUBSTR(LCSTR, 7+AT("PICTURE", UPPER(LCSTR))))
IF LNDPIFACTOR>0
LNDPIFACTOR = LNDPIFACTOR/96
ENDIF
LNAT = ATC("TYPE", LCSTR)
IF LNAT>0
LCPICTURETYPE = GETWORD(SUBSTR(LCSTR, LNAT+4))
ENDIF
LNAT = ATC("PARAMETERS", LCSTR)
IF LNAT>0
LCPARAMETERS = SUBSTR(LCSTR, LNAT+10)
ENDIF
ENDIF
CASE LEFT(LCSTR, 16)=="#UR SCRIPT BEGIN"
LLINSCRIPTGRABMODE = .T.
LLCONVERTSCRIPTTOPICTURE = "PICTURE"$UPPER(LCSTR)
IF LLCONVERTSCRIPTTOPICTURE
LNDPIFACTOR = VAL(SUBSTR(LCSTR, 7+AT("PICTURE", UPPER(LCSTR))))
IF LNDPIFACTOR>0
LNDPIFACTOR = LNDPIFACTOR/96
ENDIF
ENDIF
LCSCRIPT = ""
ENDCASE
ENDFOR
ENDIF
IF EMPTY(LCSCRIPT) .AND. EMPTY(LCSCRIPTNAME)
THIS.ADDRECTANGLE(LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, M.STYLES.PENSIZE, M.STYLES.FILLPAT, M.STYLES.FILLRED, M.STYLES.FILLGREEN, M.STYLES.FILLBLUE, M.STYLES.PENPAT, M.STYLES.PENRED, M.STYLES.PENGREEN, M.STYLES.PENBLUE, M.STYLES.OFFSET, "myname", M.NFRXRECNO, M.NOBJECTCONTINUATIONTYPE)
ELSE
THIS.EXECUTESCRIPT(LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, LCSCRIPT, LLCONVERTSCRIPTTOPICTURE, LNDPIFACTOR, LCSCRIPTNAME, LCPICTURETYPE, LCPARAMETERS)
ENDIF
ENDPROC
**
PROCEDURE eu_DrawLine
LPARAMETERS LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, M.STYLES
THIS.ADDLINE(LNLEFT, LNTOP, LNLEFT+LNWIDTH, LNTOP+LNHEIGHT, M.STYLES.PENSIZE, M.STYLES.PENPAT, M.STYLES.PENRED, M.STYLES.PENGREEN, M.STYLES.PENBLUE, "")
ENDPROC
**
PROCEDURE eu_DrawPicture
LPARAMETERS LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, M.STYLES, CCONTENTSTOBERENDERED, GDIPLUSIMAGE
LOCAL LLCREATEDFROMGENERAL, LCFILENAME, LCFILENAME2, LCTEMPORARYNAME, LNMAXDPI, LCPICTURETYPE, LCEXTENSION, LNI, LCSTR, CSTR, LNROTATE
LOCAL LA(1)
LNROTATE = 0
IF  .NOT. EMPTY(M.STYLES.USER)
FOR LNI = 1 TO ALINES(LA, M.STYLES.USER, 05)
LCSTR = LA(LNI)
DO CASE
CASE LEFT(LCSTR, 10)=="#UR ROTATE"
CSTR = EVALUATE(SUBSTR(LCSTR, 11))
LNROTATE = CSTR
ENDCASE
ENDFOR
ENDIF
IF M.STYLES.OFFSET<>1 .AND. FILE(CCONTENTSTOBERENDERED)
LCFILENAME = CCONTENTSTOBERENDERED
ELSE
IF  .NOT. EMPTY(THIS.PICTUREDPI)
LNMAXDPI = THIS.PICTUREDPI
ELSE
LNMAXDPI = 20000
ENDIF
IF UPPER(THIS.DEFAULTPICTUREFORMAT)="B"
LCPICTURETYPE = "image/bmp"
LCEXTENSION = "bmp"
ELSE
LCPICTURETYPE = "image/jpeg"
LCEXTENSION = "jpg"
ENDIF
LCFILENAME = FORCEPATH(SYS(2015), SYS(2023))+"."+LCEXTENSION
LLCREATEDFROMGENERAL = .T.
_XFSAVEIMAGE(GDIPLUSIMAGE, LCFILENAME, LCPICTURETYPE, INT(LNWIDTH*96/10000), INT(LNHEIGHT*96/10000), LNMAXDPI)
ENDIF
THIS.ADDPICTURE(LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, M.STYLES.PENSIZE, M.STYLES.FILLPAT, M.STYLES.FILLRED, M.STYLES.FILLGREEN, M.STYLES.FILLBLUE, M.STYLES.PENPAT, M.STYLES.PENRED, M.STYLES.PENGREEN, M.STYLES.PENBLUE, M.STYLES.OFFSET, LCFILENAME, "myname", M.STYLES.GENERAL, LLCREATEDFROMGENERAL,  ,  , LNROTATE)
IF LLCREATEDFROMGENERAL
ERASE (LCFILENAME)
ENDIF
ENDPROC
**
PROCEDURE eu_beforeReport
LPARAMETERS TOLISTENER
DECLARE INTEGER GdipSaveImageToFile IN GDIPLUS.DLL INTEGER, STRING, STRING @, INTEGER
DECLARE INTEGER CLSIDFromString IN ole32 STRING, STRING @
LCID = SPACE(20)
CLSIDFROMSTRING(STRCONV("{557CF401-1A04-11D3-9A73-0000F81EF32E}", 5), @LCID)
THIS.CJPGID = LCID
THIS.NEWREPORT(TOLISTENER.NREPORTNUMBER,  , .NULL.)
ENDPROC
**
PROCEDURE eu_afterReport
LPARAMETERS TOLISTENER
THIS.FINALIZE()
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
IF TNREPORTNO=1
IF ISNULL(TOREPORT)
THIS.CREATETABLE(THIS.CFILENAME)
ELSE
THIS.CREATETABLE(TOREPORT.XFRXSESSION.COUTPUTNAME)
ENDIF
THIS.REPORTID = 1
THIS.CURRENTPAGE = 0
ELSE
THIS.LRESETCURRENTREPORTPAGEONENDPAGE = .T.
THIS.PROCESSSCRIPTS(1)
ENDIF
LOCAL LCMEMO, LCTEXT
LCMEMO = ""
IF ISNULL(TOREPORT)
LCMEMO = LCMEMO+"TP=1950"+CHR(13)
LCMEMO = LCMEMO+"BP=2000"+CHR(13)
LCMEMO = LCMEMO+"LP=2100"+CHR(13)
LCMEMO = LCMEMO+"RP=2100"+CHR(13)
LCMEMO = LCMEMO+"TM=4000"+CHR(13)
LCMEMO = LCMEMO+"TS=0"+CHR(13)
LCMEMO = LCMEMO+"LM=2100"+CHR(13)
LCMEMO = LCMEMO+"RM=2100"+CHR(13)
LCMEMO = LCMEMO+"BM=4000"+CHR(13)
LCTEXT = "xfrxdraw"
ELSE
LCMEMO = LCMEMO+"TP="+ALLTRIM(__STR(TOREPORT.LNTOPPAGEMARGIN, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"BP="+ALLTRIM(__STR(TOREPORT.LNBOTTOMPAGEMARGIN, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"LP="+ALLTRIM(__STR(TOREPORT.LNLEFTPAGEMARGIN, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"RP="+ALLTRIM(__STR(TOREPORT.LNRIGHTPAGEMARGIN, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"TM="+ALLTRIM(__STR(TOREPORT.LNTOPMARGIN, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"TS="+ALLTRIM(__STR(TOREPORT.LNTOPMARGINSHIFT, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"LM="+ALLTRIM(__STR(TOREPORT.LNLEFTMARGIN, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"RM="+ALLTRIM(__STR(TOREPORT.LNRIGHTMARGIN, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"BM="+ALLTRIM(__STR(TOREPORT.LNBOTTOMMARGIN, 10, 3))+CHR(13)
LCMEMO = LCMEMO+"UM="+ALLTRIM(__STR(TOREPORT.NUPPERMOST, 10, 3))+CHR(13)
LCTEXT = "for clause: "+ALLTRIM(TOREPORT.CFORCLAUSE)
ENDIF
THIS.APPENDBLANK()
REPLACE RCTYPE WITH "J", DATA1 WITH LCMEMO, TEXT WITH LCTEXT, PAGE WITH THIS.CURRENTPAGE+1, ORDER WITH TNREPORTNO IN (THIS.CXFFALIAS)
ENDPROC
**
PROCEDURE endReport
THIS.APPENDBLANK()
REPLACE RCTYPE WITH "E" IN (THIS.CXFFALIAS)
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, TNADJTYPE, X0, NREALWIDTH, NREALHEIGHT, NROTATE
LOCAL LLERASETEMPORARYFILE
IF EMPTY(M.NROTATE)
NROTATE = 0
ENDIF
IF EMPTY(X0)
IF  .NOT. EMPTY(THIS.PICTUREDPI)
LOCAL LCEXTENSION, LCFILENAME2, LCTEMPORARYNAME, LCCURRENTEXT
LCCURRENTEXT = UPPER(JUSTEXT(M.TCPATH))
DO CASE
CASE LCCURRENTEXT="JPG" .OR. LCCURRENTEXT="JPEG"
LCPICTURETYPE = "image/jpeg"
LCEXTENSION = "jpg"
CASE LCCURRENTEXT="TIF"
LCPICTURETYPE = "image/tiff"
LCEXTENSION = "tif"
CASE LCCURRENTEXT="GIF"
LCPICTURETYPE = "image/gif"
LCEXTENSION = "gif"
CASE LCCURRENTEXT="PNG"
LCPICTURETYPE = "image/png"
LCEXTENSION = "png"
OTHERWISE
LCPICTURETYPE = "image/bmp"
LCEXTENSION = "bmp"
ENDCASE
LCFILENAME2 = FORCEPATH(SYS(2015), SYS(2023))+"."+LCEXTENSION
LCTEMPORARYNAME = FORCEPATH(SYS(2015), SYS(2023))
IF _XFRXPREPAREFILE(M.TCPATH, M.LCTEMPORARYNAME)
IF 1=_XFSAVEIMAGE(M.LCTEMPORARYNAME, M.LCFILENAME2, LCPICTURETYPE, INT(TNWIDTH*96/10000), INT(TNHEIGHT*96/10000), THIS.PICTUREDPI)
TCPATH = M.LCFILENAME2
LLERASETEMPORARYFILE = .T.
ENDIF
ERASE (LCTEMPORARYNAME)
ENDIF
ENDIF
ENDIF
LOCAL SEL
SEL = SELECT(0)
THIS.APPENDBLANK()
SELECT (THIS.CXFFALIAS)
THIS.NCOUNTER = THIS.NCOUNTER+1
REPLACE RCTYPE WITH "G", NAME WITH "px"+ALLTRIM(STR(THIS.NCOUNTER)), LEFT WITH TNLEFT, TOP WITH TNTOP, WIDTH WITH TNWIDTH, HEIGHT WITH TNHEIGHT, PENSIZE WITH TNPENSIZE, PENRED WITH TNPENRED, PENGREEN WITH TNPENGREEN, PENBLUE WITH TNPENBLUE, PENPAT WITH TNPENPAT, FILLPAT WITH TNFILLPAT, FILLRED WITH TNFILLRED, FILLGREEN WITH TNFILLGREEN, FILLBLUE WITH TNFILLBLUE, OFFSET WITH TNOFFSET, LAYER WITH TNADJTYPE, ROTATE WITH M.NROTATE, RESERVED1 WITH JUSTEXT(TCPATH) IN (THIS.CXFFALIAS)
IF  .NOT. FILE(TCPATH)
TCPATH = JUSTFNAME(TCPATH)
ENDIF
IF FILE(TCPATH)
APPEND MEMO DATA1 FROM (TCPATH) OVERWRITE
ENDIF
SELECT (SEL)
IF LLERASETEMPORARYFILE
ERASE (TCPATH)
ENDIF
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
IF TYPE("tnpenred")<>"N"
TNPENRED = THIS.NFR
TNPENGREEN = THIS.NFG
TNPENBLUE = THIS.NFB
ENDIF
IF EMPTY(TCNAME)
TCNAME = ""
ENDIF
THIS.APPENDBLANK()
THIS.NCOUNTER = THIS.NCOUNTER+1
REPLACE RCTYPE WITH "-", NAME WITH "rc"+ALLTRIM(STR(THIS.NCOUNTER)), LEFT WITH TNLEFT, TOP WITH TNTOP, WIDTH WITH TNLTO-TNLEFT, HEIGHT WITH TNTTO-TNTOP, PENSIZE WITH TNPENSIZE, PENRED WITH TNPENRED, PENGREEN WITH TNPENGREEN, PENBLUE WITH TNPENBLUE, PENPAT WITH TNPENPAT IN (THIS.CXFFALIAS)
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME, TNID, NOBJECTCONTINUATIONTYPE
IF EMPTY(TNID)
TNID = 0
ENDIF
LOCAL LOSELECT, LNPAGE, LLFOUND
IF  .NOT. EMPTY(NOBJECTCONTINUATIONTYPE) .AND. (NOBJECTCONTINUATIONTYPE>1)
LOSELECT = CREATEOBJECT("cusSelect")
SELECT (THIS.CXFFALIAS)
LNPAGE = PAGE
DO WHILE  .NOT. BOF() .AND. TNID<>ID .AND. PAGE==LNPAGE
SKIP -1
ENDDO
IF TNID==ID .AND. TOP<TNTOP
REPLACE HEIGHT WITH TNTOP+TNHEIGHT-TOP
LLFOUND = .T.
ENDIF
GOTO BOTTOM
ENDIF
IF  .NOT. LLFOUND
THIS.APPENDBLANK()
THIS.NCOUNTER = THIS.NCOUNTER+1
REPLACE RCTYPE WITH "R", NAME WITH "rc"+ALLTRIM(STR(THIS.NCOUNTER)), LEFT WITH TNLEFT, TOP WITH TNTOP, WIDTH WITH TNWIDTH, HEIGHT WITH TNHEIGHT, PENSIZE WITH TNPENSIZE, PENRED WITH TNPENRED, PENGREEN WITH TNPENGREEN, PENBLUE WITH TNPENBLUE, PENPAT WITH TNPENPAT, FILLPAT WITH TNFILLPAT, FILLRED WITH TNFILLRED, FILLGREEN WITH TNFILLGREEN, FILLBLUE WITH TNFILLBLUE, OFFSET WITH TNOFFSET, ID WITH TNID IN (THIS.CXFFALIAS)
ENDIF
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
THIS.NCOUNTER = THIS.NCOUNTER+1
IF  .NOT. ISNULL(_X____11334) .AND.  .NOT. EMPTY(_X____11334)
_X____11334 = STRTRAN(_X____11334, CHR(13), CHR(13)+CHR(10))
_X____11334 = STRTRAN(_X____11334, CHR(10)+CHR(10), CHR(10))
ENDIF
LOCAL LCRESERVED1, LUVALUE, LNLAYER
LUVALUE = THIS.OTXTBOX.NNUMERICVALUE
IF VARTYPE(LUVALUE)$"NFIBY"
LUVALUE = IIF(ISNULL(LUVALUE), "NULL", ALLTRIM(__STR(LUVALUE, _XFWID(), _XFDEC())))
ELSE
LUVALUE = "NULL"
ENDIF
LCRESERVED1 = THIS.OTXTBOX.CXLSFORMAT+CHR(10)+LUVALUE
LNLAYER = 0+THIS.OTXTBOX.NROTATIONPOINT*256
INSERT INTO (THIS.CXFFALIAS) (NAME, REPORTID, PAGE, RCTYPE, TEXT, LINKNAME, LINKHREF, OUTLINE, OUTLINEST, TOOLTIP, FONT, FONTSIZE, BOLD, ITALICS, EMBED, LEFT, TOP, WIDTH, HEIGHT, TYPE, PENRED, PENGREEN, PENBLUE, MODE, FILLRED, FILLGREEN, FILLBLUE, UNIQUEID, ALIGN, UNDERLINE, STRIKED, RESERVED1, ROTATE, LAYER, CP) VALUES ("tx"+ALLTRIM(STR(THIS.NCOUNTER)), THIS.REPORTID, THIS.CURRENTPAGE, TCTYPE, NVL(_X____11334, ""), TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, THIS.OTXTBOX.NEMBEDDING, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCUNIQUEID, IIF(TCALIGN="right", "R", IIF(TCALIGN="center", "C", IIF(TCALIGN="block", "B", "L"))), TLUNDERLINE, THIS.OTXTBOX.LSTRIKED, LCRESERVED1, THIS.OTXTBOX.NROTATE, M.LNLAYER, THIS.OTXTBOX.NCODEPAGE)
ENDPROC
**
PROCEDURE eu_beforeSection
LPARAMETERS TNOBJECTCODE, TNHEIGHT
THIS.APPENDBLANK()
REPLACE RCTYPE WITH "S", TOP WITH 0, HEIGHT WITH M.TNHEIGHT, ORDER WITH M.TNOBJECTCODE IN (THIS.CXFFALIAS)
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
THIS.APPENDBLANK()
LOCAL LCMEMO
DO CASE
CASE TOSECTION.INOBJECTCODE=0
LCMEMO = "Title"
CASE TOSECTION.INOBJECTCODE=1
LCMEMO = "Page Header"
CASE TOSECTION.INOBJECTCODE=2
LCMEMO = "Column Header"
CASE TOSECTION.INOBJECTCODE=3
LCMEMO = "Group Header"
CASE TOSECTION.INOBJECTCODE=4
LCMEMO = "Detail"
CASE TOSECTION.INOBJECTCODE=5
LCMEMO = "Group footer"
CASE TOSECTION.INOBJECTCODE=6
LCMEMO = "Column foter"
CASE TOSECTION.INOBJECTCODE=7
LCMEMO = "Page footer"
CASE TOSECTION.INOBJECTCODE=8
LCMEMO = "Summary"
ENDCASE
REPLACE RCTYPE WITH "S", DATA1 WITH LCMEMO, TOP WITH TNTOP, HEIGHT WITH TNSECTIONCONTENTHEIGHT, ORDER WITH TOSECTION.INOBJECTCODE IN (THIS.CXFFALIAS)
ENDPROC
**
FUNCTION fillBuffer
LPARAMETERS TOBUFFER, TCSESSIONDIR, TNMODE, TLFIRSTPAGE, TLLASTPAGE, TCSECTIONFILTER, TLINCLUDECUSTOMHYPERLINKS
LOCAL LNOBJTYPE, LLSTRETCH, LLNOREPEAT, LNPENSIZE, LNPENPAT, LNFILLPAT, LLBOTTOM, LCUNIQUEID, LNGROUP, LCCOMMENT, LCPICTUREPATH, LNHEIGHT, LNSECTIONSTART
SELECT (THIS.CXFFALIAS)
LOCAL LCFILENAME, LNHEIGHT, LNMAXBOTTOM, LNLONGESTCOLUMN, LNCURRENTCOLUMN, LNPAGEFOOTERTOP, LNRETVAL, LNSRINKHEIGHT, LLSKIPPING, LNCOLUMNFOOTERHEIGHT
LOCAL LOSHAPE
LNMAXBOTTOM = 0
LNRETVAL = 0
IF  .NOT. EMPTY(TCSECTIONFILTER)
LLSKIPPING = .T.
ENDIF
IF UPPER(TAG(1))=="PAGE"
SET ORDER TO page
GOTO TOP
SEEK THIS.CURRENTPAGE 
ELSE
GOTO TOP
LOCATE FOR PAGE=THIS.CURRENTPAGE
ENDIF
SCAN WHILE PAGE=THIS.CURRENTPAGE
DO CASE
CASE  .NOT. EMPTY(TCSECTIONFILTER) .AND. RCTYPE="S"
DO CASE
CASE TCSECTIONFILTER="header"
IF ORDER=0 .OR. ORDER=1
LLSKIPPING = .F.
ELSE
RETURN
ENDIF
CASE TCSECTIONFILTER="footer"
IF ORDER=7
LLSKIPPING = .F.
ELSE
LLSKIPPING = .T.
ENDIF
CASE TCSECTIONFILTER="detail"
IF ORDER=7 .OR. ORDER=0 .OR. ORDER=1
LLSKIPPING = .T.
ELSE
LLSKIPPING = .F.
ENDIF
ENDCASE
CASE LLSKIPPING
CASE RCTYPE="T" .OR. RCTYPE="L"
LLSTRETCH = .F.
LLFLOAT = .F.
LLNOREPEAT = .F.
LNPENSIZE = 1
LNPENPAT = 0
LNFILLPAT = 0
LLBOTTOM = .F.
LCUNIQUEID = UNIQUEID
IF EMPTY(LCUNIQUEID)
LCUNIQUEID = "_u"+ALLTRIM(STR(RECNO()))
ENDIF
LNGROUP = 0
LCCOMMENT = ""
LOSHAPE = TOBUFFER.ADDSHAPE(IIF(RCTYPE="T", 8, 6), LEFT, TOP, HEIGHT, WIDTH, STRTRAN(TEXT, CHR(10), ""), FONT, FONTSIZE, IIF(ALIGN="R", "right", IIF(ALIGN="C", "center", IIF(ALIGN="B", "block", "left"))), ITALICS, BOLD, UNDERLINE, LLSTRETCH, LLFLOAT, LLNOREPEAT, PENRED, PENGREEN, PENBLUE, LNPENSIZE, LNPENPAT, FILLRED, FILLGREEN, FILLBLUE, LNFILLPAT, MODE, LLBOTTOM, LCUNIQUEID+CHR(13)+ALLTRIM(STR(LNGROUP, 8))+CHR(13)+LCCOMMENT)
LOSHAPE.LCLINKNAME = LINKNAME
IF UPPER(LEFT(LINKHREF, 8))="VFPDO:\\" .OR. UPPER(LEFT(LINKHREF, 8))="VFPEV:\\" .AND.  .NOT. TLINCLUDECUSTOMHYPERLINKS
LOSHAPE.LCLINKHREF = ""
ELSE
LOSHAPE.LCLINKHREF = LINKHREF
ENDIF
LOSHAPE.LCOUTLINE = OUTLINE
LOSHAPE.NOUTLINESTYLE = OUTLINEST
LOSHAPE.NROTATIONPOINT = INT(LAYER/256)
LOSHAPE.CTOOLTIP = TOOLTIP
LOSHAPE.CNAME = ALLTRIM(NAME)
LOSHAPE.NROTATE = ROTATE
LOSHAPE.LSTRIKED = STRIKED
IF  .NOT. EMPTY(FIELD("cp"))
LOSHAPE.NCODEPAGE = CP
ENDIF
LNMAXBOTTOM = MAX(LNMAXBOTTOM, TOP+HEIGHT)
LNAT = AT(CHR(10), RESERVED1)
IF LNAT>0
LOSHAPE.NNUMERICVALUE = SUBSTR(RESERVED1, LNAT+1)
LOSHAPE.CXLSFORMAT = LEFT(RESERVED1, LNAT-1)
ELSE
LOSHAPE.NNUMERICVALUE = .NULL.
LOSHAPE.CXLSFORMAT = ""
ENDIF
LNRETVAL = MAX(LNRETVAL, TOP+HEIGHT)
CASE RCTYPE="R"
LCPICTUREPATH = ""
LCCOMMENT = ""
LUGENERAL = MOD(LAYER, 256)
LOSHAPE = TOBUFFER.ADDRECTANGLE(ALLTRIM(NAME), LEFT, TOP, WIDTH, HEIGHT, .F., PENRED, PENGREEN, PENBLUE, PENSIZE, PENPAT, FILLRED, FILLGREEN, FILLBLUE, FILLPAT, .F., LCPICTUREPATH, OFFSET, .F., 0, LUGENERAL,  ,  , LCCOMMENT)
LOSHAPE.NROTATE = ROTATE
CASE RCTYPE="G"
IF  .NOT. EMPTY(DATA1)
LCFILENAME = ADDBS(TCSESSIONDIR)+"pic"+ALLTRIM(STR(RECNO()))+IIF(EMPTY(RESERVED1), ".xfp", "."+RESERVED1)
ERASE (LCFILENAME)
COPY MEMO DATA1 TO (LCFILENAME)
LCPICTUREPATH = "p"+LCFILENAME
LCCOMMENT = ""
LUGENERAL = LAYER
LOSHAPE = TOBUFFER.ADDRECTANGLE(ALLTRIM(NAME), LEFT, TOP, WIDTH, HEIGHT, .F., PENRED, PENGREEN, PENBLUE, PENSIZE, PENPAT, FILLRED, FILLGREEN, FILLBLUE, FILLPAT, .F., LCPICTUREPATH, OFFSET, .F., 0, LUGENERAL,  ,  , LCCOMMENT)
LOSHAPE.NROTATE = ROTATE
ENDIF
CASE RCTYPE="-"
IF ABS(WIDTH)<=PENSIZE*10000/72+1
TOBUFFER.ADDVERTICALLINE(ALLTRIM(NAME), PENRED, PENGREEN, PENBLUE, LEFT, TOP, HEIGHT, .F., .F., PENPAT, PENSIZE, .F., 0)
ELSE
TOBUFFER.ADDHORIZONTALLINE(ALLTRIM(NAME), PENRED, PENGREEN, PENBLUE, LEFT, TOP, WIDTH, HEIGHT, .F., .F., PENPAT, PENSIZE)
ENDIF
ENDCASE
ENDSCAN
RETURN LNRETVAL
ENDFUNC
**
FUNCTION fillBufferOld
LPARAMETERS TOBUFFER, TCSESSIONDIR, TNMODE, TLFIRSTPAGE, TLLASTPAGE
LOCAL LNOBJTYPE, LLSTRETCH, LLNOREPEAT, LNPENSIZE, LNPENPAT, LNFILLPAT, LLBOTTOM, LCUNIQUEID, LNGROUP, LCCOMMENT, LCPICTUREPATH, LNHEIGHT, LNSECTIONSTART
SELECT (THIS.CXFFALIAS)
LOCAL LCFILENAME, LNHEIGHT, LNMAXBOTTOM, LNLONGESTCOLUMN, LNCURRENTCOLUMN, LNPAGEFOOTERTOP, LNRETVAL, LNSRINKHEIGHT, LLSKIPPING, LNCOLUMNFOOTERHEIGHT
LNMAXBOTTOM = 0
LNHEIGHT = 0
LNLONGESTCOLUMN = 0
LNPAGEFOOTERTOP = 0
LNSHRINKHEIGHT = 0
LNCOLUMNTOP = -1
SCAN ALL FOR PAGE=THIS.CURRENTPAGE .AND. RCTYPE="S"
DO CASE
CASE ORDER=6
LNLONGESTCOLUMN = MAX(LNLONGESTCOLUMN, LNHEIGHT)
LNPAGEFOOTERTOP = LNLONGESTCOLUMN+HEIGHT
CASE ORDER=7
IF LNLONGESTCOLUMN=0
LNPAGEFOOTERTOP = LNHEIGHT
ENDIF
OTHERWISE
DO CASE
CASE ORDER=2
IF LNCOLUMNTOP=-1
LNCOLUMNTOP = LNHEIGHT
ENDIF
LNHEIGHT = LNCOLUMNTOP+HEIGHT
OTHERWISE
LNHEIGHT = LNHEIGHT+HEIGHT
ENDCASE
ENDCASE
ENDSCAN
LNSECTIONSTART = 0
LNHEIGHT = 0
LNPREVHEIGHT = 0
LNACTUALPOS = 0
LNCOLUMNFOOTERHEIGHT = 0
LNRETVAL = 0
LOCAL LLCOLHEADER, LLCOLFOOTER, LNAT
LLCOLHEADER = .F.
LLCOLFOOTER = .F.
SCAN ALL FOR PAGE=THIS.CURRENTPAGE
DO CASE
CASE RCTYPE="S"
DO CASE
CASE ORDER=6 .AND.  .NOT. M.TLLASTPAGE
LNHEIGHT = LNLONGESTCOLUMN
CASE ORDER=7
IF M.TLLASTPAGE
LNACTUALPOS = LNPAGEFOOTERTOP
LNRETVAL = LNACTUALPOS-LNSHRINKHEIGHT+HEIGHT
ELSE
LNACTUALPOS = LNPAGEFOOTERTOP
LNRETVAL = LNACTUALPOS-LNSHRINKHEIGHT
ENDIF
OTHERWISE
LNACTUALPOS = LNACTUALPOS+LNPREVHEIGHT
ENDCASE
IF ORDER=2
LNCOLUMNSTART = LNCOLUMNTOP
LNACTUALPOS = LNCOLUMNSTART
ENDIF
LNHEIGHT = LNACTUALPOS-LNSHRINKHEIGHT
LNPREVHEIGHT = HEIGHT
IF M.TNMODE>0 .AND. (INLIST(ORDER, 6, 7) .AND.  .NOT. M.TLLASTPAGE .OR. INLIST(ORDER, 2, 1) .AND.  .NOT. M.TLFIRSTPAGE)
DO CASE
CASE ORDER=6
LNCOLUMNFOOTERHEIGHT = HEIGHT
CASE ORDER=2
IF  .NOT. LLCOLHEADER
LNSHRINKHEIGHT = LNSHRINKHEIGHT+HEIGHT
LLCOLHEADER = .T.
ENDIF
OTHERWISE
LNSHRINKHEIGHT = LNSHRINKHEIGHT+HEIGHT
ENDCASE
IF ORDER=7
LNSHRINKHEIGHT = LNSHRINKHEIGHT+LNCOLUMNFOOTERHEIGHT
ENDIF
LLSKIPPING = .T.
ELSE
LLSKIPPING = .F.
ENDIF
LNSECTIONSTART = TOP
CASE LLSKIPPING
CASE RCTYPE="T" .OR. RCTYPE="L"
LLSTRETCH = .F.
LLFLOAT = .F.
LLNOREPEAT = .F.
LNPENSIZE = 1
LNPENPAT = 0
LNFILLPAT = 0
LLBOTTOM = .F.
LCUNIQUEID = UNIQUEID
LNGROUP = 0
LCCOMMENT = ""
LOCAL LOSHAPE
LOSHAPE = TOBUFFER.ADDSHAPE(IIF(RCTYPE="T", 8, 6), LEFT, TOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), HEIGHT, WIDTH, STRTRAN(TEXT, CHR(10), ""), FONT, FONTSIZE, IIF(ALIGN="R", "right", IIF(ALIGN="C", "center", "left")), ITALICS, BOLD, UNDERLINE, LLSTRETCH, LLFLOAT, LLNOREPEAT, PENRED, PENGREEN, PENBLUE, LNPENSIZE, LNPENPAT, FILLRED, FILLGREEN, FILLBLUE, LNFILLPAT, MODE, LLBOTTOM, LCUNIQUEID+CHR(13)+ALLTRIM(STR(LNGROUP, 8))+CHR(13)+LCCOMMENT)
LOSHAPE.LCLINKNAME = LINKNAME
LOSHAPE.LCLINKHREF = LINKHREF
LOSHAPE.LCOUTLINE = OUTLINE
LOSHAPE.NOUTLINESTYLE = OUTLINEST
LOSHAPE.CTOOLTIP = TOOLTIP
LOSHAPE.CNAME = ALLTRIM(NAME)
LNMAXBOTTOM = MAX(LNMAXBOTTOM, TOP+HEIGHT)
LNAT = AT(CHR(10), RESERVED1)
IF LNAT>0
LOSHAPE.NNUMERICVALUE = SUBSTR(RESERVED1, LNAT+1)
LOSHAPE.CXLSFORMAT = LEFT(RESERVED1, LNAT-1)
ELSE
LOSHAPE.NNUMERICVALUE = .NULL.
LOSHAPE.CXLSFORMAT = ""
ENDIF
LNRETVAL = MAX(LNRETVAL, TOP+HEIGHT)
CASE RCTYPE="R"
LCPICTUREPATH = ""
LCCOMMENT = ""
LUGENERAL = LAYER
TOBUFFER.ADDRECTANGLE(ALLTRIM(NAME), LEFT, TOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), WIDTH, HEIGHT, .F., PENRED, PENGREEN, PENBLUE, PENSIZE, PENPAT, FILLRED, FILLGREEN, FILLBLUE, FILLPAT, .F., LCPICTUREPATH, OFFSET, .F., 0, LUGENERAL,  ,  , LCCOMMENT)
CASE RCTYPE="G"
IF  .NOT. EMPTY(DATA1)
LCFILENAME = ADDBS(TCSESSIONDIR)+"pic"+ALLTRIM(STR(RECNO()))+IIF(EMPTY(RESERVED1), ".xfp", "."+RESERVED1)
ERASE (LCFILENAME)
COPY MEMO DATA1 TO (LCFILENAME)
LCPICTUREPATH = "p"+LCFILENAME
LCCOMMENT = ""
LUGENERAL = LAYER
TOBUFFER.ADDRECTANGLE(ALLTRIM(NAME), LEFT, TOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), WIDTH, HEIGHT, .F., PENRED, PENGREEN, PENBLUE, PENSIZE, PENPAT, FILLRED, FILLGREEN, FILLBLUE, FILLPAT, .F., LCPICTUREPATH, OFFSET, .F., 0, LUGENERAL,  ,  , LCCOMMENT)
ENDIF
CASE RCTYPE="-"
IF HEIGHT>WIDTH
TOBUFFER.ADDVERTICALLINE(ALLTRIM(NAME), PENRED, PENGREEN, PENBLUE, LEFT, TOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), HEIGHT, .F., .F., PENPAT, PENSIZE, .F., 0)
ELSE
TOBUFFER.ADDHORIZONTALLINE(ALLTRIM(NAME), PENRED, PENGREEN, PENBLUE, LEFT, TOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), WIDTH, HEIGHT, .F., .F., PENPAT, PENSIZE)
ENDIF
ENDCASE
ENDSCAN
RETURN LNRETVAL
ENDFUNC
**
PROCEDURE initfonts
LPARAMETERS TODOC, TCTARGET, TNPAGENO
LOCAL LNEMBEDDING, LLEMBEDDING
IF  .NOT. INLIST(TCTARGET, "PDF", "HTML")
RETURN
ENDIF
SELECT (THIS.CXFFALIAS)
LLEMBEDDING =  .NOT. EMPTY(FIELD("embed"))
IF  .NOT. EMPTY(TNPAGENO)
SCAN ALL FOR PAGE=M.TNPAGENO
IF (RCTYPE="T" .OR. RCTYPE="L")
DO CASE
CASE TCTARGET="PDF"
IF  .NOT. LLEMBEDDING
LNEMBEDDING = 0
ELSE
LNEMBEDDING = EMBED
ENDIF
TODOC.ADDFONT(FONT, BOLD, ITALICS, LNEMBEDDING)
CASE TCTARGET="HTML"
TODOC.ADDFONT(FONT, FONTSIZE, BOLD, ITALICS)
ENDCASE
ENDIF
ENDSCAN
ELSE
SCAN ALL FOR (RCTYPE="T" .OR. RCTYPE="L") .AND. IIF(EMPTY(TNPAGENO), .T., PAGE=M.TNPAGENO)
DO CASE
CASE TCTARGET="PDF"
IF  .NOT. LLEMBEDDING
LNEMBEDDING = 0
ELSE
LNEMBEDDING = EMBED
ENDIF
TODOC.ADDFONT(FONT, BOLD, ITALICS, LNEMBEDDING)
CASE TCTARGET="HTML"
TODOC.ADDFONT(FONT, FONTSIZE, BOLD, ITALICS)
ENDCASE
ENDSCAN
ENDIF
ENDPROC
**
PROCEDURE ReadAllAnchors
LPARAMETERS LOCNT
LOCAL LISELE
LISELE = SELECT()
IF TYPE("This.cXFFAlias")="C" .AND. USED(THIS.CXFFALIAS)
SELECT (THIS.CXFFALIAS)
SCAN FOR (RCTYPE="T" .OR. RCTYPE="L")
= IIF(LEN(LINKNAME)>0, LOCNT.ADDANAME(PAGE, NAME, LINKNAME), .T.)
= IIF(LEN(OUTLINE)>0, LOCNT.ADDBOOKNAME(PAGE, NAME, OUTLINE, OUTLINEST, LEFT(NAME, AT("_", NAME)-1)), .T.)
ENDSCAN
ENDIF
SELECT (LISELE)
RETURN
ENDPROC
**
PROCEDURE ReadStringForFinding
LPARAMETERS LOCNT, LIPAGE
LOCAL LISELE, LCPOM, LINESCOUNT, AA, BB, CC, IIII, LNXFROM, LNXTO, LNPOMWIDTH, LNLF, LCTEXT, LCNAME
LISELE = SELECT()
SELECT (THIS.CXFFALIAS)
SET ORDER TO "PAGE"
= SEEK(LIPAGE)
SCAN FOR (RCTYPE="T" .OR. RCTYPE="L") WHILE PAGE=LIPAGE
LCTEXT = TEXT
LINESCOUNT = IIF(ISNULL(LCTEXT) .OR. EMPTY(LCTEXT), 0, _X_WW(LCTEXT, ALLTRIM(FONT), FONTSIZE, IIF(ITALICS, 1, 0), IIF(BOLD, 1, 0), WIDTH/10, @__XFRET, IIF(ALIGN="R", 1, 0)))
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
FOR IIII = 1 TO LINESCOUNT
IF IIII>1 .AND. (AA*IIII+(BB)*(IIII-1)>HEIGHT)
EXIT
ENDIF
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
LCNAME = IIF(IIII=1, ALLTRIM(NAME), ALLTRIM(NAME)+"_"+ALLTRIM(STR(M.IIII)))
= LOCNT.ADDINDEX(LIPAGE, ALLTRIM(LCNAME), SUBSTR(M.LCTEXT, M.LNXFROM, M.LNXTO-M.LNXFROM+1))
ENDFOR
ENDSCAN
SELECT (LISELE)
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS RTFWriter AS DocumentWriter
CCODEPAGE = ""
COUTPUTNAME = ""
CFDIR = ""
NPAGEHEIGHT = 0
NPAGEWIDTH = 0
CSETPOINT = ""
FHANDLE = 0
FHANDLE2 = 0
CFILENAME = ""
CFILENAME2 = ""
NFONTS = 0
NCOLORS = 0
NREPORTNO = 0
LCLEFTMARGIN = ''
LCRIGHTMARGIN = ''
LCTOPMARGIN = ''
LCBOTTOMMARGIN = ''
LCPAPERWIDTH = ''
LCPAPERHEIGHT = ''
LCPAPERORIENTATION = ''
DIMENSION AFONTS(1)
DIMENSION ACOLORS(1)
**
FUNCTION Init
LPARAMETERS _X____11333
DODEFAULT()
THIS.COUTPUTNAME = _X____11333.COUTPUTNAME
IF EMPTY(JUSTEXT(THIS.COUTPUTNAME))
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".rtf"
ENDIF
THIS.CFILENAME = THIS.COUTPUTNAME
THIS.CFILENAME2 = THIS.COUTPUTNAME+'2'
THIS.FHANDLE2 = FCREATE(THIS.CFILENAME)
IF THIS.FHANDLE2<0
RETURN -1
ENDIF
THIS.FHANDLE = FCREATE(THIS.CFILENAME2)
IF THIS.FHANDLE<0
RETURN -1
ENDIF
ENDFUNC
**
PROCEDURE destroy
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.WRITEPAGEHEADER(TNPAGENO, THIS.NREPORTNO=1)
ENDPROC
**
PROCEDURE WritePageHeader
LPARAMETERS TNPAGENO, TNFIRSTPAGE
IF TNFIRSTPAGE
THIS.WRITESTR('\sectd\sbknone'+THIS.LCPAPERORIENTATION)
ELSE
THIS.WRITESTR('\sect\sectd'+THIS.LCPAPERORIENTATION)
ENDIF
THIS.WRITESTR('\pgwsxn'+THIS.LCPAPERWIDTH+'\pghsxn'+THIS.LCPAPERHEIGHT)
THIS.WRITESTR('\marglsxn'+THIS.LCLEFTMARGIN+'\margrsxn'+THIS.LCRIGHTMARGIN+'\margtsxn'+THIS.LCTOPMARGIN+'\margbsxn'+THIS.LCBOTTOMMARGIN)
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
THIS.NREPORTNO = TNREPORTNO
IF TNREPORTNO=1
IF EMPTY(TCCODEPAGE)
TCCODEPAGE = "\ansicpg"+ALLTRIM(STR(CPCURRENT()))
ENDIF
IF TYPE("tcCodePage")="N"
TCCODEPAGE = "\ansicpg"+ALLTRIM(STR(TCCODEPAGE))
ENDIF
THIS.CCODEPAGE = TCCODEPAGE
ENDIF
THIS.LCLEFTMARGIN = ALLTRIM(STR(ROUND(TOREPORT.LNLEFTMARGIN/10000*1440, 0)))
THIS.LCRIGHTMARGIN = ALLTRIM(STR(ROUND(TOREPORT.LNRIGHTMARGIN/10000*1440, 0)))
THIS.LCTOPMARGIN = ALLTRIM(STR(ROUND(TOREPORT.LNTOPMARGIN/10000*1440, 0)))
THIS.LCBOTTOMMARGIN = ALLTRIM(STR(ROUND(TOREPORT.LNBOTTOMMARGIN/10000*1440, 0)))
THIS.LCPAPERWIDTH = ALLTRIM(STR(ROUND(TOREPORT.LNPAPERWIDTH/10000*1440, 0)))
THIS.LCPAPERHEIGHT = ALLTRIM(STR(ROUND(TOREPORT.LNPAPERHEIGHT/10000*1440, 0)))
THIS.LCPAPERORIENTATION = ''
IF TOREPORT.LNORIENTATION=1
THIS.LCPAPERORIENTATION = '\lndscpsxn'
ELSE
THIS.LCPAPERORIENTATION = ''
ENDIF
ENDPROC
**
PROCEDURE Finalize
LPARAMETERS _X____11333
LOCAL M.LNI
WITH THIS
.WRITESTRHEADER('{\rtf1'+.CCODEPAGE)
.WRITESTR('}')
.WRITESTRHEADER('{\fonttbl')
FOR M.LNI = 1 TO .NFONTS
.WRITESTRHEADER('{\f'+ALLTRIM(STR(M.LNI-1))+' '+.AFONTS(M.LNI)+'}')
ENDFOR
.WRITESTRHEADER('}')
.WRITESTRHEADER('{\colortbl')
FOR M.LNI = 1 TO .NCOLORS
.WRITESTRHEADER(.ACOLORS(M.LNI)+';')
ENDFOR
.WRITESTRHEADER('}')
THIS.WRITESTRHEADER('\margl0\margr0\margt0\margb0')
THIS.WRITESTRHEADER('\doctype0')
THIS.WRITESTRHEADER('\viewkind1\viewscale100')
= FSEEK(.FHANDLE, 0, 0)
= FSEEK(.FHANDLE2, 0, 2)
DO WHILE  .NOT. FEOF(.FHANDLE)
LCSTR = FREAD(.FHANDLE, 2048)
= FWRITE(.FHANDLE2, LCSTR)
ENDDO
= FCLOSE(THIS.FHANDLE2)
= FCLOSE(THIS.FHANDLE)
ERASE (THIS.CFILENAME2)
IF  .NOT. _X____11333.LNOTOPENWORD
IF  .NOT. _X____11333.LNEWSESSION
* MAH
* = SHELLEXECUTE(FINDWINDOW(0, _SCREEN.CAPTION), "open", THIS.COUTPUTNAME, "", "", 1)
ELSE
* MAH
* = SHELLEXECUTE(FINDWINDOW(0, _SCREEN.CAPTION), "open", THIS.COUTPUTNAME, "", "", 1)
ENDIF
ENDIF
ENDWITH
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
LOCAL LFHANDLE_PICTURE, LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, LCPATHOLD, LCPREPFILE2
LCTEXT = ''
IF LOWER(JUSTEXT(TCPATH))<>'bmp' .AND. LOWER(JUSTEXT(TCPATH))<>'jpg'
LCPREPFILE2 = THIS.CTEMPDIR+SUBSTR(SYS(2015), 3, 10)+".jpg"
_XF_CONVERTIMAGE(TCPATH, LCPREPFILE2, "image/jpeg")
TCPATH = LCPREPFILE2
ENDIF
TNLEFT = ROUND(TNLEFT/10000*1440, 2)
TNTOP = ROUND(TNTOP/10000*1440, 2)
TNWIDTH = ROUND(TNWIDTH/10000*1440, 2)
TNHEIGHT = ROUND(TNHEIGHT/10000*1440, 2)
LCTEXT = LCTEXT+'{\shp{\*\shpinst\shpbxpage\shpbypage\shpz0\shpfhdr0\'+'shpleft'+ALLTRIM(STR(TNLEFT))+'\shptop'+ALLTRIM(STR(TNTOP))+'\shpright'+ALLTRIM(STR(TNLEFT+TNWIDTH))+'\shpbottom'+ALLTRIM(STR(TNTOP+TNHEIGHT))+'{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}'
LCTEXT = LCTEXT+'{\sp{\sn pib}{\sv {\pict'
IF LOWER(JUSTEXT(TCPATH))='jpg'
LCTEXT = LCTEXT+'\jpegblip'
ENDIF
IF LOWER(JUSTEXT(TCPATH))='bmp'
LCTEXT = LCTEXT+'\wmetafile8'
LCPATHOLD = TCPATH
TCPATH = FORCEEXT(TCPATH, 'wmf')
BMP2WMF(LCPATHOLD, TCPATH)
ENDIF
LFHANDLE_PICTURE = FOPEN(TCPATH, 10)
THIS.WRITESTR(LCTEXT)
DO WHILE  .NOT. FEOF(LFHANDLE_PICTURE)
LCSTR = FREAD(LFHANDLE_PICTURE, 64)
LCSTRHEX = TEXT2HEX(LCSTR)
THIS.WRITESTR(LCSTRHEX)
ENDDO
= FCLOSE(LFHANDLE_PICTURE)
LCTEXT = '}}}}'
IF LOWER(JUSTEXT(TCPATH))='wmf'
DELETE FILE (TCPATH)
ENDIF
IF  .NOT. EMPTY(LCPREPFILE2)
DELETE FILE (LCPREPFILE2)
ENDIF
LCTEXT = LCTEXT+'{\shprslt\pvpg\absh'+ALLTRIM(STR(TNHEIGHT))+'\absw'+ALLTRIM(STR(TNWIDTH))
LCTEXT = LCTEXT+'\pict'
LCTEXT = LCTEXT+'\picw'+ALLTRIM(STR(TNWIDTH))+'\pich'+ALLTRIM(STR(TNHEIGHT))
LCTEXT = LCTEXT+'\picwgoal'+ALLTRIM(STR(TNWIDTH))+'\pichgoal'+ALLTRIM(STR(TNHEIGHT))
LCTEXT = LCTEXT+'\wmetafile8\'
LCTEXT = LCTEXT+''
LCTEXT = LCTEXT+'}\par'
LCTEXT = LCTEXT+'}}'
THIS.WRITESTR(LCTEXT)
RETURN
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
IF TCTYPE="L"
TNWIDTH = TNWIDTH+(TNFONTSIZE*0.9 )*10000/72
ENDIF
LOCAL LNORIWIDTH
IF TCTYPE="L"
ENDIF
LNORIWIDTH = TNWIDTH
IF TCTYPE="L"
IF TYPE('tcAlign')<>'L'
DO CASE
CASE TCALIGN='right'
TNLEFT = TNLEFT-(TNFONTSIZE*0.9 )*10000/72
CASE TCALIGN='left'
CASE TCALIGN='center'
ENDCASE
ENDIF
ENDIF
LOCAL LINESCOUNT, AA, BB, CC, IIII, LNXFROM, LCXTO, LCPREPARED
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
LINESCOUNT = 0
ELSE
LINESCOUNT = _X_WW(_X____11334, TCFONT, TNFONTSIZE, IIF(TLITALICS, 1, 0), IIF(TLBOLD, 1, 0), LNORIWIDTH/10, @__XFRET, IIF(TCALIGN="right", 1, 0), THIS.OTXTBOX.NCODEPAGE)
ENDIF
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
LCPREPARED = ""
LNCURRENTLINEWIDTH = TNWIDTH
FOR IIII = 1 TO LINESCOUNT
LNXFROM = TOINT(SUBSTR(__XFRET, M.IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, M.IIII*12-11+4+12, 4))
LNCURRENTLINEWIDTH = MAX(LNCURRENTLINEWIDTH, 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4)))
IF M.IIII>1 .AND. (M.AA*M.IIII+(M.BB)*(M.IIII-1)>TNHEIGHT+M.IIII*90)
EXIT
ENDIF
LCPREPARED = M.LCPREPARED+SUBSTR(M._X____11334, M.LNXFROM, M.LNXTO-M.LNXFROM+1)+CHR(13)
ENDFOR
IIII = MAX(IIII-1, 1)
THIS.ADDXOBJECT("T", TNLEFT, TNLEFT+LNCURRENTLINEWIDTH+200, TNTOP, TNTOP+TNHEIGHT, LCPREPARED, 0, 0, 0, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TCALIGN, TLUNDERLINE, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP)
ENDPROC
**
PROCEDURE addXObject
LPARAMETERS TCTYPE, TNLEFT, TNRIGHT, TNTOP, TNBOTTOM, _X____11334, TNPENSIZE, TNPENPAT, TNFILLPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TCALIGN, TLUNDERLINE, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP
LOCAL LCTEXT
TNLEFT = ROUND(TNLEFT/10000*1440, 2)
TNTOP = ROUND(TNTOP/10000*1440, 2)
TNBOTTOM = ROUND(TNBOTTOM/10000*1440, 2)
TNRIGHT = ROUND(TNRIGHT/10000*1440, 2)
IF  .NOT. EMPTY(_X____11334)
_X____11334 = STRTRAN(TRIM(_X____11334), "\", "\\")
_X____11334 = STRTRAN(TRIM(_X____11334), "{", "\{")
_X____11334 = STRTRAN(TRIM(_X____11334), "}", "\}")
_X____11334 = STRTRAN(TRIM(_X____11334), CHR(13), "\par ")
ELSE
_X____11334 = ""
ENDIF
LCTEXT = '{\shp{\*\shpinst'
LCTEXT = LCTEXT+'\shpleft'+ALLTRIM(STR(TNLEFT))
LCTEXT = LCTEXT+'\shptop'+ALLTRIM(STR(TNTOP))
LCTEXT = LCTEXT+'\shpbottom'+ALLTRIM(STR(TNBOTTOM))
LCTEXT = LCTEXT+'\shpright'+ALLTRIM(STR(TNRIGHT))
LCTEXT = LCTEXT+'\shpbxpage\shpbypage'
LCTEXT = LCTEXT+'\shpwr3'
LCTEXT = LCTEXT+'\shpz0'
LCTEXT = LCTEXT+'{\shptxt'
LCTEXT = LCTEXT+'{\sp{\sn dxTextLeft}{\sv 0}}'
LCTEXT = LCTEXT+'{\sp{\sn dyTextTop}{\sv 0}}'
LCTEXT = LCTEXT+'{\sp{\sn dxTextRight}{\sv 0}}'
LCTEXT = LCTEXT+'{\sp{\sn dyTextBottom}{\sv 0}}'
IF TCTYPE='L'
LNOFFSET = TNFONTSIZE
IF TYPE('lnOffSet')<>'L'
IF LNOFFSET>0
IF LNOFFSET<50
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 2}}'+'{\sp{\sn adjustValue}{\sv '+STR(LNOFFSET*100)+'}}'
ELSE
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 3}}'
ENDIF
ELSE
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 1}}'
ENDIF
ELSE
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 20}}'
ENDIF
ELSE
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 1}}'
ENDIF
IF TYPE('tnMode')='L'
ELSE
IF TNMODE=0
LCTEXT = LCTEXT+'{\sp{\sn fillColor}{\sv '+THIS.RGB_FILL_CHAR(TNFILLRED, TNFILLGREEN, TNFILLBLUE)+'}}'
ELSE
LCTEXT = LCTEXT+'{\sp{\sn fillColor}{\sv '+THIS.RGB_FILL_CHAR(255, 255, 255)+'}}'
ENDIF
ENDIF
IF TCTYPE='L'
IF TNPENRED<>-1 .AND. TNPENPAT<>0
LCTEXT = LCTEXT+'{\sp{\sn lineColor}{\sv '+THIS.RGB_PEN_CHAR(TNPENRED, TNPENGREEN, TNPENBLUE)+'}}'
ELSE
IF TYPE('tnMode')='L'
LCTEXT = LCTEXT+'{\sp{\sn lineColor}{\sv '+THIS.RGB_PEN_CHAR(0, 0, 0)+'}}'
ELSE
IF TNMODE<>0
LCTEXT = LCTEXT+'{\sp{\sn lineColor}{\sv '+THIS.RGB_PEN_CHAR(0, 0, 0)+'}}'
ELSE
LCTEXT = LCTEXT+'{\sp{\sn lineColor}{\sv '+THIS.RGB_PEN_CHAR(255, 255, 255)+'}}'
ENDIF
ENDIF
ENDIF
ELSE
LCTEXT = LCTEXT+'{\sp{\sn fline}{\sv 0}}'
LCCOLOR = THIS.RGB_PEN(TNPENRED, TNPENGREEN, TNPENBLUE)
LCTEXT = LCTEXT+'\cf'+LCCOLOR
LCTEXT = LCTEXT+'\cb'+THIS.RGB_FILL(TNFILLRED, TNFILLGREEN, TNFILLBLUE)
ENDIF
IF TNPENPAT=8
TNPENPAT = 0
ENDIF
LNPENPAT = 0
DO CASE
CASE TNPENPAT=0
LNPENPAT = 0
CASE TNPENPAT=1
LNPENPAT = 2
CASE TNPENPAT=2
LNPENPAT = 1
CASE TNPENPAT=3
LNPENPAT = 3
CASE TNPENPAT=4
LNPENPAT = 4
CASE TNPENPAT=8
LNPENPAT = 0
OTHERWISE
LNPENPAT = 0
ENDCASE
IF TCTYPE='L'
IF LNPENPAT<>0
LCTEXT = LCTEXT+'{\sp{\sn lineDashing}{\sv '+ALLTRIM(STR(LNPENPAT))+'}}'
ENDIF
ENDIF
LCTEXT = LCTEXT+'{\sp{\sn lineWidth}{\sv '+ALLTRIM(STR(TNPENSIZE*12700))+'}}'
IF TYPE('tnMode')<>'L'
IF TNMODE=1
LCTEXT = LCTEXT+'{\sp{\sn fillOpacity}{\sv 0}}'
ENDIF
ENDIF
IF TLBOLD
LCTEXT = LCTEXT+'\b'
ENDIF
IF TLITALICS
LCTEXT = LCTEXT+'\i'
ENDIF
IF TYPE('tcAlign')<>'L'
DO CASE
CASE TCALIGN='right'
LCTEXT = LCTEXT+'\qr'
CASE TCALIGN='left'
LCTEXT = LCTEXT+'\ql'
CASE TCALIGN='center'
LCTEXT = LCTEXT+'\qc'
ENDCASE
ENDIF
IF TLUNDERLINE
LCTEXT = LCTEXT+'\ul'
ENDIF
IF THIS.OTXTBOX.LSTRIKED
LCTEXT = LCTEXT+'\strike'
ENDIF
IF TYPE('tnFontSize')<>'L'
IF TNFONTSIZE>0
LCTEXT = LCTEXT+'\fs'+ALLTRIM(STR(TNFONTSIZE*2))
ENDIF
ENDIF
IF TYPE('tcFont')<>'L'
IF LEN(TCFONT)>0
LCTEXT = LCTEXT+THIS.ADDFONT(TCFONT)
ENDIF
ENDIF
LCTEXT = LCTEXT+' '+_X____11334
LCTEXT = LCTEXT+'\par}}}'
THIS.WRITESTR(LCTEXT)
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
LOCAL LNMODE
IF TNFILLPAT=0
LNMODE = 1
ELSE
LNMODE = 0
ENDIF
THIS.ADDXOBJECT("L", LNLEFT, LNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT,  , TNPENSIZE, TNPENPAT, TNFILLPAT, TNPENRED, TNPENGREEN, TNPENBLUE, LNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE,  , TNOFFSET)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
THIS.WRITEPAGEHEADER(TNPAGENO)
ENDPROC
**
PROCEDURE EndPage
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
FUNCTION addFont
LPARAMETERS TCFONTNAME
LOCAL LCFONT, LNFIND
LCFONT = TCFONTNAME
WITH THIS
LCEXACT = SET("EXACT")
SET EXACT ON
LNFIND = 0
LNFIND = ASCAN(.AFONTS, LCFONT)
IF LNFIND<>0
SET EXACT &LCEXACT
RETURN '\f'+ALLTRIM(STR(LNFIND-1))
ENDIF
SET EXACT &LCEXACT
.NFONTS = .NFONTS+1
DIMENSION .AFONTS(.NFONTS)
.AFONTS(.NFONTS) = LCFONT
RETURN '\f'+ALLTRIM(STR(.NFONTS-1))
ENDWITH
RETURN '\f'+ALLTRIM(STR(THIS.NFONTS))
ENDFUNC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNRIGHT, TNBOTTOM, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.ADDXOBJECT("L", LNLEFT, TNRIGHT, TNTOP, TNBOTTOM, 0, TNPENSIZE, TNPENPAT,  , TNPENRED, TNPENGREEN, TNPENBLUE)
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
IF EMPTY(TUPAR1)
RETURN
ENDIF
DO CASE
CASE TUPAR1="xxx"
ENDCASE
ENDPROC
**
PROCEDURE WriteStr
LPARAMETERS TCSTR, TLFILE
IF EMPTY(TLFILE)
LNSIZE = FPUTS(THIS.FHANDLE, TCSTR)
ELSE
DO CASE
CASE TLFILE=1
LNSIZE = FPUTS(THIS.FHANDLE, TCSTR)
CASE TLFILE=2
LNSIZE = FPUTS(THIS.FHANDLE2, TCSTR)
ENDCASE
ENDIF
ENDPROC
**
PROCEDURE WriteStrHeader
LPARAMETERS TCSTR
LNSIZE = FPUTS(THIS.FHANDLE2, TCSTR)
ENDPROC
**
FUNCTION AddColor
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LCCOLOR
LCCOLOR = '\red'+ALLTRIM(STR(TNRED))+'\green'+ALLTRIM(STR(TNGREEN))+'\blue'+ALLTRIM(STR(TNBLUE))
WITH THIS
LCEXACT = SET("EXACT")
SET EXACT ON
LNFIND = 0
LNFIND = ASCAN(.ACOLORS, LCCOLOR)
IF LNFIND<>0
SET EXACT &LCEXACT
RETURN ALLTRIM(STR(LNFIND-1))
ENDIF
SET EXACT &LCEXACT
.NCOLORS = .NCOLORS+1
DIMENSION .ACOLORS(.NCOLORS)
.ACOLORS(.NCOLORS) = LCCOLOR
RETURN ALLTRIM(STR(.NCOLORS-1))
ENDWITH
RETURN
ENDFUNC
**
FUNCTION RGB_pen
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LNCOLOR, LCCOLOR
IF TYPE('tnRed')='L'
RETURN THIS.ADDCOLOR(0, 0, 0)
ENDIF
IF TNRED=-1
RETURN THIS.ADDCOLOR(0, 0, 0)
ENDIF
RETURN THIS.ADDCOLOR(TNRED, TNGREEN, TNBLUE)
ENDFUNC
**
FUNCTION RGB_fill
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LNCOLOR, LCCOLOR
IF TYPE('tnRed')='L'
RETURN THIS.ADDCOLOR(255, 255, 255)
ENDIF
IF TNRED=-1
RETURN THIS.ADDCOLOR(255, 255, 255)
ENDIF
LNCOLOR = TNRED+256*TNGREEN+65536*TNBLUE
LCCOLOR = ALLTRIM(STR(LNCOLOR))
RETURN THIS.ADDCOLOR(TNRED, TNGREEN, TNBLUE)
ENDFUNC
**
FUNCTION RGB_pen_char
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LNCOLOR, LCCOLOR
IF TYPE('tnRed')='L'
RETURN ALLTRIM(STR(00000))
ENDIF
IF TNRED=-1
RETURN ALLTRIM(STR(00000))
ENDIF
LNCOLOR = TNRED+256*TNGREEN+65536*TNBLUE
LCCOLOR = ALLTRIM(STR(LNCOLOR))
RETURN LCCOLOR
ENDFUNC
**
FUNCTION RGB_fill_char
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LNCOLOR, LCCOLOR
IF TYPE('tnRed')='L'
RETURN ALLTRIM(STR(16777215))
ENDIF
IF TNRED=-1
RETURN ALLTRIM(STR(16777215))
ENDIF
LNCOLOR = TNRED+256*TNGREEN+65536*TNBLUE
LCCOLOR = ALLTRIM(STR(LNCOLOR))
RETURN LCCOLOR
ENDFUNC
**
ENDDEFINE
**
FUNCTION text2hex
PARAMETER LCTEXT
LOCAL LCTEXTOUT, LNCHAR, LNCHAR2, LNI
LCTEXTOUT = ''
FOR M.LNI = 1 TO LEN(LCTEXT)
LNCHAR = ASC(SUBSTR(LCTEXT, M.LNI, 1))
LNCHAR1 = INT(LNCHAR/16)
LNCHAR2 = MOD(LNCHAR, 16)
IF LNCHAR1<10
LCTEXTOUT = LCTEXTOUT+ALLTRIM(STR(LNCHAR1))
ELSE
LNCHAR1 = LNCHAR1-10
LCTEXTOUT = LCTEXTOUT+CHR(ASC('a')+LNCHAR1)
ENDIF
IF LNCHAR2<10
LCTEXTOUT = LCTEXTOUT+ALLTRIM(STR(LNCHAR2))
ELSE
LNCHAR2 = LNCHAR2-10
LCTEXTOUT = LCTEXTOUT+CHR(ASC('a')+LNCHAR2)
ENDIF
ENDFOR
RETURN LCTEXTOUT
ENDFUNC
**
DEFINE CLASS XMLWriter AS DocumentWriter
CCODEPAGE = ""
LCNTMODE = .F.
REPORTID = 0
CURRENTPAGE = 0
PAGECOUNT = 0
PAGEWIDTH = 0
PAGEHEIGHT = 0
NCOUNTER = 0
NFONTSIZE = 10
CFONTNAME = "Arial"
LBOLD = .F.
LITALICS = .F.
LUNDERLINE = .F.
NX = 0
NY = 0
NFR = 0
NFG = 0
NFB = 0
NBR = 255
NBG = 255
NBB = 255
OXFCONT = .NULL.
ALIAS = ""
TMPIMAGE = ""
HFILEXML = 0
HFILEXSD = 0
OXMLDOM = .NULL.
**
PROCEDURE Init
DODEFAULT()
THIS.ALIAS = SYS(2015)
LISELE = SELECT()
SELECT 0
CREATE CURSOR (THIS.ALIAS) (DATA1 M NOCPTRANS)
SELECT (THIS.ALIAS)
APPEND BLANK
SELECT (LISELE)
THIS.TMPIMAGE = SYS(2023)+"\"+SYS(2015)+".TMP"
THIS.CCODEPAGE = LTRIM(STR(CPCURRENT(), 11))
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE setColor
LPARAMETERS TFR, TFG, TFB, TBR, TBG, TBB
WITH THIS
.NFR = M.TFR
.NFG = M.TFG
.NFB = M.TFB
.NBR = M.TBR
.NBG = M.TBG
.NBB = M.TBB
ENDWITH
ENDPROC
**
PROCEDURE finishDocument
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE endPage
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE setFont
LPARAMETERS TCFONTNAME, TNSIZE, TLBOLD, TLITALIC, TLUNDERLINE
WITH THIS
.NFONTSIZE = M.TNSIZE
.CFONTNAME = M.TCFONTNAME
.LBOLD = M.TLBOLD
.LITALICS = M.TLITALIC
.LUNDERLINE = M.TLUNDERLINE
ENDWITH
ENDPROC
**
PROCEDURE setPos
LPARAMETERS TNX, TNY
THIS.NX = TNX
THIS.NY = TNY
ENDPROC
**
PROCEDURE outText
LPARAMETERS _X____11334
WITH THIS
.ADDTEXTBOX(_X____11334, .CFONTNAME, .NFONTSIZE, .LBOLD, .LITALICS, .NX, .NY, 8000, 8000, "", .NFR, .NFG, .NFB, 0, .NBR, .NBG, .NBB, "left", .LUNDERLINE, "", "", "", "", 0, "", "")
ENDWITH
ENDPROC
**
PROCEDURE createDocument
LPARAMETERS TCNAME
THIS.CREATEFILES(TCNAME)
THIS.REPORTID = 1
THIS.CURRENTPAGE = 0
THIS.NEWREPORT(0, ALLTRIM(STR(CPCURRENT())), .NULL.)
ENDPROC
**
FUNCTION openDocument
LPARAMETERS TCNAME
IF  .NOT. FILE(TCNAME)
RETURN .F.
ENDIF
LOCAL LOXML, LCPOM
IF ISNULL(THIS.OXMLDOM)
STORE CREATEOBJECT("Microsoft.XMLDOM") TO LOXML, THIS.OXMLDOM
ENDIF
IF ISNULL(THIS.OXMLDOM)
RETURN .F.
ENDIF
LOXML.ASYNC = .F.
IF  .NOT. LOXML.LOAD(TCNAME)
RETURN .F.
ENDIF
LCPOM = LOXML.DOCUMENTELEMENT.GETATTRIBUTE("xmlns:xfrx")
IF ISNULL(LCPOM) .OR.  .NOT. LCPOM=="urn:x-xfrx:schemas:dokument:1.0"
THIS.OXMLDOM = .NULL.
RETURN .F.
ENDIF
LOXML.SETPROPERTY("SelectionLanguage", "XPath")
LOPAGE = LOXML.DOCUMENTELEMENT.SELECTNODES('*/*')
THIS.PAGECOUNT = LOPAGE.LENGTH
RETURN .T.
ENDFUNC
**
FUNCTION goToPage
LPARAMETERS TNPAGENO, TOREPORT
LOCAL LOXML, LOPAGE, LOREPORT, LLRETVAL, LIWIDTH, LIHEIGHT, LII
LOXML = THIS.OXMLDOM
THIS.CURRENTPAGE = TNPAGENO
LOPAGE = LOXML.DOCUMENTELEMENT.SELECTNODES('*/*[@page="'+LTRIM(STR(TNPAGENO, 11))+'"]')
LIWIDTH = __VAL(LOPAGE.ITEM(0).GETATTRIBUTE("width"))
LIHEIGHT = __VAL(LOPAGE.ITEM(0).GETATTRIBUTE("height"))
IF LOPAGE.LENGTH=1
THIS.PAGEWIDTH = LIWIDTH
THIS.PAGEHEIGHT = LIHEIGHT
ENDIF
IF TYPE("toReport")="O" .AND.  .NOT. ISNULL(TOREPORT)
TOREPORT.LNPAPERWIDTH = LIWIDTH
TOREPORT.LNPAPERHEIGHT = LIHEIGHT
LOREPORT = LOXML.DOCUMENTELEMENT.SELECTNODES('*[@rctype="J" and @pages="'+LTRIM(STR(TNPAGENO, 11))+'"]')
IF LOREPORT.LENGTH>=1
LII = 0
TOREPORT.LNBOTTOMPAGEMARGIN = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("BP"))
TOREPORT.LNLEFTPAGEMARGIN = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("LP"))
TOREPORT.LNRIGHTPAGEMARGIN = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("RP"))
TOREPORT.LNTOPMARGIN = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("TM"))
TOREPORT.LNTOPMARGINSHIFT = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("TS"))
TOREPORT.LNLEFTMARGIN = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("LM"))
TOREPORT.LNRIGHTMARGIN = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("RM"))
TOREPORT.LNBOTTOMMARGIN = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("BM"))
TOREPORT.NUPPERMOST = __VAL(LOREPORT.ITEM(LII).GETATTRIBUTE("UM"))
LLRETVAL = .T.
ENDIF
ENDIF
IF TOREPORT.CTARGET="HTML" .OR. TOREPORT.XFRXSESSION.NUDREDUCEHEIGHTBY>=0
TOREPORT.LNPAPERHEIGHT = TOREPORT.LNPAPERHEIGHT-IIF(TOREPORT.XFRXSESSION.NUDREDUCEHEIGHTBY=-1, 16500, TOREPORT.XFRXSESSION.NUDREDUCEHEIGHTBY)
ENDIF
IF TOREPORT.CTARGET="HTML"
TOREPORT.LNTOPMARGIN = TOREPORT.NUPPERMOST
ENDIF
RETURN LLRETVAL
ENDFUNC
**
PROCEDURE goToLastPage
THIS.CURRENTPAGE = THIS.PAGECOUNT
ENDPROC
**
PROCEDURE CreateFiles
LPARAMETERS LCXML
LOCAL LIXML, LIXSD, LLNEXT, LCPOM, LII
LIXML = FCREATE(LCXML, 0)
LLNEXT = LIXML>0
IF LLNEXT
LII = RAT(".", LCXML)
LCPOM = IIF(LII=0, LCXML+".XSD", LEFT(LCXML, LII)+"XSD")
LIXSD = FCREATE(LCPOM, 0)
LLNEXT = LIXSD>0
ENDIF
IF LLNEXT
THIS.HFILEXML = LIXML
THIS.HFILEXSD = LIXSD
LII = RAT("\", LCPOM)
LCPOM = IIF(LII=0, LCPOM, SUBSTR(LCPOM, LII+1))
= FWRITE(THIS.HFILEXML, '<?xml version="1.0" encoding="windows-'+THIS.CCODEPAGE+'" standalone="yes"?>'+CHR(13)+CHR(10))
= FWRITE(THIS.HFILEXML, '<xfrx:reports xmlns:xfrx="urn:x-xfrx:schemas:dokument:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:x-xfrx:schemas:dokument:1.0 '+LCPOM+'" version="0.1">'+CHR(13)+CHR(10))
= FWRITE(THIS.HFILEXSD, '<?xml version="1.0" encoding="windows-'+THIS.CCODEPAGE+'" standalone="yes"?>'+CHR(13)+CHR(10))
= FWRITE(THIS.HFILEXSD, '<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:x-xfrx:schemas:dokument:1.0"  xmlns="urn:x-xfrx:schemas:dokument:1.0" elementFormDefault="qualified">'+CHR(13)+CHR(10)+CHR(13)+CHR(10))
LCPOM = ' <xs:complexType name="picture">'+CHR(13)+CHR(10)+'  <xs:attribute name="name" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="left" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="top" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="width" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="height" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="borderwidth" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="borderstyle" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="bordercolor" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="backcolor" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="offset" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="src" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="data" type="xs:base64Binary" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="rctype" type="xs:string" use="required" />'+CHR(13)+CHR(10)+' </xs:complexType>'+CHR(13)+CHR(10)+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXSD, LCPOM)
LCPOM = ' <xs:complexType name="line">'+CHR(13)+CHR(10)+'  <xs:attribute name="name" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="left" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="top" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="width" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="height" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="borderwidth" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="borderstyle" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="bordercolor" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="rctype" type="xs:string" use="required" />'+CHR(13)+CHR(10)+' </xs:complexType>'+CHR(13)+CHR(10)+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXSD, LCPOM)
LCPOM = ' <xs:complexType name="rectangle">'+CHR(13)+CHR(10)+'  <xs:attribute name="name" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="left" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="top" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="width" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="height" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="borderwidth" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="borderstyle" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="bordercolor" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="backcolor" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="fillstyle" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="backstyle" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="offset" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="rctype" type="xs:string" use="required" />'+CHR(13)+CHR(10)+' </xs:complexType>'+CHR(13)+CHR(10)+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXSD, LCPOM)
LCPOM = ' <xs:complexType name="textbox">'+CHR(13)+CHR(10)+'  <xs:attribute name="name" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="left" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="top" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="width" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="height" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="forecolor" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="backcolor" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="backstyle" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="fontname" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="fontsize" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="fontstyle" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="align" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="rctype" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="uniqueid" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="linkname" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="linkref" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="outline" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="outlinestyle" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="tooltip" type="xs:string" use="required" />'+CHR(13)+CHR(10)+' </xs:complexType>'+CHR(13)+CHR(10)+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXSD, LCPOM)
LCPOM = ' <xs:complexType name="section">'+CHR(13)+CHR(10)+'  <xs:sequence>'+CHR(13)+CHR(10)+'   <xs:choice minOccurs="0" maxOccurs="unbounded">'+CHR(13)+CHR(10)+'    <xs:element name="picture" type="picture" />'+CHR(13)+CHR(10)+'    <xs:element name="line" type="line" />'+CHR(13)+CHR(10)+'    <xs:element name="rectangle" type="rectangle" />'+CHR(13)+CHR(10)+'    <xs:element name="textbox" type="textbox" />'+CHR(13)+CHR(10)+'   </xs:choice>'+CHR(13)+CHR(10)+'  </xs:sequence>'+CHR(13)+CHR(10)+'  <xs:attribute name="type" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="height" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="top" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="rctype" type="xs:string" use="required" />'+CHR(13)+CHR(10)+' </xs:complexType>'+CHR(13)+CHR(10)+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXSD, LCPOM)
LCPOM = ' <xs:complexType name="page">'+CHR(13)+CHR(10)+'  <xs:sequence>'+CHR(13)+CHR(10)+'   <xs:element name="section" type="section" minOccurs="0" maxOccurs="unbounded" />'+CHR(13)+CHR(10)+'  </xs:sequence>'+CHR(13)+CHR(10)+'  <xs:attribute name="order" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="page" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="width" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="height" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="rctype" type="xs:string" use="required" />'+CHR(13)+CHR(10)+' </xs:complexType>'+CHR(13)+CHR(10)+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXSD, LCPOM)
LCPOM = ' <xs:complexType name="report">'+CHR(13)+CHR(10)+'  <xs:sequence>'+CHR(13)+CHR(10)+'   <xs:element name="page" type="page" minOccurs="1" maxOccurs="unbounded" />'+CHR(13)+CHR(10)+'  </xs:sequence>'+CHR(13)+CHR(10)+'  <xs:attribute name="id" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="text" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="pages" type="xs:int" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="TP" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="BP" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="LP" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="RP" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="TM" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="TS" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="LM" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="RM" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="BM" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="UM" type="xs:float" use="required" />'+CHR(13)+CHR(10)+'  <xs:attribute name="rctype" type="xs:string" use="required" />'+CHR(13)+CHR(10)+' </xs:complexType>'+CHR(13)+CHR(10)+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXSD, LCPOM)
LCPOM = ' <xs:element name="reports">'+CHR(13)+CHR(10)+'  <xs:complexType>'+CHR(13)+CHR(10)+'   <xs:sequence>'+CHR(13)+CHR(10)+'    <xs:element name="report" type="report" minOccurs="1" maxOccurs="unbounded" />'+CHR(13)+CHR(10)+'   </xs:sequence>'+CHR(13)+CHR(10)+'   <xs:attribute name="version" type="xs:string" use="required" />'+CHR(13)+CHR(10)+'  </xs:complexType>'+CHR(13)+CHR(10)+' </xs:element>'+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXSD, LCPOM)
= FWRITE(THIS.HFILEXSD, "</xs:schema>")
ENDIF
ENDPROC
**
PROCEDURE appendBlank
RETURN
INSERT INTO (THIS.CXFFALIAS) (REPORTID, PAGE) VALUES (THIS.REPORTID, THIS.CURRENTPAGE)
ENDPROC
**
PROCEDURE finalize
LPARAMETERS LOHOST
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE Destroy
THIS.OXMLDOM = .NULL.
IF THIS.HFILEXML>0
= FWRITE(THIS.HFILEXML, '</xfrx:reports>'+CHR(13)+CHR(10))
= FCLOSE(THIS.HFILEXML)
ENDIF
IF THIS.HFILEXSD>0
= FCLOSE(THIS.HFILEXSD)
ENDIF
IF USED(THIS.ALIAS)
USE IN (THIS.ALIAS)
ENDIF
DELETE FILE (THIS.TMPIMAGE)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
= DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
IF EMPTY(TNPAGENO)
TNPAGENO = 0
ENDIF
THIS.CURRENTPAGE = THIS.CURRENTPAGE+1
THIS.PAGECOUNT = MAX(THIS.PAGECOUNT, THIS.CURRENTPAGE)
= FWRITE(THIS.HFILEXML, '  <xfrx:page order="'+LTRIM(STR(TNPAGENO, 11))+'" page="'+LTRIM(STR(THIS.CURRENTPAGE, 11))+'" width="'+LTRIM(__STR(TNWIDTH, 11, 6))+'" height="'+LTRIM(__STR(TNHEIGHT, 11, 6))+'" rctype="P'+'">'+CHR(13)+CHR(10))
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.NEWPAGE(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
IF TNREPORTNO=1
THIS.CREATEFILES(TOREPORT.XFRXSESSION.COUTPUTNAME)
THIS.REPORTID = 1
THIS.CURRENTPAGE = 0
ENDIF
LOCAL LCPOM
LCPOM = ' <xfrx:report id="'+LTRIM(STR(TNREPORTNO, 11))+'" text="'+IIF(ISNULL(TOREPORT), "xfrxdraw", "for clause: "+STRTRANHTMLSTRING(ALLTRIM(TOREPORT.CFORCLAUSE)))+'" pages="'+LTRIM(STR(THIS.CURRENTPAGE+1, 11))
IF ISNULL(TOREPORT)
LCPOM = LCPOM+'" TP="1950'+'" BP="2000'+'" LP="2100'+'" RP="2100'+'" TM="1950'+'" TS="0'+'" LM="2100'+'" RM="2100'+'" BM="2000'+'" UM="0'
ELSE
LCPOM = LCPOM+'" TP="'+ALLTRIM(__STR(TOREPORT.LNTOPPAGEMARGIN, 10, 3))+'" BP="'+ALLTRIM(__STR(TOREPORT.LNBOTTOMPAGEMARGIN, 10, 3))+'" LP="'+ALLTRIM(__STR(TOREPORT.LNLEFTPAGEMARGIN, 10, 3))+'" RP="'+ALLTRIM(__STR(TOREPORT.LNRIGHTPAGEMARGIN, 10, 3))+'" TM="'+ALLTRIM(__STR(TOREPORT.LNTOPMARGIN, 10, 3))+'" TS="'+ALLTRIM(__STR(TOREPORT.LNTOPMARGINSHIFT, 10, 3))+'" LM="'+ALLTRIM(__STR(TOREPORT.LNLEFTMARGIN, 10, 3))+'" RM="'+ALLTRIM(__STR(TOREPORT.LNRIGHTMARGIN, 10, 3))+'" BM="'+ALLTRIM(__STR(TOREPORT.LNBOTTOMMARGIN, 10, 3))+'" UM="'+ALLTRIM(__STR(TOREPORT.NUPPERMOST, 10, 3))
ENDIF
LCPOM = LCPOM+'" rctype="J'+'">'+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXML, LCPOM)
RETURN
ENDPROC
**
PROCEDURE endPage
= DODEFAULT()
= FWRITE(THIS.HFILEXML, '  </xfrx:page>'+CHR(13)+CHR(10))
ENDPROC
**
PROCEDURE endSection
= FWRITE(THIS.HFILEXML, '   </xfrx:section>'+CHR(13)+CHR(10))
ENDPROC
**
PROCEDURE endReport
= DODEFAULT()
= FWRITE(THIS.HFILEXML, ' </xfrx:report>'+CHR(13)+CHR(10))
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
LOCAL LCPOM, LII, LCFILE, LISELE
STORE THIS.NCOUNTER+1 TO THIS.NCOUNTER, LII
IF BASE64(TCPATH, THIS.TMPIMAGE)=0
LISELE = SELECT()
SELECT (THIS.ALIAS)
APPEND MEMO DATA1 FROM (THIS.TMPIMAGE) OVERWRITE
LCFILE = DATA1
SELECT (LISELE)
ELSE
LCFILE = ""
ENDIF
LCPOM = '    <xfrx:picture name="'+"px"+LTRIM(STR(LII, 11))+'" left="'+LTRIM(__STR(TNLEFT, 11, 6))+'" top="'+LTRIM(__STR(TNTOP, 11, 6))+'" width="'+LTRIM(__STR(TNWIDTH, 11, 6))+'" height="'+LTRIM(__STR(TNHEIGHT, 11, 6))+'" borderwidth="'+LTRIM(STR(TNPENSIZE, 11))+'" borderstyle="'+LTRIM(STR(TNPENPAT, 11))+'" bordercolor="'+IIF(TNPENRED+TNPENGREEN+TNPENBLUE<0, "-1", LTRIM(STR(RGB(TNPENRED, TNPENGREEN, TNPENBLUE), 11)))+'" backcolor="'+IIF(TNFILLRED+TNFILLGREEN+TNFILLBLUE<0, "-1", LTRIM(STR(RGB(TNFILLRED, TNFILLGREEN, TNFILLBLUE), 11)))+'" offset="'+LTRIM(STR(TNOFFSET, 11))+'" src="'+STRTRANHTMLSTRING(TCPATH)+'" data="'+LCFILE+'" rctype="G'+'" />'+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXML, LCPOM)
RETURN
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
LOCAL LCPOM, LII
STORE THIS.NCOUNTER+1 TO THIS.NCOUNTER, LII
LCPOM = '    <xfrx:line name="'+"rc"+LTRIM(STR(LII, 11))+'" left="'+LTRIM(__STR(TNLEFT, 11, 6))+'" top="'+LTRIM(__STR(TNTOP, 11, 6))+'" width="'+LTRIM(__STR(TNLTO-TNLEFT, 11, 6))+'" height="'+LTRIM(__STR(TNTTO-TNTOP, 11, 6))+'" borderwidth="'+LTRIM(STR(TNPENSIZE, 11))+'" borderstyle="'+LTRIM(STR(TNPENPAT, 11))+'" bordercolor="'+IIF(TNPENRED+TNPENGREEN+TNPENBLUE<0, "-1", LTRIM(STR(RGB(TNPENRED, TNPENGREEN, TNPENBLUE), 11)))+'" rctype="-'+'" />'+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXML, LCPOM)
RETURN
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
LOCAL LCPOM, LII
STORE THIS.NCOUNTER+1 TO THIS.NCOUNTER, LII
LCPOM = '    <xfrx:rectangle name="'+"rc"+LTRIM(STR(LII, 11))+'" left="'+LTRIM(__STR(TNLEFT, 11, 6))+'" top="'+LTRIM(__STR(TNTOP, 11, 6))+'" width="'+LTRIM(__STR(TNWIDTH, 11, 6))+'" height="'+LTRIM(__STR(TNHEIGHT, 11, 6))+'" borderwidth="'+LTRIM(STR(TNPENSIZE, 11))+'" borderstyle="'+LTRIM(STR(TNPENPAT, 11))+'" bordercolor="'+IIF(TNPENRED+TNPENGREEN+TNPENBLUE<0, "-1", LTRIM(STR(RGB(TNPENRED, TNPENGREEN, TNPENBLUE), 11)))+'" backcolor="'+IIF(TNFILLRED+TNFILLGREEN+TNFILLBLUE<0, "-1", LTRIM(STR(RGB(TNFILLRED, TNFILLGREEN, TNFILLBLUE), 11)))+'" fillstyle="'+LTRIM(STR(TNFILLPAT, 11))+'" backstyle="'+"0"+'" offset="'+LTRIM(STR(TNOFFSET, 11))+'" rctype="R'+'" />'+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXML, LCPOM)
RETURN
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
LOCAL LCPOM, LII
STORE THIS.NCOUNTER+1 TO THIS.NCOUNTER, LII
LOCAL LCRESERVED1, LUVALUE
LUVALUE = THIS.OTXTBOX.NNUMERICVALUE
IF VARTYPE(LUVALUE)$"NFIBY"
LUVALUE = IIF(ISNULL(LUVALUE), "NULL", ALLTRIM(__STR(LUVALUE, _XFWID(), _XFDEC())))
ELSE
LUVALUE = "NULL"
ENDIF
LCRESERVED1 = THIS.OTXTBOX.CXLSFORMAT+CHR(10)+LUVALUE
LCPOM = '    <xfrx:textbox name="'+"tx"+LTRIM(STR(LII, 11))+'" left="'+LTRIM(__STR(TNLEFT, 11, 6))+'" top="'+LTRIM(__STR(TNTOP, 11, 6))+'" width="'+LTRIM(__STR(TNWIDTH, 11, 6))+'" height="'+LTRIM(__STR(TNHEIGHT, 11, 6))+'" forecolor="'+IIF(TNPENRED+TNPENGREEN+TNPENBLUE<0, "-1", LTRIM(STR(RGB(TNPENRED, TNPENGREEN, TNPENBLUE), 11)))+'" backcolor="'+IIF(TNFILLRED+TNFILLGREEN+TNFILLBLUE<0, "-1", LTRIM(STR(RGB(TNFILLRED, TNFILLGREEN, TNFILLBLUE), 11)))+'" backstyle="'+LTRIM(STR(TNMODE, 11))+'" fontname="'+TCFONT+'" fontsize="'+LTRIM(STR(TNFONTSIZE, 11))+'" fontstyle="'+IIF(TLBOLD, "B", "")+IIF(TLITALICS, "I", "")+IIF(TLUNDERLINE, "U", "")+'" align="'+IIF(TCALIGN="right", "R", IIF(TCALIGN="center", "C", "L"))+'" rctype="'+TCTYPE+'" uniqueid="'+STRTRANHTMLSTRING(TCUNIQUEID)+'" linkname="'+STRTRANHTMLSTRING(TCLINKNAME)+'" linkref="'+STRTRANHTMLSTRING(TCLINKHREF)+'" outline="'+STRTRANHTMLSTRING(TCOUTLINE)+'" outlinestyle="'+LTRIM(STR(TNOUTLINESTYLE, 11))+'" tooltip="'+STRTRANHTMLSTRING(TCTOOLTIP)+'" reserved1="'+STRTRANHTMLSTRING(LCRESERVED1)+'">'+STRTRANHTMLSTRING(NVL(_X____11334, ""))+'</xfrx:textbox>'+CHR(13)+CHR(10)
= FWRITE(THIS.HFILEXML, LCPOM)
RETURN
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
= DODEFAULT(TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
= FWRITE(THIS.HFILEXML, '   <xfrx:section type="'+LTRIM(STR(TOSECTION.INOBJECTCODE, 11))+'" height="'+IIF(TYPE("tnSectionContentHeight")="N", LTRIM(__STR(TNSECTIONCONTENTHEIGHT, 11, 6)), "-1")+'" top="'+LTRIM(__STR(TNTOP, 11, 6))+'" rctype="S'+'">'+CHR(13)+CHR(10))
RETURN
ENDPROC
**
FUNCTION fillBuffer
LPARAMETERS TOBUFFER, TCSESSIONDIR, TNMODE, TLFIRSTPAGE, TLLASTPAGE
LOCAL LII, LICOUNT, LOREPORTS, LOREPORT, LOPAGES, LOSECTION, LOSECTIONS, LOXML, LITYPE, LNMAXBOTTOM, LNHEIGHT, LNLONGESTCOLUMN, LNPAGEFOOTERTOP, LNSHRINKHEIGHT, LNCOLUMNTOP, LNSECTIONSTART, LNPREVHEIGHT, LNACTUALPOS, LNCOLUMNFOOTERHEIGHT, LLCOLHEADER, LLCOLFOOTER, LNRETVAL, LNCOLUMNSTART, LNSHRINKHEIGHT, M.TLLASTPAGE, LIY, LOOBJ, LCTYPE, LLSTRETCH, LLFLOAT, LLNOREPEAT, LNPENSIZE, LNPENPAT, LNFILLPAT, LLBOTTOM, LCUNIQUEID, LNGROUP, LCCOMMENT, LOSHAPE, LCPICTUREPATH, LUGENERAL, LCFILENAME, LISELE, LILEFT, LITOP, LIWIDTH, LIHEIGHT, LCPOM, LCFONTSTYLE, LCNAME, LNAT, LCRESERVED1
LOCAL LAFC(3), LABC(3)
LISELE = SELECT()
SELECT (THIS.ALIAS)
LOXML = THIS.OXMLDOM
LOPAGE = LOXML.DOCUMENTELEMENT.SELECTNODES('*/*[@page="'+LTRIM(STR(THIS.CURRENTPAGE, 11))+'"]')
LOSECTIONS = LOPAGE.ITEM(0).SELECTNODES('*[@rctype="S"]')
STORE 0 TO LNMAXBOTTOM, LNHEIGHT, LNLONGESTCOLUMN, LNPAGEFOOTERTOP, LNSHRINKHEIGHT
LNCOLUMNTOP = -1
FOR LII = 0 TO LOSECTIONS.LENGTH-1
LOSECTION = LOSECTIONS.ITEM(LII)
LITYPE = VAL(LOSECTION.GETATTRIBUTE("type"))
IF LITYPE=6
LNLONGESTCOLUMN = MAX(LNLONGESTCOLUMN, LNHEIGHT)
LNPAGEFOOTERTOP = LNLONGESTCOLUMN+__VAL(LOSECTION.GETATTRIBUTE("height"))
ELSE
IF LITYPE=7
IF LNLONGESTCOLUMN=0
LNPAGEFOOTERTOP = LNHEIGHT
ENDIF
ELSE
IF LITYPE=2
IF LNCOLUMNTOP=-1
LNCOLUMNTOP = LNHEIGHT
ENDIF
LNHEIGHT = LNCOLUMNTOP+__VAL(LOSECTION.GETATTRIBUTE("height"))
ELSE
LNHEIGHT = LNHEIGHT+__VAL(LOSECTION.GETATTRIBUTE("height"))
ENDIF
ENDIF
ENDIF
ENDFOR
STORE 0 TO LNSECTIONSTART, LNHEIGHT, LNPREVHEIGHT, LNACTUALPOS, LNCOLUMNFOOTERHEIGHT
STORE .F. TO LLCOLHEADER, LLCOLFOOTER
FOR LII = 0 TO LOSECTIONS.LENGTH-1
LOSECTION = LOSECTIONS.ITEM(LII)
LITYPE = VAL(LOSECTION.GETATTRIBUTE("type"))
IF LITYPE=6 .AND.  .NOT. M.TLLASTPAGE
LNHEIGHT = LNLONGESTCOLUMN
ELSE
IF LITYPE=7
IF M.TLLASTPAGE
LNACTUALPOS = LNPAGEFOOTERTOP
LNRETVAL = LNACTUALPOS-LNSHRINKHEIGHT+__VAL(LOSECTION.GETATTRIBUTE("height"))
ELSE
LNACTUALPOS = LNPAGEFOOTERTOP
LNRETVAL = LNACTUALPOS-LNSHRINKHEIGHT
ENDIF
ELSE
LNACTUALPOS = LNACTUALPOS+LNPREVHEIGHT
ENDIF
IF LITYPE=2
LNCOLUMNSTART = LNCOLUMNTOP
LNACTUALPOS = LNCOLUMNSTART
ENDIF
LNHEIGHT = LNACTUALPOS-LNSHRINKHEIGHT
LNPREVHEIGHT = __VAL(LOSECTION.GETATTRIBUTE("height"))
IF M.TNMODE>0 .AND. (INLIST(LITYPE, 6, 7) .AND.  .NOT. M.TLLASTPAGE .OR. INLIST(LITYPE, 2, 1) .AND.  .NOT. M.TLFIRSTPAGE)
IF LITYPE=6
LNCOLUMNFOOTERHEIGHT = __VAL(LOSECTION.GETATTRIBUTE("height"))
ELSE
IF LITYPE=2
IF  .NOT. LLCOLHEADER
LNSHRINKHEIGHT = LNSHRINKHEIGHT+__VAL(LOSECTION.GETATTRIBUTE("height"))
LLCOLHEADER = .T.
ENDIF
ELSE
LNSHRINKHEIGHT = LNSHRINKHEIGHT+__VAL(LOSECTION.GETATTRIBUTE("height"))
ENDIF
ENDIF
IF LITYPE=7
LNSHRINKHEIGHT = LNSHRINKHEIGHT+LNCOLUMNFOOTERHEIGHT
ENDIF
LLSKIPPING = .T.
ELSE
LLSKIPPING = .F.
ENDIF
LNSECTIONSTART = __VAL(LOSECTION.GETATTRIBUTE("top"))
ENDIF
IF LLSKIPPING
LOOP
ENDIF
FOR LIY = 0 TO LOSECTION.CHILDNODES.LENGTH-1
LOOBJ = LOSECTION.CHILDNODES.ITEM(LIY)
LCTYPE = LOOBJ.GETATTRIBUTE("rctype")
LILEFT = __VAL(LOOBJ.GETATTRIBUTE("left"))
LITOP = __VAL(LOOBJ.GETATTRIBUTE("top"))
LIWIDTH = __VAL(LOOBJ.GETATTRIBUTE("width"))
LIHEIGHT = __VAL(LOOBJ.GETATTRIBUTE("height"))
DO CASE
CASE LCTYPE="T" .OR. LCTYPE="L"
__C2RGB(VAL(LOOBJ.GETATTRIBUTE("backcolor")), @LABC)
__C2RGB(VAL(LOOBJ.GETATTRIBUTE("forecolor")), @LAFC)
STORE .F. TO LLSTRETCH, LLFLOAT, LLNOREPEAT, LLBOTTOM
LNPENSIZE = 1
STORE 0 TO LNPENPAT, LNFILLPAT, LNGROUP
LCUNIQUEID = LOOBJ.GETATTRIBUTE("uniqueid")
LCCOMMENT = ""
LCPOM = LOOBJ.GETATTRIBUTE("align")
LCFONTSTYLE = LOOBJ.GETATTRIBUTE("fontstyle")
LOSHAPE = TOBUFFER.ADDSHAPE(IIF(LCTYPE="T", 8, 6), LILEFT, LITOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), LIHEIGHT, LIWIDTH, HTMLSTRINGTRANSTR(LOOBJ.TEXT), LOOBJ.GETATTRIBUTE("fontname"), VAL(LOOBJ.GETATTRIBUTE("fontsize")), IIF(LCPOM="R", "right", IIF(LCPOM="C", "center", "left")), AT("I", LCFONTSTYLE)>0, AT("B", LCFONTSTYLE)>0, AT("U", LCFONTSTYLE)>0, LLSTRETCH, LLFLOAT, LLNOREPEAT, LAFC(1), LAFC(2), LAFC(3), 0, 0, LABC(1), LABC(2), LABC(3), LNFILLPAT, VAL(LOOBJ.GETATTRIBUTE("backstyle")), LLBOTTOM, LCUNIQUEID+CHR(13)+LTRIM(STR(LNGROUP, 8))+CHR(13)+LCCOMMENT)
LOSHAPE.LCLINKNAME = HTMLSTRINGTRANSTR(LOOBJ.GETATTRIBUTE("linkname"))
LOSHAPE.LCLINKHREF = HTMLSTRINGTRANSTR(LOOBJ.GETATTRIBUTE("linkref"))
LOSHAPE.LCOUTLINE = HTMLSTRINGTRANSTR(LOOBJ.GETATTRIBUTE("outline"))
LOSHAPE.NOUTLINESTYLE = VAL(LOOBJ.GETATTRIBUTE("outlinestyle"))
LOSHAPE.CTOOLTIP = HTMLSTRINGTRANSTR(LOOBJ.GETATTRIBUTE("tooltip"))
LOSHAPE.CNAME = LOOBJ.GETATTRIBUTE("name")
LNMAXBOTTOM = MAX(LNMAXBOTTOM, LITOP+LIHEIGHT)
LCRESERVED1 = LOOBJ.GETATTRIBUTE("reserved1")
LNAT = AT(CHR(10), LCRESERVED1)
IF LNAT>0
LOSHAPE.NNUMERICVALUE = SUBSTR(LCRESERVED1, LNAT+1)
LOSHAPE.CXLSFORMAT = LEFT(LCRESERVED1, LNAT-1)
ELSE
LOSHAPE.NNUMERICVALUE = .NULL.
LOSHAPE.CXLSFORMAT = ""
ENDIF
CASE LCTYPE="R"
__C2RGB(VAL(LOOBJ.GETATTRIBUTE("backcolor")), @LABC)
__C2RGB(VAL(LOOBJ.GETATTRIBUTE("bordercolor")), @LAFC)
STORE "" TO LCPICTUREPATH, LCCOMMENT
LUGENERAL = .NULL.
TOBUFFER.ADDRECTANGLE(LOOBJ.GETATTRIBUTE("name"), LILEFT, LITOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), LIWIDTH, LIHEIGHT, .F., LAFC(1), LAFC(2), LAFC(3), VAL(LOOBJ.GETATTRIBUTE("borderwidth")), VAL(LOOBJ.GETATTRIBUTE("borderstyle")), LABC(1), LABC(2), LABC(3), VAL(LOOBJ.GETATTRIBUTE("fillstyle")), .F., LCPICTUREPATH, VAL(LOOBJ.GETATTRIBUTE("offset")), .F., 0, LUGENERAL,  ,  , LCCOMMENT)
CASE LCTYPE="G"
LCPOM = LOOBJ.GETATTRIBUTE("data")
IF  .NOT. EMPTY(LCPOM)
LCNAME = LOOBJ.GETATTRIBUTE("name")
__C2RGB(VAL(LOOBJ.GETATTRIBUTE("bordercolor")), @LAFC)
LCFILENAME = ADDBS(TCSESSIONDIR)+LCNAME+".xfp"
REPLACE DATA1 WITH LCPOM
ERASE (THIS.TMPIMAGE)
COPY MEMO DATA1 TO (THIS.TMPIMAGE)
IF ESAB64(THIS.TMPIMAGE, LCFILENAME)=0
ENDIF
LCPICTUREPATH = "p"+LCFILENAME
LCCOMMENT = ""
LUGENERAL = .NULL.
TOBUFFER.ADDRECTANGLE(LCNAME, LILEFT, LITOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), LIWIDTH, LIHEIGHT, .F., LAFC(1), LAFC(2), LAFC(3), VAL(LOOBJ.GETATTRIBUTE("borderwidth")), VAL(LOOBJ.GETATTRIBUTE("borderstyle")), -1, -1, -1, 0, .F., LCPICTUREPATH, 0, .F., 0, LUGENERAL,  ,  , LCCOMMENT)
ENDIF
CASE LCTYPE="-"
__C2RGB(VAL(LOOBJ.GETATTRIBUTE("bordercolor")), @LAFC)
IF LIHEIGHT>LIWIDTH
TOBUFFER.ADDVERTICALLINE(LOOBJ.GETATTRIBUTE("name"), LAFC(1), LAFC(2), LAFC(3), LILEFT, LITOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), LIHEIGHT, .F., .F., VAL(LOOBJ.GETATTRIBUTE("borderstyle")), VAL(LOOBJ.GETATTRIBUTE("borderwidth")), .F., 0)
ELSE
TOBUFFER.ADDHORIZONTALLINE(LOOBJ.GETATTRIBUTE("name"), LAFC(1), LAFC(2), LAFC(3), LILEFT, LITOP+IIF(TNMODE>0, -LNSECTIONSTART+LNHEIGHT, 0), LIWIDTH, LIHEIGHT, .F., .F., VAL(LOOBJ.GETATTRIBUTE("borderstyle")), VAL(LOOBJ.GETATTRIBUTE("borderwidth")))
ENDIF
ENDCASE
ENDFOR
ENDFOR
SELECT (LISELE)
RETURN LNRETVAL
ENDFUNC
**
PROCEDURE initfonts
LPARAMETERS TODOC, TCTARGET, TNPAGENUMBER
IF  .NOT. INLIST(TCTARGET, "PDF", "HTML")
RETURN
ENDIF
LOCAL LOXML, LOOBJS, LOOBJ, LII, LCFONTSTYLE
LOXML = THIS.OXMLDOM
LOOBJS = LOXML.DOCUMENTELEMENT.SELECTNODES('*/*/*/*[@rctype="T" or @rctype="L"]')
FOR LII = 0 TO LOOBJS.LENGTH-1
LOOBJ = LOOBJS.ITEM(LII)
LCFONTSTYLE = LOOBJ.GETATTRIBUTE("fontstyle")
= IIF(TCTARGET="PDF", TODOC.ADDFONT(LOOBJ.GETATTRIBUTE("fontname"), AT("B", LCFONTSTYLE)>0, AT("I", LCFONTSTYLE)>0, 0), IIF(TCTARGET="HTML", TODOC.ADDFONT(LOOBJ.GETATTRIBUTE("fontname"), VAL(LOOBJ.GETATTRIBUTE("fontsize")), AT("B", LCFONTSTYLE)>0, AT("I", LCFONTSTYLE)>0), .T.))
ENDFOR
RETURN
ENDPROC
**
PROCEDURE ReadAllAnchors
LPARAMETERS LOCNT
LOCAL LOXML, LOOBJS, LOOBJ, LII, LCPOM, LCNAME, LIPAGE
LOXML = THIS.OXMLDOM
LOOBJS = LOXML.DOCUMENTELEMENT.SELECTNODES('*/*/*/*[(@rctype="T" or @rctype="L") and (@linkname!="" or @outline!="")]')
FOR LII = 0 TO LOOBJS.LENGTH-1
LOOBJ = LOOBJS.ITEM(LII)
LIPAGE = VAL(LOOBJ.PARENTNODE.PARENTNODE.GETATTRIBUTE("order"))
LCPOM = HTMLSTRINGTRANSTR(LOOBJ.GETATTRIBUTE("linkname"))
LCNAME = LOOBJ.GETATTRIBUTE("name")
= IIF(LEN(LCPOM)>0, LOCNT.ADDANAME(LIPAGE, LCNAME, LCPOM), .T.)
LCPOM = HTMLSTRINGTRANSTR(LOOBJ.GETATTRIBUTE("outline"))
= IIF(LEN(LCPOM)>0, LOCNT.ADDBOOKNAME(LIPAGE, LCNAME, LCPOM, VAL(LOOBJ.GETATTRIBUTE("outlinestyle")), LEFT(LCNAME, AT("_", LCNAME)-1)), .T.)
ENDFOR
RETURN
ENDPROC
**
PROCEDURE ReadStringForFinding
LPARAMETERS LOCNT, LIPAGE
LOCAL LCPOM, LII, LOOBJS, LOOBJ, LOXML
LOXML = THIS.OXMLDOM
LOOBJS = LOXML.DOCUMENTELEMENT.SELECTNODES('*/*[@order="'+LTRIM(STR(LIPAGE, 11))+'"]/*/*[(@rctype="T" or @rctype="L") and .!=""]')
FOR LII = 0 TO LOOBJS.LENGTH-1
LOOBJ = LOOBJS.ITEM(LII)
= LOCNT.ADDINDEX(LIPAGE, LOOBJ.GETATTRIBUTE("name"), HTMLSTRINGTRANSTR(LOOBJ.TEXT))
ENDFOR
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS OOWriter AS xfrxDocument
PROTECTED CTEXTMERGE, CTEXTMERGED
NAME = "OOWriter"
ALIAS = ""
CFS = ""
CAEXT = ""
CTMPPATH = ""
DIMENSION ATMPFILES(4)
NCOUNTER = 0
ITABLECOUNT = 0
IIMAGECOUNT = 0
IOBJECTCOUNT = 0
IPAGECOUNT = 0
IPARAGRAPHCOUNT = 0
IWORDCOUNT = 0
ICHARCOUNT = 0
IZINDEX = 0
OCURRENTSECTION = .NULL.
ICURRENTSECTIONH = 0
ICURRENTSECTIONT = 0
IGROUPSECTIONH = 0
IGROUPSECTIONHH = 0
IGROUPSECTIONBH = 0
IGROUPSECTIONFH = 0
XCURRENTSECTION = 0
LFIRSTPAGE = .T.
CXMLPAGE = ""
CXMLPAGEDATA = ""
CXMLHEADER = ""
CXMLFOOTER = ""
CXMLHEADERDATA = ""
CXMLFOOTERDATA = ""
CXMLPARAGRAPHPROPERTIES = ""
CXMLHEADERPARAGRAPHPROPERTIES = ""
CXMLFOOTERPARAGRAPHPROPERTIES = ""
CXMLBUFFER = ""
NPAGENO = 0
NROWNO = 0
NCOLNO = 0
CENTITYSTYLE = ""
CENTITYBODY = ""
CENTITYFFD = ""
CORDER = ""
LHEADER = .F.
LFOOTER = .F.
LBODY = .F.
CTEXTMERGE = ""
CTEXTMERGED = ""
MODE = 1
CLASTFONT = ""
NLASTERROR = 0
NTOPPAGEMARGIN = 0
NLEFTPAGEMARGIN = 0
NRIGHTPAGEMARGIN = 0
NBOTTOMPAGEMARGIN = 0
CPAGENAME = ""
CPAGEDISPLAYNAME = ""
CVERTICAL_REL = ""
CHORIZONTAL_REL = ""
OREPORT = .NULL.
CATCH = .NULL.
CLANG = ""
CCOUNTRY = ""
CCURRENCYSYMBOL = ""
OXFRX = .NULL.
DIMENSION ASECTIONSH(9, 3)
**
PROCEDURE Error
LPARAMETERS LNCODE, LCMETH, LNLINE
THIS.OXFRX.ADDTOLOG("#OOWRITER: Error "+TRANSFORM(LNCODE, "")+" "+LCMETH+" "+TRANSFORM(LNLINE, ""))
THIS.NLASTERROR = LNCODE
DO CASE
CASE ISNULL(M.THIS.CATCH)
RETURN
CASE M.THIS.CATCH
RETURN
OTHERWISE
ERROR LNCODE
ENDCASE
ENDPROC
**
FUNCTION SetCatch
LPARAMETERS LLCATCH
LOCAL LUCATCH
LUCATCH = M.THIS.CATCH
THIS.CATCH = LLCATCH
IF LLCATCH
THIS.NLASTERROR = 0
ENDIF
RETURN LUCATCH
ENDFUNC
**
FUNCTION MD
LPARAMETERS LCFOLDER
LOCAL LLEXIST, LLCATCH
LOCAL LAXA(1)
LLEXIST = DIRECTORY(LCFOLDER)
IF  .NOT. LLEXIST
LLCATCH = THIS.SETCATCH(.T.)
MD (LCFOLDER)
= THIS.SETCATCH(LLCATCH)
ENDIF
RETURN INLIST(THIS.NLASTERROR, 0, 1961)
ENDFUNC
**
FUNCTION RD
LPARAMETERS LCFOLDER
LOCAL LLEXIST, LLCATCH
LOCAL LAXA(1)
THIS.NLASTERROR = 0
LLEXIST = DIRECTORY(LCFOLDER)
IF LLEXIST
LLCATCH = THIS.SETCATCH(.T.)
RD (LCFOLDER)
= THIS.SETCATCH(LLCATCH)
ENDIF
RETURN THIS.NLASTERROR=0
ENDFUNC
**
PROCEDURE Init
LPARAMETERS LOXFRX
LOCAL LCPOM, LILEN
THIS.OXFRX = LOXFRX
DECLARE INTEGER WideCharToMultiByte IN kernel32.dll INTEGER, INTEGER, STRING @, INTEGER, STRING @, INTEGER, STRING @, STRING @
DECLARE INTEGER MultiByteToWideChar IN kernel32.dll INTEGER, INTEGER, STRING @, INTEGER, STRING @, INTEGER
DECLARE INTEGER GetLocaleInfo IN kernel32.dll INTEGER, INTEGER, STRING @, INTEGER
THIS.CTEXTMERGED = SET("TEXTMERGE", 1)
SET TEXTMERGE DELIMITERS TO "<<", ">>"
LCPOM = SPACE(254)
LILEN = GETLOCALEINFO(0, 0000000003, @LCPOM, LEN(LCPOM))
THIS.CLANG = LEFT(LCPOM, IIF(LILEN=4, 2, LILEN-1))
LILEN = GETLOCALEINFO(0, 0000000007, @LCPOM, LEN(LCPOM))
THIS.CCOUNTRY = LEFT(LCPOM, IIF(LILEN=4, 2, LILEN-1))
LILEN = GETLOCALEINFO(0, 0000000020, @LCPOM, LEN(LCPOM))
THIS.CCURRENCYSYMBOL = LEFT(LCPOM, LILEN-1)
DODEFAULT()
ENDPROC
**
PROCEDURE Destroy
LOCAL LCPOM
LCPOM = LEFT(THIS.CTEXTMERGED, 2)+","+RIGHT(THIS.CTEXTMERGED, 2)
SET TEXTMERGE DELIMITERS TO &LCPOM.
DODEFAULT()
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
FUNCTION CreateFiles
LPARAMETERS LOXFRX
LOCAL LLNEXT, LCPOM, LII, LCPATH, LISELE, LCEXACT
LOCAL LAFILES(3)
THIS.ALIAS = SYS(2015)
THIS.CFS = SYS(2015)
THIS.CAEXT = SYS(2015)
LISELE = SELECT()
SELECT 0
CREATE CURSOR (THIS.ALIAS) (XX000 C (10), XX001 M NOCPTRANS, XX002 C (50), XX003 C (10))
SELECT (THIS.ALIAS)
INDEX ON XX000+XX002 TAG I02
INDEX ON XX000+XX003 TAG I01 ADDITIVE
SELECT 0
CREATE CURSOR (THIS.CFS) (XX100 N (1), XX101 M NOCPTRANS)
SELECT (THIS.CFS)
INDEX ON STR(XX100, 1)+STR(OCCURS("\", XX101), 3) TAG I01 DESCENDING
SELECT 0
CREATE CURSOR (THIS.CAEXT) (XX000 I, NNUMERICVALUE B NULL, CXLSFORMAT C (50) NULL, LABSOLUTE L NULL, NEMBEDDING I NULL, NROTATE I NULL, NROTATIONPOINT I NULL, LSTRIKED L NULL)
SELECT (THIS.CAEXT)
INDEX ON XX000 TAG I01
STORE 0 TO THIS.ITABLECOUNT, THIS.IIMAGECOUNT, THIS.IOBJECTCOUNT, THIS.IPAGECOUNT, THIS.IPARAGRAPHCOUNT, THIS.IWORDCOUNT, THIS.ICHARCOUNT
STORE 0 TO LAFILES
LCPOM = SPACE(254)
LCPATH = LOXFRX.CSESSIONDIR+"\"+SYS(2015)
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (0, LCPATH)
STORE LCPATH+"\" TO THIS.CTMPPATH, LCPATH
LLNEXT = THIS.MD(LCPATH) .AND. THIS.MD(LCPATH+"META-INF")
IF LLNEXT
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (0, LCPATH+"META-INF")
THIS.ATMPFILES(4) = FCREATE(LCPATH+"META-INF\manifest.xml", 0)
LLNEXT = THIS.ATMPFILES(4)>0
ENDIF
IF LLNEXT
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (1, LCPATH+"META-INF\manifest.xml")
THIS.ATMPFILES(1) = FCREATE(LCPATH+"content.xml", 0)
LLNEXT = THIS.ATMPFILES(1)>0
ENDIF
IF LLNEXT
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (1, LCPATH+"content.xml")
THIS.ATMPFILES(2) = FCREATE(LCPATH+"styles.xml", 0)
LLNEXT = THIS.ATMPFILES(2)>0
ENDIF
IF LLNEXT
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (1, LCPATH+"styles.xml")
THIS.ATMPFILES(3) = FCREATE(LCPATH+"meta.xml", 0)
LLNEXT = THIS.ATMPFILES(3)>0
ENDIF
IF LLNEXT
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (1, LCPATH+"meta.xml")
LAFILES(2) = FCREATE(LCPATH+"mimetype", 0)
LLNEXT = LAFILES(2)>0
ENDIF
IF LLNEXT
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (1, LCPATH+"mimetype")
LAFILES(3) = FCREATE(LCPATH+"settings.xml", 0)
LLNEXT = LAFILES(3)>0
ENDIF
IF LLNEXT
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (1, LCPATH+"settings.xml")
_TEXT = THIS.ATMPFILES(4)
= FWRITE(_TEXT, '<?xml ')
TEXT TEXTMERGE NOSHOW
version="1.0" encoding="UTF-8"?>
<!DOCTYPE manifest:manifest PUBLIC "-//OpenOffice.org//DTD Manifest 1.0//EN" "Manifest.dtd">
<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0">
ENDTEXT
IF THIS.MODE=2
TEXT TEXTMERGE NOSHOW
 <manifest:file-entry manifest:media-type="application/vnd.oasis.opendocument.spreadsheet" manifest:full-path="/"/>
ENDTEXT
ELSE
TEXT TEXTMERGE NOSHOW
 <manifest:file-entry manifest:media-type="application/vnd.oasis.opendocument.text" manifest:full-path="/"/>
ENDTEXT
ENDIF
TEXT TEXTMERGE NOSHOW
 <manifest:file-entry manifest:media-type="application/binary" manifest:full-path="layout-cache"/>
 <manifest:file-entry manifest:media-type="text/xml" manifest:full-path="content.xml"/>
 <manifest:file-entry manifest:media-type="text/xml" manifest:full-path="meta.xml"/>
 <manifest:file-entry manifest:media-type="text/xml" manifest:full-path="styles.xml"/>
 <manifest:file-entry manifest:media-type="text/xml" manifest:full-path="settings.xml"/>
ENDTEXT
_TEXT = THIS.ATMPFILES(3)
LCPOM = THIS.DT2STAMP(DATETIME())
= FWRITE(_TEXT, '<?xml ')
TEXT TEXTMERGE NOSHOW
version="1.0" encoding="UTF-8"?>
<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" 
 xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:ooo="http://openoffice.org/2004/office" office:version="1.0">
 <office:meta>
  <meta:generator>XFRX</meta:generator>
  <meta:creation-date><<lcPom>></meta:creation-date>
  <dc:date><<lcPom>></dc:date>
  <dc:language><<This.cLang>></dc:language>
  <meta:editing-cycles>1</meta:editing-cycles>
  <meta:editing-duration>PT00M00S</meta:editing-duration>
  <dc:title><<STRCONV(loXFRX.oDocument.cTitle,9)>></dc:title> 
  <dc:description><<STRCONV(loXFRX.oDocument.ccomments,9)>></dc:description> 
  <dc:subject><<STRCONV(loXFRX.oDocument.cSubject,9)>></dc:subject> 
  <meta:keyword><<STRCONV(loXFRX.oDocument.cKeyWords,9)>></meta:keyword> 
ENDTEXT
IF THIS.MODE=2
= FWRITE(LAFILES(2), 'application/vnd.oasis.opendocument.spreadsheet')
ELSE
= FWRITE(LAFILES(2), 'application/vnd.oasis.opendocument.text')
ENDIF
_TEXT = LAFILES(3)
= FWRITE(_TEXT, '<?xml ')
TEXT TEXTMERGE NOSHOW
version="1.0" encoding="UTF-8"?>
<office:document-settings
 xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0"
 xmlns:ooo="http://openoffice.org/2004/office"
 office:version="1.0">
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="int">19756</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="int">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="int">34468</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="int">19722</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view1</config:config-item>
ENDTEXT
IF THIS.MODE=2
TEXT TEXTMERGE NOSHOW
     <config:config-item-map-named config:name="Tables">
      <config:config-item-map-entry config:name="List1">
       <config:config-item config:name="CursorPositionX" config:type="int">0</config:config-item> 
       <config:config-item config:name="CursorPositionY" config:type="int">0</config:config-item> 
       <config:config-item config:name="HorizontalSplitMode" config:type="short">0</config:config-item> 
       <config:config-item config:name="VerticalSplitMode" config:type="short">0</config:config-item> 
       <config:config-item config:name="HorizontalSplitPosition" config:type="int">0</config:config-item> 
       <config:config-item config:name="VerticalSplitPosition" config:type="int">0</config:config-item> 
       <config:config-item config:name="ActiveSplitRange" config:type="short">2</config:config-item> 
       <config:config-item config:name="PositionLeft" config:type="int">0</config:config-item> 
       <config:config-item config:name="PositionRight" config:type="int">0</config:config-item> 
       <config:config-item config:name="PositionTop" config:type="int">0</config:config-item> 
       <config:config-item config:name="PositionBottom" config:type="int">0</config:config-item> 
      </config:config-item-map-entry>
     </config:config-item-map-named>
     <config:config-item config:name="ActiveTable" config:type="string">List1</config:config-item> 
     <config:config-item config:name="HorizontalScrollbarWidth" config:type="int">270</config:config-item> 
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item> 
     <config:config-item config:name="ZoomValue" config:type="int">100</config:config-item> 
     <config:config-item config:name="PageViewZoomValue" config:type="int">100</config:config-item> 
     <config:config-item config:name="ShowPageBreakPreview" config:type="boolean">false</config:config-item> 
     <config:config-item config:name="ShowZeroValues" config:type="boolean">true</config:config-item> 
     <config:config-item config:name="ShowNotes" config:type="boolean">true</config:config-item> 
     <config:config-item config:name="ShowGrid" config:type="boolean"><<IIF(loXFRX.oDocument.lDisplayGridLines,"true","false")>></config:config-item> 
     <config:config-item config:name="GridColor" config:type="long">12632256</config:config-item> 
     <config:config-item config:name="ShowPageBreaks" config:type="boolean">true</config:config-item> 
     <config:config-item config:name="HasColumnRowHeaders" config:type="boolean">true</config:config-item> 
     <config:config-item config:name="HasSheetTabs" config:type="boolean">true</config:config-item> 
     <config:config-item config:name="IsOutlineSymbolsSet" config:type="boolean">true</config:config-item> 
     <config:config-item config:name="IsSnapToRaster" config:type="boolean">false</config:config-item> 
     <config:config-item config:name="RasterIsVisible" config:type="boolean">false</config:config-item> 
     <config:config-item config:name="RasterResolutionX" config:type="int">1000</config:config-item> 
     <config:config-item config:name="RasterResolutionY" config:type="int">1000</config:config-item> 
     <config:config-item config:name="RasterSubdivisionX" config:type="int">1</config:config-item> 
     <config:config-item config:name="RasterSubdivisionY" config:type="int">1</config:config-item> 
     <config:config-item config:name="IsRasterAxisSynchronized" config:type="boolean">true</config:config-item>
ENDTEXT
ELSE
TEXT TEXTMERGE NOSHOW
     <config:config-item config:name="ViewLeft" config:type="int">3002</config:config-item>
     <config:config-item config:name="ViewTop" config:type="int">33202</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="int">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="int">19756</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="int">34466</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="int">39476</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">100</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
ENDTEXT
ENDIF
TEXT TEXTMERGE NOSHOW
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"></config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="PrinterName" config:type="string"></config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
  </config:config-item-set>
 </office:settings>
</office:document-settings>
ENDTEXT
_TEXT = THIS.ATMPFILES(1)
= FWRITE(_TEXT, '<?xml ')
TEXT TEXTMERGE NOSHOW
version="1.0" encoding="UTF-8" ?> 
<office:document-content xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
 xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0"
 xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"
 xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0"
 xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0"
 xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0"
 xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0"
 xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0"
 xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0"
 xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0"
 xmlns:math="http://www.w3.org/1998/Math/MathML"
 xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0"
 xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0"
 xmlns:ooo="http://openoffice.org/2004/office"
 xmlns:ooow="http://openoffice.org/2004/writer"
 xmlns:oooc="http://openoffice.org/2004/calc"
 xmlns:dom="http://www.w3.org/2001/xml-events"
 xmlns:xforms="http://www.w3.org/2002/xforms"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" office:version="1.0">
 <office:scripts /> 
ENDTEXT
_TEXT = THIS.ATMPFILES(2)
= FWRITE(_TEXT, '<?xml ')
TEXT TEXTMERGE NOSHOW
version="1.0" encoding="UTF-8" ?> 
<office:document-styles xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
 xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0"
 xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"
 xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0"
 xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0"
 xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0"
 xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0"
 xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0"
 xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0"
 xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0"
 xmlns:math="http://www.w3.org/1998/Math/MathML"
 xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0"
 xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0"
 xmlns:ooo="http://openoffice.org/2004/office"
 xmlns:ooow="http://openoffice.org/2004/writer"
 xmlns:oooc="http://openoffice.org/2004/calc"
 xmlns:dom="http://www.w3.org/2001/xml-events" office:version="1.0">
ENDTEXT
ENDIF
FOR LII = 1 TO ALEN(LAFILES)
= IIF(LAFILES(LII)>0, FCLOSE(LAFILES(LII)), .T.)
ENDFOR
_TEXT = -1
IF LLNEXT
LCPOM = '<style:style style:name="dsn_20_zero" style:display-name="dsn zero"'+CHR(13)+CHR(10)+' style:family="graphic">'+CHR(13)+CHR(10)+' <style:graphic-properties draw:stroke="none" svg:stroke-color="#000000" draw:fill="none"'+CHR(13)+CHR(10)+'  style:protect="size"'+CHR(13)+CHR(10)+'  draw:fill-color="#ffffff" style:run-through="foreground"'+CHR(13)+CHR(10)+'  style:wrap="run-through" style:number-wrapped-paragraphs="no-limit" '+CHR(13)+CHR(10)+'  style:vertical-pos="from-top" style:vertical-rel="paragraph"'+CHR(13)+CHR(10)+'  style:horizontal-pos="from-left" style:horizontal-rel="paragraph" />'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)+'<style:style style:name="Graphics" style:family="graphic">'+CHR(13)+CHR(10)+' <style:graphic-properties text:anchor-type="paragraph"'+CHR(13)+CHR(10)+'  svg:x="0cm" svg:y="0cm" style:wrap="dynamic"'+CHR(13)+CHR(10)+'  style:vertical-pos="top" style:vertical-rel="paragraph"'+CHR(13)+CHR(10)+'  style:horizontal-pos="center" style:horizontal-rel="paragraph" />'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)
LCPOM = LCPOM+'<draw:stroke-dash draw:name="VFP_20_Dashed"'+CHR(13)+CHR(10)+' draw:display-name="VFP Dashed" draw:style="rect"'+CHR(13)+CHR(10)+' draw:dots1="1" draw:dots1-length="0.1in"'+CHR(13)+CHR(10)+' draw:dots2="1" draw:dots2-length="0.1in"'+CHR(13)+CHR(10)+' draw:distance="0.05in" />'+CHR(13)+CHR(10)+'<draw:stroke-dash draw:name="VFP_20_Dotted"'+CHR(13)+CHR(10)+' draw:display-name="VFP Dotted" draw:style="rect"'+CHR(13)+CHR(10)+' draw:dots1="1" draw:dots2="1" draw:distance="0.072cm" />'+CHR(13)+CHR(10)+'<draw:stroke-dash draw:name="VFP_20_Dash_20_Dot"'+CHR(13)+CHR(10)+' draw:display-name="VFP Dash Dot" draw:style="rect"'+CHR(13)+CHR(10)+' draw:dots1="1" draw:dots1-length="0.1in" draw:dots2="1" draw:distance="0.05in" />'+CHR(13)+CHR(10)+'<draw:stroke-dash draw:name="VFP_20_Dash_20_Dot_20_Dot"'+CHR(13)+CHR(10)+' draw:display-name="VFP Dash Dot Dot" draw:style="rect"'+CHR(13)+CHR(10)+' draw:dots1="1" draw:dots1-length="0.1in" draw:dots2="2" draw:distance="0.05in" />'+CHR(13)+CHR(10)+'<draw:gradient draw:name="VFP_20_Gradient"'+CHR(13)+CHR(10)+' draw:display-name="VFP Gradient"'+CHR(13)+CHR(10)+' draw:style="linear"'+CHR(13)+CHR(10)+' draw:start-color="#000000"'+CHR(13)+CHR(10)+' draw:end-color="#ffffff"'+CHR(13)+CHR(10)+' draw:start-intensity="100%"'+CHR(13)+CHR(10)+' draw:end-intensity="100%"'+CHR(13)+CHR(10)+' draw:angle="0"'+CHR(13)+CHR(10)+' draw:border="0%" />'+CHR(13)+CHR(10)
LCPOM = LCPOM+'<draw:hatch draw:name="VFP_20_Horizontal"'+CHR(13)+CHR(10)+' draw:display-name="VFP Horizontal"'+CHR(13)+CHR(10)+' draw:style="single"'+CHR(13)+CHR(10)+' draw:color="#000000"'+CHR(13)+CHR(10)+' draw:distance="0.102cm"'+CHR(13)+CHR(10)+' draw:rotation="0" />'+CHR(13)+CHR(10)+'<draw:hatch draw:name="VFP_20_Vertical"'+CHR(13)+CHR(10)+' draw:display-name="VFP Vertical"'+CHR(13)+CHR(10)+' draw:style="single"'+CHR(13)+CHR(10)+' draw:color="#000000"'+CHR(13)+CHR(10)+' draw:distance="0.102cm"'+CHR(13)+CHR(10)+' draw:rotation="900" />'+CHR(13)+CHR(10)+'<draw:hatch draw:name="VFP_20_Upward_20_Diagonal"'+CHR(13)+CHR(10)+' draw:display-name="VFP Upward Diagonal"'+CHR(13)+CHR(10)+' draw:style="single"'+CHR(13)+CHR(10)+' draw:color="#000000"'+CHR(13)+CHR(10)+' draw:distance="0.102cm"'+CHR(13)+CHR(10)+' draw:rotation="3150" />'+CHR(13)+CHR(10)
LCPOM = LCPOM+'<draw:hatch draw:name="VFP_20_Downward_20_Diagonal"'+CHR(13)+CHR(10)+' draw:display-name="VFP Downward Diagonal"'+CHR(13)+CHR(10)+' draw:style="single"'+CHR(13)+CHR(10)+' draw:color="#000000"'+CHR(13)+CHR(10)+' draw:distance="0.102cm"'+CHR(13)+CHR(10)+' draw:rotation="450" />'+CHR(13)+CHR(10)+'<draw:hatch draw:name="VFP_20_Cross"'+CHR(13)+CHR(10)+' draw:display-name="VFP Cross"'+CHR(13)+CHR(10)+' draw:style="double"'+CHR(13)+CHR(10)+' draw:color="#000000"'+CHR(13)+CHR(10)+' draw:distance="0.076cm"'+CHR(13)+CHR(10)+' draw:rotation="900" />'+CHR(13)+CHR(10)+'<draw:hatch draw:name="VFP_20_Diagonal_20_Cross"'+CHR(13)+CHR(10)+' draw:display-name="VFP Diagonal Cross"'+CHR(13)+CHR(10)+' draw:style="double"'+CHR(13)+CHR(10)+' draw:color="#000000"'+CHR(13)+CHR(10)+' draw:distance="0.076cm"'+CHR(13)+CHR(10)+' draw:rotation="450" />'+CHR(13)+CHR(10)
LCPOM = LCPOM+'<style:style style:name="Standard" style:family="paragraph" style:class="text">'+CHR(13)+CHR(10)+' <style:paragraph-properties fo:background-color="transparent" style:shadow="none">'+CHR(13)+CHR(10)+' <style:tab-stops />'+CHR(13)+CHR(10)+' <style:background-image />'+CHR(13)+CHR(10)+' </style:paragraph-properties>'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)+'<style:style style:name="Header" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">'+CHR(13)+CHR(10)+' <style:paragraph-properties text:number-lines="false" text:line-number="0">'+CHR(13)+CHR(10)+' </style:paragraph-properties>'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)+'<style:style style:name="Footer" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">'+CHR(13)+CHR(10)+' <style:paragraph-properties text:number-lines="false" text:line-number="0">'+CHR(13)+CHR(10)+' </style:paragraph-properties>'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)+'<style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">'+CHR(13)+CHR(10)+' <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" fo:margin-left="0in" fo:margin-right="0in" />'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)+'<style:style style:name="Row_20_Blank" style:display-name="Row Blank" style:family="paragraph" style:parent-style-name="Standard" style:class="text">'+CHR(13)+CHR(10)+' <style:paragraph-properties fo:line-height="'+TOINCH(1562.50 )+'" fo:margin-top="0in" fo:margin-bottom="0in" fo:margin-left="0in" fo:margin-right="0in" />'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)
IF THIS.MODE=2
LCPOM = LCPOM+'<style:default-style style:family="table-cell">'+CHR(13)+CHR(10)+' <style:table-cell-properties style:decimal-places="2" />'+CHR(13)+CHR(10)+' <style:paragraph-properties style:tab-stop-distance="1.25cm" />'+CHR(13)+CHR(10)+' <style:text-properties style:font-name="Arial" fo:language="'+THIS.CLANG+'" fo:country="'+THIS.CCOUNTRY+'"'+CHR(13)+CHR(10)+' style:font-name-asian="Arial Unicode MS" style:language-asian="none" style:country-asian="none"'+CHR(13)+CHR(10)+' style:font-name-complex="Tahoma" style:language-complex="none" style:country-complex="none" />'+CHR(13)+CHR(10)+'</style:default-style>'+CHR(13)+CHR(10)+'<number:number-style style:name="N0">'+CHR(13)+CHR(10)+' <number:number number:min-integer-digits="1" />'+CHR(13)+CHR(10)+'</number:number-style>'+CHR(13)+CHR(10)+'<number:currency-style style:name="N104P0" style:volatile="true">'+CHR(13)+CHR(10)+' <number:number number:decimal-places="2" number:min-integer-digits="1" number:grouping="true" />'+CHR(13)+CHR(10)+' <number:text />'+CHR(13)+CHR(10)+' <number:currency-symbol number:language="'+THIS.CLANG+'" number:country="'+THIS.CCOUNTRY+'">'+STRCONV(THIS.CCURRENCYSYMBOL, 9)+'</number:currency-symbol>'+CHR(13)+CHR(10)+'</number:currency-style>'+CHR(13)+CHR(10)+'<number:currency-style style:name="N104">'+CHR(13)+CHR(10)+' <style:text-properties fo:color="#ff0000" />'+CHR(13)+CHR(10)+' <number:text>-</number:text>'+CHR(13)+CHR(10)+' <number:number number:decimal-places="2" number:min-integer-digits="1" number:grouping="true" />'+CHR(13)+CHR(10)+' <number:text />'+CHR(13)+CHR(10)+' <number:currency-symbol number:language="'+THIS.CLANG+'" number:country="'+THIS.CCOUNTRY+'">'+STRCONV(THIS.CCURRENCYSYMBOL, 9)+'</number:currency-symbol>'+CHR(13)+CHR(10)+' <style:map style:condition="value()>=0" style:apply-style-name="N104P0" />'+CHR(13)+CHR(10)+'</number:currency-style>'+CHR(13)+CHR(10)+'<style:style style:name="Default" style:family="table-cell" />'+CHR(13)+CHR(10)+'<style:style style:name="Result" style:family="table-cell" style:parent-style-name="Default">'+CHR(13)+CHR(10)+' <style:text-properties fo:font-style="italic" style:text-underline-style="solid" style:text-underline-width="auto"'+CHR(13)+CHR(10)+' style:text-underline-color="font-color" fo:font-weight="bold" />'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)+'<style:style style:name="Result2" style:family="table-cell" style:parent-style-name="Result" style:data-style-name="N104" />'+CHR(13)+CHR(10)+'<style:style style:name="Heading" style:family="table-cell" style:parent-style-name="Default">'+CHR(13)+CHR(10)+' <style:table-cell-properties style:text-align-source="fix" style:repeat-content="false" />'+CHR(13)+CHR(10)+' <style:paragraph-properties fo:text-align="center" />'+CHR(13)+CHR(10)+' <style:text-properties fo:font-size="16pt" fo:font-style="italic" fo:font-weight="bold" />'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)
ENDIF
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES ("SS", LCPOM)
ENDIF
SELECT (LISELE)
RETURN LLNEXT
ENDFUNC
**
PROCEDURE GenerateFiles
LPARAMETERS LOXFRX
LOCAL LISELE, LCPATH, LCOUTFOLDER, LCPOM, LCPATHX, LII, LIY, LIZ, LCNAME, LCSYS, LCEXACT
LCEXACT = SET("Exact")
SET EXACT OFF
LOCAL LADIRS(1), LADIRSX(1)
LCPATH = THIS.CTMPPATH
LISELE = SELECT()
SELECT (THIS.ALIAS)
SET ORDER TO "I01"
_TEXT = THIS.ATMPFILES(4)
SET KEY TO "MANIFESTFE"
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: MANIFESTFE "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
TEXT TEXTMERGE NOSHOW
</manifest:manifest>
ENDTEXT
_TEXT = THIS.ATMPFILES(1)
TEXT TEXTMERGE NOSHOW
<office:font-face-decls>
ENDTEXT
SET KEY TO "CFFD"
SET FILTER TO XX000="CFFD      "
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: CFFD "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
TEXT TEXTMERGE NOSHOW
</office:font-face-decls>
<office:automatic-styles>
ENDTEXT
SET KEY TO "CAS"
SET FILTER TO XX000="CAS       "
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: CAS "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
TEXT TEXTMERGE NOSHOW
</office:automatic-styles>
<office:body>
ENDTEXT
IF THIS.MODE=2
TEXT TEXTMERGE NOSHOW
<office:spreadsheet>

ENDTEXT
ELSE
TEXT TEXTMERGE NOSHOW
<office:text>
<office:forms form:automatic-focus="false" form:apply-design-mode="false" /> 
<text:sequence-decls>
 <text:sequence-decl text:display-outline-level="0" text:name="Illustration" /> 
 <text:sequence-decl text:display-outline-level="0" text:name="Table" /> 
 <text:sequence-decl text:display-outline-level="0" text:name="Text" /> 
 <text:sequence-decl text:display-outline-level="0" text:name="Drawing" /> 
</text:sequence-decls>
<text:user-field-decls>
 <text:user-field-decl office:value-type="string" office:string-value="OpenDocument" text:name="CommitteeName" /> 
 <text:user-field-decl office:value-type="string" office:string-value="v1.0" text:name="Version" /> 
 <text:user-field-decl office:value-type="float" office:value="3" text:name="EditorialStatus" /> 
 <text:user-field-decl office:value-type="string" office:string-value="" text:name="revision" /> 
 <text:user-field-decl office:value-type="float" office:value="38473" text:name="Date" /> 
 <text:user-field-decl office:value-type="float" office:value="1" text:name="ShowSpecificationSnippets" /> 
 <text:user-field-decl office:value-type="string" office:string-value="OpenDocument" text:name="tcid" /> 
 <text:user-field-decl office:value-type="string" office:string-value="" text:name="description" /> 
</text:user-field-decls>

ENDTEXT
ENDIF
SET KEY TO "CTEXT"
SET FILTER TO XX000="CTEXT     "
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: CTEXT "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
IF THIS.MODE=2
TEXT TEXTMERGE NOSHOW
<table:named-expressions>
ENDTEXT
SET KEY TO "TNE"
SET FILTER TO XX000="TNE       "
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: TNE "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
TEXT TEXTMERGE NOSHOW
</table:named-expressions>
</office:spreadsheet>

ENDTEXT
ELSE
TEXT TEXTMERGE NOSHOW
</office:text>

ENDTEXT
ENDIF
TEXT TEXTMERGE NOSHOW
</office:body>
</office:document-content>
ENDTEXT
_TEXT = THIS.ATMPFILES(2)
TEXT TEXTMERGE NOSHOW
<office:font-face-decls>
ENDTEXT
SET KEY TO "SFFD"
SET FILTER TO XX000="SFFD      "
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: SFFD "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
TEXT TEXTMERGE NOSHOW
</office:font-face-decls>
<office:styles>
ENDTEXT
SET KEY TO "SS"
SET FILTER TO XX000="SS        "
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: SS "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
TEXT TEXTMERGE NOSHOW
</office:styles>
<office:automatic-styles>
ENDTEXT
SET KEY TO "SAS"
SET FILTER TO XX000="SAS       "
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: SAS "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
TEXT TEXTMERGE NOSHOW
</office:automatic-styles>
<office:master-styles>
ENDTEXT
SET KEY TO "SMS"
SET FILTER TO XX000="SMS       "
COUNT TO LII
LOXFRX.ADDTOLOG("#OOWRITER: SMS "+TRANSFORM(LII, ""))
GOTO TOP
SCAN ALL
TEXT TEXTMERGE NOSHOW
<<XX001>>
ENDTEXT
ENDSCAN
TEXT TEXTMERGE NOSHOW
</office:master-styles>
</office:document-styles>
ENDTEXT
_TEXT = THIS.ATMPFILES(3)
TEXT TEXTMERGE NOSHOW
  <<This.GetInfoXXML(loXFRX,1)>>
  <<This.GetInfoXXML(loXFRX,2)>>
  <<This.GetInfoXXML(loXFRX,3)>>
  <<This.GetInfoXXML(loXFRX,4)>>
  <meta:document-statistic
ENDTEXT
IF THIS.MODE=2
TEXT TEXTMERGE NOSHOW
   meta:table-count="<<This.nPageNo>>"
   meta:cell-count="0"
   meta:object-count="3"
ENDTEXT
ELSE
TEXT TEXTMERGE NOSHOW
   meta:table-count="<<This.iTableCount>>"
   meta:image-count="<<This.iImageCount>>"
   meta:object-count="<<This.iObjectCount>>"
   meta:page-count="<<This.iPageCount>>"
   meta:paragraph-count="<<This.iParagraphCount>>"
   meta:word-count="<<This.iWordCount>>"
   meta:character-count="<<This.iCharCount>>"
ENDTEXT
ENDIF
TEXT TEXTMERGE NOSHOW
   />
</office:meta>
</office:document-meta>
ENDTEXT
_TEXT = -1
FOR LII = 1 TO ALEN(THIS.ATMPFILES)
= IIF(THIS.ATMPFILES(LII)>0, FCLOSE(THIS.ATMPFILES(LII)), .T.)
ENDFOR
IF LOXFRX.ODOCUMENT.LDEVELOP
IF EMPTY(LOXFRX.ODOCUMENT.CDEVELOPFOLDER)
LCOUTFOLDER = LEFT(LOXFRX.COUTPUTNAME, LEN(LOXFRX.COUTPUTNAME)-LEN(JUSTEXT(LOXFRX.COUTPUTNAME))-1)
ELSE
IF  .NOT. THIS.MD(LOXFRX.ODOCUMENT.CDEVELOPFOLDER)
LCOUTFOLDER = LEFT(LOXFRX.COUTPUTNAME, LEN(LOXFRX.COUTPUTNAME)-LEN(JUSTEXT(LOXFRX.COUTPUTNAME))-1)
ENDIF
ENDIF
IF  .NOT. EMPTY(LCOUTFOLDER)
IF  .NOT. THIS.MD(LCOUTFOLDER)
LCOUTFOLDER = ""
ENDIF
ELSE
LCOUTFOLDER = THIS.ODOCUMENT.CDEVELOPFOLDER
ENDIF
IF  .NOT. EMPTY(LCOUTFOLDER)
LIY = 0
FOR LII = 1 TO ADIR(LADIRSX, LCOUTFOLDER+"\*.*", "D")
IF ATC("D", LADIRSX(LII, 5))>0 .AND.  .NOT. (LADIRSX(LII, 1)==".." .OR. LADIRSX(LII, 1)==".")
LIY = LIY+1
DIMENSION LADIRS(LIY, 1)
LADIRS(LIY, 1) = LCOUTFOLDER+"\"+LADIRSX(LII, 1)
ENDIF
ENDFOR
LIZ = 1
DO WHILE LIZ<=LIY
FOR LII = 1 TO ADIR(LADIRSX, LADIRS(LIZ, 1)+"\*.*", "D")
IF ATC("D", LADIRSX(LII, 5))>0 .AND.  .NOT. (LADIRSX(LII, 1)==".." .OR. LADIRSX(LII, 1)==".")
LIY = LIY+1
DIMENSION LADIRS(LIY, 1)
LADIRS(LIY, 1) = LADIRS(LIZ, 1)+"\"+LADIRSX(LII, 1)
ENDIF
ENDFOR
LIZ = LIZ+1
ENDDO
FOR LII = LIY TO 1 STEP -1
DELETE FILE (LADIRS(LII, 1)+"\*.*")
= THIS.RD(LADIRS(LII, 1))
ENDFOR
DELETE FILE (LCOUTFOLDER+"\*.*")
SELECT (THIS.ALIAS)
SET KEY TO
SET FILTER TO
GOTO TOP
COPY TO (LCOUTFOLDER+"\MAIN.dbf") WITH CDX
SELECT (THIS.CFS)
SET KEY TO
SET FILTER TO
GOTO TOP
COPY TO (LCOUTFOLDER+"\cFS.dbf") WITH CDX
SELECT (THIS.CAEXT)
SET KEY TO
SET FILTER TO
GOTO TOP
COPY TO (LCOUTFOLDER+"\cAExt.dbf") WITH CDX
SELECT (THIS.CFS)
SET KEY TO STR(0, 1)
SCAN ALL
IF  .NOT. ALLTRIM(XX101)+"\"==LCPATH
LCPATHX = ALLTRIM(SUBSTR(XX101, LEN(LCPATH)+1))
= THIS.MD(LCOUTFOLDER+"\"+LCPATHX)
COPY FILE (SYS(5)+CURDIR()+STRTRAN(ALLTRIM(XX101), "/.", "\")+"\*.*") TO (LCOUTFOLDER+"\"+LCPATHX+"\*.*")
ENDIF
ENDSCAN
COPY FILE (SYS(5)+CURDIR()+LCPATH+"*.*") TO (LCOUTFOLDER+"\*.*")
ENDIF
ENDIF
SELECT (LISELE)
SET EXACT &LCEXACT
RETURN
ENDPROC
**
FUNCTION GetInfoXXML
LPARAMETERS LOXFRX, LIINDEX
LOCAL LCNAME, LCVALUE, LCPOM
LCNAME = STRCONV(EVALUATE("loXFRX.oDocument.cInfo"+STR(LIINDEX, 1)+"_Name"), 9)
IF EMPTY(LCNAME)
RETURN ""
ENDIF
LCVALUE = STRCONV(EVALUATE("loXFRX.oDocument.cInfo"+STR(LIINDEX, 1)), 9)
IF EMPTY(LCVALUE)
LCPOM = '  <meta:user-defined meta:name="'+LCNAME+'" />'
ELSE
LCPOM = '  <meta:user-defined meta:name="'+LCNAME+'">'+LCVALUE+'</meta:user-defined>'
ENDIF
RETURN LCPOM
ENDFUNC
**
PROCEDURE CreateOutputFile
LPARAMETERS LCOUTPUT
LOCAL LCPATH, LOZIP, LISELE, LCEXACT
LCEXACT = UPPER(SET("EXACT"))
IF LCEXACT=="ON"
SET EXACT OFF
ENDIF
LCPATH = THIS.CTMPPATH
LISELE = SELECT()
LOZIP = CREATEOBJECT("eqZip")
LOZIP.OPENARCHIVE(LCOUTPUT)
SELECT (THIS.CFS)
SET KEY TO STR(1, 1)
SCAN ALL
LOZIP.APPENDFILE(ALLTRIM(XX101), CHRTRAN(SUBSTR(XX101, LEN(LCPATH)+1), "\", "/"))
ENDSCAN
LOZIP.CLOSEARCHIVE("Created with XFRX")
SELECT (LISELE)
IF LCEXACT=="ON"
SET EXACT ON
ENDIF
RETURN
ENDPROC
**
PROCEDURE OpenDocument
LPARAMETERS LOXFRX
IF  .NOT. LOXFRX.LNOTOPENWORD
* MAH
* LII = SHELLEXECUTE(FINDWINDOW(0, _SCREEN.CAPTION), "open", LOXFRX.COUTPUTNAME, "", "", 1)
ENDIF
ENDPROC
**
PROCEDURE ClearEnvironment
LOCAL LISELE, LCSAFETY, LCEXACT
LCSAFETY = SET("Safety")
SET SAFETY OFF
LCEXACT = UPPER(SET("EXACT"))
IF LCEXACT=="ON"
SET EXACT OFF
ENDIF
LISELE = SELECT()
SELECT (THIS.CFS)
SET KEY TO STR(0, 1)
SCAN ALL
DELETE FILE (ALLTRIM(XX101)+"\*.*")
THIS.RD(ALLTRIM(XX101))
ENDSCAN
SET SAFETY &LCSAFETY
IF LCEXACT=="ON"
SET EXACT ON
ENDIF
IF USED(THIS.ALIAS)
USE IN (THIS.ALIAS)
ENDIF
IF USED(THIS.CFS)
USE IN (THIS.CFS)
ENDIF
IF USED(THIS.CAEXT)
USE IN (THIS.CAEXT)
ENDIF
SELECT (LISELE)
THIS.OXFRX = .NULL.
RETURN
ENDPROC
**
PROCEDURE CreatePreview
LPARAMETERS LOXFRX
LOCAL LOSESSION, LOXFF, LCPOM, LIERR, LUERR, LISELE
IF EMPTY(LOXFRX.ODOCUMENT.CTHUMBNAIL)
RETURN
ENDIF
LISELE = SELECT()
LOSESSION = XFRX("XFRX#INIT")
LIERR = LOSESSION.SETPARAMS( ,  ,  ,  ,  ,  , "XFF")
IF LIERR=0
LOSESSION.SETPAGERANGE(LOXFRX.ODOCUMENT.NTHUMBNAILPAGE, LOXFRX.ODOCUMENT.NTHUMBNAILPAGE)
LOSESSION.PROCESSREPORT(LOXFRX.ODOCUMENT.CTHUMBNAIL)
LOXFF = LOSESSION.FINALIZE()
LUERR = LOXFF.SAVEPICTURE(LOSESSION.CSESSIONDIR+"\thumbnail.png", "png", 1, 1, 24, 80)
IF TYPE("luErr")="N"
THIS.MD(THIS.CTMPPATH+"Thumbnails")
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (0, THIS.CTMPPATH+"Thumbnails")
COPY FILE (LOSESSION.CSESSIONDIR+"\thumbnail.png") TO (THIS.CTMPPATH+"Thumbnails\thumbnail.png")
LCPOM = ' <manifest:file-entry manifest:media-type="" manifest:full-path="Thumbnails/" />'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES ("MANIFESTFE", LCPOM)
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (1, THIS.CTMPPATH+"Thumbnails\thumbnail.png")
LCPOM = ' <manifest:file-entry manifest:media-type="" manifest:full-path="Thumbnails/thumbnail.png" />'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES ("MANIFESTFE", LCPOM)
DELETE FILE (LOXFRX.CSESSIONDIR+"\thumbnail.png")
ENDIF
ENDIF
SELECT (LISELE)
RETURN
ENDPROC
**
PROCEDURE newReport
LPARAMETERS LOXFRX, TNREPORTNO, TCCODEPAGE, TOREPORT
THIS.NTOPMARGIN = MIN(TOREPORT.LNTOPMARGIN, 10000)
THIS.NLEFTMARGIN = MIN(TOREPORT.LNLEFTMARGIN, 10000)
THIS.NRIGHTMARGIN = MIN(TOREPORT.LNRIGHTMARGIN, 10000)
THIS.NBOTTOMMARGIN = MIN(TOREPORT.LNBOTTOMMARGIN, 10000)
THIS.NORIENTATION = TOREPORT.LNORIENTATION
THIS.NTOPPAGEMARGIN = TOREPORT.LNTOPPAGEMARGIN
THIS.NLEFTPAGEMARGIN = TOREPORT.LNLEFTPAGEMARGIN
THIS.NRIGHTPAGEMARGIN = TOREPORT.LNRIGHTPAGEMARGIN
THIS.NBOTTOMPAGEMARGIN = TOREPORT.LNBOTTOMPAGEMARGIN
THIS.LFIRSTPAGE = .T.
LOXFRX.ADDTOLOG("#OOWRITER: NewReport "+TRANSFORM(TNREPORTNO, ""))
THIS.CXMLPAGE = '<style:page-layout style:name="ps_%Page%">'+CHR(13)+CHR(10)+' <style:page-layout-properties'+CHR(13)+CHR(10)+'  fo:page-width="'+TOINCH(TOREPORT.LNPAPERWIDTH)+'"'+CHR(13)+CHR(10)+'  fo:page-height="'+TOINCH(TOREPORT.LNPAPERHEIGHT)+'"'+CHR(13)+CHR(10)+'  style:num-format="1"'+CHR(13)+CHR(10)+'  style:print-orientation="'+IIF(TOREPORT.LNPAPERWIDTH<=TOREPORT.LNPAPERHEIGHT, "portrait", "landscape")+'"'+CHR(13)+CHR(10)+'  fo:margin-top="'+TOINCH(TOREPORT.LNTOPPAGEMARGIN)+'"'+CHR(13)+CHR(10)+'  fo:margin-bottom="'+TOINCH(TOREPORT.LNBOTTOMPAGEMARGIN)+'"'+CHR(13)+CHR(10)+'  fo:margin-left="'+TOINCH(TOREPORT.LNLEFTPAGEMARGIN)+'"'+CHR(13)+CHR(10)+'  fo:margin-right="'+TOINCH(TOREPORT.LNRIGHTPAGEMARGIN)+'"'+CHR(13)+CHR(10)+'  style:writing-mode="lr-tb" style:footnote-max-height="0cm">'+CHR(13)+CHR(10)+'  <style:footnote-sep style:width="0.018cm" style:distance-before-sep="0cm" style:distance-after-sep="0cm"'+CHR(13)+CHR(10)+'   style:adjustment="left" style:rel-width="25%" style:color="#000000" />'+CHR(13)+CHR(10)+' </style:page-layout-properties>'+CHR(13)+CHR(10)
TOREPORT.LNEWPAGEGROUPSONNEWPAGE = LOXFRX.ODOCUMENT.LSHEETPERNPGROUP
THIS.OREPORT = TOREPORT
STORE 0 TO THIS.IZINDEX, THIS.NROWNO, THIS.ICURRENTSECTIONT, THIS.ICURRENTSECTIONH, THIS.IGROUPSECTIONH, THIS.IGROUPSECTIONHH, THIS.IGROUPSECTIONFH, THIS.IGROUPSECTIONBH, THIS.ASECTIONSH
STORE -1 TO THIS.ASECTIONSH(1, 3), THIS.ASECTIONSH(2, 3), THIS.ASECTIONSH(3, 3), THIS.ASECTIONSH(4, 3), THIS.ASECTIONSH(5, 3), THIS.ASECTIONSH(6, 3), THIS.ASECTIONSH(7, 3), THIS.ASECTIONSH(8, 3), THIS.ASECTIONSH(9, 3)
RETURN
ENDPROC
**
PROCEDURE endReport
LPARAMETERS LOXFRX
LOXFRX.ADDTOLOG("#OOWRITER: EndReport ")
THIS.OREPORT = .NULL.
ENDPROC
**
PROCEDURE newPage
LPARAMETERS LOXFRX, TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
LOCAL LCPOM, LCNAME, LCNAMED, LISELE
IF  .NOT. EMPTY(M.TNWIDTH)
THIS.NPAPERWIDTH = M.TNWIDTH
THIS.NPAPERHEIGHT = M.TNHEIGHT
ENDIF
LOXFRX.ADDTOLOG("#OOWRITER: NewPage "+TRANSFORM(TNPAGENO, "")+" ("+TRANSFORM(THIS.NPAPERWIDTH, "")+"x"+TRANSFORM(THIS.NPAPERHEIGHT, "")+")")
LISELE = SELECT()
STORE 0 TO THIS.IZINDEX, THIS.NROWNO, THIS.ICURRENTSECTIONT, THIS.ICURRENTSECTIONH, THIS.IGROUPSECTIONH, THIS.IGROUPSECTIONHH, THIS.IGROUPSECTIONFH, THIS.IGROUPSECTIONBH, THIS.ASECTIONSH
STORE -1 TO THIS.ASECTIONSH(1, 3), THIS.ASECTIONSH(2, 3), THIS.ASECTIONSH(3, 3), THIS.ASECTIONSH(4, 3), THIS.ASECTIONSH(5, 3), THIS.ASECTIONSH(6, 3), THIS.ASECTIONSH(7, 3), THIS.ASECTIONSH(8, 3), THIS.ASECTIONSH(9, 3)
THIS.NPAGENO = TNPAGENO
STORE "" TO THIS.CXMLHEADER, THIS.CXMLFOOTER, THIS.CXMLHEADERDATA, THIS.CXMLFOOTERDATA, THIS.CXMLPAGEDATA, THIS.CXMLPARAGRAPHPROPERTIES, THIS.CXMLHEADERPARAGRAPHPROPERTIES, THIS.CXMLFOOTERPARAGRAPHPROPERTIES
LCNAME = THIS.GETPAGE_SHEETNAME(LOXFRX.ODOCUMENT, TNPAGENO, @LCNAMED)
THIS.CPAGENAME = LCNAME
THIS.CPAGEDISPLAYNAME = LCNAMED
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002, XX003) VALUES ("SAS", STRTRAN(THIS.CXMLPAGE, "%Page%", LTRIM(STR(TNPAGENO, 11))), "ps_"+LTRIM(STR(TNPAGENO, 11)), STR(TNPAGENO, 5)+" 1000")
LCPOM = '<text:p text:style-name="'+LCNAME+'">'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", LCPOM, STR(TNPAGENO, 5)+" 2000")
IF THIS.MODE=0
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002, XX003) VALUES ("CTEXT", '%Data%', "Page_20_"+__STR(TNPAGENO, 10), STR(TNPAGENO, 5)+" 2002")
ENDIF
LCPOM = '<style:style style:name="'+LCNAME+'" style:family="paragraph" style:master-page-name="'+LCNAME+'" >'+CHR(13)+CHR(10)
IF THIS.MODE=0
LCPOM = LCPOM+'%ParagraphProperties%'
ENDIF
LCPOM = LCPOM+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002) VALUES ("CAS", LCPOM, "Page_20_"+__STR(TNPAGENO, 10))
LCPOM = '<style:master-page style:name="'+LCNAME+'" style:display-name="'+LCNAMED+'" style:page-layout-name="ps_'+__STR(TNPAGENO, 10)+'" >'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SMS", LCPOM, STR(TNPAGENO, 5)+" 0000")
STORE .F. TO THIS.LHEADER, THIS.LFOOTER, THIS.LBODY
SELECT (LISELE)
ENDPROC
**
PROCEDURE endPage
LPARAMETERS LOXFRX
LOCAL LCPOM, LISELE
LISELE = SELECT()
LOXFRX.ADDTOLOG("#OOWRITER: EndPage ")
IF  .NOT. ISNULL(THIS.OCURRENTSECTION) .AND. INLIST(THIS.OCURRENTSECTION.INOBJECTCODE, 7, 8)
THIS.CLOSESECTION(.NULL.)
ENDIF
THIS.LFIRSTPAGE = .F.
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SAS", '</style:page-layout>', STR(THIS.NPAGENO, 5)+" 1999")
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", '</text:p>', STR(THIS.NPAGENO, 5)+" 2199")
THIS.REPLACEXML("CTEXT", "Page_20_"+LTRIM(STR(THIS.NPAGENO, 11)), "%Data%", IIF(LEN(THIS.CXMLPAGEDATA)=0, "", THIS.CXMLPAGEDATA))
THIS.REPLACEXML("SAS", "ps_"+LTRIM(STR(THIS.NPAGENO, 11)), "%Header%", IIF(LEN(THIS.CXMLHEADER)=0, "<style:header-style />", THIS.CXMLHEADER))
THIS.REPLACEXML("SAS", "ps_"+LTRIM(STR(THIS.NPAGENO, 11)), "%Footer%", IIF(LEN(THIS.CXMLFOOTER)=0, "<style:footer-style />", THIS.CXMLFOOTER))
THIS.REPLACEXML("SMS", "HEAD-"+LTRIM(STR(THIS.NPAGENO, 11)), "%Data%", IIF(LEN(THIS.CXMLHEADERDATA)=0, "", THIS.CXMLHEADERDATA))
THIS.REPLACEXML("SS", "HEAD-"+LTRIM(STR(THIS.NPAGENO, 11)), "%ParagraphProperties%", IIF(LEN(THIS.CXMLHEADERPARAGRAPHPROPERTIES)=0, "", THIS.CXMLHEADERPARAGRAPHPROPERTIES))
THIS.REPLACEXML("SMS", "FOOTER-"+LTRIM(STR(THIS.NPAGENO, 11)), "%Data%", IIF(LEN(THIS.CXMLFOOTERDATA)=0, "", THIS.CXMLFOOTERDATA))
THIS.REPLACEXML("SS", "FOOTER-"+LTRIM(STR(THIS.NPAGENO, 11)), "%ParagraphProperties%", IIF(LEN(THIS.CXMLFOOTERPARAGRAPHPROPERTIES)=0, "", THIS.CXMLFOOTERPARAGRAPHPROPERTIES))
THIS.REPLACEXML("CAS", "Page_20_"+LTRIM(STR(THIS.NPAGENO, 11)), "%ParagraphProperties%", IIF(LEN(THIS.CXMLPARAGRAPHPROPERTIES)=0, "", THIS.CXMLPARAGRAPHPROPERTIES))
LCPOM = '</style:master-page>'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SMS", LCPOM, STR(THIS.NPAGENO, 5)+"99999")
THIS.OCURRENTSECTION = .NULL.
SELECT (LISELE)
ENDPROC
**
PROCEDURE newSheet
LPARAMETERS LOXFRX, TNHEIGHT, TNWIDTH, TNPAGENO
LOCAL LCPOM, LCPAGENO, LCNAME, LCNAMED, LISELE, LIX, LIY
IF  .NOT. EMPTY(M.TNWIDTH)
STORE M.TNWIDTH TO THIS.NPAPERWIDTH, LIX
STORE M.TNHEIGHT TO THIS.NPAPERHEIGHT, LIY
ELSE
LIX = THIS.NPAPERWIDTH
LIY = THIS.NPAPERHEIGHT
ENDIF
IF  .NOT. LOXFRX.ODOCUMENT.LSHEETPERPAGE .AND.  .NOT. THIS.LFIRSTPAGE
RETURN
ENDIF
LOXFRX.ADDTOLOG("#OOWRITER: NewSheet "+TRANSFORM(TNPAGENO, "")+" ("+TRANSFORM(LIX, "")+"x"+TRANSFORM(LIY, "")+")")
LISELE = SELECT()
STORE 0 TO THIS.IZINDEX, THIS.NROWNO, THIS.ICURRENTSECTIONT, THIS.ICURRENTSECTIONH, THIS.IGROUPSECTIONH, THIS.IGROUPSECTIONHH, THIS.IGROUPSECTIONFH, THIS.IGROUPSECTIONBH, THIS.ASECTIONSH
STORE -1 TO THIS.ASECTIONSH(1, 3), THIS.ASECTIONSH(2, 3), THIS.ASECTIONSH(3, 3), THIS.ASECTIONSH(4, 3), THIS.ASECTIONSH(5, 3), THIS.ASECTIONSH(6, 3), THIS.ASECTIONSH(7, 3), THIS.ASECTIONSH(8, 3), THIS.ASECTIONSH(9, 3)
THIS.NPAGENO = TNPAGENO
LCPAGENO = LTRIM(STR(TNPAGENO, 11))
LCNAME = THIS.GETPAGE_SHEETNAME(LOXFRX.ODOCUMENT, TNPAGENO, @LCNAMED)
THIS.CPAGENAME = LCNAME
THIS.CPAGEDISPLAYNAME = LCNAMED
STORE "" TO THIS.CXMLHEADER, THIS.CXMLFOOTER, THIS.CXMLHEADERDATA, THIS.CXMLFOOTERDATA, THIS.CXMLPAGEDATA, THIS.CXMLPARAGRAPHPROPERTIES, THIS.CXMLHEADERPARAGRAPHPROPERTIES, THIS.CXMLFOOTERPARAGRAPHPROPERTIES
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002, XX003) VALUES ("SAS", STRTRAN(THIS.CXMLPAGE, "%Page%", LCPAGENO), "ps_"+LCPAGENO, STR(TNPAGENO, 5)+" 1000")
LCPOM = '<table:table table:name="'+LCNAMED+'" table:style-name="Table'+LCPAGENO+'" table:print="false">'+CHR(13)+CHR(10)+' <office:forms form:automatic-focus="false" form:apply-design-mode="false" /> '+CHR(13)+CHR(10)
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", LCPOM, STR(TNPAGENO, 5)+" 2000")
LCPOM = '<style:style style:name="Table'+LCPAGENO+'" style:family="table" style:master-page-name="Page_20_'+LCPAGENO+'" >'+CHR(13)+CHR(10)+' <style:table-properties table:display="true" style:writing-mode="lr-tb" />'+CHR(13)+CHR(10)+'%ParagraphProperties%'+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002) VALUES ("CAS", LCPOM, "Page_20_"+LCPAGENO)
LCPOM = '<style:master-page style:name="Page_20_'+LCPAGENO+'" style:display-name="Page '+LCPAGENO+'" style:page-layout-name="ps_'+LCPAGENO+'" >'+CHR(13)+CHR(10)+' <style:header />'+CHR(13)+CHR(10)+' <style:header-left style:display="false" /> '+CHR(13)+CHR(10)+' <style:footer />'+CHR(13)+CHR(10)+' <style:footer-left style:display="false" />'+CHR(13)+CHR(10)
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SMS", LCPOM, STR(TNPAGENO, 5)+" 0000")
STORE .F. TO THIS.LHEADER, THIS.LFOOTER, THIS.LBODY
SELECT (LISELE)
ENDPROC
**
PROCEDURE endSheet
LPARAMETERS LOXFRX
LOCAL LCPOM, LISELE
IF  .NOT. ISNULL(THIS.OCURRENTSECTION) .AND. INLIST(THIS.OCURRENTSECTION.INOBJECTCODE, 7, 8)
THIS.CLOSESECTION(.NULL.)
ENDIF
IF  .NOT. LOXFRX.ODOCUMENT.LSHEETPERPAGE .AND.  .NOT. THIS.LFIRSTPAGE
RETURN
ENDIF
LOXFRX.ADDTOLOG("#OOWRITER: EndPage ")
THIS.LFIRSTPAGE = .F.
LISELE = SELECT()
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SAS", '</style:page-layout>', STR(THIS.NPAGENO, 5)+" 1999")
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", '</table:table>', STR(THIS.NPAGENO, 5)+" 2199")
THIS.REPLACEXML("CTEXT", "Page_20_"+LTRIM(STR(THIS.NPAGENO, 11)), "%Data%", IIF(LEN(THIS.CXMLPAGEDATA)=0, "", THIS.CXMLPAGEDATA))
THIS.REPLACEXML("SAS", "ps_"+LTRIM(STR(THIS.NPAGENO, 11)), "%Header%", IIF(LEN(THIS.CXMLHEADER)=0, "<style:header-style />", THIS.CXMLHEADER))
THIS.REPLACEXML("SAS", "ps_"+LTRIM(STR(THIS.NPAGENO, 11)), "%Footer%", IIF(LEN(THIS.CXMLFOOTER)=0, "<style:footer-style />", THIS.CXMLFOOTER))
THIS.REPLACEXML("SMS", "HEAD-"+LTRIM(STR(THIS.NPAGENO, 11)), "%Data%", IIF(LEN(THIS.CXMLHEADERDATA)=0, "", THIS.CXMLHEADERDATA))
THIS.REPLACEXML("SS", "HEAD-"+LTRIM(STR(THIS.NPAGENO, 11)), "%ParagraphProperties%", IIF(LEN(THIS.CXMLHEADERPARAGRAPHPROPERTIES)=0, "", THIS.CXMLHEADERPARAGRAPHPROPERTIES))
THIS.REPLACEXML("SMS", "FOOTER-"+LTRIM(STR(THIS.NPAGENO, 11)), "%Data%", IIF(LEN(THIS.CXMLFOOTERDATA)=0, "", THIS.CXMLFOOTERDATA))
THIS.REPLACEXML("SS", "FOOTER-"+LTRIM(STR(THIS.NPAGENO, 11)), "%ParagraphProperties%", IIF(LEN(THIS.CXMLFOOTERPARAGRAPHPROPERTIES)=0, "", THIS.CXMLFOOTERPARAGRAPHPROPERTIES))
THIS.REPLACEXML("CAS", "Page_20_"+LTRIM(STR(THIS.NPAGENO, 11)), "%ParagraphProperties%", IIF(LEN(THIS.CXMLPARAGRAPHPROPERTIES)=0, "", THIS.CXMLPARAGRAPHPROPERTIES))
LCPOM = '</style:master-page>'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SMS", LCPOM, STR(THIS.NPAGENO, 5)+"99999")
THIS.OCURRENTSECTION = .NULL.
SELECT (LISELE)
ENDPROC
**
PROCEDURE CloseSection
LPARAMETERS TOSECTION
LOCAL LISELE
THIS.OXFRX.ADDTOLOG("#OOWRITER: CloseSection")
LISELE = SELECT()
DO CASE
CASE  .NOT. ISNULL(THIS.OCURRENTSECTION) .AND. INLIST(THIS.OCURRENTSECTION.INOBJECTCODE, 0, 1) .AND.  .NOT. INLIST(TOSECTION.INOBJECTCODE, 0, 1) .AND. THIS.MODE<>2
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SMS", ' </text:p>', STR(THIS.NPAGENO, 5)+" 1199")
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SMS", '</style:header>', STR(THIS.NPAGENO, 5)+" 1999")
THIS.REPLACEXML("SAS", "Page_20_"+STR(THIS.NPAGENO, 5)+" 1100", "%Height%", TOINCH(THIS.IGROUPSECTIONHH))
CASE  .NOT. ISNULL(THIS.OCURRENTSECTION) .AND. THIS.OCURRENTSECTION.INOBJECTCODE=7 .AND. THIS.MODE<>2
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SMS", ' </text:p>', STR(THIS.NPAGENO, 5)+" 3199")
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SMS", '</style:footer>', STR(THIS.NPAGENO, 5)+" 3999")
ENDCASE
SELECT (LISELE)
ENDPROC
**
PROCEDURE newSection
LPARAMETERS LOXFRX, TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
LOCAL LISELE
LOXFRX.ADDTOLOG("#OOWRITER: NewSection  ("+TRANSFORM(TNSECTIONCONTENTHEIGHT, "")+"x"+TRANSFORM(TNTOP, "")+")")
LISELE = SELECT()
IF  .NOT. ISNULL(THIS.OCURRENTSECTION) .AND. INLIST(THIS.OCURRENTSECTION.INOBJECTCODE, 0, 1) .AND.  .NOT. INLIST(TOSECTION.INOBJECTCODE, 0, 1)
THIS.CLOSESECTION(TOSECTION)
ENDIF
IF TNSECTIONCONTENTHEIGHT>0
IF THIS.ASECTIONSH(TOSECTION.INOBJECTCODE+1, 3)=-1
THIS.ASECTIONSH(TOSECTION.INOBJECTCODE+1, 2) = TNTOP
THIS.ASECTIONSH(TOSECTION.INOBJECTCODE+1, 1) = TNSECTIONCONTENTHEIGHT
THIS.ASECTIONSH(TOSECTION.INOBJECTCODE+1, 3) = 0
ELSE
THIS.ASECTIONSH(TOSECTION.INOBJECTCODE+1, 1) = THIS.ASECTIONSH(TOSECTION.INOBJECTCODE+1, 1)+TNSECTIONCONTENTHEIGHT
ENDIF
ENDIF
DO CASE
CASE INLIST(TOSECTION.INOBJECTCODE, 0, 1) .AND. THIS.MODE<>2
STORE THIS.IGROUPSECTIONH+TNSECTIONCONTENTHEIGHT TO THIS.IGROUPSECTIONH, THIS.IGROUPSECTIONHH
IF TOSECTION.INOBJECTCODE=0 .OR. (TOSECTION.INOBJECTCODE=1 .AND. ISNULL(THIS.OCURRENTSECTION))
LCPOM = '<style:header-style>'+CHR(13)+CHR(10)+' <style:header-footer-properties svg:height="%Height%" fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-bottom="0cm" style:dynamic-spacing="false" />'+CHR(13)+CHR(10)+'</style:header-style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002, XX003) VALUES ("SAS", LCPOM, "Page_20_"+STR(THIS.NPAGENO, 5)+" 1100", STR(THIS.NPAGENO, 5)+" 1100")
LCPOM = '<style:header>'+CHR(13)+CHR(10)
IF THIS.MODE=0
LCPOM = LCPOM+' <text:p text:style-name="Header-'+LTRIM(STR(THIS.NPAGENO, 11))+'">'+CHR(13)+CHR(10)+'%Data%'
ELSE
LCPOM = LCPOM+' <text:p text:style-name="Header">'
ENDIF
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002, XX003) VALUES ("SMS", LCPOM, "HEAD-"+LTRIM(STR(THIS.NPAGENO, 11)), STR(THIS.NPAGENO, 5)+" 1000")
IF THIS.MODE=0
LCPOM = '<style:style style:name="Header-'+LTRIM(STR(THIS.NPAGENO, 11))+'" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">'+CHR(13)+CHR(10)+'%ParagraphProperties%'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002) VALUES ("SS", LCPOM, "HEAD-"+LTRIM(STR(THIS.NPAGENO, 11)))
ENDIF
THIS.SETENTITIES(TOSECTION.INOBJECTCODE)
THIS.CORDER = STR(THIS.NPAGENO, 5)+" 1001"
ENDIF
STORE .F. TO THIS.LBODY, THIS.LFOOTER
STORE .T. TO THIS.LHEADER
THIS.ICURRENTSECTIONT = IIF(THIS.ICURRENTSECTIONT=0, TNTOP, MIN(TNTOP, THIS.ICURRENTSECTIONT))
CASE TOSECTION.INOBJECTCODE=7 .AND. THIS.MODE<>2
STORE TNSECTIONCONTENTHEIGHT TO THIS.IGROUPSECTIONH, THIS.IGROUPSECTIONFH
IF TOSECTION.INOBJECTCODE=7
LCPOM = '<style:footer-style>'+CHR(13)+CHR(10)+' <style:header-footer-properties svg:height="'+TOINCH(TNSECTIONCONTENTHEIGHT)+'" fo:margin-left="0cm" fo:margin-right="0cm" fo:margin-top="0cm" style:dynamic-spacing="false" />'+CHR(13)+CHR(10)+'</style:footer-style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES ("SAS", LCPOM, STR(THIS.NPAGENO, 5)+" 1200")
LCPOM = '<style:footer>'+CHR(13)+CHR(10)
IF THIS.MODE=0
LCPOM = LCPOM+' <text:p text:style-name="Footer-'+LTRIM(STR(THIS.NPAGENO, 11))+'">'+CHR(13)+CHR(10)+'%Data%'
ELSE
LCPOM = LCPOM+' <text:p text:style-name="Footer">'
ENDIF
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002, XX003) VALUES ("SMS", LCPOM, "FOOTER-"+LTRIM(STR(THIS.NPAGENO, 11)), STR(THIS.NPAGENO, 5)+" 3000")
IF THIS.MODE=0
LCPOM = '<style:style style:name="Footer-'+LTRIM(STR(THIS.NPAGENO, 11))+'" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">'+CHR(13)+CHR(10)+'%ParagraphProperties%'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002) VALUES ("SS", LCPOM, "FOOTER-"+LTRIM(STR(THIS.NPAGENO, 11)))
ENDIF
THIS.SETENTITIES(TOSECTION.INOBJECTCODE)
THIS.CORDER = STR(THIS.NPAGENO, 5)+" 3001"
ENDIF
THIS.ICURRENTSECTIONT = TNTOP
STORE .F. TO THIS.LBODY, THIS.LHEADER
STORE .T. TO THIS.LFOOTER
OTHERWISE
IF THIS.CENTITYSTYLE<>"CAS"
THIS.SETENTITIES(TOSECTION.INOBJECTCODE)
THIS.CORDER = STR(THIS.NPAGENO, 5)+" 2001"
THIS.ICURRENTSECTIONT = TNTOP
STORE .F. TO THIS.LHEADER, THIS.LFOOTER
STORE .T. TO THIS.LBODY
ENDIF
THIS.IGROUPSECTIONH = 0
STORE THIS.IGROUPSECTIONH+TNSECTIONCONTENTHEIGHT TO THIS.IGROUPSECTIONBH
ENDCASE
THIS.OCURRENTSECTION = TOSECTION
THIS.ICURRENTSECTIONH = TNSECTIONCONTENTHEIGHT
SELECT (LISELE)
ENDPROC
**
PROCEDURE endSection
LPARAMETERS LOXFRX
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE SetEntities
LPARAMETERS LISECTION
THIS.CLASTFONT = ""
DO CASE
CASE INLIST(LISECTION, 0, 1) .AND. THIS.MODE<>2
THIS.CENTITYSTYLE = "SAS"
THIS.CENTITYBODY = "SMS"
THIS.CENTITYFFD = "SFFD"
CASE LISECTION=7 .AND. THIS.MODE<>2
THIS.CENTITYSTYLE = "SAS"
THIS.CENTITYBODY = "SMS"
THIS.CENTITYFFD = "SFFD"
OTHERWISE
THIS.CENTITYSTYLE = "CAS"
THIS.CENTITYBODY = "CTEXT"
THIS.CENTITYFFD = "CFFD"
ENDCASE
ENDPROC
**
FUNCTION GetPage_SheetName
LPARAMETERS LODOCUMENT, LIPAGE, LCNAMED
LOCAL LCNAME
IF THIS.MODE<>2
DO CASE
CASE  .NOT. EMPTY(LODOCUMENT.CNEXTPAGENAMEEXPR)
LCNAMED = STRTRANHTMLSTRING(STRCONV(THIS.OREPORT.XFEVAL(LODOCUMENT.CNEXTPAGENAMEEXPR), 9))
CASE  .NOT. EMPTY(LODOCUMENT.CNEXTPAGENAME)
LCNAMED = STRTRANHTMLSTRING(STRCONV(LODOCUMENT.CNEXTPAGENAME, 9))
ENDCASE
IF EMPTY(LCNAMED)
LCNAMED = "Page "
ENDIF
LCNAMED = LCNAMED+LTRIM(STR(LIPAGE, 11))
LCNAME = STRTRAN(LCNAMED, " ", "_20_")
ELSE
DO CASE
CASE  .NOT. EMPTY(LODOCUMENT.CNEXTSHEETNAMEEXPR)
LCNAMED = STRTRANHTMLSTRING(STRCONV(THIS.OREPORT.XFEVAL(LODOCUMENT.CNEXTSHEETNAMEEXPR), 9))
CASE  .NOT. EMPTY(LODOCUMENT.CNEXTSHEETNAME)
LCNAMED = STRTRANHTMLSTRING(STRCONV(LODOCUMENT.CNEXTSHEETNAME, 9))
ENDCASE
IF EMPTY(LCNAMED)
LCNAMED = "List "
ENDIF
LCNAMED = LCNAMED+LTRIM(STR(LIPAGE, 11))
LCNAME = STRTRAN(LCNAMED, " ", "_20_")
ENDIF
RETURN LCNAME
ENDFUNC
**
PROCEDURE AddExtension
LPARAMETERS LIXX000, LOTXT
THIS.OXFRX.ADDTOLOG("#OOWRITER: AddExtension "+TRANSFORM(LIXX000, ""))
INSERT INTO (THIS.CAEXT) (XX000, NNUMERICVALUE, CXLSFORMAT, LABSOLUTE, NEMBEDDING, NROTATE, NROTATIONPOINT, LSTRIKED) VALUES (LIXX000, IIF(TYPE("loTXT.nNumericValue")="C" .AND. LOTXT.NNUMERICVALUE="NULL", .NULL., IIF(TYPE("loTXT.nNumericValue")="C", __VAL(LOTXT.NNUMERICVALUE), LOTXT.NNUMERICVALUE)), LOTXT.CXLSFORMAT, LOTXT.LABSOLUTE, LOTXT.NEMBEDDING, LOTXT.NROTATE, LOTXT.NROTATIONPOINT, LOTXT.LSTRIKED)
ENDPROC
**
PROCEDURE ClearExtension
LOCAL LISELE
LISELE = SELECT()
SELECT (THIS.CAEXT)
ZAP
SELECT (LISELE)
RETURN
ENDPROC
**
PROCEDURE ReadExtension
LPARAMETERS LIXX000, LOTXT
THIS.OXFRX.ADDTOLOG("#OOWRITER: ReadExtension "+TRANSFORM(LIXX000, ""))
LOCAL LISELE, LCEXACT
LCEXACT = UPPER(SET("EXACT"))
IF LCEXACT=="ON"
SET EXACT OFF
ENDIF
LISELE = SELECT()
SELECT (THIS.CAEXT)
= SEEK(LIXX000)
LOTXT.NNUMERICVALUE = NNUMERICVALUE
LOTXT.CXLSFORMAT = CXLSFORMAT
LOTXT.LABSOLUTE = LABSOLUTE
LOTXT.NEMBEDDING = NEMBEDDING
LOTXT.NROTATE = NROTATE
LOTXT.NROTATIONPOINT = NROTATIONPOINT
LOTXT.LSTRIKED = LSTRIKED
IF LCEXACT=="ON"
SET EXACT ON
ENDIF
SELECT (LISELE)
RETURN
ENDPROC
**
FUNCTION CIToC
LPARAMETERS LIINDEX
LOCAL LII
LII = INT(LIINDEX/26)
RETURN IIF(LIINDEX<=26, CHR(LIINDEX+64), IIF(LIINDEX-LII*26=0, CHR(LII-1+64)+"Z", CHR(LII+64)+CHR(LIINDEX-LII*26+64)))
ENDFUNC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.OXFRX.ADDTOLOG("#OOWRITER: AddPicture "+TCPATH)
LOCAL LCPOM, LII, LCFILE, LITDELTA, LCTNE, LISELE
LISELE = SELECT()
LOCAL LAFILE(1)
STORE THIS.NCOUNTER+1 TO THIS.NCOUNTER, LII
THIS.IIMAGECOUNT = THIS.IIMAGECOUNT+1
THIS.IZINDEX = THIS.IZINDEX+1
LITDELTA = 0
IF THIS.IIMAGECOUNT=1
THIS.MD(THIS.CTMPPATH+"Pictures")
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (0, THIS.CTMPPATH+"Pictures")
LCPOM = ' <manifest:file-entry manifest:media-type="" manifest:full-path="Pictures/"/>'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES ("MANIFESTFE", LCPOM)
ENDIF
LCPOM = '<style:style style:name="dsn_'+LTRIM(STR(LII, 11))+'" style:family="graphic" style:parent-style-name="Graphics">'+CHR(13)+CHR(10)+' <style:graphic-properties'+CHR(13)+CHR(10)
IF  .NOT. EMPTY(THIS.CVERTICAL_REL)
LCPOM = LCPOM+'  style:vertical-pos="from-top" style:vertical-rel="'+THIS.CVERTICAL_REL+'"'+CHR(13)+CHR(10)
ENDIF
IF  .NOT. EMPTY(THIS.CHORIZONTAL_REL)
LCPOM = LCPOM+'  style:horizontal-pos="from-left" style:horizontal-rel="'+THIS.CHORIZONTAL_REL+'"'+CHR(13)+CHR(10)
ENDIF
LCPOM = LCPOM+'  style:mirror="none" fo:clip="rect(0cm 0cm 0cm 0cm)"'+CHR(13)+CHR(10)+'  draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%"'+CHR(13)+CHR(10)+'  draw:gamma="100%" draw:color-inversion="false"'+CHR(13)+CHR(10)+'  draw:image-opacity="100%" draw:color-mode="standard" />'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES (THIS.CENTITYSTYLE, LCPOM)
LCFILE = LOWER(SYS(2015)+"_"+SUBSTR(TCPATH, RAT("\", TCPATH)+1))
IF ADIR(LAFILE, TCPATH)>0
COPY FILE (TCPATH) TO (THIS.CTMPPATH+"Pictures\"+LCFILE)
INSERT INTO (THIS.CFS) (XX100, XX101) VALUES (1, THIS.CTMPPATH+"Pictures\"+LCFILE)
LCPOM = ' <manifest:file-entry manifest:media-type="image/'+JUSTEXT(LCFILE)+'" manifest:full-path="Pictures/'+LCFILE+'" />'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES ("MANIFESTFE", LCPOM)
ENDIF
LCPOM = '<draw:frame draw:style-name="dsn_'+LTRIM(STR(LII, 11))+'" draw:name="graphics'+LTRIM(STR(LII, 11))+'"'+CHR(13)+CHR(10)
DO CASE
CASE THIS.MODE=1
LCPOM = LCPOM+' text:anchor-type="page" text:anchor-page-number="'+LTRIM(STR(THIS.NPAGENO, 11))+'"'+CHR(13)+CHR(10)
CASE THIS.MODE=0
LCPOM = LCPOM+' text:anchor-type="char"'+CHR(13)+CHR(10)
OTHERWISE
LCTNE = [']+THIS.CPAGEDISPLAYNAME+['.]+THIS.CITOC(THIS.NCOLNO)+LTRIM(STR(THIS.NROWNO, 11))
LCPOM = LCPOM+' table:end-cell-address="'+LCTNE+'" table:end-x="'+TOINCH(TNLEFT+TNWIDTH)+'" table:end-y="'+TOINCH(TNTOP+TNHEIGHT-LITDELTA)+'"'+CHR(13)+CHR(10)
ENDCASE
LCPOM = LCPOM+' svg:width="'+TOINCH(TNWIDTH)+'" svg:height="'+TOINCH(TNHEIGHT)+'"'+CHR(13)+CHR(10)+' svg:x="'+TOINCH(TNLEFT)+'" svg:y="'+TOINCH(TNTOP-LITDELTA)+'"'+CHR(13)+CHR(10)+' draw:z-index="'+LTRIM(STR(THIS.IZINDEX, 11, 0))+'" >'+CHR(13)+CHR(10)+' <draw:image xlink:href="Pictures/'+LCFILE+'"'+CHR(13)+CHR(10)+'   xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" />'+CHR(13)+CHR(10)+'</draw:frame>'
IF INLIST(THIS.CENTITYBODY, "SMS", "CTEXT")
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES (THIS.CENTITYBODY, LCPOM, THIS.CORDER)
ELSE
STORE EVALUATE(THIS.CENTITYBODY)+LCPOM TO (THIS.CENTITYBODY)
ENDIF
SELECT (LISELE)
RETURN
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.OXFRX.ADDTOLOG("#OOWRITER: Addline "+TRANSFORM(TNLEFT, "")+" "+TRANSFORM(TNTOP, "")+" "+TRANSFORM(TNLTO, "")+" "+TRANSFORM(TNTTO, ""))
LOCAL LCPOM, LII, LIDELTA, LIDELTAX, LIDELTAY, LITDELTA, LCTNE, LISELE
LISELE = SELECT()
STORE THIS.NCOUNTER+1 TO THIS.NCOUNTER, LII
THIS.IZINDEX = THIS.IZINDEX+1
LITDELTA = 0
LCPOM = '<style:style style:name="dsn_'+LTRIM(STR(LII, 11))+'" style:family="graphic">'+CHR(13)+CHR(10)+' <style:graphic-properties'+CHR(13)+CHR(10)+' '+THIS.GETBORDERDATA("L", TNPENPAT, TNPENSIZE, TNPENRED, TNPENGREEN, TNPENBLUE, @LIDELTA)+CHR(13)+CHR(10)
LCPOM = LCPOM+'  fo:padding-top="0.71pt" fo:padding-bottom="0.71pt" fo:padding-left="0.71pt" fo:padding-right="0.71pt"'+CHR(13)+CHR(10)+'  draw:stroke-linejoin="miter"'+CHR(13)+CHR(10)+'  draw:textarea-horizontal-align="center"'+CHR(13)+CHR(10)+'  draw:textarea-vertical-align="middle"'+CHR(13)+CHR(10)+'  style:run-through="foreground"'+CHR(13)+CHR(10)+'  style:wrap="run-through"'+CHR(13)+CHR(10)+'  style:number-wrapped-paragraphs="no-limit"'+CHR(13)+CHR(10)
IF  .NOT. EMPTY(THIS.CVERTICAL_REL)
LCPOM = LCPOM+'  style:vertical-pos="from-top" style:vertical-rel="'+THIS.CVERTICAL_REL+'"'+CHR(13)+CHR(10)
ENDIF
IF  .NOT. EMPTY(THIS.CHORIZONTAL_REL)
LCPOM = LCPOM+'  style:horizontal-pos="from-left" style:horizontal-rel="'+THIS.CHORIZONTAL_REL+'"'+CHR(13)+CHR(10)
ENDIF
LCPOM = LCPOM+'  draw:wrap-influence-on-position="once-concurrent" style:flow-with-text="false" />'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES (THIS.CENTITYSTYLE, LCPOM)
LIDELTAX = IIF(TNTOP=TNTTO, 0, 1)*LIDELTA/2
LIDELTAY = IIF(TNTOP=TNTTO, 1, 0)*LIDELTA/2
LCPOM = '<draw:line'+CHR(13)+CHR(10)
DO CASE
CASE THIS.MODE=1
LCPOM = LCPOM+' text:anchor-type="page" text:anchor-page-number="'+LTRIM(STR(THIS.NPAGENO, 11))+'"'+CHR(13)+CHR(10)
CASE THIS.MODE=0
LCPOM = LCPOM+' text:anchor-type="char"'+CHR(13)+CHR(10)
OTHERWISE
LCTNE = [']+THIS.CPAGEDISPLAYNAME+['.]+THIS.CITOC(THIS.NCOLNO)+LTRIM(STR(THIS.NROWNO, 11))
LCPOM = LCPOM+' table:end-cell-address="'+LCTNE+'" table:end-x="'+TOINCH(TNLTO+LIDELTAX)+'" table:end-y="'+TOINCH(TNTTO-LITDELTA+LIDELTAY)+'"'+CHR(13)+CHR(10)
ENDCASE
LCPOM = LCPOM+'  draw:z-index="'+LTRIM(STR(THIS.IZINDEX, 11, 0))+'" draw:style-name="dsn_'+LTRIM(STR(LII, 11))+'"'+CHR(13)+CHR(10)+'  svg:x1="'+TOINCH(TNLEFT+LIDELTAX)+'" svg:y1="'+TOINCH(TNTOP-LITDELTA+LIDELTAY)+'"'+CHR(13)+CHR(10)+'  svg:x2="'+TOINCH(TNLTO+LIDELTAX)+'" svg:y2="'+TOINCH(TNTTO-LITDELTA+LIDELTAY)+'">'+CHR(13)+CHR(10)+' <text:p /> '+CHR(13)+CHR(10)+'</draw:line>'
IF INLIST(THIS.CENTITYBODY, "SMS", "CTEXT")
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES (THIS.CENTITYBODY, LCPOM, THIS.CORDER)
ELSE
STORE EVALUATE(THIS.CENTITYBODY)+LCPOM TO (THIS.CENTITYBODY)
ENDIF
SELECT (LISELE)
RETURN
ENDPROC
**
FUNCTION GetBorderData
LPARAMETERS LCTYPE, TNPENPAT, TNPENSIZE, TNPENRED, TNPENGREEN, TNPENBLUE, LIDELTA
LOCAL LCPOM
LCPOM = ""
DO CASE
CASE TNPENPAT=1 .AND. TNPENSIZE=1
LCPOM = LCPOM+'  draw:stroke="dash"'+CHR(13)+CHR(10)+'  draw:stroke-dash="VFP_20_Dotted"'+CHR(13)+CHR(10)
LIDELTA = TNPENSIZE
CASE TNPENPAT=2 .AND. TNPENSIZE=1
LCPOM = LCPOM+'  draw:stroke="dash"'+CHR(13)+CHR(10)+'  draw:stroke-dash="VFP_20_Dashed"'+CHR(13)+CHR(10)
LIDELTA = TNPENSIZE
CASE TNPENPAT=3 .AND. TNPENSIZE=1
LCPOM = LCPOM+'  draw:stroke="dash"'+CHR(13)+CHR(10)+'  draw:stroke-dash="VFP_20_Dash_20_Dot"'+CHR(13)+CHR(10)
LIDELTA = TNPENSIZE
CASE TNPENPAT=4 .AND. TNPENSIZE=1
LCPOM = LCPOM+'  draw:stroke="dash"'+CHR(13)+CHR(10)+'  draw:stroke-dash="VFP_20_Dash_20_Dot_20_Dot"'+CHR(13)+CHR(10)
LIDELTA = TNPENSIZE
CASE TNPENPAT=8
LIDELTA = TNPENSIZE
CASE TNPENPAT=0
LCPOM = LCPOM+'  draw:stroke="none"'+CHR(13)+CHR(10)
LIDELTA = 0
ENDCASE
LIDELTA = IIF(LIDELTA>1, ((LIDELTA+IIF(TNPENSIZE>1 .AND. LCTYPE="R", -1, 0))/96*10000), 0)
RETURN LCPOM+' svg:stroke-width="'+__STR(IIF(TNPENSIZE<=1, 0, (TNPENSIZE+IIF(TNPENSIZE>1 .AND. LCTYPE="R", 1, 0))/96), 11, 6)+'in"'+CHR(13)+CHR(10)+' svg:stroke-color="'+THIS.C2RGBEX(TNPENRED, TNPENGREEN, TNPENBLUE, 1)+'"'+CHR(13)+CHR(10)
ENDFUNC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.OXFRX.ADDTOLOG("#OOWRITER: AddRectangle "+TRANSFORM(TNLEFT, "")+" "+TRANSFORM(TNTOP, "")+" "+TRANSFORM(TNWIDTH, "")+" "+TRANSFORM(TNHEIGHT, ""))
LOCAL LCPOM, LII, LIDELTA, LITDELTA, LCTNE, LISELE
LISELE = SELECT()
STORE THIS.NCOUNTER+1 TO THIS.NCOUNTER, LII
THIS.IZINDEX = THIS.IZINDEX+1
LITDELTA = 0
LCPOM = '<style:style style:name="dsn_'+LTRIM(STR(LII, 11))+'" style:family="graphic">'+CHR(13)+CHR(10)+' <style:graphic-properties'+CHR(13)+CHR(10)+' '+THIS.GETBORDERDATA("R", TNPENPAT, TNPENSIZE, TNPENRED, TNPENGREEN, TNPENBLUE, @LIDELTA)+CHR(13)+CHR(10)
DO CASE
CASE TNFILLPAT=0
LCPOM = LCPOM+'  draw:fill="none"'+CHR(13)+CHR(10)+'  draw:fill-hatch-solid="false"'+CHR(13)+CHR(10)
CASE TNFILLPAT=1
LCPOM = LCPOM+'  draw:fill="solid"'+CHR(13)+CHR(10)+'  draw:fill-hatch-solid="false"'+CHR(13)+CHR(10)
CASE TNFILLPAT=2
LCPOM = LCPOM+'  draw:fill="hatch"'+CHR(13)+CHR(10)+'  draw:fill-gradient-name="VFP_20_Gradient"'+CHR(13)+CHR(10)+'  draw:fill-hatch-name="VFP_20_Horizontal"'+CHR(13)+CHR(10)+'  draw:fill-hatch-solid="false"'+CHR(13)+CHR(10)
CASE TNFILLPAT=3
LCPOM = LCPOM+'  draw:fill="hatch"'+CHR(13)+CHR(10)+'  draw:fill-gradient-name="VFP_20_Gradient"'+CHR(13)+CHR(10)+'  draw:fill-hatch-name="VFP_20_Vertical"'+CHR(13)+CHR(10)+'  draw:fill-hatch-solid="false"'+CHR(13)+CHR(10)
CASE TNFILLPAT=4
LCPOM = LCPOM+'  draw:fill="hatch"'+CHR(13)+CHR(10)+'  draw:fill-gradient-name="VFP_20_Gradient"'+CHR(13)+CHR(10)+'  draw:fill-hatch-name="VFP_20_Upward_20_Diagonal"'+CHR(13)+CHR(10)+'  draw:fill-hatch-solid="false"'+CHR(13)+CHR(10)
CASE TNFILLPAT=5
LCPOM = LCPOM+'  draw:fill="hatch"'+CHR(13)+CHR(10)+'  draw:fill-gradient-name="VFP_20_Gradient"'+CHR(13)+CHR(10)+'  draw:fill-hatch-name="VFP_20_Downward_20_Diagonal"'+CHR(13)+CHR(10)+'  draw:fill-hatch-solid="false"'+CHR(13)+CHR(10)
CASE TNFILLPAT=6
LCPOM = LCPOM+'  draw:fill="hatch"'+CHR(13)+CHR(10)+'  draw:fill-gradient-name="VFP_20_Gradient"'+CHR(13)+CHR(10)+'  draw:fill-hatch-name="VFP_20_Cross"'+CHR(13)+CHR(10)+'  draw:fill-hatch-solid="false"'+CHR(13)+CHR(10)
CASE TNFILLPAT=7
LCPOM = LCPOM+'  draw:fill="hatch"'+CHR(13)+CHR(10)+'  draw:fill-gradient-name="VFP_20_Gradient"'+CHR(13)+CHR(10)+'  draw:fill-hatch-name="VFP_20_Diagonal_20_Cross"'+CHR(13)+CHR(10)+'  draw:fill-hatch-solid="false"'+CHR(13)+CHR(10)
ENDCASE
LCPOM = LCPOM+'  draw:fill-color="'+THIS.C2RGBEX(TNFILLRED, TNFILLGREEN, TNFILLBLUE, 1)+'"'
LCPOM = LCPOM+'  draw:stroke-linejoin="'+IIF(TNOFFSET=0, "miter", "round")+'"'+CHR(13)+CHR(10)+'  draw:textarea-horizontal-align="center"'+CHR(13)+CHR(10)+'  draw:textarea-vertical-align="middle"'+CHR(13)+CHR(10)+'  style:run-through="background"'+CHR(13)+CHR(10)+'  style:wrap="run-through"'+CHR(13)+CHR(10)+'  style:number-wrapped-paragraphs="no-limit"'+CHR(13)+CHR(10)
IF  .NOT. EMPTY(THIS.CVERTICAL_REL)
LCPOM = LCPOM+'  style:vertical-pos="from-top" style:vertical-rel="'+THIS.CVERTICAL_REL+'"'+CHR(13)+CHR(10)
ENDIF
IF  .NOT. EMPTY(THIS.CHORIZONTAL_REL)
LCPOM = LCPOM+'  style:horizontal-pos="from-left" style:horizontal-rel="'+THIS.CHORIZONTAL_REL+'"'+CHR(13)+CHR(10)
ENDIF
LCPOM = LCPOM+'  draw:wrap-influence-on-position="once-concurrent" style:flow-with-text="false" />'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES (THIS.CENTITYSTYLE, LCPOM)
LCPOM = '<draw:rect'+CHR(13)+CHR(10)
DO CASE
CASE THIS.MODE=1
LCPOM = LCPOM+' text:anchor-type="page" text:anchor-page-number="'+LTRIM(STR(THIS.NPAGENO, 11))+'"'+CHR(13)+CHR(10)
CASE THIS.MODE=0
LCPOM = LCPOM+' text:anchor-type="char"'+CHR(13)+CHR(10)
OTHERWISE
LCTNE = [']+THIS.CPAGEDISPLAYNAME+['.]+THIS.CITOC(THIS.NCOLNO)+LTRIM(STR(THIS.NROWNO, 11))
LCPOM = LCPOM+' table:end-cell-address="'+LCTNE+'" table:end-x="'+TOINCH(TNLEFT+LIDELTA/2+TNWIDTH-LIDELTA)+'" table:end-y="'+TOINCH(TNTOP-LITDELTA+LIDELTA/2+TNHEIGHT-LIDELTA)+'"'+CHR(13)+CHR(10)
ENDCASE
LCPOM = LCPOM+'  draw:z-index="'+LTRIM(STR(THIS.IZINDEX, 11, 0))+'" draw:style-name="dsn_'+LTRIM(STR(LII, 11))+'"'+CHR(13)+CHR(10)+'  draw:corner-radius="'+IIF(TNOFFSET>=99, "99", LTRIM(__STR(TNOFFSET/96/2, 11, 4)))+'in"'+CHR(13)+CHR(10)+'  svg:width="'+TOINCH(TNWIDTH-LIDELTA)+'" svg:height="'+TOINCH(TNHEIGHT-LIDELTA)+'"'+CHR(13)+CHR(10)+'  svg:x="'+TOINCH(TNLEFT+LIDELTA/2)+'" svg:y="'+TOINCH(TNTOP-LITDELTA+LIDELTA/2)+'">'+CHR(13)+CHR(10)+' <text:p />'+CHR(13)+CHR(10)+'</draw:rect>'
IF INLIST(THIS.CENTITYBODY, "SMS", "CTEXT")
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES (THIS.CENTITYBODY, LCPOM, THIS.CORDER)
ELSE
STORE EVALUATE(THIS.CENTITYBODY)+LCPOM TO (THIS.CENTITYBODY)
ENDIF
SELECT (LISELE)
RETURN
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME, LOTXTBOX
LOCAL LCRESERVED1, LUVALUE, LCPOM, LII, LCPOM2, LCXST, LCTEXT, LIAT, LCSTB, LCETB, LCSTH, LCETH, LIFC, LCTT, LITDELTA, LCTNE, LISELE
THIS.OXFRX.ADDTOLOG("#OOWRITER: AddTextbox "+_X____11334+" "+TRANSFORM(TNLEFT, "")+" "+TRANSFORM(TNTOP, "")+" "+TRANSFORM(TNWIDTH, "")+" "+TRANSFORM(TNHEIGHT, ""))
LISELE = SELECT()
LITDELTA = 0
STORE THIS.NCOUNTER+1 TO THIS.NCOUNTER, LII
THIS.IZINDEX = THIS.IZINDEX+1
LIFC = FONTMETRIC(17, TCFONT, 1)
LCPOM = '<style:style style:name="dsn_'+LTRIM(STR(LII, 11))+'" style:family="graphic" style:parent-style-name="dsn_20_zero">'+CHR(13)+CHR(10)+' <style:graphic-properties'+CHR(13)+CHR(10)+' draw:stroke="none" svg:stroke-color="#000000"'+CHR(13)+CHR(10)+' style:run-through="foreground"'+CHR(13)+CHR(10)
IF LOTXTBOX.NROTATE=0
LCPOM = LCPOM+' draw:auto-grow-height="false" draw:fit-to-size="false"'+CHR(13)+CHR(10)
ENDIF
IF TCTYPE="L"
LCPOM = LCPOM+' draw:auto-grow-width="true"'+CHR(13)+CHR(10)
ENDIF
IF  .NOT. EMPTY(THIS.CVERTICAL_REL)
LCPOM = LCPOM+'  style:vertical-pos="from-top" style:vertical-rel="'+THIS.CVERTICAL_REL+'"'+CHR(13)+CHR(10)
ENDIF
IF  .NOT. EMPTY(THIS.CHORIZONTAL_REL)
LCPOM = LCPOM+'  style:horizontal-pos="from-left" style:horizontal-rel="'+THIS.CHORIZONTAL_REL+'"'+CHR(13)+CHR(10)
ENDIF
IF TNMODE=0 .AND. TNFILLRED<>-1
LCPOM = LCPOM+'  draw:fill="solid"'+CHR(13)+CHR(10)
ELSE
LCPOM = LCPOM+'  draw:fill="none"'+CHR(13)+CHR(10)
ENDIF
LCPOM = LCPOM+'  draw:fill-color="'+THIS.C2RGBEX(TNFILLRED, TNFILLGREEN, TNFILLBLUE, 0)+'"'+CHR(13)+CHR(10)
LCPOM = LCPOM+'  fo:min-height="'+TOINCH(TNHEIGHT)+'" fo:min-width="'+TOINCH(TNWIDTH)+'" />'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES (THIS.CENTITYSTYLE, LCPOM)
STORE AT(CHR(13), _X____11334) TO LIAT
STORE "" TO LCSTB, LCETB, LCSTH, LCETH
IF  .NOT. EMPTY(TCLINKNAME)
IF THIS.MODE=2
LCTNE = [']+THIS.CPAGEDISPLAYNAME+['.]+THIS.CITOC(THIS.NCOLNO)+LTRIM(STR(THIS.NROWNO, 11))
LCPOM = '<table:named-range table:name="'+STRTRANHTMLSTRING(STRCONV(TCLINKNAME, 9))+'" table:base-cell-address="$'+LCTNE+'" table:cell-range-address="'+LCTNE+'" />'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES ("TNE", LCPOM)
ELSE
LCSTB = '<text:bookmark-start text:name="'+STRTRANHTMLSTRING(STRCONV(TCLINKNAME, 9))+'" />'
LCETB = '<text:bookmark-end text:name="'+STRTRANHTMLSTRING(STRCONV(TCLINKNAME, 9))+'" />'
ENDIF
ENDIF
IF  .NOT. EMPTY(TCLINKHREF)
LCSTH = '<text:a xlink:href="'+STRTRANHTMLSTRING(STRCONV(TCLINKHREF, 9))+'">'
LCETH = '</text:a>'
ENDIF
LCPOM = LCSTB+CHR(13)+CHR(10)+'<draw:frame'+CHR(13)+CHR(10)
DO CASE
CASE THIS.MODE=1
LCPOM = LCPOM+' text:anchor-type="page" text:anchor-page-number="'+LTRIM(STR(THIS.NPAGENO, 11))+'"'+CHR(13)+CHR(10)
CASE THIS.MODE=0
LCPOM = LCPOM+' text:anchor-type="char"'+CHR(13)+CHR(10)
OTHERWISE
LCTNE = [']+THIS.CPAGEDISPLAYNAME+['.]+THIS.CITOC(THIS.NCOLNO)+LTRIM(STR(THIS.NROWNO, 11))
LCPOM = LCPOM+' table:end-cell-address="'+LCTNE+'" table:end-x="'+TOINCH(TNLEFT+TNWIDTH)+'" table:end-y="'+TOINCH(TNTOP+TNHEIGHT-LITDELTA)+'"'+CHR(13)+CHR(10)
ENDCASE
LCPOM = LCPOM+' draw:z-index="'+LTRIM(STR(THIS.IZINDEX, 11))+'"'+CHR(13)+CHR(10)+' draw:style-name="dsn_'+LTRIM(STR(LII, 11))+'"'+CHR(13)+CHR(10)+' draw:text-style-name="dtsn'+LTRIM(STR(LII, 11))+'"'+CHR(13)+CHR(10)+' svg:width="'+TOINCH(TNWIDTH)+'" svg:height="'+TOINCH(TNHEIGHT)+'"'+CHR(13)+CHR(10)
IF LOTXTBOX.NROTATE=0
LCPOM = LCPOM+' svg:x="'+TOINCH(TNLEFT)+'" svg:y="'+TOINCH(TNTOP-LITDELTA)+'">'+CHR(13)+CHR(10)
ELSE
LCPOM = LCPOM+' draw:transform="rotate ('+__STR(DTOR(LOTXTBOX.NROTATE), 11, 6)+') translate ('+TOINCH(TNLEFT)+' '+TOINCH(TNTOP-LITDELTA)+')">'+CHR(13)+CHR(10)
ENDIF
LCPOM = LCPOM+' <draw:text-box>'+CHR(13)+CHR(10)
IF LIFC=2
IF LIAT=0
LCTEXT = _X____11334
LIAT = 1
_X____11334 = ""
ELSE
LCTEXT = LEFT(_X____11334, LIAT-1)
_X____11334 = SUBSTR(_X____11334, LIAT+1)
ENDIF
DO WHILE LIAT>0
LCPOM = LCPOM+'  <text:p text:style-name="dtsn'+LTRIM(STR(LII, 11))+'">'+CHR(13)+CHR(10)+'   <text:span text:style-name="tx'+LTRIM(STR(LII, 11))+'">'+LCSTH+VFP_STRCONV(LCTEXT, 9, 42)+LCETH+'</text:span>'+CHR(13)+CHR(10)+'  </text:p>'+CHR(13)+CHR(10)
STORE "" TO LCSTH, LCETH
STORE AT(CHR(13), _X____11334) TO LIAT
LCTEXT = LEFT(_X____11334, LIAT-1)
_X____11334 = SUBSTR(_X____11334, LIAT+1)
ENDDO
IF LEN(_X____11334)>0
LCPOM = LCPOM+'  <text:p text:style-name="dtsn'+LTRIM(STR(LII, 11))+'">'+CHR(13)+CHR(10)+'   <text:span text:style-name="tx'+LTRIM(STR(LII, 11))+'">'+VFP_STRCONV(LCTEXT, 9, 42)+'</text:span>'+CHR(13)+CHR(10)+'  </text:p>'+CHR(13)+CHR(10)
ENDIF
ELSE
IF LIAT=0
LCTEXT = _X____11334
LIAT = 1
_X____11334 = ""
ELSE
LCTEXT = LEFT(_X____11334, LIAT-1)
_X____11334 = SUBSTR(_X____11334, LIAT+1)
ENDIF
DO WHILE LIAT>0
LCPOM = LCPOM+'  <text:p text:style-name="dtsn'+LTRIM(STR(LII, 11))+'">'+CHR(13)+CHR(10)+'   <text:span text:style-name="tx'+LTRIM(STR(LII, 11))+'">'+LCSTH+STRTRANHTMLSTRING(STRCONV(LCTEXT, 9))+LCETH+'</text:span>'+CHR(13)+CHR(10)+'  </text:p>'+CHR(13)+CHR(10)
STORE "" TO LCSTH, LCETH
STORE AT(CHR(13), _X____11334) TO LIAT
LCTEXT = LEFT(_X____11334, LIAT-1)
_X____11334 = SUBSTR(_X____11334, LIAT+1)
ENDDO
IF LEN(_X____11334)>0
LCPOM = LCPOM+'  <text:p text:style-name="dtsn'+LTRIM(STR(LII, 11))+'">'+CHR(13)+CHR(10)+'   <text:span text:style-name="tx'+LTRIM(STR(LII, 11))+'">'+STRTRANHTMLSTRING(STRCONV(_X____11334, 9))+'</text:span>'+CHR(13)+CHR(10)+'  </text:p>'+CHR(13)+CHR(10)
ENDIF
ENDIF
LCPOM = LCPOM+' </draw:text-box>'+CHR(13)+CHR(10)+'</draw:frame>'+CHR(13)+CHR(10)+LCETB
IF INLIST(THIS.CENTITYBODY, "SMS", "CTEXT")
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX003) VALUES (THIS.CENTITYBODY, LCPOM, THIS.CORDER)
ELSE
STORE EVALUATE(THIS.CENTITYBODY)+LCPOM TO (THIS.CENTITYBODY)
ENDIF
LCXST = ' <style:text-properties'+CHR(13)+CHR(10)+'  fo:color="'+THIS.C2RGBEX(TNPENRED, TNPENGREEN, TNPENBLUE, 1)+'"'+CHR(13)+CHR(10)+'  style:font-name="'+TCFONT+'"'+CHR(13)+CHR(10)+'  style:font-name-asian="'+TCFONT+'"'+CHR(13)+CHR(10)+'  style:font-name-complex="'+TCFONT+'"'+CHR(13)+CHR(10)+'  fo:language="'+THIS.CLANG+'" fo:country="'+THIS.CCOUNTRY+'"'+CHR(13)+CHR(10)+'  fo:font-size="'+LTRIM(STR(TNFONTSIZE, 11))+'pt"'+CHR(13)+CHR(10)
IF TLUNDERLINE
LCXST = LCXST+'  style:text-underline-style="solid"'+CHR(13)+CHR(10)+'  style:text-underline-width="auto"'+CHR(13)+CHR(10)+'  style:text-underline-color="font-color"'+CHR(13)+CHR(10)
ENDIF
IF TLITALICS
LCXST = LCXST+'  fo:font-style="italic"'+CHR(13)+CHR(10)
ENDIF
IF TLBOLD
LCXST = LCXST+'  fo:font-weight="bold"'+CHR(13)+CHR(10)
ENDIF
LCPOM = '<style:style style:name="tx'+LTRIM(STR(LII, 11))+'" style:family="text">'+CHR(13)+CHR(10)+LCXST+CHR(13)+CHR(10)+' />'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES (THIS.CENTITYSTYLE, LCPOM)
LCPOM = '<style:style style:name="dtsn'+LTRIM(STR(LII, 11))+'" style:family="paragraph">'+CHR(13)+CHR(10)+' <style:paragraph-properties fo:text-align="'+IIF(TCALIGN="right", "end", IIF(TCALIGN="center", "center", "start"))+'" />'+CHR(13)+CHR(10)+LCXST+CHR(13)+CHR(10)+' />'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES (THIS.CENTITYSTYLE, LCPOM)
IF  .NOT. TCFONT==THIS.CLASTFONT
= THIS.ADDFONT(TCFONT)
THIS.CLASTFONT = TCFONT
ENDIF
SELECT (LISELE)
RETURN
ENDPROC
**
FUNCTION AddText
LPARAMETERS LOOBJ, LOCLS, LIPOS, LOTXT
LOCAL LCRET, LCPOM, LCSTB, LCETB, LCSTH, LCETH, LCCLASS, LLEXIST, LIFC, LISELE, LCTNE, LCPOM
LISELE = SELECT()
THIS.NCOUNTER = THIS.NCOUNTER+1
THIS.OXFRX.ADDTOLOG("#OOWRITER: AddText "+LOOBJ.TEXT)
LCCLASS = "TF"+LTRIM(STR(LOOBJ.CLASS, 11))
STORE "" TO LCSTB, LCETB, LCSTH, LCETH
IF  .NOT. EMPTY(LOOBJ.OBJLINKNAME)
IF THIS.MODE=2
LCTNE = [']+THIS.CPAGEDISPLAYNAME+['.]+THIS.CITOC(THIS.NCOLNO)+LTRIM(STR(THIS.NROWNO, 11))
LCPOM = '<table:named-range table:name="'+STRTRANHTMLSTRING(STRCONV(LOOBJ.OBJLINKNAME, 9))+'" table:base-cell-address="$'+LCTNE+'" table:cell-range-address="'+LCTNE+'" />'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES ("TNE", LCPOM)
ELSE
LCSTB = '<text:bookmark-start text:name="'+STRTRANHTMLSTRING(STRCONV(ALLTRIM(LOOBJ.OBJLINKNAME), 9))+'" />'
LCETB = '<text:bookmark-end text:name="'+STRTRANHTMLSTRING(STRCONV(ALLTRIM(LOOBJ.OBJLINKNAME), 9))+'" />'
ENDIF
ENDIF
LIFC = FONTMETRIC(17, ALLTRIM(LOCLS.FONT), 1)
IF  .NOT. EMPTY(LOOBJ.OBJLINKHREF)
LCSTH = '<text:a xlink:href="'+STRTRANHTMLSTRING(STRCONV(ALLTRIM(LOOBJ.OBJLINKHREF), 9))+'">'
LCETH = '</text:a>'
ENDIF
LCPOM = '<style:style style:name="%Class%" style:family="text">'+CHR(13)+CHR(10)+' <style:text-properties'+CHR(13)+CHR(10)+'  fo:color="'+THIS.C2RGBEX(LOCLS.PENRED, LOCLS.PENGREEN, LOCLS.PENBLUE, 1)+'"'+CHR(13)+CHR(10)+'  fo:background-color="'+THIS.C2RGBEX(LOCLS.FILLRED, LOCLS.FILLGREEN, LOCLS.FILLBLUE, 0)+'"'+CHR(13)+CHR(10)+'  style:font-name="'+ALLTRIM(LOCLS.FONT)+'"'+CHR(13)+CHR(10)+'  style:font-name-asian="'+ALLTRIM(LOCLS.FONT)+'"'+CHR(13)+CHR(10)+'  style:font-name-complex="'+ALLTRIM(LOCLS.FONT)+'"'+CHR(13)+CHR(10)+'  fo:language="'+THIS.CLANG+'" fo:country="'+THIS.CCOUNTRY+'"'+CHR(13)+CHR(10)+'  fo:font-size="'+LTRIM(STR(LOCLS.FONTSIZE, 11))+'pt"'+CHR(13)+CHR(10)
IF LOCLS.UNDERLINE
LCPOM = LCPOM+'  style:text-underline-style="solid"'+CHR(13)+CHR(10)+'  style:text-underline-width="auto"'+CHR(13)+CHR(10)+'  style:text-underline-color="font-color"'+CHR(13)+CHR(10)
ENDIF
IF LOCLS.ITAL
LCPOM = LCPOM+'  fo:font-style="italic"'+CHR(13)+CHR(10)
ENDIF
IF LOCLS.BOLD
LCPOM = LCPOM+'  fo:font-weight="bold"'+CHR(13)+CHR(10)
ENDIF
LCPOM = LCPOM+' />'+CHR(13)+CHR(10)+'</style:style>'
LCRET = IIF(LIPOS>0, '<text:tab />', "")+LCSTB+'<text:span text:style-name="%Class%">'+LCSTH+IIF(LIFC=2, VFP_STRCONV(LOOBJ.TEXT, 9, 42), STRTRANHTMLSTRING(STRCONV(LOOBJ.TEXT, 9)))+LCETH+'</text:span>'+LCETB
LLEXIST = THIS.ISEXIST(THIS.CENTITYSTYLE, LCCLASS)
IF LLEXIST .AND.  .NOT. STRTRAN(LCPOM, "%Class%", LCCLASS)==THIS.GETDATA(THIS.CENTITYSTYLE, LCCLASS)
LCCLASS = LCCLASS+"_"+SYS(2015)
LLEXIST = .F.
ENDIF
IF  .NOT. LLEXIST
LCPOM = STRTRAN(LCPOM, "%Class%", LCCLASS)
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002) VALUES (THIS.CENTITYSTYLE, LCPOM, LCCLASS)
ENDIF
IF  .NOT. LOCLS.FONT==THIS.CLASTFONT
= THIS.ADDFONT(ALLTRIM(LOCLS.FONT))
THIS.CLASTFONT = LOCLS.FONT
ENDIF
SELECT (LISELE)
RETURN STRTRAN(LCRET, "%Class%", LCCLASS)
ENDFUNC
**
FUNCTION AddTextInCell
LPARAMETERS LOOBJ, LOCLS, LOTXT, LCSTYLE, LCPSTYLE, LCTSTYLE, LCPCELL
LOCAL LCRET, LCPOM, LCSTB, LCETB, LCSTH, LCETH, LCCLASS, LLEXIST, LIFC, LISELE, LCTNE, LCPOM
LISELE = SELECT()
THIS.NCOUNTER = THIS.NCOUNTER+1
THIS.OXFRX.ADDTOLOG("#OOWRITER: AddTextInCell "+LOOBJ.TEXT)
STORE "" TO LCSTB, LCETB, LCSTH, LCETH
IF  .NOT. EMPTY(LOOBJ.OBJLINKNAME)
IF THIS.MODE=2
LCTNE = [']+THIS.CPAGEDISPLAYNAME+['.]+THIS.CITOC(THIS.NCOLNO)+LTRIM(STR(THIS.NROWNO, 11))
LCPOM = '<table:named-range table:name="'+STRTRANHTMLSTRING(STRCONV(LOOBJ.OBJLINKNAME, 9))+'" table:base-cell-address="$'+LCTNE+'" table:cell-range-address="'+LCTNE+'" />'
INSERT INTO (THIS.ALIAS) (XX000, XX001) VALUES ("TNE", LCPOM)
ELSE
LCSTB = '<text:bookmark-start text:name="'+STRTRANHTMLSTRING(STRCONV(ALLTRIM(LOOBJ.OBJLINKNAME), 9))+'" />'
LCETB = '<text:bookmark-end text:name="'+STRTRANHTMLSTRING(STRCONV(ALLTRIM(LOOBJ.OBJLINKNAME), 9))+'" />'
ENDIF
ENDIF
LIFC = FONTMETRIC(17, ALLTRIM(LOCLS.FONT), 1)
IF  .NOT. EMPTY(LOOBJ.OBJLINKHREF)
LCSTH = '<text:a xlink:href="'+STRTRANHTMLSTRING(STRCONV(ALLTRIM(LOOBJ.OBJLINKHREF), 9))+'">'
LCETH = '</text:a>'
ENDIF
LCSTYLE = LCSTYLE+'  fo:background-color="'+THIS.C2RGBEX(LOCLS.FILLRED, LOCLS.FILLGREEN, LOCLS.FILLBLUE, 0)+'"'+CHR(13)+CHR(10)
LCTSTYLE = LCTSTYLE+'  fo:color="'+THIS.C2RGBEX(LOCLS.PENRED, LOCLS.PENGREEN, LOCLS.PENBLUE, 1)+'"'+CHR(13)+CHR(10)+'  style:font-name="'+ALLTRIM(LOCLS.FONT)+'"'+CHR(13)+CHR(10)+'  style:font-name-asian="'+ALLTRIM(LOCLS.FONT)+'"'+CHR(13)+CHR(10)+'  style:font-name-complex="'+ALLTRIM(LOCLS.FONT)+'"'+CHR(13)+CHR(10)+'  fo:language="'+THIS.CLANG+'" fo:country="'+THIS.CCOUNTRY+'"'+CHR(13)+CHR(10)+'  fo:font-size="'+LTRIM(STR(LOCLS.FONTSIZE, 11))+'pt"'+CHR(13)+CHR(10)
IF LOCLS.UNDERLINE
LCTSTYLE = LCTSTYLE+'  style:text-underline-style="solid"'+CHR(13)+CHR(10)+'  style:text-underline-width="auto"'+CHR(13)+CHR(10)+'  style:text-underline-color="font-color"'+CHR(13)+CHR(10)
ENDIF
IF LOCLS.ITAL
LCTSTYLE = LCTSTYLE+'  fo:font-style="italic"'+CHR(13)+CHR(10)
ENDIF
IF LOCLS.BOLD
LCTSTYLE = LCTSTYLE+'  fo:font-weight="bold"'+CHR(13)+CHR(10)
ENDIF
LCRET = LCSTB+LCSTH+IIF(LIFC=2, VFP_STRCONV(LOOBJ.TEXT, 9, 42), STRTRANHTMLSTRING(STRCONV(LOOBJ.TEXT, 9)))+LCETH+LCETB
IF LOOBJ.NUMVAL<>"NULL"
LCPCELL = ' office:value="'+LOOBJ.NUMVAL+'"'+CHR(13)+CHR(10)
ENDIF
DO CASE
CASE LOCLS.ALIGN="right"
LCPSTYLE = LCPSTYLE+' fo:text-align="end"'+CHR(13)+CHR(10)
CASE LOCLS.ALIGN="center"
LCPSTYLE = LCPSTYLE+' fo:text-align="center"'+CHR(13)+CHR(10)
OTHERWISE
ENDCASE
IF  .NOT. LOCLS.FONT==THIS.CLASTFONT
= THIS.ADDFONT(ALLTRIM(LOCLS.FONT))
THIS.CLASTFONT = LOCLS.FONT
ENDIF
SELECT (LISELE)
RETURN LCRET
ENDFUNC
**
PROCEDURE AddFont
LPARAMETERS LCFONTNAME
LOCAL LISELE, LCPOM, LIFP, LIFC, LCEXACT
LCEXACT = UPPER(SET("EXACT"))
IF LCEXACT=="ON"
SET EXACT OFF
ENDIF
LISELE = SELECT()
THIS.OXFRX.ADDTOLOG("#OOWRITER: AddFont "+LCFONTNAME)
SELECT (THIS.ALIAS)
IF  .NOT. SEEK(PADR(THIS.CENTITYFFD, 10)+PADR(LCFONTNAME, 50), THIS.ALIAS, "I02")
LIFP = FONTMETRIC(16, LCFONTNAME, 1)
LIFC = FONTMETRIC(17, LCFONTNAME, 1)
LCPOM = '<style:font-face style:name="'+LCFONTNAME+'"'+CHR(13)+CHR(10)+' svg:font-family="'+STRTRANHTMLSTRING([']+LCFONTNAME+['])+'"'+CHR(13)+CHR(10)+' style:font-pitch="'+IIF(BITTEST(LIFP, 2), "variable", IIF(BITTEST(LIFP, 1), "fixed", ""))+'"'+CHR(13)+CHR(10)
IF LIFC=2
LCPOM = LCPOM+' style:font-charset="x-symbol"'+CHR(13)+CHR(10)
ENDIF
LCPOM = LCPOM+' />'
INSERT INTO (THIS.ALIAS) (XX000, XX001, XX002) VALUES (THIS.CENTITYFFD, LCPOM, LCFONTNAME)
ENDIF
SELECT (LISELE)
IF LCEXACT=="ON"
SET EXACT ON
ENDIF
ENDPROC
**
PROCEDURE ReplaceXML
LPARAMETERS LCXX000, LCXX002, LCKEY, LCVALUE
LOCAL LISELE, LCEXACT
LCEXACT = UPPER(SET("EXACT"))
IF LCEXACT=="ON"
SET EXACT OFF
ENDIF
LISELE = SELECT()
SELECT (THIS.ALIAS)
IF SEEK(PADR(LCXX000, 10)+PADR(LCXX002, 50), THIS.ALIAS, "I02")
REPLACE XX001 WITH STRTRAN(XX001, LCKEY, LCVALUE)
ENDIF
THIS.OXFRX.ADDTOLOG("#OOWRITER: REPLACE XML "+LCXX000+" "+LCXX002+" "+IIF(FOUND(), ".T.", ".F."))
IF LCEXACT=="ON"
SET EXACT ON
ENDIF
SELECT (LISELE)
ENDPROC
**
FUNCTION DT2Stamp
LPARAMETERS LTTIME
LOCAL LCPOM
LCPOM = TTOC(M.LTTIME, 1)
RETURN LEFT(M.LCPOM, 8)+"T"+SUBSTR(M.LCPOM, 9, 2)+":"+SUBSTR(M.LCPOM, 11, 2)+":"+RIGHT(M.LCPOM, 2)
ENDFUNC
**
FUNCTION C2RGBEx
LPARAMETERS LIR, LIG, LIB, LITYPE
RETURN "#"+IIF(LIR=-1 .OR. LIG=-1 .OR. LIB=-1, IIF(LITYPE=1, "000000", "FFFFFF"), RIGHT(TRANSFORM(RGB(LIB, LIG, LIR), "@0"), 6))
ENDFUNC
**
FUNCTION IsExist
LPARAMETERS LCXX000, LCXX002
LOCAL LLSEEK, LCEXACT
LCEXACT = UPPER(SET("EXACT"))
IF LCEXACT=="ON"
SET EXACT OFF
ENDIF
LLSEEK = SEEK(PADR(LCXX000, 10)+PADR(LCXX002, 50), THIS.ALIAS, "I02")
IF LCEXACT=="ON"
SET EXACT ON
ENDIF
RETURN LLSEEK
ENDFUNC
**
FUNCTION GetData
LPARAMETERS LCXX000, LCXX002
LOCAL LISELE, LCRET, LCEXACT
LCEXACT = UPPER(SET("EXACT"))
IF LCEXACT=="ON"
SET EXACT OFF
ENDIF
LISELE = SELECT()
SELECT (THIS.ALIAS)
LCRET = IIF(SEEK(PADR(LCXX000, 10)+PADR(LCXX002, 50), THIS.ALIAS, "I02"), XX001, "")
THIS.OXFRX.ADDTOLOG("#OOWRITER: GetData "+LCXX000+" "+LCXX002+" "+IIF(FOUND(), ".T.", ".F."))
SELECT (LISELE)
IF LCEXACT=="ON"
SET EXACT ON
ENDIF
RETURN LCRET
ENDFUNC
**
ENDDEFINE
**
DEFINE CLASS OOWBoxLayoutWriter AS DocumentWriter
NAME = "OOWBoxLayoutWriter"
REPORTID = 0
CURRENTPAGE = 0
PAGECOUNT = 0
OXFRX = .NULL.
OOO = .NULL.
**
PROCEDURE Init
LPARAMETERS LOXFRX
THIS.OXFRX = LOXFRX
= DODEFAULT()
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
DODEFAULT(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
THIS.OXFRX.ODOCUMENT.SETOTHERPARAMS(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
LOCAL LCPOM
= DODEFAULT(TNREPORTNO, TCCODEPAGE, TOREPORT)
THIS.REPORTID = TNREPORTNO
IF TNREPORTNO=1
THIS.OOO = CREATEOBJECT("OOWriter", THIS.OXFRX)
THIS.OOO.MODE = 1
THIS.OOO.CREATEFILES(THIS.OXFRX)
THIS.OOO.NCOLNO = 1
THIS.OOO.CVERTICAL_REL = "page"
THIS.OOO.CHORIZONTAL_REL = "paragraph"
THIS.CURRENTPAGE = 0
ENDIF
THIS.OOO.NEWREPORT(THIS.OXFRX, TNREPORTNO, TCCODEPAGE, TOREPORT)
RETURN
ENDPROC
**
PROCEDURE endReport
= DODEFAULT()
THIS.OOO.ENDREPORT(THIS.OXFRX)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
= DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
IF EMPTY(TNPAGENO)
TNPAGENO = 0
ENDIF
THIS.CURRENTPAGE = THIS.CURRENTPAGE+1
THIS.PAGECOUNT = MAX(THIS.PAGECOUNT, THIS.CURRENTPAGE)
THIS.OOO.NEWPAGE(THIS.OXFRX, TNHEIGHT, TNWIDTH, THIS.CURRENTPAGE)
ENDPROC
**
PROCEDURE endPage
= DODEFAULT()
THIS.OOO.ENDPAGE(THIS.OXFRX)
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.NEWPAGE(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
= DODEFAULT(TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
THIS.OOO.NEWSECTION(THIS.OXFRX, TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
ENDPROC
**
PROCEDURE endSection
DODEFAULT()
THIS.OOO.ENDSECTION(THIS.OXFRX)
ENDPROC
**
PROCEDURE Finalize
LPARAMETERS _X____11333
IF  .NOT. ISNULL(THIS.OOO)
THIS.OOO.CREATEPREVIEW(_X____11333)
THIS.OOO.GENERATEFILES(_X____11333)
THIS.OOO.CREATEOUTPUTFILE(_X____11333.COUTPUTNAME)
THIS.OOO.OPENDOCUMENT(_X____11333)
THIS.OOO.CLEARENVIRONMENT()
THIS.OOO.OREPORT = .NULL.
ENDIF
THIS.OXFRX = .NULL.
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.OOO.ADDPICTURE(@TNLEFT, @TNTOP, @TNWIDTH, @TNHEIGHT, @TNPENSIZE, @TNFILLPAT, @TNFILLRED, @TNFILLGREEN, @TNFILLBLUE, @TNPENPAT, @TNPENRED, @TNPENGREEN, @TNPENBLUE, @TNOFFSET, @TCPATH, @TCNAME, @X0)
RETURN
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.OOO.ADDLINE(@TNLEFT, @TNTOP, @TNLTO, @TNTTO, @TNPENSIZE, @TNPENPAT, @TNPENRED, @TNPENGREEN, @TNPENBLUE, @TCNAME)
RETURN
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.OOO.ADDRECTANGLE(@TNLEFT, @TNTOP, @TNWIDTH, @TNHEIGHT, @TNPENSIZE, @TNFILLPAT, @TNFILLRED, @TNFILLGREEN, @TNFILLBLUE, @TNPENPAT, @TNPENRED, @TNPENGREEN, @TNPENBLUE, @TNOFFSET, @TCNAME)
RETURN
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
THIS.OOO.ADDTEXTBOX(@_X____11334, @TCFONT, @TNFONTSIZE, @TLBOLD, @TLITALICS, @TNLEFT, @TNTOP, @TNWIDTH, @TNHEIGHT, @TCTYPE, @TNPENRED, @TNPENGREEN, @TNPENBLUE, @TNMODE, @TNFILLRED, @TNFILLGREEN, @TNFILLBLUE, @TCALIGN, @TLUNDERLINE, @TCUNIQUEID, @TCLINKNAME, @TCLINKHREF, @TCOUTLINE, @TNOUTLINESTYLE, @TCTOOLTIP, @TCNAME, THIS.OTXTBOX)
RETURN
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS OOWFlowLayoutWriter AS FlowLayoutWriter
NAME = "OOWFlowLayoutWriter"
REPORTID = 0
CURRENTPAGE = 0
LASTPAGE = 0
PAGECOUNT = 0
OXFRX = .NULL.
OOO = .NULL.
NSTYLESFILEHANDLE = 0
NCURRENTPOSITION = 0
NLASTPOSITION = 0
OTXT = .NULL.
LROTATE = .F.
LFIRSTINHEADER = .F.
LFIRSTINFOOTER = .F.
LFIRSTINMAIN = .F.
LFIRSTINPAGE = .F.
NPAGEWIDTH = 0
NPAGEHEIGHT = 0
NLASTSECTIONTYPE = -1
**
PROCEDURE Init
LPARAMETERS LOXFRX
= DODEFAULT(LOXFRX, .F., .T.)
THIS.OTXT = CREATEOBJECT("txtboxparams")
THIS.OXFRX = LOXFRX
ENDPROC
**
PROCEDURE Destroy
DODEFAULT()
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
DODEFAULT(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
THIS.OXFRX.ODOCUMENT.SETOTHERPARAMS(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
LOCAL LCPOM
THIS.REPORTID = TNREPORTNO
= DODEFAULT(TNREPORTNO, TCCODEPAGE, TOREPORT)
IF TNREPORTNO=1
THIS.OOO = CREATEOBJECT("OOWriter", THIS.OXFRX)
THIS.OOO.MODE = 0
THIS.OOO.CREATEFILES(THIS.OXFRX)
THIS.OOO.NCOLNO = 1
THIS.CURRENTPAGE = 0
THIS.OOO.CVERTICAL_REL = "paragraph-content"
THIS.OOO.CHORIZONTAL_REL = "paragraph"
ENDIF
THIS.OOO.NEWREPORT(THIS.OXFRX, TNREPORTNO, TCCODEPAGE, TOREPORT)
RETURN
ENDPROC
**
PROCEDURE endReport
= DODEFAULT()
THIS.OOO.ENDREPORT(THIS.OXFRX)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
= DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
IF EMPTY(TNPAGENO)
TNPAGENO = 0
ENDIF
THIS.LASTPAGE = THIS.CURRENTPAGE
THIS.CURRENTPAGE = THIS.CURRENTPAGE+1
THIS.PAGECOUNT = MAX(THIS.PAGECOUNT, THIS.CURRENTPAGE)
STORE 0 TO THIS.NCURRENTPOSITION, THIS.NLASTPOSITION
STORE .T. TO THIS.LFIRSTINHEADER, THIS.LFIRSTINMAIN, THIS.LFIRSTINFOOTER, THIS.LFIRSTINPAGE
THIS.OOO.NEWPAGE(THIS.OXFRX, TNHEIGHT, TNWIDTH, THIS.CURRENTPAGE)
ENDPROC
**
PROCEDURE endPage
= DODEFAULT()
THIS.OOO.ENDPAGE(THIS.OXFRX)
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
= DODEFAULT(TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
THIS.OOO.NEWSECTION(THIS.OXFRX, TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
ENDPROC
**
PROCEDURE endSection
DODEFAULT()
THIS.OOO.ENDSECTION(THIS.OXFRX)
ENDPROC
**
PROCEDURE finalize
LPARAMETERS _X____11333
IF  .NOT. ISNULL(THIS.OOO)
THIS.OOO.CREATEPREVIEW(_X____11333)
THIS.OOO.GENERATEFILES(_X____11333)
THIS.OOO.CREATEOUTPUTFILE(_X____11333.COUTPUTNAME)
THIS.OOO.OPENDOCUMENT(_X____11333)
THIS.OOO.CLEARENVIRONMENT()
THIS.OOO.OREPORT = .NULL.
ENDIF
THIS.OXFRX = .NULL.
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
= DODEFAULT(_X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME)
ENDPROC
**
PROCEDURE AddXObject
LPARAMETERS TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNNUMERICVALUE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET, TLABSOLUTE, TCLINKNAME, TCLINKHREF, TCTOOLTIP, TCPICTURE
= DODEFAULT(TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNNUMERICVALUE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET, TLABSOLUTE, TCLINKNAME, TCLINKHREF, TCTOOLTIP, TCPICTURE)
IF INLIST(TNTYPE, "T", "L")
THIS.OOO.ADDEXTENSION(RECCOUNT(THIS._X____11335), THIS.OTXTBOX)
ENDIF
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.ADDXOBJECT("G", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, IIF(THIS.LBELOWTEXT, "B", "---"),  , TNPENSIZE, 8, TNPENRED, TNPENGREEN, TNPENBLUE, .F., TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET,  ,  ,  ,  , TCPATH)
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.ADDXOBJECT("R", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, IIF(THIS.LBELOWTEXT, "B", "-x-"),  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, .F., TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET)
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.ADDXOBJECT("I", TNLEFT, TNLTO, TNTOP, TNTTO, IIF(THIS.LBELOWTEXT, "B", "-x-"),  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE)
ENDPROC
**
PROCEDURE outputMatrix
LOCAL LCOBJECTSALIAS, LCCLASSESALIAS, LNLINEHEIGHT, LNLEFTSHIFT, LCCLASS, LCPOM, LOOBJ, LOCLS, LCORDER, LISELE, LIPOS, LIDELTA, LNLHX, LLHEADER, LLFOOTER, LLBODY, LLFIRSTINBAND, LCPARAGRAPHSTYLE, LCPS, LOTXT
LLFIRSTINPAGE = THIS.LFIRSTINPAGE
IF THIS.LFIRSTINPAGE
THIS.LFIRSTINPAGE = .F.
ENDIF
THIS.NCURRENTPOSITION = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)
THIS.OOO.SETENTITIES(THIS.NCURRENTSECTIONTYPE)
STORE .F. TO LLHEADER, LLFOOTER, LLBODY
DO CASE
CASE INLIST(THIS.NCURRENTSECTIONTYPE, 0, 1)
LLHEADER = .T.
THIS.OOO.XCURRENTSECTION = 0
LLFIRSTINBAND = THIS.LFIRSTINHEADER
IF LLFIRSTINBAND
THIS.LFIRSTINHEADER = .F.
ENDIF
CASE THIS.NCURRENTSECTIONTYPE=7
LLFOOTER = .T.
THIS.OOO.XCURRENTSECTION = 1
LLFIRSTINBAND = THIS.LFIRSTINFOOTER
IF LLFIRSTINBAND
THIS.LFIRSTINFOOTER = .F.
ENDIF
OTHERWISE
LLBODY = .T.
THIS.OOO.XCURRENTSECTION = 2
LLFIRSTINBAND = THIS.LFIRSTINMAIN
IF LLFIRSTINBAND
THIS.LFIRSTINMAIN = .F.
ENDIF
ENDCASE
LCORDER = STR(THIS.OOO.NPAGENO, 5)+IIF(LLHEADER, IIF(LLFIRSTINBAND, " 1001", " 1200"), IIF(LLFOOTER, IIF(LLFIRSTINBAND, " 3001", " 3200"), IIF(LLFIRSTINBAND, " 2001", " 2200")))
IF RECCOUNT(THIS._X____11335)=0
IF THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)>0
LNLINEHEIGHT = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)
STORE THIS.NCURRENTPOSITION+LNLINEHEIGHT TO THIS.NCURRENTPOSITION, THIS.NLASTPOSITION
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
THIS.GENERATEROW("", "", LNLINEHEIGHT, 0, LCORDER, LLFIRSTINBAND, "")
ENDIF
THIS.NLASTSECTIONTYPE = THIS.NCURRENTSECTIONTYPE
THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 3) = -1
RETURN
ENDIF
LCOBJECTSALIAS = THIS._X____11335
LCCLASSESALIAS = THIS._X____11332
LISELE = SELECT()
SELECT (LCOBJECTSALIAS)
IF THIS.NLINES=0
THIS.NLASTSECTIONTYPE = THIS.NCURRENTSECTIONTYPE
THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 3) = -1
RETURN
ENDIF
LNLEFTSHIFT = THIS.OOO.NLEFTPAGEMARGIN
LOTXT = THIS.OTXT
LLADDLAST = .T.
INDEX ON IIF(INLIST(TYPE, "I", "G", "R", "X"), -100000, X0) TAG X0 ADDITIVE
SET ORDER TO x0
STORE "" TO LCNROW
FOR LNX = 1 TO THIS.NLINES
SET ORDER TO
SCAN ALL FOR LINE=LNX
IF INLIST(TYPE, "T", "L")
EXIT
ENDIF
IF TYPE<>"X"
REPLACE TEXT WITH "B"
ENDIF
ENDSCAN
SET ORDER TO x0
SELECT (LCOBJECTSALIAS)
STORE 0 TO LNLHX, LIDELTA
STORE "" TO LCPOM, LCPARAGRAPHSTYLE, LCPS
IF THIS.OOO.XCURRENTSECTION=1
DO CASE
CASE THIS.ALINESARRAY(LNX, 4)=THIS.ALINESARRAY(LNX, 3)
LNLHX = 0
CASE LNX=1
LNLHX = THIS.ALINESARRAY(LNX, 3)-THIS.NCURRENTPOSITION
OTHERWISE
LNLHX = THIS.ALINESARRAY(LNX, 3)-THIS.NCURRENTPOSITION
ENDCASE
ELSE
DO CASE
CASE THIS.ALINESARRAY(LNX, 4)=THIS.ALINESARRAY(LNX, 3)
LNLHX = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)-IIF(LLFIRSTINPAGE, THIS.NCURRENTPOSITION, THIS.NLASTPOSITION)
CASE LNX=1
LNLHX = THIS.ALINESARRAY(LNX, 3)-IIF(LLFIRSTINPAGE, THIS.NCURRENTPOSITION, THIS.NLASTPOSITION)
OTHERWISE
LNLHX = THIS.ALINESARRAY(LNX, 3)-THIS.NCURRENTPOSITION
ENDCASE
ENDIF
IF LNLHX>0
LNLHY = LNLHX
LCCLASS = "Row_20_Blank"
DO WHILE LNLHX>1562.50 
THIS.GENERATEROW("", "", 1562.50 , 0, @LCORDER, @LLFIRSTINBAND, LCCLASS)
LNLHX = LNLHX-1562.50 
ENDDO
DO CASE
CASE THIS.ALINESARRAY(LNX, 4)=THIS.ALINESARRAY(LNX, 3)
CASE LNX=1 .AND.  .NOT. (LLFIRSTINPAGE .OR. THIS.OOO.XCURRENTSECTION=1)
THIS.NLASTPOSITION = THIS.NLASTPOSITION+(LNLHY-LNLHX)
OTHERWISE
THIS.NCURRENTPOSITION = THIS.NCURRENTPOSITION+(LNLHY-LNLHX)
ENDCASE
ENDIF
DO CASE
CASE THIS.ALINESARRAY(LNX, 4)=THIS.ALINESARRAY(LNX, 3)
LNLINEHEIGHT = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)
LIDELTA = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)
CASE LNX=1
LNLINEHEIGHT = THIS.ALINESARRAY(LNX, 4)-THIS.ALINESARRAY(LNX, 3)
LIDELTA = IIF(LLFIRSTINPAGE .OR. THIS.OOO.XCURRENTSECTION=1, THIS.NCURRENTPOSITION, THIS.NLASTPOSITION)+LNLHX
OTHERWISE
LNLINEHEIGHT = THIS.ALINESARRAY(LNX, 4)-THIS.ALINESARRAY(LNX, 3)
LIDELTA = THIS.NCURRENTPOSITION+LNLHX
ENDCASE
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
SELECT (LCOBJECTSALIAS)
LOCATE FOR LINE=LNX .AND. TYPE="T"
LCCLASS = "PF_"+IIF(FOUND(), LTRIM(STR(CLASS, 11)), SYS(2015))
SCAN ALL FOR LINE=LNX
SCATTER MEMO NAME LOOBJ
IF INLIST(LOOBJ.TYPE, "X", "T", "L")
SELECT (LCCLASSESALIAS)
GOTO (EVALUATE(LCOBJECTSALIAS+".CLASS"))
SCATTER MEMO NAME LOCLS
THIS.OOO.READEXTENSION(RECNO(LCOBJECTSALIAS), @LOTXT)
SELECT (LCOBJECTSALIAS)
ENDIF
LCPOM = LCPOM+THIS.GENERATEOBJECT(LOOBJ, LOCLS, LNLEFTSHIFT, LIDELTA, @LCPARAGRAPHSTYLE)
LCPS = LCPS+LCPARAGRAPHSTYLE
ENDSCAN
THIS.NCURRENTPOSITION = THIS.ALINESARRAY(LNX, 4)
THIS.GENERATEROW(@LCPOM, @LCPS, LNLINEHEIGHT, LNLHX, @LCORDER, @LLFIRSTINBAND, LCCLASS)
SELECT (LCOBJECTSALIAS)
ENDFOR
THIS.OOO.CLEAREXTENSION()
SELECT (LISELE)
THIS.NLASTPOSITION = THIS.NCURRENTPOSITION
THIS.NLASTSECTIONTYPE = THIS.NCURRENTSECTIONTYPE
THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 3) = -1
RETURN
ENDPROC
**
FUNCTION GenerateObject
LPARAMETERS LOOBJ, LOCLS, LNLEFTSHIFT, LIDELTA, LCSTYLE
LOCAL LCXX, LCPOM, LIPOS
LCXX = THIS.OOO.CENTITYBODY
THIS.OOO.CENTITYBODY = "This.cXMLbuffer"
LCSTYLE = ""
DO CASE
CASE LOOBJ.TYPE="X" .OR. INLIST(LOOBJ.TYPE, "T", "L") .AND. THIS.OTXT.NROTATE>0
THIS.OOO.ADDTEXTBOX(RTRIM(LOOBJ.TEXT), ALLTRIM(LOCLS.FONT), LOCLS.FONTSIZE, LOCLS.BOLD, LOCLS.ITAL, LOOBJ.X0-LNLEFTSHIFT, LOOBJ.Y0-LIDELTA, LOOBJ.XX-LOOBJ.X0, LOOBJ.YY-LOOBJ.Y0, LOOBJ.TYPE, LOCLS.PENRED, LOCLS.PENGREEN, LOCLS.PENBLUE, 0, LOCLS.FILLRED, LOCLS.FILLGREEN, LOCLS.FILLBLUE, LOCLS.ALIGN, LOCLS.UNDERLINE, "", ALLTRIM(LOOBJ.OBJLINKNAME), ALLTRIM(LOOBJ.OBJLINKHREF), "", 0, ALLTRIM(LOOBJ.OBJTOOLTIP), "", THIS.OTXT)
CASE INLIST(LOOBJ.TYPE, "T", "L")
LCSTYLE = '<style:tab-stop '
DO CASE
CASE LOCLS.ALIGN="right"
LIPOS = MIN(LOOBJ.XX-LNLEFTSHIFT, THIS.OOO.NPAPERWIDTH-THIS.OOO.NRIGHTPAGEMARGIN)
LCSTYLE = LCSTYLE+'style:type="right" style:position="'+TOINCH(LIPOS)+'" />'+CHR(13)+CHR(10)
CASE LOCLS.ALIGN="center"
LIPOS = LOOBJ.X0+(LOOBJ.XX-LOOBJ.X0)/2-LNLEFTSHIFT
LCSTYLE = LCSTYLE+'style:type="center" style:position="'+TOINCH(LIPOS)+'" />'+CHR(13)+CHR(10)
OTHERWISE
LIPOS = MIN(MAX(LOOBJ.X0-LNLEFTSHIFT, 0), THIS.OOO.NPAPERWIDTH-THIS.OOO.NRIGHTPAGEMARGIN)
LCSTYLE = LCSTYLE+' style:position="'+TOINCH(LIPOS)+'" />'+CHR(13)+CHR(10)
ENDCASE
LCPOM = THIS.OOO.ADDTEXT(LOOBJ, LOCLS, LIPOS, THIS.OTXT)
CASE LOOBJ.TYPE="I"
THIS.OOO.ADDLINE(LOOBJ.X0-LNLEFTSHIFT, LOOBJ.Y0-LIDELTA, LOOBJ.XX-LNLEFTSHIFT, LOOBJ.YY-LIDELTA, LOOBJ.PENSIZE, LOOBJ.PENPAT, LOOBJ.PENRED, LOOBJ.PENGREEN, LOOBJ.PENBLUE, "")
CASE LOOBJ.TYPE="G"
THIS.OOO.ADDPICTURE(LOOBJ.X0-LNLEFTSHIFT, LOOBJ.Y0-LIDELTA, LOOBJ.XX-LOOBJ.X0, LOOBJ.YY-LOOBJ.Y0, 0, 0, -1, -1, -1, 0, -1, -1, -1, 0, LOOBJ.OBJPICTURE, "ssss", 0)
CASE LOOBJ.TYPE="R"
THIS.OOO.ADDRECTANGLE(LOOBJ.X0-LNLEFTSHIFT, LOOBJ.Y0-LIDELTA, LOOBJ.XX-LOOBJ.X0, LOOBJ.YY-LOOBJ.Y0, LOOBJ.PENSIZE, LOOBJ.FILLPAT, LOOBJ.FILLRED, LOOBJ.FILLGREEN, LOOBJ.FILLBLUE, LOOBJ.PENPAT, LOOBJ.PENRED, LOOBJ.PENGREEN, LOOBJ.PENBLUE, LOOBJ.OFFSET, "")
ENDCASE
IF  .NOT. (INLIST(LOOBJ.TYPE, "T", "L") .AND. EVALUATE(THIS.OOO.CAEXT+".nRotate")=0)
LCPOM = THIS.OOO.CXMLBUFFER
ENDIF
THIS.OOO.CXMLBUFFER = ""
THIS.OOO.CENTITYBODY = LCXX
RETURN LCPOM
ENDFUNC
**
PROCEDURE GenerateRow
LPARAMETERS LCROW, LCPARAGRAPHSTYLE, LIHEIGHT, LNMTOP, LCORDER, LLFIRSTINBAND, LCCLASS
LOCAL LCROWNUM, LCSTYLE, LLEXIST, LCPOM, LCPS, LCPARENTSTYLE, LISELE
LISELE = SELECT()
IF LCCLASS="Row_20_Blank"
LCPS = ' <style:paragraph-properties '+CHR(13)+CHR(10)+' fo:line-height="'+TOINCH(LIHEIGHT)+'" />'+CHR(13)+CHR(10)+' <style:text-properties fo:font-size="10pt" />'
ELSE
LCPS = ' <style:paragraph-properties fo:margin-left="0pt" fo:margin-right="0pt" '+CHR(13)+CHR(10)+' fo:margin-top="'+TOINCH(LNMTOP)+'" fo:margin-bottom="0" fo:text-indent="0pt"'+CHR(13)+CHR(10)+' fo:line-height="'+TOINCH(LIHEIGHT)+'"'+CHR(13)+CHR(10)+' style:auto-text-indent="false">'+CHR(13)+CHR(10)+'  <style:tab-stops>'+CHR(13)+CHR(10)+LCPARAGRAPHSTYLE+'  </style:tab-stops>'+CHR(13)+CHR(10)+' </style:paragraph-properties>'+CHR(13)+CHR(10)+' <style:text-properties fo:font-size="10pt" />'
ENDIF
IF LLFIRSTINBAND
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES (THIS.OOO.CENTITYBODY, LCROW, LCORDER)
DO CASE
CASE THIS.OOO.XCURRENTSECTION=2
THIS.OOO.CXMLPARAGRAPHPROPERTIES = LCPS
LCORDER = STR(THIS.OOO.NPAGENO, 5)+" 2200"
CASE THIS.OOO.XCURRENTSECTION=0
THIS.OOO.CXMLHEADERPARAGRAPHPROPERTIES = LCPS
LCORDER = STR(THIS.OOO.NPAGENO, 5)+" 1200"
CASE THIS.OOO.XCURRENTSECTION=1
THIS.OOO.CXMLFOOTERPARAGRAPHPROPERTIES = LCPS
LCORDER = STR(THIS.OOO.NPAGENO, 5)+" 3200"
ENDCASE
LLFIRSTINBAND = .F.
ELSE
IF LEN(LCCLASS)=0
LCCLASS = "PF_"+SYS(2015)
ENDIF
IF LCCLASS="Row_20_Blank"
LCPARENTSTYLE = LCCLASS
LCCLASS = "PF_RowBlank"
ELSE
LCPARENTSTYLE = "Text_20_body"
ENDIF
LCSTYLE = '<style:style style:name="%Class%" style:family="paragraph" style:parent-style-name="'+LCPARENTSTYLE+'">'+CHR(13)+CHR(10)+LCPS+'</style:style>'+CHR(13)+CHR(10)
LLEXIST = THIS.OOO.ISEXIST(THIS.OOO.CENTITYSTYLE, LCCLASS)
IF LLEXIST .AND.  .NOT. STRTRAN(LCSTYLE, "%Class%", LCCLASS)==THIS.OOO.GETDATA(THIS.OOO.CENTITYSTYLE, LCCLASS)
LCCLASS = LCCLASS+"_"+SYS(2015)
LLEXIST = .F.
ENDIF
LCPOM = '<text:p text:style-name="'+LCCLASS+'">'+CHR(13)+CHR(10)+LCROW+'</text:p>'+CHR(13)+CHR(10)
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES (THIS.OOO.CENTITYBODY, LCPOM, LCORDER)
IF  .NOT. LLEXIST
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX002) VALUES (THIS.OOO.CENTITYSTYLE, STRTRAN(LCSTYLE, "%Class%", LCCLASS), LCCLASS)
ENDIF
ENDIF
SELECT (LISELE)
RETURN
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS OOCBoxLayoutWriter AS FlowLayoutWriter
REPORTID = 0
CURRENTPAGE = 0
PAGECOUNT = 0
OXFRX = .NULL.
OOO = .NULL.
NSTYLESFILEHANDLE = 0
NCURRENTPOSITION = 0
NLASTPOSITION = 0
OTXT = .NULL.
LROTATE = .F.
LFIRSTINPAGE = .F.
NPAGEWIDTH = 0
NPAGEHEIGHT = 0
NLASTSECTIONTYPE = -1
**
PROCEDURE Init
LPARAMETERS LOXFRX
= DODEFAULT(LOXFRX, .F., .T.)
THIS.OTXT = CREATEOBJECT("txtboxparams")
THIS.OXFRX = LOXFRX
ENDPROC
**
PROCEDURE Destroy
DODEFAULT()
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
DODEFAULT(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
THIS.OXFRX.ODOCUMENT.SETOTHERPARAMS(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
LOCAL LCPOM
THIS.REPORTID = TNREPORTNO
= DODEFAULT(TNREPORTNO, TCCODEPAGE, TOREPORT)
IF TNREPORTNO=1
THIS.OOO = CREATEOBJECT("OOWriter", THIS.OXFRX)
THIS.OOO.MODE = 2
THIS.OOO.CREATEFILES(THIS.OXFRX)
THIS.OOO.NCOLNO = 1
THIS.OOO.CVERTICAL_REL = ""
THIS.OOO.CHORIZONTAL_REL = ""
THIS.CURRENTPAGE = 0
ENDIF
THIS.OOO.NEWREPORT(THIS.OXFRX, TNREPORTNO, TCCODEPAGE, TOREPORT)
RETURN
ENDPROC
**
PROCEDURE endReport
= DODEFAULT()
THIS.OOO.ENDREPORT(THIS.OXFRX)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
= DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
IF EMPTY(TNPAGENO)
TNPAGENO = 0
ENDIF
THIS.CURRENTPAGE = THIS.CURRENTPAGE+1
THIS.PAGECOUNT = MAX(THIS.PAGECOUNT, THIS.CURRENTPAGE)
THIS.NCURRENTPOSITION = 0
THIS.NLASTPOSITION = 0
THIS.NLASTSECTIONTYPE = -1
THIS.LFIRSTINPAGE = .T.
THIS.OOO.NEWSHEET(THIS.OXFRX, TNHEIGHT, TNWIDTH, THIS.CURRENTPAGE)
ENDPROC
**
PROCEDURE endPage
= DODEFAULT()
THIS.OOO.ENDSHEET(THIS.OXFRX)
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
= DODEFAULT(TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
THIS.OOO.NEWSECTION(THIS.OXFRX, TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
ENDPROC
**
PROCEDURE endSection
DODEFAULT()
THIS.OOO.ENDSECTION(THIS.OXFRX)
ENDPROC
**
PROCEDURE finalize
LPARAMETERS _X____11333
IF  .NOT. ISNULL(THIS.OOO)
THIS.OOO.CREATEPREVIEW(_X____11333)
THIS.OOO.GENERATEFILES(_X____11333)
THIS.OOO.CREATEOUTPUTFILE(_X____11333.COUTPUTNAME)
THIS.OOO.OPENDOCUMENT(_X____11333)
THIS.OOO.CLEARENVIRONMENT()
THIS.OOO.OREPORT = .NULL.
ENDIF
THIS.OXFRX = .NULL.
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
LOCAL LNSEL, LNCLASS
THIS.LBELOWTEXT = .F.
TNWIDTH = TNWIDTH+(625.0/2)
LNSEL = SELECT(0)
IF TNMODE=1
STORE -1 TO TNFILLRED, TNFILLGREEN, TNFILLBLUE
ENDIF
LNCLASS = THIS.REGISTERCLASS(TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TLUNDERLINE, THIS.OTXTBOX.LSTRIKED, TCALIGN, TCUNIQUEID+"|"+ALLTRIM(STR(THIS.NREPORT)), TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, THIS.OTXTBOX.CXLSFORMAT)
THIS.ADDXOBJECT(TCTYPE, TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, _X____11334, LNCLASS,  ,  ,  ,  ,  , THIS.OTXTBOX.NNUMERICVALUE,  ,  ,  ,  ,  , THIS.OTXTBOX.LABSOLUTE, TCLINKNAME, TCLINKHREF, TCTOOLTIP)
THIS.OOO.ADDEXTENSION(RECCOUNT(THIS._X____11335), THIS.OTXTBOX)
SELECT (LNSEL)
ENDPROC
**
PROCEDURE AddXObject
LPARAMETERS TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNNUMERICVALUE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET, TLABSOLUTE, TCLINKNAME, TCLINKHREF, TCTOOLTIP, TCPICTURE
= DODEFAULT(TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNNUMERICVALUE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET, TLABSOLUTE, TCLINKNAME, TCLINKHREF, TCTOOLTIP, TCPICTURE)
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.ADDXOBJECT("G", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, IIF(THIS.LBELOWTEXT, "B", "---"),  , TNPENSIZE, 8, TNPENRED, TNPENGREEN, TNPENBLUE, .F., TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET,  ,  ,  ,  , TCPATH)
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.ADDXOBJECT("R", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, IIF(THIS.LBELOWTEXT, "B", "-x-"),  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, .F., TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET)
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.ADDXOBJECT("I", TNLEFT, TNLTO, TNTOP, TNTTO, IIF(THIS.LBELOWTEXT, "B", "-x-"),  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE)
ENDPROC
**
PROCEDURE outputMatrix
LOCAL LCOBJECTSALIAS, LCCLASSESALIAS, LNLINEHEIGHT, LNLEFTSHIFT, LCCLASS, LCPOM, LOOBJ, LOCLS, LCORDER, LISELE, LIPOS, LIDELTA, LLBREAKBEFORE, LLADDLAST, LNLHX, LLBEFORE, LLNEXT, LCRCS
THIS.NCURRENTPOSITION = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)
THIS.OOO.SETENTITIES(THIS.NCURRENTSECTIONTYPE)
LCORDER = STR(THIS.OOO.NPAGENO, 5)+" 2001"
LLBREAKBEFORE = THIS.OOO.NPAGENO>1 .AND.  .NOT. THIS.OXFRX.ODOCUMENT.LSHEETPERPAGE .AND. THIS.LFIRSTINPAGE
IF THIS.LFIRSTINPAGE
LCRCS = LTRIM(STR(THIS.OOO.NPAGENO, 11))
LCPOM = ' <table:table-column table:style-name="col'+LCRCS+'" table:default-cell-style-name="Default" /> '+CHR(13)+CHR(10)
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", LCPOM, STR(THIS.OOO.NPAGENO, 5)+" 2000")
LCPOM = ' <style:style style:name="col'+LCRCS+'" style:family="table-column">'+CHR(13)+CHR(10)+'  <style:table-column-properties fo:break-before="auto" style:column-width="'+TOINCH(THIS.OOO.NPAPERWIDTH)+'" />'+CHR(13)+CHR(10)+' </style:style>'+CHR(13)+CHR(10)
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001) VALUES ("CAS", LCPOM)
THIS.LFIRSTINPAGE = .F.
ENDIF
IF RECCOUNT(THIS._X____11335)=0
IF THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)>0
LNLINEHEIGHT = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)
STORE THIS.NCURRENTPOSITION+LNLINEHEIGHT TO THIS.NCURRENTPOSITION, THIS.NLASTPOSITION
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
THIS.GENERATEROW("", LNLINEHEIGHT, LCORDER, LLBREAKBEFORE)
ENDIF
THIS.NLASTSECTIONTYPE = THIS.NCURRENTSECTIONTYPE
THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 3) = -1
RETURN
ENDIF
LCOBJECTSALIAS = THIS._X____11335
LCCLASSESALIAS = THIS._X____11332
LISELE = SELECT()
SELECT (LCOBJECTSALIAS)
IF THIS.NLINES=0
THIS.NLASTSECTIONTYPE = THIS.NCURRENTSECTIONTYPE
THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 3) = -1
RETURN
ENDIF
LNLEFTSHIFT = THIS.OOO.NLEFTPAGEMARGIN
IF THIS.NCURRENTSECTIONTYPE=7
IF THIS.NLASTPOSITION=0
LNLINEHEIGHT = THIS.OOO.NPAPERHEIGHT-THIS.OOO.NBOTTOMPAGEMARGIN-THIS.OOO.NTOPPAGEMARGIN-THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)-THIS.NLASTPOSITION
ELSE
LNLINEHEIGHT = THIS.OOO.NPAPERHEIGHT-THIS.OOO.NBOTTOMPAGEMARGIN-THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)-THIS.NLASTPOSITION
ENDIF
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
THIS.GENERATEROW("", LNLINEHEIGHT, LCORDER, .NULL.)
THIS.NCURRENTPOSITION = THIS.NLASTPOSITION+LNLINEHEIGHT
ENDIF
LLADDLAST = .T.
INDEX ON IIF(INLIST(TYPE, "I", "G", "R", "X"), -100000, X0) TAG X0 ADDITIVE
SET ORDER TO x0
STORE "" TO LCNROW
FOR LNX = 1 TO THIS.NLINES
SET ORDER TO
SCAN ALL FOR LINE=LNX
IF INLIST(TYPE, "T", "L")
EXIT
ENDIF
IF TYPE<>"X"
REPLACE TEXT WITH "B"
ENDIF
ENDSCAN
SET ORDER TO x0
SELECT (LCOBJECTSALIAS)
STORE 0 TO LNLHX, LIDELTA
STORE .F. TO LLBEFORE, LLNEXT
IF THIS.ALINESARRAY(LNX, 3)<THIS.ALINESARRAY(LNX, 4)
LOCATE FOR LINE=LNX .AND. Y0<THIS.ALINESARRAY(LNX, 3)
LLBEFORE = FOUND()
LOCATE FOR LINE=LNX .AND. Y0>THIS.ALINESARRAY(LNX, 4)
LLNEXT = FOUND()
ENDIF
IF LLBEFORE
DO CASE
CASE LNX=1
LNLINEHEIGHT = THIS.ALINESARRAY(LNX, 3)-THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)
LIDELTA = THIS.NCURRENTPOSITION
OTHERWISE
LIDELTA = THIS.ALINESARRAY(LNX, 3)-THIS.ALINESARRAY(LNX-1, 4)
LNLINEHEIGHT = THIS.ALINESARRAY(LNX, 3)-THIS.ALINESARRAY(LNX-1, 4)
ENDCASE
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
LCPOM = ""
SELECT (LCOBJECTSALIAS)
SCAN ALL FOR LINE=LNX .AND. Y0<THIS.ALINESARRAY(LNX, 3)
SCATTER MEMO NAME LOOBJ
IF INLIST(LOOBJ.TYPE, "X", "T", "L")
SELECT (LCCLASSESALIAS)
GOTO (EVALUATE(LCOBJECTSALIAS+".CLASS"))
SCATTER MEMO NAME LOCLS
THIS.OOO.READEXTENSION(RECNO(LCOBJECTSALIAS), THIS.OTXT)
SELECT (LCOBJECTSALIAS)
ENDIF
LCPOM = LCPOM+THIS.GENERATEOBJECT(LOOBJ, LOCLS, LNLEFTSHIFT, LIDELTA)
ENDSCAN
THIS.GENERATEROW(@LCPOM, LNLINEHEIGHT, LCORDER, @LLBREAKBEFORE)
THIS.NCURRENTPOSITION = THIS.NCURRENTPOSITION+LNLINEHEIGHT
ELSE
DO CASE
CASE THIS.ALINESARRAY(LNX, 3)=THIS.ALINESARRAY(LNX, 4)
CASE LNX=1
LNLHX = THIS.ALINESARRAY(LNX, 3)-THIS.NCURRENTPOSITION
OTHERWISE
LNLHX = THIS.ALINESARRAY(LNX, 3)-THIS.NCURRENTPOSITION
ENDCASE
ENDIF
DO CASE
CASE THIS.ALINESARRAY(LNX, 4)=THIS.ALINESARRAY(LNX, 3)
LNLINEHEIGHT = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)
LIDELTA = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)
LLADDLAST = .F.
OTHERWISE
LNLINEHEIGHT = THIS.ALINESARRAY(LNX, 4)-THIS.ALINESARRAY(LNX, 3)+LNLHX
LIDELTA = THIS.NCURRENTPOSITION
ENDCASE
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
LCPOM = ""
SELECT (LCOBJECTSALIAS)
SCAN ALL FOR LINE=LNX .AND. ((Y0>=THIS.ALINESARRAY(LNX, 3) .AND. Y0<=THIS.ALINESARRAY(LNX, 4)) .OR. THIS.ALINESARRAY(LNX, 3)=THIS.ALINESARRAY(LNX, 4))
SCATTER MEMO NAME LOOBJ
IF INLIST(LOOBJ.TYPE, "X", "T", "L")
SELECT (LCCLASSESALIAS)
GOTO (EVALUATE(LCOBJECTSALIAS+".CLASS"))
SCATTER MEMO NAME LOCLS
THIS.OOO.READEXTENSION(RECNO(LCOBJECTSALIAS), THIS.OTXT)
SELECT (LCOBJECTSALIAS)
ENDIF
LCPOM = LCPOM+THIS.GENERATEOBJECT(LOOBJ, LOCLS, LNLEFTSHIFT, LIDELTA)
ENDSCAN
THIS.NCURRENTPOSITION = THIS.NCURRENTPOSITION+LNLINEHEIGHT
THIS.GENERATEROW(@LCPOM, LNLINEHEIGHT, LCORDER, @LLBREAKBEFORE)
SELECT (LCOBJECTSALIAS)
IF LLNEXT
DO CASE
CASE LNX<THIS.NLINES
LNLINEHEIGHT = THIS.ALINESARRAY(LNX+1, 3)-THIS.ALINESARRAY(LNX, 4)
OTHERWISE
LNLINEHEIGHT = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)+THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)-THIS.ALINESARRAY(LNX, 4)
LLADDLAST = .F.
ENDCASE
LIDELTA = THIS.NCURRENTPOSITION
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
LCPOM = ""
SELECT (LCOBJECTSALIAS)
SCAN ALL FOR LINE=LNX .AND. Y0>THIS.ALINESARRAY(LNX, 4)
SCATTER MEMO NAME LOOBJ
IF INLIST(LOOBJ.TYPE, "X", "T", "L")
SELECT (LCCLASSESALIAS)
GOTO (EVALUATE(LCOBJECTSALIAS+".CLASS"))
SCATTER MEMO NAME LOCLS
THIS.OOO.READEXTENSION(RECNO(LCOBJECTSALIAS), THIS.OTXT)
SELECT (LCOBJECTSALIAS)
ENDIF
LCPOM = LCPOM+THIS.GENERATEOBJECT(LOOBJ, LOCLS, LNLEFTSHIFT, LIDELTA)
ENDSCAN
THIS.GENERATEROW(@LCPOM, LNLINEHEIGHT, LCORDER, @LLBREAKBEFORE)
THIS.NCURRENTPOSITION = THIS.NCURRENTPOSITION+LNLINEHEIGHT
ENDIF
ENDFOR
IF LLADDLAST .AND. THIS.ALINESARRAY(THIS.NLINES, 4)<THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)+THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
LNLINEHEIGHT = THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 1)+THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 2)-THIS.ALINESARRAY(THIS.NLINES, 4)
THIS.NCURRENTPOSITION = THIS.NCURRENTPOSITION+LNLINEHEIGHT
THIS.GENERATEROW("", LNLINEHEIGHT, LCORDER, LLBREAKBEFORE)
ENDIF
THIS.OOO.CLEAREXTENSION()
SELECT (LISELE)
THIS.NLASTPOSITION = THIS.NCURRENTPOSITION
THIS.NLASTSECTIONTYPE = THIS.NCURRENTSECTIONTYPE
THIS.OOO.ASECTIONSH(THIS.NCURRENTSECTIONTYPE+1, 3) = -1
RETURN
ENDPROC
**
FUNCTION GenerateObject
LPARAMETERS LOOBJ, LOCLS, LNLEFTSHIFT, LIDELTA
LOCAL LCXX, LCPOM
LCXX = THIS.OOO.CENTITYBODY
THIS.OOO.CENTITYBODY = "This.cXMLbuffer"
DO CASE
CASE INLIST(LOOBJ.TYPE, "T", "X", "L")
THIS.OOO.ADDTEXTBOX(RTRIM(LOOBJ.TEXT), ALLTRIM(LOCLS.FONT), LOCLS.FONTSIZE, LOCLS.BOLD, LOCLS.ITAL, LOOBJ.X0-LNLEFTSHIFT, LOOBJ.Y0-LIDELTA, LOOBJ.XX-LOOBJ.X0, LOOBJ.YY-LOOBJ.Y0, LOOBJ.TYPE, LOCLS.PENRED, LOCLS.PENGREEN, LOCLS.PENBLUE, 0, LOCLS.FILLRED, LOCLS.FILLGREEN, LOCLS.FILLBLUE, LOCLS.ALIGN, LOCLS.UNDERLINE, "", ALLTRIM(LOOBJ.OBJLINKNAME), ALLTRIM(LOOBJ.OBJLINKHREF), "", 0, ALLTRIM(LOOBJ.OBJTOOLTIP), "", THIS.OTXT)
CASE LOOBJ.TYPE="I"
THIS.OOO.ADDLINE(LOOBJ.X0-LNLEFTSHIFT, LOOBJ.Y0-LIDELTA, LOOBJ.XX-LNLEFTSHIFT, LOOBJ.YY-LIDELTA, LOOBJ.PENSIZE, LOOBJ.PENPAT, LOOBJ.PENRED, LOOBJ.PENGREEN, LOOBJ.PENBLUE, "")
CASE LOOBJ.TYPE="G"
THIS.OOO.ADDPICTURE(LOOBJ.X0-LNLEFTSHIFT, LOOBJ.Y0-LIDELTA, LOOBJ.XX-LOOBJ.X0, LOOBJ.YY-LOOBJ.Y0, 0, 0, -1, -1, -1, 0, -1, -1, -1, 0, LOOBJ.OBJPICTURE, "ssss", 0)
CASE LOOBJ.TYPE="R"
THIS.OOO.ADDRECTANGLE(LOOBJ.X0-LNLEFTSHIFT, LOOBJ.Y0-LIDELTA, LOOBJ.XX-LOOBJ.X0, LOOBJ.YY-LOOBJ.Y0, LOOBJ.PENSIZE, LOOBJ.FILLPAT, LOOBJ.FILLRED, LOOBJ.FILLGREEN, LOOBJ.FILLBLUE, LOOBJ.PENPAT, LOOBJ.PENRED, LOOBJ.PENGREEN, LOOBJ.PENBLUE, LOOBJ.OFFSET, "")
ENDCASE
LCPOM = THIS.OOO.CXMLBUFFER
THIS.OOO.CXMLBUFFER = ""
THIS.OOO.CENTITYBODY = LCXX
RETURN LCPOM
ENDFUNC
**
PROCEDURE GenerateRow
LPARAMETERS LCROW, LIHEIGHT, LCORDER, LLBREAKBEFORE
LOCAL LCROWNUM, LCSTYLE, LISELE
LISELE = SELECT()
LCROWNUM = LTRIM(STR(THIS.REPORTID, 11))+"_"+LTRIM(STR(THIS.CURRENTPAGE, 11))+"_"+LTRIM(STR(THIS.OOO.NROWNO, 11))
LCSTYLE = ' <style:style style:name="row'+LCROWNUM+'" style:family="table-row">'+CHR(13)+CHR(10)+'  <style:table-row-properties style:row-height="'+TOINCH(LIHEIGHT)+'" fo:break-before="'+IIF(LLBREAKBEFORE .AND.  .NOT. ISNULL(LLBREAKBEFORE), "page", "auto")+'" style:use-optimal-row-height="false" '+CHR(13)+CHR(10)+'  />'+CHR(13)+CHR(10)+'</style:style>'+CHR(13)+CHR(10)
LLBREAKBEFORE = .F.
IF LEN(LCROW)=0
LCROW = '  <table:table-cell office:value-type="string" />'+CHR(13)+CHR(10)
ELSE
LCROW = '  <table:table-cell office:value-type="string">'+CHR(13)+CHR(10)+LCROW+'  </table:table-cell>'+CHR(13)+CHR(10)
ENDIF
LCROW = ' <table:table-row table:style-name="row'+LCROWNUM+'">'+CHR(13)+CHR(10)+LCROW+' </table:table-row>'+CHR(13)+CHR(10)
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES (THIS.OOO.CENTITYBODY, LCROW, LCORDER)
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001) VALUES (THIS.OOO.CENTITYSTYLE, LCSTYLE)
SELECT (LISELE)
RETURN
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS OOCFlowLayoutWriter AS DocumentWriter
_X____11332 = ""
CPIVOTSALIAS = ""
RPIVOTSALIAS = ""
CMATRIXALIAS = ""
_X____11335 = ""
NVERTICALADJUSTMENT = 2
NHORIZONTALADJUSTMENT = 2
NTOPMARGIN = 0
NBOTTOMMARGIN = 0
NLEFTMARGIN = 0
NRIGHTMARGIN = 0
NORIENTATION = 0
NPAPERSIZEINDEX = 1
REPORTID = 0
CURRENTPAGE = 0
PAGECOUNT = 0
NPAGEHEIGHT = 0
NPAGEWIDTH = 0
CSETPOINT = ""
NCURRENTPOSITION = 0
NLASTPOSITION = 0
NLASTSECTIONTYPE = -1
LFIRSTINPAGE = .F.
LDISPLAYGRIDLINES = .T.
LSHEETPERPAGE = .F.
LSHEETPERNPGROUP = .F.
LLEAVEFULLFIELDCONTENT = .F.
OOO = .NULL.
OXFRX = .NULL.
OTXT = .NULL.
**
PROCEDURE Init
LPARAMETERS LOXFRX
LOCAL LNSEL
DODEFAULT()
LNSEL = SELECT()
THIS.CSESSIONDIR = LOXFRX.CSESSIONDIR
THIS._X____11332 = "X"+SYS(2015)
CREATE CURSOR (THIS._X____11332) (UNIQUEID C (15), BOLD L, ITAL L, UNDERLINE L, FONT C (50), FONTSIZE I, ALIGN C (10), PENRED I, PENGREEN I, PENBLUE I, FILLRED I, FILLGREEN I, FILLBLUE I, FORMATSTRING C (80))
INDEX ON UNIQUEID TAG UNIQUEID ADDITIVE
THIS.CPIVOTSALIAS = "A"+SYS(2015)
CREATE CURSOR (THIS.CPIVOTSALIAS) (XX N (9, 3), ORDER I, START L)
INDEX ON XX TAG XX ADDITIVE
THIS.CMATRIXALIAS = "B"+SYS(2015)
CREATE CURSOR (THIS.CMATRIXALIAS) (XX N (9, 3), YY N (9, 3), OBJ I, SPANNED L, COLSPAN I, ROWSPAN I, STYLE C (80), LINK I)
THIS.RPIVOTSALIAS = "C"+SYS(2015)
CREATE CURSOR (THIS.RPIVOTSALIAS) (YY N (9, 3), ORDER I, START L)
INDEX ON YY TAG YY ADDITIVE
THIS._X____11335 = "D"+SYS(2015)
CREATE CURSOR (THIS._X____11335) (TYPE C (1), X0 N (9, 3), XX N (9, 3), Y0 N (9, 3), YY N (9, 3), TEXT M, CLASS I, PENSIZE I, PENPAT I, PENRED I, PENGREEN I, PENBLUE I, NUMVAL C (40), FILLRED I, FILLGREEN I, FILLBLUE I, OFFSET I, ABSOLUTE L, OBJLINKNAME M, OBJLINKHREF M, OBJTOOLTIP M, OBJPICTURE M NOCPTRANS, XTYPE C (1))
SELECT (LNSEL)
THIS.OXFRX = LOXFRX
THIS.OTXT = CREATEOBJECT("txtboxparams")
ENDPROC
**
PROCEDURE Destroy
USE IN SELECT(THIS._X____11332)
USE IN SELECT(THIS.CPIVOTSALIAS)
USE IN SELECT(THIS.RPIVOTSALIAS)
USE IN SELECT(THIS.CMATRIXALIAS)
USE IN SELECT(THIS._X____11335)
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
DODEFAULT(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
THIS.OXFRX.ODOCUMENT.SETOTHERPARAMS(TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10)
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
LOCAL LNSEL
LNSEL = SELECT(0)
THIS.REPORTID = TNREPORTNO
IF TNREPORTNO=1
THIS.OOO = CREATEOBJECT("OOWriter", THIS.OXFRX)
THIS.OOO.MODE = 2
THIS.OOO.CREATEFILES(THIS.OXFRX)
THIS.CURRENTPAGE = 0
THIS.OOO.CVERTICAL_REL = "page"
THIS.OOO.CHORIZONTAL_REL = "page"
ENDIF
THIS.OOO.NEWREPORT(THIS.OXFRX, TNREPORTNO, TCCODEPAGE, TOREPORT)
THIS.NTOPMARGIN = TOREPORT.LNTOPMARGIN
THIS.NBOTTOMMARGIN = TOREPORT.LNBOTTOMMARGIN
THIS.NLEFTMARGIN = TOREPORT.LNLEFTMARGIN
THIS.NRIGHTMARGIN = TOREPORT.LNRIGHTMARGIN
THIS.NORIENTATION = TOREPORT.LNORIENTATION
THIS.NPAPERSIZEINDEX = TOREPORT.NPAPERSIZEINDEX
SELECT (LNSEL)
ENDPROC
**
PROCEDURE endReport
DODEFAULT()
THIS.OOO.ENDREPORT(THIS.OXFRX)
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO)
THIS.NEWPAGE(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
PROCEDURE NewPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
= DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
IF EMPTY(TNPAGENO)
TNPAGENO = 0
ENDIF
THIS.CURRENTPAGE = THIS.CURRENTPAGE+1
THIS.PAGECOUNT = MAX(THIS.PAGECOUNT, THIS.CURRENTPAGE)
THIS.NCURRENTPOSITION = 0
THIS.NLASTPOSITION = 0
THIS.NLASTSECTIONTYPE = -1
THIS.LFIRSTINPAGE = .T.
THIS.OOO.NEWSHEET(THIS.OXFRX, TNHEIGHT, TNWIDTH, THIS.CURRENTPAGE)
ENDPROC
**
PROCEDURE endPage
= DODEFAULT()
THIS.RENDERPAGE(0, 0, 0)
THIS.OOO.ENDSHEET(THIS.OXFRX)
ENDPROC
**
PROCEDURE newSection
LPARAMETERS TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP
= DODEFAULT(TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
THIS.OOO.NEWSECTION(THIS.OXFRX, TOSECTION, TNSECTIONCONTENTHEIGHT, TNTOP)
ENDPROC
**
PROCEDURE endSection
DODEFAULT()
THIS.OOO.ENDSECTION()
ENDPROC
**
PROCEDURE Finalize
LPARAMETERS _X____11333
IF  .NOT. ISNULL(THIS.OOO)
THIS.OOO.CREATEPREVIEW(_X____11333)
THIS.OOO.GENERATEFILES(_X____11333)
THIS.OOO.CREATEOUTPUTFILE(_X____11333.COUTPUTNAME)
THIS.OOO.OPENDOCUMENT(_X____11333)
THIS.OOO.CLEARENVIRONMENT()
THIS.OOO.OREPORT = .NULL.
ENDIF
THIS.OXFRX = .NULL.
ENDPROC
**
FUNCTION registerClass
LPARAMETERS TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TLUNDERLINE, TCALIGN, TCUNIQUEID, TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFORMATSTRING
IF SEEK(TCUNIQUEID, THIS._X____11332, "uniqueID")
RETURN RECNO(THIS._X____11332)
ELSE
INSERT INTO (THIS._X____11332) VALUES (TCUNIQUEID, TLBOLD, TLITALICS, TLUNDERLINE, TCFONT, TNFONTSIZE, TCALIGN, TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFORMATSTRING)
RETURN RECNO(THIS._X____11332)
ENDIF
ENDFUNC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.ADDXOBJECT("G", LNLEFT, LNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, "",  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE,  , TNFILLRED, TNFILLGREEN, TNFILLBLUE, 0, .F., "", "", "", TCPATH)
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
LOCAL LNSEL, LNCLASS, IIII, LCOUTTEXT, LINESCOUNT, AA, BB, CC
IF TCTYPE="L"
TNWIDTH = TNWIDTH+(TNFONTSIZE*0.9 )*10000/72
ENDIF
LNSEL = SELECT(0)
IF TNMODE=1
STORE -1 TO TNFILLRED, TNFILLGREEN, TNFILLBLUE
ENDIF
LNCLASS = THIS.REGISTERCLASS(TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TLUNDERLINE, TCALIGN, TCUNIQUEID, TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, THIS.OTXTBOX.CXLSFORMAT)
IF THIS.LLEAVEFULLFIELDCONTENT
LCOUTTEXT = _X____11334
ELSE
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
LINESCOUNT = 0
ELSE
LINESCOUNT = _X_WW(_X____11334, TCFONT, TNFONTSIZE, IIF(TLITALICS, 1, 0), IIF(TLBOLD, 1, 0), TNWIDTH/10, @__XFRET, IIF(TCALIGN="right", 1, 0), THIS.OTXTBOX.NCODEPAGE)
ENDIF
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
LCOUTTEXT = ""
FOR IIII = 1 TO LINESCOUNT
IF M.IIII>1 .AND. (M.AA*M.IIII+(M.BB)*(M.IIII-1)>M.TNHEIGHT+M.IIII*90)
EXIT
ENDIF
LNXFROM = TOINT(SUBSTR(__XFRET, IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, IIII*12-11+4+12, 4))
LNPOMWIDTH = 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4))
LNTOMTOPPOS = TNTOP+(AA+BB)*(IIII-1)
IF M.IIII=1
LCOUTTEXT = SUBSTR(_X____11334, LNXFROM, LNXTO-LNXFROM+1)
ELSE
LCOUTTEXT = LCOUTTEXT+CHR(13)+CHR(10)+SUBSTR(_X____11334, LNXFROM, LNXTO-LNXFROM+1)
ENDIF
ENDFOR
IF M.IIII=2 .AND. M.TNHEIGHT<M.AA
TNHEIGHT = M.AA
ENDIF
ENDIF
THIS.ADDXOBJECT(TCTYPE, TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, LCOUTTEXT, LNCLASS,  ,  ,  ,  ,  , THIS.OTXTBOX.NNUMERICVALUE, -1, -1, -1, 0, .F., TCLINKNAME, TCLINKHREF, TCTOOLTIP, "")
THIS.OOO.ADDEXTENSION(RECCOUNT(THIS._X____11335), THIS.OTXTBOX)
SELECT (LNSEL)
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
RETURN
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE addXObject
LPARAMETERS TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNNUMERICVALUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET, TLABSOLUTE, TCOBJLINKNAME, TCOBJLINKHREF, TCOBJTOOLTIP, TCOBJPICTURE
IF TYPE("tnfillred")<>"N" .OR. TNFILLRED=-1
TNFILLRED = 255
ENDIF
IF TYPE("tnfillgreen")<>"N" .OR. TNFILLGREEN=-1
TNFILLGREEN = 255
ENDIF
IF TYPE("tnfillblue")<>"N" .OR. TNFILLBLUE=-1
TNFILLBLUE = 255
ENDIF
IF EMPTY(TNPENSIZE)
TNPENSIZE = 0
ENDIF
IF EMPTY(TNPENPAT)
TNPENPAT = 0
ENDIF
IF EMPTY(TNPENRED) .OR. TNPENRED=-1
TNPENRED = 0
ENDIF
IF EMPTY(TNPENGREEN) .OR. TNPENGREEN=-1
TNPENGREEN = 0
ENDIF
IF EMPTY(TNPENBLUE) .OR. TNPENBLUE=-1
TNPENBLUE = 0
ENDIF
IF TNTYPE="L"
ENDIF
LOCAL LNSEL, LCNEAR, LRPIVOTALIAS, LCPIVOTALIAS, LLOK, LUVALUE, LCTYPE
LRPIVOTALIAS = THIS.RPIVOTSALIAS
LCPIVOTALIAS = THIS.CPIVOTSALIAS
LNSEL = SELECT(0)
IF EMPTY(TNCLASS)
TNCLASS = 0
ENDIF
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
_X____11334 = ""
ENDIF
LCNEAR = SET("Near")
SET NEAR ON
SELECT (LCPIVOTALIAS)
SET ORDER TO XX
SEEK TNX0 
LLOK = FOUND()
IF  .NOT. LLOK
IF ABS(EVALUATE(LCPIVOTALIAS+".XX")-TNX0)<THIS.NHORIZONTALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(EVALUATE(LCPIVOTALIAS+".XX")-TNX0)<THIS.NHORIZONTALADJUSTMENT
ENDIF
IF LLOK
TNX0 = EVALUATE(LCPIVOTALIAS+".XX")
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (LCPIVOTALIAS) VALUES (TNX0, 0, .T.)
ELSE
REPLACE START WITH .T. IN (LCPIVOTALIAS)
ENDIF
LLOK = SEEK(TNXX)
IF  .NOT. LLOK
IF ABS(EVALUATE(LCPIVOTALIAS+".XX")-TNXX)<THIS.NHORIZONTALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(EVALUATE(LCPIVOTALIAS+".XX")-TNXX)<THIS.NHORIZONTALADJUSTMENT
ENDIF
IF LLOK
TNXX = EVALUATE(LCPIVOTALIAS+".XX")
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (LCPIVOTALIAS) VALUES (TNXX, 0, .F.)
ENDIF
SELECT (LRPIVOTALIAS)
SET ORDER TO YY
LLOK = SEEK(TNY0)
IF  .NOT. LLOK
IF ABS(YY-TNY0)<THIS.NVERTICALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(YY-TNY0)<THIS.NVERTICALADJUSTMENT
ENDIF
IF LLOK
TNY0 = YY
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (LRPIVOTALIAS) VALUES (TNY0, 0, .T.)
ELSE
REPLACE START WITH .T. IN (LRPIVOTALIAS)
ENDIF
LLOK = SEEK(TNYY)
IF  .NOT. LLOK
IF ABS(YY-TNYY)<THIS.NVERTICALADJUSTMENT
LLOK = .T.
ELSE
SKIP -1
LLOK = ABS(YY-TNYY)<THIS.NVERTICALADJUSTMENT
ENDIF
IF LLOK
TNYY = YY
ENDIF
ENDIF
IF  .NOT. LLOK
INSERT INTO (LRPIVOTALIAS) VALUES (TNYY, 0, .F.)
ENDIF
IF TNTYPE="T" .OR. TNTYPE="L"
LUVALUE = TNNUMERICVALUE
LCTYPE = VARTYPE(LUVALUE)
DO CASE
CASE LCTYPE$"NY"
LUVALUE = IIF(ISNULL(LUVALUE), "NULL", __STR(LUVALUE, _XFWID(), _XFDEC()))
CASE LCTYPE="C"
OTHERWISE
LUVALUE = "NULL"
ENDCASE
ELSE
STORE "" TO LUVALUE, LCTYPE
ENDIF
INSERT INTO (THIS._X____11335) VALUES (TNTYPE, TNX0, TNXX, TNY0, TNYY, _X____11334, TNCLASS, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, LUVALUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET, TLABSOLUTE, TCOBJLINKNAME, TCOBJLINKHREF, TCOBJTOOLTIP, TCOBJPICTURE, LCTYPE)
SET NEAR &LCNEAR.
SELECT (LNSEL)
ENDPROC
**
PROCEDURE putLineOnMatrix
LPARAMETERS TCSTYLE, TNX, TNY, TNOBJ
LOCAL LNSEL, LNLINK
TCSTYLE = TCSTYLE+ALLTRIM(STR(TNOBJ))
LNSEL = SELECT(0)
SELECT (THIS.CMATRIXALIAS)
IF SEEK(M.TNX*1000000+M.TNY, THIS.CMATRIXALIAS, "pos")
IF  .NOT. SPANNED
REPLACE STYLE WITH ALLTRIM(STYLE)+TCSTYLE
ELSE
LNLINK = LINK
IF SEEK(LNLINK, THIS.CMATRIXALIAS, "pos")
REPLACE STYLE WITH ALLTRIM(STYLE)+TCSTYLE
ENDIF
ENDIF
ELSE
INSERT INTO (THIS.CMATRIXALIAS) VALUES (M.TNX, M.TNY, M.TNOBJ, .F., 0, 0, TCSTYLE, 0)
ENDIF
SELECT (LNSEL)
ENDPROC
**
PROCEDURE renderPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
LOCAL LCPIVOTSALIAS, LRPIVOTSALIAS, LCNUMVAL, LNI, LNMAXX, LNMAYY, FX, LNMINLEFT, LNMINTOP, LCTMPL, LNEMPTYCOLS, LCOBJECTSALIAS, LCTEXT, LCPOINT, LNBOXOBJ, LNAT, LNLINEOBJ, LCSAFETY, LOOBJ, LOCLS, LCORDER, LLBREAKBEFORE, LCRCS, LOOBJ, LOCLS, LCOBJECTSALIAS, LCCLASSESALIAS, LOOBJX, LCSTYLE, LCPSTYLE, LCTSTYLE, LCCELL, LLEXIST, LCCLASS, LCPCELL, LIROWSH, LOCOLSW, LCPOM, LCXX, LINEXTCOLSPAN, LLFIRSTNEXTCOLSPAN
LOCAL LACOLSW(1)
LCPIVOTSALIAS = THIS.CPIVOTSALIAS
LRPIVOTSALIAS = THIS.RPIVOTSALIAS
LCOBJECTSALIAS = THIS._X____11335
LCCLASSESALIAS = THIS._X____11332
LCORDER = STR(THIS.OOO.NPAGENO, 5)+" 2001"
LLBREAKBEFORE = THIS.OOO.NPAGENO>1 .AND.  .NOT. THIS.OXFRX.ODOCUMENT.LSHEETPERPAGE .AND. THIS.LFIRSTINPAGE
IF THIS.LFIRSTINPAGE
THIS.LFIRSTINPAGE = .F.
ENDIF
SELECT (LCOBJECTSALIAS)
CALCULATE MIN(X0), MIN(Y0) TO LNMINLEFT, LNMINTOP FOR TYPE="G"
IF LNMINLEFT+LNMINTOP>0
SELECT (LCPIVOTSALIAS)
SET ORDER TO XX
GOTO TOP
IF M.LNMINLEFT<XX
INSERT INTO (LCPIVOTSALIAS) VALUES (M.LNMINLEFT, 0, .T.)
ELSE
LNMINLEFT = XX
ENDIF
SELECT (LCOBJECTSALIAS)
REPLACE X0 WITH X0-LNMINLEFT, XX WITH XX-LNMINLEFT FOR TYPE="G"
SELECT (LRPIVOTSALIAS)
SET ORDER TO YY
GOTO TOP
IF M.LNMINTOP<YY
INSERT INTO (LRPIVOTSALIAS) VALUES (M.LNMINTOP, 0, .T.)
ELSE
LNMINTOP = YY
ENDIF
SELECT (LCOBJECTSALIAS)
REPLACE Y0 WITH Y0-LNMINTOP, YY WITH YY-LNMINTOP FOR TYPE="G"
ENDIF
LNI = 1
SELECT (LCPIVOTSALIAS)
SET ORDER TO XX
SCAN ALL
REPLACE ORDER WITH M.LNI IN (LCPIVOTSALIAS)
LNI = M.LNI+1
ENDSCAN
LNMAXX = LNI-1
LNI = 1
SELECT (LRPIVOTSALIAS)
SET ORDER TO YY
SCAN ALL
REPLACE ORDER WITH M.LNI IN (LRPIVOTSALIAS)
LNI = M.LNI+1
ENDSCAN
LNMAXY = LNI-1
SELECT (THIS.CMATRIXALIAS)
INDEX ON XX*1000000+YY TAG POS UNIQUE ADDITIVE
SELECT (LCOBJECTSALIAS)
SCAN ALL FOR TYPE="T" .OR. TYPE="L"
= SEEK(X0, THIS.CPIVOTSALIAS, "XX")
LNFROMX = EVALUATE(LCPIVOTSALIAS+".order")
= SEEK(XX, THIS.CPIVOTSALIAS, "XX")
LNTOX = EVALUATE(LCPIVOTSALIAS+".order")
= SEEK(Y0, LRPIVOTSALIAS, "YY")
LNFROMY = EVALUATE(LRPIVOTSALIAS+".order")
= SEEK(YY, LRPIVOTSALIAS, "YY")
LNTOY = EVALUATE(LRPIVOTSALIAS+".order")
LNOBJ = RECNO(LCOBJECTSALIAS)
LLFIRST = .T.
LLFAIL = .F.
FOR LNI = LNFROMX TO LNTOX-1
FOR LNJ = LNFROMY TO LNTOY-1
IF LLFIRST
IF SEEK(M.LNI*1000000+M.LNJ, THIS.CMATRIXALIAS, "pos")
LLFAIL = .T.
EXIT
ENDIF
INSERT INTO (THIS.CMATRIXALIAS) VALUES (M.LNI, M.LNJ, M.LNOBJ, .F., M.LNTOX-M.LNFROMX, M.LNTOY-M.LNFROMY, "", 0)
ELSE
INSERT INTO (THIS.CMATRIXALIAS) VALUES (M.LNI, M.LNJ, M.LNOBJ,  .NOT. LLFIRST, 0, 0, "", M.LNFROMX*1000000+M.LNFROMY)
ENDIF
LLFIRST = .F.
ENDFOR
IF LLFAIL
EXIT
ENDIF
ENDFOR
ENDSCAN
SELECT (LCOBJECTSALIAS)
SCAN ALL FOR TYPE="I" .OR. TYPE="R"
= SEEK(X0, THIS.CPIVOTSALIAS, "XX")
LNFROMX = EVALUATE(LCPIVOTSALIAS+".order")
= SEEK(XX, THIS.CPIVOTSALIAS, "XX")
LNTOX = EVALUATE(LCPIVOTSALIAS+".order")
= SEEK(Y0, LRPIVOTSALIAS, "YY")
LNFROMY = EVALUATE(LRPIVOTSALIAS+".order")
= SEEK(YY, LRPIVOTSALIAS, "YY")
LNTOY = EVALUATE(LRPIVOTSALIAS+".order")
IF TYPE="R"
FOR LNJ = LNFROMY TO LNTOY-1
FOR LNI = LNFROMX TO LNTOX-1
IF LNJ=LNFROMY
THIS.PUTLINEONMATRIX("T", LNI, LNJ, RECNO(LCOBJECTSALIAS))
ENDIF
IF LNJ=LNTOY-1
THIS.PUTLINEONMATRIX("B", LNI, LNJ, RECNO(LCOBJECTSALIAS))
ENDIF
IF LNI=LNFROMX
THIS.PUTLINEONMATRIX("L", LNI, LNJ, RECNO(LCOBJECTSALIAS))
ENDIF
IF LNI=LNTOX-1
THIS.PUTLINEONMATRIX("R", LNI, LNJ, RECNO(LCOBJECTSALIAS))
ENDIF
THIS.PUTLINEONMATRIX("C", LNI, LNJ, RECNO(LCOBJECTSALIAS))
ENDFOR
ENDFOR
ELSE
IF LNFROMX=LNTOX
FOR LNJ = LNFROMY TO LNTOY-1
THIS.PUTLINEONMATRIX("L", LNFROMX, LNJ, RECNO(LCOBJECTSALIAS))
ENDFOR
ELSE
FOR LNI = LNFROMX TO LNTOX-1
THIS.PUTLINEONMATRIX("T", LNI, LNFROMY, RECNO(LCOBJECTSALIAS))
ENDFOR
ENDIF
ENDIF
ENDSCAN
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", "<table:shapes>", LCORDER)
LCXX = THIS.OOO.CENTITYBODY
THIS.OOO.CENTITYBODY = "This.cXMLbuffer"
SELECT (LCOBJECTSALIAS)
SCAN FOR TYPE="G"
SCATTER MEMO NAME LOOBJ
THIS.OOO.CXMLBUFFER = ""
THIS.OOO.ADDPICTURE(LOOBJ.X0, LOOBJ.Y0, LOOBJ.XX-LOOBJ.X0, LOOBJ.YY-LOOBJ.Y0, 0, 0, -1, -1, -1, 0, -1, -1, -1, 0, LOOBJ.OBJPICTURE, "ssss", 0)
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", THIS.OOO.CXMLBUFFER, LCORDER)
ENDSCAN
THIS.OOO.CENTITYBODY = LCXX
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", "</table:shapes>", LCORDER)
SELECT (THIS.CMATRIXALIAS)
SET ORDER TO pos
GOTO TOP IN (LRPIVOTSALIAS)
GOTO TOP IN (THIS.CPIVOTSALIAS)
SELECT (THIS.CMATRIXALIAS)
DIMENSION LACOLSW(LNMAXX)
LNXX = EVALUATE(LCPIVOTSALIAS+".XX")
LCRCS = LTRIM(STR(THIS.OOO.NPAGENO, 11))+"_"+LTRIM(STR(0, 11))
LCPOM = ' <table:table-column table:style-name="col'+LCRCS+'" table:default-cell-style-name="Default" /> '
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", LCPOM, LCORDER)
LCPOM = ' <style:style style:name="col'+LCRCS+'" style:family="table-column">'+CHR(13)+CHR(10)+'  <style:table-column-properties fo:break-before="auto" style:column-width="'+TOINCH(LNXX)+'" />'+CHR(13)+CHR(10)+' </style:style>'
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001) VALUES ("CAS", LCPOM)
FOR LNI = 1 TO LNMAXX
LNXX = EVALUATE(LCPIVOTSALIAS+".XX")
SKIP IN (LCPIVOTSALIAS)
LNXX = EVALUATE(LCPIVOTSALIAS+".XX")-LNXX
LACOLSW(LNI) = LNXX
IF LNXX<0
LOOP
ENDIF
LCRCS = LTRIM(STR(THIS.OOO.NPAGENO, 11))+"_"+LTRIM(STR(LNI, 11))
LCPOM = ' <table:table-column table:style-name="col'+LCRCS+'" table:default-cell-style-name="Default" /> '
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES ("CTEXT", LCPOM, LCORDER)
LCPOM = ' <style:style style:name="col'+LCRCS+'" style:family="table-column">'+CHR(13)+CHR(10)+'  <style:table-column-properties fo:break-before="auto" style:column-width="'+TOINCH(LNXX)+'" />'+CHR(13)+CHR(10)+' </style:style>'
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001) VALUES ("CAS", LCPOM)
ENDFOR
STORE 0 TO LIROWSH, LICOLSW
LCPOINT = SET("Point")
FOR LNJ = 1 TO LNMAXY
LNYY = EVALUATE(LRPIVOTSALIAS+".yy")
SKIP IN (LRPIVOTSALIAS)
LNYY = EVALUATE(LRPIVOTSALIAS+".yy")-LNYY
IF LNYY<0
LOOP
ENDIF
THIS.OOO.NROWNO = THIS.OOO.NROWNO+1
LCRCS = LTRIM(STR(THIS.OOO.NPAGENO, 11))+"_"+LTRIM(STR(LNJ, 11))
LCSTYLE = ' <style:style style:name="row'+LCRCS+'" style:family="table-row">'+CHR(13)+CHR(10)+'  <style:table-row-properties style:row-height="'+TOINCH(LNYY)+'" fo:break-before="'+IIF(LLBREAKBEFORE .AND.  .NOT. ISNULL(LLBREAKBEFORE), "page", "auto")+'" style:use-optimal-row-height="false" '+CHR(13)+CHR(10)+'  />'+CHR(13)+CHR(10)+'</style:style>'
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001) VALUES (THIS.OOO.CENTITYSTYLE, LCSTYLE)
LLBREAKBEFORE = .F.
LCROW = '  <table:table-cell office:value-type="string" />'+CHR(13)+CHR(10)
STORE 0 TO LINEXTCOLSPAN, LNEMPTYCOLS
LLFIRSTNEXTCOLSPAN = .T.
FOR LNI = 1 TO LNMAXX
LNXX = LACOLSW(LNI)
IF LNI<LNMAXX
ENDIF
THIS.OOO.NCOLNO = LNI
IF SEEK(M.LNI*1000000+M.LNJ)
IF SPANNED
LICOLSW = LICOLSW+LNXX
LOOP
ENDIF
IF LNEMPTYCOLS>0
LCROW = LCROW+IIF(COLSPAN>1, '  <table:covered-table-cell office:value-type="string" table:number-columns-repeated="'+LTRIM(STR(COLSPAN, 11))+'" />'+CHR(13)+CHR(10), "")+'  <table:table-cell table:number-columns-repeated="'+LTRIM(STR(LNEMPTYCOLS, 11))+'" />'+CHR(13)+CHR(10)
ENDIF
LNEMPTYCOLS = 0
LNOBJ = OBJ
SELECT (LCOBJECTSALIAS)
GOTO (M.LNOBJ)
SCATTER MEMO NAME LOOBJ
IF INLIST(LOOBJ.TYPE, "X", "T", "L")
SELECT (LCCLASSESALIAS)
IF EVALUATE(LCOBJECTSALIAS+".CLASS")<=RECCOUNT()
GOTO (EVALUATE(LCOBJECTSALIAS+".CLASS"))
ELSE
GOTO TOP
SKIP -1
ENDIF
SCATTER MEMO NAME LOCLS
= SEEK(RECNO(LCOBJECTSALIAS), THIS.OOO.CAEXT)
ENDIF
SELECT (THIS.CMATRIXALIAS)
STORE "" TO LCTSTYLE, LCSTYLE, LCPSTYLE, LCCELL, LCPCELL
IF  .NOT. EMPTY(STYLE)
LNAT = RAT("C", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
SELECT (LCOBJECTSALIAS)
GOTO (M.LNLINEOBJ)
SCATTER NAME LOOBJX
SELECT (THIS.CMATRIXALIAS)
IF LOOBJX.TYPE="R" .AND.  .NOT. INLIST(LOOBJ.TYPE, "X", "T", "L")
LCSTYLE = LCSTYLE+'  fo:background-color="'+THIS.OOO.C2RGBEX(LOOBJX.FILLRED, LOOBJX.FILLGREEN, LOOBJX.FILLBLUE, 0)+'"'+CHR(13)+CHR(10)
ENDIF
LNBOXOBJ = M.LNLINEOBJ
ELSE
LNBOXOBJ = -1
ENDIF
LNAT = AT("T", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
IF LNLINEOBJ>=LNBOXOBJ
SELECT (LCOBJECTSALIAS)
GOTO (M.LNLINEOBJ)
SCATTER NAME LOOBJX
SELECT (THIS.CMATRIXALIAS)
LCSTYLE = LCSTYLE+'fo:border-top="'+__STR(IIF(LOOBJX.PENSIZE<=1, (0.0104166666666667^1), (LOOBJX.PENSIZE)/96), 11, 6)+'in solid '+THIS.OOO.C2RGBEX(LOOBJX.PENRED, LOOBJX.PENGREEN, LOOBJX.PENBLUE, 0)+'"'+CHR(13)+CHR(10)
ENDIF
ENDIF
LNAT = AT("B", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
IF LNLINEOBJ>=LNBOXOBJ
SELECT (LCOBJECTSALIAS)
GOTO (M.LNLINEOBJ)
SCATTER NAME LOOBJX
SELECT (THIS.CMATRIXALIAS)
LCSTYLE = LCSTYLE+'fo:border-bottom="'+__STR(IIF(LOOBJX.PENSIZE<=1, (0.0104166666666667^1), (LOOBJX.PENSIZE)/96), 11, 6)+'in solid '+THIS.OOO.C2RGBEX(LOOBJX.PENRED, LOOBJX.PENGREEN, LOOBJX.PENBLUE, 0)+'"'+CHR(13)+CHR(10)
ENDIF
ENDIF
LNAT = AT("L", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
IF LNLINEOBJ>=LNBOXOBJ
SELECT (LCOBJECTSALIAS)
GOTO (M.LNLINEOBJ)
SCATTER NAME LOOBJX
SELECT (THIS.CMATRIXALIAS)
LCSTYLE = LCSTYLE+'fo:border-left="'+__STR(IIF(LOOBJX.PENSIZE<=1, (0.0104166666666667^1), (LOOBJX.PENSIZE)/96), 11, 6)+'in solid '+THIS.OOO.C2RGBEX(LOOBJX.PENRED, LOOBJX.PENGREEN, LOOBJX.PENBLUE, 0)+'"'+CHR(13)+CHR(10)
ENDIF
ENDIF
LNAT = AT("R", STYLE)
IF LNAT>0
LNLINEOBJ = VAL(SUBSTR(STYLE, LNAT+1))
IF LNLINEOBJ>=LNBOXOBJ
SELECT (LCOBJECTSALIAS)
GOTO (M.LNLINEOBJ)
SCATTER NAME LOOBJX
SELECT (THIS.CMATRIXALIAS)
LCSTYLE = LCSTYLE+'fo:border-right="'+__STR(IIF(LOOBJX.PENSIZE<=1, (0.0104166666666667^1), (LOOBJX.PENSIZE)/96), 11, 6)+'in solid '+THIS.OOO.C2RGBEX(LOOBJX.PENRED, LOOBJX.PENGREEN, LOOBJX.PENBLUE, 0)+'"'+CHR(13)+CHR(10)
ENDIF
ENDIF
GOTO (M.LNOBJ) IN (LCOBJECTSALIAS)
ENDIF
IF COLSPAN>1
LCCELL = LCCELL+' table:number-columns-spanned="'+LTRIM(STR(COLSPAN))+'" '
ENDIF
IF ROWSPAN>1
LCCELL = LCCELL+' table:number-rows-spanned="'+LTRIM(STR(ROWSPAN))+'" '
ENDIF
DO CASE
CASE INLIST(LOOBJ.TYPE, "X", "T", "L")
THIS.OOO.READEXTENSION(RECNO(LCOBJECTSALIAS), THIS.OTXT)
LCPOM = THIS.OOO.ADDTEXTINCELL(LOOBJ, LOCLS, THIS.OTXT, @LCSTYLE, @LCPSTYLE, @LCTSTYLE, @LCPCELL)
LCCELL = LCCELL+LCPCELL+" ><text:p>"+LCPOM+'</text:p></table:table-cell>'+CHR(13)+CHR(10)
OTHERWISE
LCCELL = LCCELL+' />'+CHR(13)+CHR(10)
ENDCASE
LCCLASS = "cel"+LTRIM(STR(THIS.OOO.NPAGENO, 11))+"_"+LTRIM(STR(LOOBJ.CLASS, 11))
LCSTYLE = '<style:style style:name="%Class%" style:family="table-cell" style:parent-style-name="Default">'+CHR(13)+CHR(10)+' <style:table-cell-properties '+LCSTYLE+' />'+CHR(13)+CHR(10)+' <style:text-properties'+LCTSTYLE+' />'+CHR(13)+CHR(10)+' <style:paragraph-properties'+LCPSTYLE+' />'+CHR(13)+CHR(10)+'</style:style>'
LLEXIST = THIS.OOO.ISEXIST(THIS.OOO.CENTITYSTYLE, LCCLASS)
IF LLEXIST .AND.  .NOT. STRTRAN(LCSTYLE, "%Class%", LCCLASS)==THIS.OOO.GETDATA(THIS.OOO.CENTITYSTYLE, LCCLASS)
LCCLASS = LCCLASS+"_"+SYS(2015)
LLEXIST = .F.
ENDIF
IF  .NOT. LLEXIST
LCSTYLE = STRTRAN(LCSTYLE, "%Class%", LCCLASS)
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX002) VALUES (THIS.OOO.CENTITYSTYLE, LCSTYLE, LCCLASS)
ENDIF
LCROW = LCROW+'  <table:table-cell table:style-name="'+LCCLASS+'" office:value-type="'+IIF(LOOBJ.XTYPE="C", "string", IIF(ATC(LOOBJ.XTYPE, "BDNYI")>0, "float", IIF(LOOBJ.XTYPE="L", "boolean", IIF(ATC(LOOBJ.XTYPE, "DT")>0, "date", "string"))))+'" '+CHR(13)+CHR(10)+LCCELL
ELSE
IF LNEMPTYCOLS>=0
LNEMPTYCOLS = LNEMPTYCOLS+1
ELSE
LCROW = LCROW+'  <table:table-cell office:value-type="string" />'+CHR(13)+CHR(10)
ENDIF
ENDIF
LICOLSW = LICOLSW+LNXX
SELECT (THIS.CMATRIXALIAS)
ENDFOR
LCROW = ' <table:table-row table:style-name="row'+LCRCS+'"'+IIF(LEN(LCROW)=0, " />", ">"+CHR(13)+CHR(10)+LCROW+' </table:table-row>')
LIROWSH = LIROWSH+LNYY
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES (THIS.OOO.CENTITYBODY, LCROW, LCORDER)
ENDFOR
*LCROW = '  <table:table-row table:style-name=""><table:table-cell office:value-type="string" >Created with XFRX, www.eqeus.com, commercial use prohibited.</table:table-cell>'
INSERT INTO (THIS.OOO.ALIAS) (XX000, XX001, XX003) VALUES (THIS.OOO.CENTITYBODY, LCROW, LCORDER)
LCSAFETY = SET("safety")
SET SAFETY OFF
THIS.OOO.CLEAREXTENSION()
ZAP IN (LCCLASSESALIAS)
ZAP IN (LCPIVOTSALIAS)
ZAP IN (LRPIVOTSALIAS)
ZAP IN (THIS.CMATRIXALIAS)
ZAP IN (LCOBJECTSALIAS)
SET SAFETY &LCSAFETY
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS ODT AS Custom
CTITLE = ""
CSUBJECT = ""
CKEYWORDS = ""
CCOMMENTS = ""
CPASSWORD = ""
CINFO1 = ""
CINFO2 = ""
CINFO3 = ""
CINFO4 = ""
CINFO1_NAME = "Info1"
CINFO2_NAME = "Info2"
CINFO3_NAME = "Info3"
CINFO4_NAME = "Info4"
LDEVELOP = .F.
CDEVELOPFOLDER = ""
CTHUMBNAIL = ""
NTHUMBNAILPAGE = 1
LDISPLAYGRIDLINES = .F.
LSHEETPERPAGE = .T.
CNEXTSHEETNAME = ""
CNEXTSHEETNAMEEXPR = ""
CNEXTPAGENAME = ""
CNEXTPAGENAMEEXPR = ""
LLEAVEFULLFIELDCONTENT = .F.
LSHEETPERNPGROUP = .T.
**
PROCEDURE Init
LPARAMETERS LCPATH
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
FUNCTION setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
IF EMPTY(TUPAR1) .AND. TYPE("tuPar1")<>"C"
RETURN .F.
ENDIF
DO CASE
CASE UPPER(ALLTRIM(TUPAR1))=="INFO1" .AND. TYPE("tuPar2")="C"
THIS.SETINFO1(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="INFO1_NAME" .AND. TYPE("tuPar2")="C" .AND.  .NOT. EMPTY(TUPAR2)
THIS.SETINFO1_NAME(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="INFO2" .AND. TYPE("tuPar2")="C"
THIS.SETINFO2(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="INFO2_NAME" .AND. TYPE("tuPar2")="C" .AND.  .NOT. EMPTY(TUPAR2)
THIS.SETINFO2_NAME(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="INFO3" .AND. TYPE("tuPar2")="C"
THIS.SETINFO3(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="INFO3_NAME" .AND. TYPE("tuPar2")="C" .AND.  .NOT. EMPTY(TUPAR2)
THIS.SETINFO3_NAME(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="INFO4" .AND. TYPE("tuPar2")="C"
THIS.SETINFO4(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="INFO4_NAME" .AND. TYPE("tuPar2")="C" .AND.  .NOT. EMPTY(TUPAR2)
THIS.SETINFO4_NAME(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="DEVELOP" .AND. TYPE("tuPar2")="L"
THIS.LDEVELOP = TUPAR2
CASE UPPER(ALLTRIM(TUPAR1))=="DEVELOPFOLDER" .AND. TYPE("tuPar2")="C"
THIS.CDEVELOPFOLDER = TUPAR2
CASE UPPER(ALLTRIM(TUPAR1))=="THUMBNAIL" .AND. TYPE("tuPar2")="C"
THIS.CTHUMBNAIL = TUPAR2
CASE UPPER(ALLTRIM(TUPAR1))=="THUMBNAILPAGE" .AND. TYPE("tuPar2")="N"
THIS.NTHUMBNAILPAGE = TUPAR2
CASE UPPER(ALLTRIM(TUPAR1))="DISPLAY_GRID_LINES"
THIS.LDISPLAYGRIDLINES =  .NOT. EMPTY(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))="SHEET_PER_PAGE"
THIS.LSHEETPERPAGE =  .NOT. EMPTY(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))=="NEXT_SHEET_NAME"
THIS.CNEXTSHEETNAME = TRANSFORM(TUPAR2, "")
CASE UPPER(ALLTRIM(TUPAR1))="NEXT_SHEET_NAME_EXPR"
THIS.CNEXTSHEETNAMEEXPR = TRANSFORM(TUPAR2, "")
CASE UPPER(ALLTRIM(TUPAR1))=="NEXT_PAGE_NAME"
THIS.CNEXTPAGENAME = TRANSFORM(TUPAR2, "")
CASE UPPER(ALLTRIM(TUPAR1))="NEXT_PAGE_NAME_EXPR"
THIS.CNEXTPAGENAMEEXPR = TRANSFORM(TUPAR2, "")
CASE UPPER(ALLTRIM(TUPAR1))="LEAVE_FULL_FIELD_CONTENT"
THIS.LLEAVEFULLFIELDCONTENT =  .NOT. EMPTY(TUPAR2)
CASE UPPER(ALLTRIM(TUPAR1))="SHEET_PER_NP_GROUP"
THIS.LSHEETPERNPGROUP =  .NOT. EMPTY(TUPAR2)
ENDCASE
ENDFUNC
**
PROCEDURE setSubject
LPARAMETERS TCSUBJECT
THIS.CSUBJECT = TCSUBJECT
ENDPROC
**
PROCEDURE setKeywords
LPARAMETERS TCKEYWORDS
THIS.CKEYWORDS = TCKEYWORDS
ENDPROC
**
PROCEDURE setComments
LPARAMETERS TCCOMMENTS
THIS.CCOMMENTS = TCCOMMENTS
ENDPROC
**
PROCEDURE setTitle
LPARAMETERS TCTITLE
THIS.CTITLE = TCTITLE
ENDPROC
**
PROCEDURE setPasswords
LPARAMETERS TCPASSWORD
THIS.CPASSWORD = TCPASSWORD
ENDPROC
**
PROTECTED PROCEDURE setInfo1
LPARAMETERS LCINFO
THIS.CINFO1 = LCINFO
ENDPROC
**
PROTECTED FUNCTION setInfo1_Name
LPARAMETERS LCINFO_NAME
IF EMPTY(LCINFO_NAME)
RETURN .F.
ENDIF
THIS.CINFO1_NAME = LCINFO_NAME
ENDFUNC
**
PROTECTED PROCEDURE setInfo2
LPARAMETERS LCINFO
THIS.CINFO2 = LCINFO
ENDPROC
**
PROTECTED FUNCTION setInfo2_Name
LPARAMETERS LCINFO_NAME
IF EMPTY(LCINFO_NAME)
RETURN .F.
ENDIF
THIS.CINFO2_NAME = LCINFO_NAME
ENDFUNC
**
PROTECTED PROCEDURE setInfo3
LPARAMETERS LCINFO
THIS.CINFO3 = LCINFO
ENDPROC
**
PROTECTED FUNCTION setInfo3_Name
LPARAMETERS LCINFO_NAME
IF EMPTY(LCINFO_NAME)
RETURN .F.
ENDIF
THIS.CINFO3_NAME = LCINFO_NAME
ENDFUNC
**
PROTECTED PROCEDURE setInfo4
LPARAMETERS LCINFO
THIS.CINFO4 = LCINFO
ENDPROC
**
PROTECTED FUNCTION setInfo4_Name
LPARAMETERS LCINFO_NAME
IF EMPTY(LCINFO_NAME)
RETURN .F.
ENDIF
THIS.CINFO4_NAME = LCINFO_NAME
ENDFUNC
**
ENDDEFINE
**
FUNCTION VFP_STRCONV
LPARAMETERS LCTEXT, LICP, LILOCALID
IF EMPTY(LCTEXT)
RETURN ""
ENDIF
LOCAL LIIN, LCOUT, LIOUT, LII, LICP
LICP = IIF(PCOUNT()<=3, LILOCALID, 0)
LIIN = LEN(LCTEXT)
LCOUT = SPACE(LIIN*4)
LIOUT = LEN(LCOUT)
LII = MULTIBYTETOWIDECHAR(LICP, 0, @LCTEXT, LIIN, @LCOUT, LIOUT)
LIOUT = LII
LCTEXT = SPACE(LII*3+1)
LIIN = LEN(LCTEXT)
LCDEF = .NULL.
LIDEF = .NULL.
LII = WIDECHARTOMULTIBYTE(65001, 0, @LCOUT, LIOUT, @LCTEXT, LIIN, @LCDEF, @LIDEF)
RETURN LEFT(LCTEXT, LII)
ENDFUNC
**
PROCEDURE StrTranHTMLString
LPARAMETERS LCSTRING
RETURN STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(LCSTRING,"&","&amp;"),">","&gt;"),"<","&lt;"),'"',"&quot;"),'/',"&#47;"),CHR(13),"{XFRX#13}"),CHR(10),"&#10;"),CHR(9),"&#9;")
ENDPROC
**
PROCEDURE HTMLStringTranStr
LPARAMETERS LCSTRING
RETURN STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(STRTRAN(LCSTRING,"&amp;","&"),"&gt;",">"),"&lt;","<"),"&quot;",'"'),"&#47;",'/'),"{XFRX#13}",CHR(13)),"&#10;",CHR(10)),"&#9;",CHR(9))
ENDPROC
**
FUNCTION _pagenocheck
LPARAMETERS TNPAGENO, TCSTRING
IF EMPTY(TCSTRING)
RETURN .T.
ENDIF
LOCAL LNPOS, LCSTR, LLFOUND
DO WHILE  .NOT. LLFOUND .AND. LEN(TCSTRING)>0
LNPOS = AT(",", TCSTRING)
IF LNPOS=0
LCSTR = TCSTRING
TCSTRING = ""
ELSE
LCSTR = LEFT(TCSTRING, LNPOS-1)
IF LEN(TCSTRING)>LNPOS
TCSTRING = SUBSTR(TCSTRING, LNPOS+1)
ELSE
TCSTRING = ""
ENDIF
ENDIF
LNPOS = AT("-", LCSTR)
IF LNPOS=0 .OR. LNPOS=LEN(LCSTR) .OR. LNPOS=1
IF LNPOS=1
IF LEN(LCSTR)>1
LCSTR = SUBSTR(LCSTR, 2)
ENDIF
ENDIF
LLFOUND = (VAL(LCSTR)=TNPAGENO)
ELSE
LLFOUND = BETWEEN(TNPAGENO, VAL(LEFT(LCSTR, LNPOS-1)), VAL(SUBSTR(LCSTR, LNPOS+1)))
ENDIF
ENDDO
RETURN LLFOUND
ENDFUNC
**
FUNCTION _getLastPage
LPARAMETERS TCSTRING, TLFIRST
IF EMPTY(TCSTRING)
RETURN 100000
ENDIF
LOCAL LNPOS, LCSTR, LNMAX
LNMAX = 0
DO WHILE LEN(TCSTRING)>0
LNPOS = AT(",", TCSTRING)
IF LNPOS=0
LCSTR = TCSTRING
TCSTRING = ""
ELSE
LCSTR = LEFT(TCSTRING, LNPOS-1)
IF LEN(TCSTRING)>LNPOS
TCSTRING = SUBSTR(TCSTRING, LNPOS+1)
ELSE
TCSTRING = ""
ENDIF
ENDIF
LNPOS = AT("-", LCSTR)
IF LNPOS=0 .OR. LNPOS=LEN(LCSTR) .OR. LNPOS=1
IF LNPOS=1
IF LEN(LCSTR)>1
LCSTR = SUBSTR(LCSTR, 2)
ENDIF
ENDIF
LNMAX = _GETMAX(LNMAX, VAL(LCSTR), TLFIRST)
ELSE
LNMAX = _GETMAX(LNMAX, VAL(SUBSTR(LCSTR, LNPOS+1)), TLFIRST)
ENDIF
ENDDO
RETURN LNMAX
ENDFUNC
**
FUNCTION _getMax
LPARAMETERS TNMAX, TNVALUE, TLFIRST
IF TNMAX=0
RETURN TNVALUE
ELSE
IF TLFIRST
RETURN MIN(TNMAX, TNVALUE)
ELSE
RETURN MAX(TNMAX, TNVALUE)
ENDIF
ENDIF
ENDFUNC
**
FUNCTION __xf_dft
LPARAMETERS LCTYPE1, LCTYPE2
DO CASE
CASE LCTYPE1="N" .AND. LCTYPE2="Y"
RETURN .F.
CASE LCTYPE1="Y" .AND. LCTYPE2="N"
RETURN .F.
OTHERWISE
RETURN LCTYPE1<>LCTYPE2
ENDCASE
ENDFUNC
**
FUNCTION PDFRotationMatrix
LPARAMETERS TNFI
LOCAL LNSIN, LNCOS
TNFI = PI()*TNFI/180
LNCOS = COS(TNFI)
LNSIN = SIN(TNFI)
RETURN ALLTRIM(__STR(LNCOS, 6, 3))+" "+ALLTRIM(__STR(LNSIN, 6, 3))+" "+ALLTRIM(__STR(-LNSIN, 6, 3))+" "+ALLTRIM(__STR(LNCOS, 6, 3))+" 0 0 cm "
ENDFUNC
**
DEFINE CLASS XFRXState AS custom
CSCOPE = ""
NPREVIOUSRECORD = 0
NCURRENTRECORD = 0
LNNEXTRECORD = 0
NRECNO = 0
ENDDEFINE
**
DEFINE CLASS cusSelect AS Custom
LNSELECT = 0
**
PROCEDURE init
IF USED()
THIS.LNSELECT = SELECT(0)
ELSE
THIS.LNSELECT = 0
ENDIF
ENDPROC
**
PROCEDURE destroy
SELECT (THIS.LNSELECT)
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS eqZip AS CUSTOM
NZIPHANDLE = 0
**
PROCEDURE INIT
DECLARE INTEGER zipOpen IN zlib.dll AS _eqz_zipOpen STRING @, INTEGER
DECLARE INTEGER zipClose IN zlib.dll AS _eqz_zipClose INTEGER, STRING
DECLARE INTEGER zipOpenNewFileInZip IN zlib.dll AS _eqz_zipOpenNewFileInZip INTEGER, STRING, STRING, STRING, INTEGER, STRING, INTEGER, STRING, INTEGER, INTEGER
DECLARE INTEGER zipWriteInFileInZip IN zlib.dll AS _eqz_zipWriteInFileInZip INTEGER, STRING, INTEGER
DECLARE INTEGER zipCloseFileInZip IN zlib.dll AS _eqz_zipCloseFileInZip INTEGER
ENDPROC
**
FUNCTION OpenArchive
LPARAMETERS TCZIPNAME, TNAPPEND
IF EMPTY(TNAPPEND)
TNAPPEND = 0
ENDIF
THIS.NZIPHANDLE = _EQZ_ZIPOPEN(TCZIPNAME, TNAPPEND)
IF THIS.NZIPHANDLE=0
RETURN .F.
ELSE
RETURN .T.
ENDIF
ENDFUNC
**
PROCEDURE CloseArchive
LPARAMETERS TCCOMMENT
IF EMPTY(TCCOMMENT)
TCCOMMENT = ""
ENDIF
_EQZ_ZIPCLOSE(THIS.NZIPHANDLE, TCCOMMENT)
ENDPROC
**
FUNCTION OpenNewFile
LPARAMETERS TCFILENAME, TTCREATED
LOCAL LNERROR
IF EMPTY(TTCREATED)
TTCREATED = DATETIME()
ENDIF
LCFILEINFO = REPLICATE(CHR(1)+CHR(0)+CHR(0)+CHR(0), 5)
LCFILEINFO = THIS.INT2BIN(SEC(TTCREATED))
LCFILEINFO = LCFILEINFO+THIS.INT2BIN(MINUTE(TTCREATED))
LCFILEINFO = LCFILEINFO+THIS.INT2BIN(HOUR(TTCREATED))
LCFILEINFO = LCFILEINFO+THIS.INT2BIN(DAY(TTCREATED))
LCFILEINFO = LCFILEINFO+THIS.INT2BIN(MONTH(TTCREATED)-1)
LCFILEINFO = LCFILEINFO+THIS.INT2BIN(YEAR(TTCREATED))
LCFILEINFO = LCFILEINFO+REPLICATE(CHR(0), 012)
LCNULL = CHR(0)
RETURN _EQZ_ZIPOPENNEWFILEINZIP(THIS.NZIPHANDLE, TCFILENAME, @LCFILEINFO, "", 0, "", 0, "", 8, -1)
ENDFUNC
**
FUNCTION appendFile
LPARAMETERS TCFILENAME, TCNAMEINARCHIVE
IF EMPTY(TCNAMEINARCHIVE)
TCNAMEINARCHIVE = TCFILENAME
ENDIF
LOCAL LNERROR, LNHANDLE, LCBUFFER
IF  .NOT. FILE(TCFILENAME)
RETURN -1
ENDIF
LNHANDLE = FOPEN(TCFILENAME)
IF LNHANDLE<1
RETURN -2
ENDIF
LNERROR = THIS.OPENNEWFILE(TCNAMEINARCHIVE)
IF LNERROR<>0
RETURN LNERROR
ENDIF
DO WHILE  .NOT. FEOF(LNHANDLE)
LCBUFFER = FREAD(LNHANDLE, 10000)
THIS.WRITEDATA(LCBUFFER)
ENDDO
FCLOSE(LNHANDLE)
THIS.CLOSEFILE()
ENDFUNC
**
FUNCTION WriteData
LPARAMETERS TCDATA
RETURN _EQZ_ZIPWRITEINFILEINZIP(THIS.NZIPHANDLE, TCDATA, LEN(TCDATA))
ENDFUNC
**
FUNCTION CloseFile
RETURN _EQZ_ZIPCLOSEFILEINZIP(THIS.NZIPHANDLE)
ENDFUNC
**
FUNCTION int2Bin
LPARAMETERS TNINT
RETURN CHR(MOD(TNINT, 256))+CHR(INT(TNINT/256))+CHR(INT(TNINT/65536))+CHR(INT(TNINT/16777216))
ENDFUNC
**
ENDDEFINE
**
DEFINE CLASS distinctIntervals AS Custom
**
PROCEDURE init
LOCAL LOSELECT
LOSELECT = CREATEOBJECT("cusSelect")
SELECT 0
CREATE CURSOR areas (FROM I, TO I)
ENDPROC
**
FUNCTION add
LPARAMETERS TNFROM, TNTO
LOCAL LOSELECT
LOSELECT = CREATEOBJECT("cusSelect")
SELECT AREAS
IF RECCOUNT("areas")<>0
LOCATE ALL FOR FROM<TNFROM .AND. TO>TNFROM
IF FOUND()
RETURN .F.
ENDIF
LOCATE ALL FOR FROM<TNTO .AND. TO>TNTO
IF FOUND()
RETURN .F.
ENDIF
LOCATE ALL FOR FROM>=TNFROM .AND. TO<=TNTO
IF FOUND()
RETURN .F.
ENDIF
ENDIF
INSERT INTO areas VALUES (TNFROM, TNTO)
RETURN .T.
ENDFUNC
**
PROCEDURE destroy
USE IN SELECT("areas")
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS DOCWriter AS xfrxDocument
NFILEHANDLE0 = 0
CFILENAME0 = ""
NFILEHEADERHANDLE = 0
CFILEHEADERNAME = ""
NSECTIONNUMBER = 0
OFILES = .NULL.
CPAGEHEADER = ""
CPAGEFOOTER = ""
NHEADERHTMLHANDLE = 0
CMODE = "main"
LFLUSHED = .F.
CWORDREADPASSWORD = ""
CWORDWRITEPASSWORD = ""
LWORDREQUIREPASSWORD = .F.
LNOTOPENWORD = .F.
**
PROCEDURE writeln
LPARAMETERS _X____11334
THIS.WRITE(_X____11334+CHR(13)+CHR(10))
ENDPROC
**
PROCEDURE write
LPARAMETERS _X____11334
DO CASE
CASE THIS.CMODE="header"
THIS.WRITEPAGEHEADER(_X____11334)
CASE THIS.CMODE="footer"
THIS.WRITEPAGEFOOTER(_X____11334)
OTHERWISE
THIS.WRITEMAIN(_X____11334)
ENDCASE
ENDPROC
**
FUNCTION InitDocument
WITH THIS
.CFILENAME0 = ADDBS(SYS(2023))+SYS(3)+".tmp"
.NFILEHANDLE0 = FCREATE(.CFILENAME0)
.CFILEHEADERNAME = ADDBS(SYS(2023))+SYS(3)+".doc"
.NFILEHEADERHANDLE = FCREATE(.CFILEHEADERNAME)
IF  .NOT. (.NFILEHANDLE0>0 .AND. .NFILEHEADERHANDLE>0)
RETURN .F.
ENDIF
.OFILES = CREATEOBJECT("docfiles", .CFILEHEADERNAME)
.OFILES.ADDFILE("header.htm")
.NHEADERHTMLHANDLE = FCREATE(ADDBS(.OFILES.CDIRECTORY)+"header.htm")
IF  .NOT. (.NHEADERHTMLHANDLE>0)
RETURN .F.
ENDIF
IF EMPTY(THIS.CCODEPAGE)
LCCODEPAGE = "windows-"+ALLTRIM(STR(CPCURRENT()))
ENDIF
IF TYPE("this.cCodePage")="N"
LCCODEPAGE = "windows-"+ALLTRIM(STR(THIS.CCODEPAGE))
ENDIF
= FPUTS(.NHEADERHTMLHANDLE, '<html xmlns:v="urn:schemas-microsoft-com:vml"')
= FPUTS(.NHEADERHTMLHANDLE, 'xmlns:o="urn:schemas-microsoft-com:office:office"')
= FPUTS(.NHEADERHTMLHANDLE, 'xmlns:w="urn:schemas-microsoft-com:office:word"')
= FPUTS(.NHEADERHTMLHANDLE, 'xmlns="http://www.w3.org/TR/REC-html40">')
= FPUTS(.NHEADERHTMLHANDLE, '<head>')
= FPUTS(.NHEADERHTMLHANDLE, '<meta http-equiv=Content-Type content="text/html; charset='+LCCODEPAGE+'">')
= FPUTS(.NHEADERHTMLHANDLE, '<meta name=ProgId content=Word.Document>')
= FPUTS(.NHEADERHTMLHANDLE, '<meta name=Generator content="Microsoft Word 11">')
= FPUTS(.NHEADERHTMLHANDLE, '<meta name=Originator content="Microsoft Word 11">')
= FPUTS(.NHEADERHTMLHANDLE, '<link id=Main-File rel=Main-File href="../'+JUSTFNAME(.CFILEHEADERNAME)+'">')
= FPUTS(.NHEADERHTMLHANDLE, '</head>')
= FPUTS(.NHEADERHTMLHANDLE, '<body>')
ENDWITH
ENDFUNC
**
PROCEDURE flushHeaderFooter
LPARAMETERS TNSECTIONNUMBER
LOCAL LCTEMPL, LCPAGEHEADERURL, LCPAGEFOOTERURL
WITH THIS
THIS.LFLUSHED = .T.
LCPAGEHEADERURL = ""
LCPAGEFOOTERURL = ""
LCTEMPL = STRTRAN(GETTEMPLATE(-3), "UR_TOP_MARGIN", ALLTRIM(STR(THIS.NTOPMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_HEADER_MARGIN", ALLTRIM(STR(THIS.NHEADERMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_FOOTER_MARGIN", ALLTRIM(STR(THIS.NFOOTERMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_BOTTOM_MARGIN", ALLTRIM(STR(THIS.NBOTTOMMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_LEFT_MARGIN", ALLTRIM(STR(THIS.NLEFTMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_RIGHT_MARGIN", ALLTRIM(STR(THIS.NRIGHTMARGIN*72/10000)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_WIDTH", ALLTRIM(__STR(THIS.NPAPERWIDTH*72/10000, 9, 2)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_HEIGHT", ALLTRIM(__STR(THIS.NPAPERHEIGHT*72/10000, 9, 2)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_SECNUM", ALLTRIM(STR(M.TNSECTIONNUMBER)))
LCTEMPL = STRTRAN(LCTEMPL, "UR_ORIENTATION", IIF(THIS.NORIENTATION=0, "", "mso-page-orientation:landscape;"))
IF  .NOT. EMPTY(.CPAGEHEADER)
LCPAGEHEADERURL = 'mso-header:url("'+JUSTFNAME(.OFILES.CDIRECTORY)+'/header.htm") h'+ALLTRIM(STR(M.TNSECTIONNUMBER))+';'
= FPUTS(.NHEADERHTMLHANDLE, [<div style='mso-element:header' id=h]+ALLTRIM(STR(M.TNSECTIONNUMBER))+'>')
= FWRITE(.NHEADERHTMLHANDLE, .CPAGEHEADER)
= FPUTS(.NHEADERHTMLHANDLE, '</div>')
ENDIF
IF  .NOT. EMPTY(.CPAGEFOOTER)
LCPAGEFOOTERURL = 'mso-footer:url("'+JUSTFNAME(.OFILES.CDIRECTORY)+'/header.htm") f'+ALLTRIM(STR(M.TNSECTIONNUMBER))+';'
= FPUTS(.NHEADERHTMLHANDLE, [<div style='mso-element:footer' id=f]+ALLTRIM(STR(M.TNSECTIONNUMBER))+'>')
= FWRITE(.NHEADERHTMLHANDLE, .CPAGEFOOTER)
= FPUTS(.NHEADERHTMLHANDLE, '</div>')
ENDIF
LCTEMPL = STRTRAN(LCTEMPL, "UR_PAGE_HEADER", LCPAGEHEADERURL)
LCTEMPL = STRTRAN(LCTEMPL, "UR_PAGE_FOOTER", LCPAGEFOOTERURL)
THIS.WRITEHEADER(LCTEMPL)
ENDWITH
ENDPROC
**
PROCEDURE addSection
IF THIS.NSECTIONNUMBER>1
THIS.WRITEMAIN("</div>")
THIS.WRITEMAIN("<br clear=all style='page-break-before:always; mso-break-type:section-break'>")
ENDIF
THIS.WRITEMAIN("<div class=Section"+ALLTRIM(STR(THIS.NSECTIONNUMBER))+">")
ENDPROC
**
PROCEDURE InitFileHeader
WITH THIS
LOCAL LCCODEPAGE, LCTEMPL
LCTEMPL = STRTRAN(GETTEMPLATE(5), "UR_AUTHOR", THIS.CAUTHOR)
LCTEMPL = STRTRAN(LCTEMPL, "UR_TITLE", THIS.CTITLE)
LCTEMPL = STRTRAN(LCTEMPL, "UR_SUBJECT", THIS.CSUBJECT)
LCTEMPL = STRTRAN(LCTEMPL, "UR_KEYWORDS", THIS.CKEYWORDS)
LCTEMPL = STRTRAN(LCTEMPL, "UR_COMMENTS", THIS.CCOMMENTS)
LCTEMPL = STRTRAN(LCTEMPL, "UR_CATEGORY", THIS.CCATEGORY)
LCTEMPL = STRTRAN(LCTEMPL, "UR_MANAGER", THIS.CMANAGER)
LCTEMPL = STRTRAN(LCTEMPL, "UR_COMPANY", THIS.CCOMPANY)
LCTEMPL = STRTRAN(LCTEMPL, "UR_FDIR", JUSTFNAME(THIS.OFILES.CDIRECTORY))
IF EMPTY(THIS.CCODEPAGE)
LCCODEPAGE = "windows-"+ALLTRIM(STR(CPCURRENT()))
ENDIF
IF TYPE("this.cCodePage")="N"
LCCODEPAGE = "windows-"+ALLTRIM(STR(THIS.CCODEPAGE))
ENDIF
LCTEMPL = STRTRAN(LCTEMPL, "UR_CHARSET", ALLTRIM(LCCODEPAGE))
THIS.WRITEHEADER(LCTEMPL)
ENDWITH
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNWIDTH, TNHEIGHT
WITH THIS
IF .NSECTIONNUMBER>0 .AND.  .NOT. .LFLUSHED
.FLUSHHEADERFOOTER(.NSECTIONNUMBER)
ENDIF
IF  .NOT. EMPTY(M.TNWIDTH)
.NPAPERWIDTH = M.TNWIDTH
.NPAPERHEIGHT = M.TNHEIGHT
ENDIF
.NSECTIONNUMBER = .NSECTIONNUMBER+1
.CPAGEHEADER = ""
.CPAGEFOOTER = ""
.ADDSECTION()
.LFLUSHED = .F.
ENDWITH
ENDPROC
**
PROCEDURE WritePageHeader
LPARAMETERS _X____11334
THIS.CPAGEHEADER = THIS.CPAGEHEADER+_X____11334
ENDPROC
**
PROCEDURE WritePageFooter
LPARAMETERS _X____11334
THIS.CPAGEFOOTER = THIS.CPAGEFOOTER+_X____11334
ENDPROC
**
PROCEDURE WriteMain
LPARAMETERS _X____11334
WITH THIS
= FWRITE(.NFILEHANDLE0, _X____11334)
ENDWITH
ENDPROC
**
PROCEDURE WriteHeader
LPARAMETERS _X____11334
WITH THIS
= FWRITE(.NFILEHEADERHANDLE, _X____11334)
ENDWITH
ENDPROC
**
PROCEDURE Finalize
LPARAMETERS TCFILENAME, TOWORDAPPLICATION
WITH THIS
.FLUSHHEADERFOOTER(.NSECTIONNUMBER)
.WRITEHEADER(GETTEMPLATE(4))
.WRITEMAIN("</div>")
.WRITEMAIN(GETTEMPLATE(2))
FPUTS(.NHEADERHTMLHANDLE, '</body></html>')
= FCLOSE(.NHEADERHTMLHANDLE)
= FCLOSE(.NFILEHANDLE0)
LOCAL TEMPHANDLE, LCSTR
TEMPHANDLE = FOPEN(.CFILENAME0)
DO WHILE  .NOT. FEOF(M.TEMPHANDLE)
LCSTR = FREAD(M.TEMPHANDLE, 2000)
= FWRITE(.NFILEHEADERHANDLE, LCSTR)
ENDDO
= FCLOSE(M.TEMPHANDLE)
= FCLOSE(.NFILEHEADERHANDLE)
ERASE (.CFILENAME0)
IF FILE(TCFILENAME)
ERASE (TCFILENAME)
ENDIF
.OFILES.CREATEFILELIST(.CFILEHEADERNAME)
TOWORDAPPLICATION.OPTIONS.CONFIRMCONVERSIONS = .F.
TOWORDAPPLICATION.DOCUMENTS.OPEN(FULLPATH(.CFILEHEADERNAME))
TOWORDAPPLICATION.ACTIVEWINDOW.VIEW.TYPE = 3
IF  .NOT. EMPTY(.CWORDREADPASSWORD)
TOWORDAPPLICATION.ACTIVEDOCUMENT.PASSWORD = .CWORDREADPASSWORD
ENDIF
IF  .NOT. EMPTY(.CWORDWRITEPASSWORD)
TOWORDAPPLICATION.ACTIVEDOCUMENT.WRITEPASSWORD = .CWORDWRITEPASSWORD
ENDIF
LOCAL LLSAF, LCOUTPUT
LLSAF = SET("safety")
SET SAFETY OFF
TCFILENAME = ADDBS(JUSTPATH(FULLPATH(TCFILENAME)))+JUSTFNAME(TCFILENAME)
IF FILE(TCFILENAME)
ERASE (TCFILENAME)
ENDIF
TOWORDAPPLICATION.ACTIVEDOCUMENT.SAVEAS(TCFILENAME, 0)
IF  .NOT. EMPTY(.CFILEHEADERNAME)
ERASE FULLPATH(.CFILEHEADERNAME)
ENDIF
IF  .NOT. EMPTY(.OFILES.CDIRECTORY)
ERASE FULLPATH(.OFILES.CDIRECTORY)+"\*.*"
ENDIF
IF DIRECTORY(.OFILES.CDIRECTORY)
RD FULLPATH(.OFILES.CDIRECTORY)
ENDIF
SET SAFETY &LLSAF
IF THIS.LNOTOPENWORD
TOWORDAPPLICATION.QUIT(0)
ELSE
LOCAL __TMP_WND
TOWORDAPPLICATION.ACTIVEWINDOW.VIEW.TYPE = 3
IF ( .NOT. EMPTY(THIS.CWORDREADPASSWORD) .OR.  .NOT. EMPTY(THIS.CWORDWRITEPASSWORD)) .AND. THIS.LWORDREQUIREPASSWORD
TOWORDAPPLICATION.ACTIVEDOCUMENT.CLOSE()
TOWORDAPPLICATION.DOCUMENTS.OPEN(FULLPATH(TCFILENAME))
ENDIF
TOWORDAPPLICATION.VISIBLE = .T.
__TMP_WND = TOWORDAPPLICATION.WINDOWSTATE
IF __TMP_WND=0
TOWORDAPPLICATION.WINDOWSTATE = 1
ENDIF
TOWORDAPPLICATION.APPLICATION.ACTIVATE()
ENDIF
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS docfiles AS Custom
CDIRECTORY = ""
DIMENSION AFILES(1)
NFILES = 0
**
PROCEDURE init
LPARAMETERS TCMAINFILENAME
THIS.CDIRECTORY = ADDBS(JUSTPATH(FULLPATH(M.TCMAINFILENAME)))+JUSTSTEM(TCMAINFILENAME)+"_files"
IF  .NOT. DIRECTORY(THIS.CDIRECTORY)
MD (THIS.CDIRECTORY)
ENDIF
ENDPROC
**
FUNCTION addFileAsString
LPARAMETERS TCFILEDATA, TCMODE
LOCAL LCFILENAME
LCFILENAME = "pic"+ALLTRIM(STR(THIS.NFILES+1))
_STRTOFILE(TCFILEDATA, THIS.CDIRECTORY+"\"+M.LCFILENAME)
THIS.ADDFILE(M.LCFILENAME)
IF M.TCMODE="main"
RETURN JUSTFNAME(THIS.CDIRECTORY)+"\"+M.LCFILENAME
ELSE
RETURN M.LCFILENAME
ENDIF
ENDFUNC
**
PROCEDURE addFile
LPARAMETERS TCFILENAME
WITH THIS
.NFILES = .NFILES+1
DIMENSION .AFILES[.NFILES]
.AFILES[.NFILES] = M.TCFILENAME
ENDWITH
ENDPROC
**
PROCEDURE createFileList
LPARAMETERS TCMAINFILENAME
LOCAL LCSTR, LNI
WITH THIS
LCSTR = '<xml xmlns:o="urn:schemas-microsoft-com:office:office">'
LCSTR = LCSTR+'<o:MainFile HRef="../'+JUSTFNAME(M.TCMAINFILENAME)+'"/>'
FOR LNI = 1 TO .NFILES
LCSTR = LCSTR+'<o:File HRef="'+.AFILES(M.LNI)+'"/>'
ENDFOR
LCSTR = LCSTR+'<o:File HRef="filelist.xml"/>'
LCSTR = LCSTR+'</xml>'
_STRTOFILE(LCSTR, ADDBS(THIS.CDIRECTORY)+"filelist.xml")
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS XFRXDocument AS Custom
NHEADERMARGIN = 0
NFOOTERMARGIN = 0
NTOPMARGIN = 5000
NBOTTOMMARGIN = 5000
NLEFTMARGIN = 3000
NRIGHTMARGIN = 3000
NPAPERWIDTH = 40000
NPAPERHEIGHT = 50000
NORIENTATION = 0
CCODEPAGE = ""
CAUTHOR = ""
CTITLE = ""
CSUBJECT = ""
CKEYWORDS = ""
CCOMMENTS = ""
CCATEGORY = ""
CMANAGER = ""
CCOMPANY = ""
**
PROCEDURE InitializeFromReportObject
LPARAMETERS TOREPORT
IF THIS.NSECTIONNUMBER>0
THIS.FLUSHHEADERFOOTER(THIS.NSECTIONNUMBER)
THIS.LFLUSHED = .T.
ENDIF
THIS.NTOPMARGIN = MIN(TOREPORT.LNTOPMARGIN, 10000)
THIS.NLEFTMARGIN = MIN(TOREPORT.LNLEFTMARGIN, 10000)
THIS.NRIGHTMARGIN = MIN(TOREPORT.LNRIGHTMARGIN, 10000)
THIS.NBOTTOMMARGIN = MIN(TOREPORT.LNBOTTOMMARGIN, 10000)
THIS.NORIENTATION = TOREPORT.LNORIENTATION
THIS.CWORDREADPASSWORD = TOREPORT.XFRXSESSION.CWORDREADPASSWORD
THIS.CWORDWRITEPASSWORD = TOREPORT.XFRXSESSION.CWORDWRITEPASSWORD
THIS.LWORDREQUIREPASSWORD = TOREPORT.XFRXSESSION.LWORDREQUIREPASSWORD
THIS.LNOTOPENWORD = TOREPORT.XFRXSESSION.LNOTOPENWORD
ENDPROC
**
ENDDEFINE
**
PROCEDURE fillUnicodeArray
LPARAMETERS TCCODEPAGE, TAARRAY
DO CASE
CASE TCCODEPAGE=1255
TAARRAY(128, 2) = "euro"
TAARRAY(130, 2) = "quotesinglbase"
TAARRAY(131, 2) = "florin"
TAARRAY(132, 2) = "quotedblbase"
TAARRAY(133, 2) = "ellipsis"
TAARRAY(134, 2) = "dagger"
TAARRAY(135, 2) = "daggerdbl"
TAARRAY(136, 2) = "circumflex"
TAARRAY(137, 2) = "perthousand"
TAARRAY(139, 2) = "guilsinglleft"
TAARRAY(145, 2) = "quoteleft"
TAARRAY(146, 2) = "quoteright"
TAARRAY(147, 2) = "quotedblleft"
TAARRAY(148, 2) = "quotedblright"
TAARRAY(149, 2) = "bullet"
TAARRAY(150, 2) = "endash"
TAARRAY(151, 2) = "emdash"
TAARRAY(152, 2) = "tilde"
TAARRAY(153, 2) = "trademark"
TAARRAY(155, 2) = "guilsinglright"
TAARRAY(160, 2) = "nonbreakingspace"
TAARRAY(161, 2) = "exclamdown"
TAARRAY(162, 2) = "cent"
TAARRAY(163, 2) = "sterling"
TAARRAY(164, 2) = "sheqelhebrew"
TAARRAY(165, 2) = "yen"
TAARRAY(166, 2) = "brokenbar"
TAARRAY(167, 2) = "section"
TAARRAY(168, 2) = "dieresis"
TAARRAY(169, 2) = "copyright"
TAARRAY(170, 2) = "multiply"
TAARRAY(171, 2) = "guillemotleft"
TAARRAY(172, 2) = "logicalnot"
TAARRAY(173, 2) = "softhyphen"
TAARRAY(174, 2) = "registered"
TAARRAY(175, 2) = "overscore"
TAARRAY(176, 2) = "degree"
TAARRAY(177, 2) = "plusminus"
TAARRAY(178, 2) = "twosuperior"
TAARRAY(179, 2) = "threesuperior"
TAARRAY(180, 2) = "acute"
TAARRAY(181, 2) = "mu1"
TAARRAY(182, 2) = "paragraph"
TAARRAY(183, 2) = "periodcentered"
TAARRAY(184, 2) = "cedilla"
TAARRAY(185, 2) = "onesuperior"
TAARRAY(186, 2) = "divide"
TAARRAY(187, 2) = "guillemotright"
TAARRAY(188, 2) = "onequarter"
TAARRAY(189, 2) = "onehalf"
TAARRAY(190, 2) = "threequarters"
TAARRAY(191, 2) = "questiondown"
TAARRAY(192, 2) = "shevawidehebrew"
TAARRAY(193, 2) = "hatafsegolwidehebrew"
TAARRAY(194, 2) = "hatafpatahwidehebrew"
TAARRAY(195, 2) = "hatafqamatswidehebrew"
TAARRAY(196, 2) = "hiriqwidehebrew"
TAARRAY(197, 2) = "tserewidehebrew"
TAARRAY(198, 2) = "segolwidehebrew"
TAARRAY(199, 2) = "patahwidehebrew"
TAARRAY(200, 2) = "qamatswidehebrew"
TAARRAY(201, 2) = "holamwidehebrew"
TAARRAY(203, 2) = "qubutswidehebrew"
TAARRAY(204, 2) = "dageshhebrew"
TAARRAY(205, 2) = "siluqlefthebrew"
TAARRAY(206, 2) = "maqafhebrew"
TAARRAY(207, 2) = "rafehebrew"
TAARRAY(208, 2) = "paseqhebrew"
TAARRAY(209, 2) = "shindothebrew"
TAARRAY(210, 2) = "sindothebrew"
TAARRAY(211, 2) = "sofpasuqhebrew"
TAARRAY(212, 2) = "vavvavhebrew"
TAARRAY(213, 2) = "vavyodhebrew"
TAARRAY(214, 2) = "yodyodhebrew"
TAARRAY(215, 2) = "gereshhebrew"
TAARRAY(216, 2) = "gershayimhebrew"
TAARRAY(224, 2) = "alefhebrew"
TAARRAY(225, 2) = "bethebrew"
TAARRAY(226, 2) = "gimelhebrew"
TAARRAY(227, 2) = "dalethebrew"
TAARRAY(228, 2) = "hehebrew"
TAARRAY(229, 2) = "vavhebrew"
TAARRAY(230, 2) = "zayinhebrew"
TAARRAY(231, 2) = "hethebrew"
TAARRAY(232, 2) = "tethebrew"
TAARRAY(233, 2) = "yodhebrew"
TAARRAY(234, 2) = "finalkafhebrew"
TAARRAY(235, 2) = "kafhebrew"
TAARRAY(236, 2) = "lamedhebrew"
TAARRAY(237, 2) = "finalmemhebrew"
TAARRAY(238, 2) = "memhebrew"
TAARRAY(239, 2) = "finalnunhebrew"
TAARRAY(240, 2) = "nunhebrew"
TAARRAY(241, 2) = "samekhhebrew"
TAARRAY(242, 2) = "ayinhebrew"
TAARRAY(243, 2) = "finalpehebrew"
TAARRAY(244, 2) = "pehebrew"
TAARRAY(245, 2) = "finaltsadihebrew"
TAARRAY(246, 2) = "tsadihebrew"
TAARRAY(247, 2) = "qofhebrew"
TAARRAY(248, 2) = "reshhebrew"
TAARRAY(249, 2) = "shinhebrew"
TAARRAY(250, 2) = "tavhebrew"
TAARRAY(253, 2) = "afii299"
TAARRAY(254, 2) = "afii300"
CASE TCCODEPAGE=1254
TAARRAY(130, 2) = "quotesinglbase"
TAARRAY(131, 2) = "florin"
TAARRAY(132, 2) = "quotedblbase"
TAARRAY(133, 2) = "ellipsis"
TAARRAY(134, 2) = "dagger"
TAARRAY(135, 2) = "daggerdbl"
TAARRAY(136, 2) = "circumflex"
TAARRAY(137, 2) = "perthousand"
TAARRAY(138, 2) = "Scaron"
TAARRAY(139, 2) = "guilsinglleft"
TAARRAY(140, 2) = "OE"
TAARRAY(145, 2) = "quoteleft"
TAARRAY(146, 2) = "quoteright"
TAARRAY(147, 2) = "quotedblleft"
TAARRAY(148, 2) = "quotedblright"
TAARRAY(149, 2) = "bullet"
TAARRAY(150, 2) = "endash"
TAARRAY(151, 2) = "emdash"
TAARRAY(152, 2) = "tilde"
TAARRAY(153, 2) = "trademark"
TAARRAY(154, 2) = "scaron"
TAARRAY(155, 2) = "guilsinglright"
TAARRAY(156, 2) = "oe"
TAARRAY(159, 2) = "Ydieresis"
TAARRAY(160, 2) = "nonbreakingspace"
TAARRAY(161, 2) = "exclamdown"
TAARRAY(162, 2) = "cent"
TAARRAY(163, 2) = "sterling"
TAARRAY(164, 2) = "currency"
TAARRAY(165, 2) = "yen"
TAARRAY(166, 2) = "brokenbar"
TAARRAY(167, 2) = "section"
TAARRAY(168, 2) = "dieresis"
TAARRAY(169, 2) = "copyright"
TAARRAY(170, 2) = "ordfeminine"
TAARRAY(171, 2) = "guillemotleft"
TAARRAY(172, 2) = "logicalnot"
TAARRAY(173, 2) = "softhyphen"
TAARRAY(174, 2) = "registered"
TAARRAY(175, 2) = "overscore"
TAARRAY(176, 2) = "degree"
TAARRAY(177, 2) = "plusminus"
TAARRAY(178, 2) = "twosuperior"
TAARRAY(179, 2) = "threesuperior"
TAARRAY(180, 2) = "acute"
TAARRAY(181, 2) = "mu1"
TAARRAY(182, 2) = "paragraph"
TAARRAY(183, 2) = "periodcentered"
TAARRAY(184, 2) = "cedilla"
TAARRAY(185, 2) = "onesuperior"
TAARRAY(186, 2) = "ordmasculine"
TAARRAY(187, 2) = "guillemotright"
TAARRAY(188, 2) = "onequarter"
TAARRAY(189, 2) = "onehalf"
TAARRAY(190, 2) = "threequarters"
TAARRAY(191, 2) = "questiondown"
TAARRAY(192, 2) = "Agrave"
TAARRAY(193, 2) = "Aacute"
TAARRAY(194, 2) = "Acircumflex"
TAARRAY(195, 2) = "Atilde"
TAARRAY(196, 2) = "Adieresis"
TAARRAY(197, 2) = "Aring"
TAARRAY(198, 2) = "AE"
TAARRAY(199, 2) = "Ccedilla"
TAARRAY(200, 2) = "Egrave"
TAARRAY(201, 2) = "Eacute"
TAARRAY(202, 2) = "Ecircumflex"
TAARRAY(203, 2) = "Edieresis"
TAARRAY(204, 2) = "Igrave"
TAARRAY(205, 2) = "Iacute"
TAARRAY(206, 2) = "Icircumflex"
TAARRAY(207, 2) = "Idieresis"
TAARRAY(208, 2) = "Gbreve"
TAARRAY(209, 2) = "Ntilde"
TAARRAY(210, 2) = "Ograve"
TAARRAY(211, 2) = "Oacute"
TAARRAY(212, 2) = "Ocircumflex"
TAARRAY(213, 2) = "Otilde"
TAARRAY(214, 2) = "Odieresis"
TAARRAY(215, 2) = "multiply"
TAARRAY(216, 2) = "Oslash"
TAARRAY(217, 2) = "Ugrave"
TAARRAY(218, 2) = "Uacute"
TAARRAY(219, 2) = "Ucircumflex"
TAARRAY(220, 2) = "Udieresis"
TAARRAY(221, 2) = "Idotaccent"
TAARRAY(222, 2) = "Scedilla"
TAARRAY(223, 2) = "germandbls"
TAARRAY(224, 2) = "agrave"
TAARRAY(225, 2) = "aacute"
TAARRAY(226, 2) = "acircumflex"
TAARRAY(227, 2) = "atilde"
TAARRAY(228, 2) = "adieresis"
TAARRAY(229, 2) = "aring"
TAARRAY(230, 2) = "ae"
TAARRAY(231, 2) = "ccedilla"
TAARRAY(232, 2) = "egrave"
TAARRAY(233, 2) = "eacute"
TAARRAY(234, 2) = "ecircumflex"
TAARRAY(235, 2) = "edieresis"
TAARRAY(236, 2) = "igrave"
TAARRAY(237, 2) = "iacute"
TAARRAY(238, 2) = "icircumflex"
TAARRAY(239, 2) = "idieresis"
TAARRAY(240, 2) = "gbreve"
TAARRAY(241, 2) = "ntilde"
TAARRAY(242, 2) = "ograve"
TAARRAY(243, 2) = "oacute"
TAARRAY(244, 2) = "ocircumflex"
TAARRAY(245, 2) = "otilde"
TAARRAY(246, 2) = "odieresis"
TAARRAY(247, 2) = "divide"
TAARRAY(248, 2) = "oslash"
TAARRAY(249, 2) = "ugrave"
TAARRAY(250, 2) = "uacute"
TAARRAY(251, 2) = "ucircumflex"
TAARRAY(252, 2) = "udieresis"
TAARRAY(253, 2) = "dotlessi"
TAARRAY(254, 2) = "scedilla"
TAARRAY(255, 2) = "ydieresis"
CASE TCCODEPAGE=1253
TAARRAY(130, 2) = "quotesinglbase"
TAARRAY(131, 2) = "florin"
TAARRAY(132, 2) = "quotedblbase"
TAARRAY(133, 2) = "ellipsis"
TAARRAY(134, 2) = "dagger"
TAARRAY(135, 2) = "daggerdbl"
TAARRAY(137, 2) = "perthousand"
TAARRAY(139, 2) = "guilsinglleft"
TAARRAY(145, 2) = "quoteleft"
TAARRAY(146, 2) = "quoteright"
TAARRAY(147, 2) = "quotedblleft"
TAARRAY(148, 2) = "quotedblright"
TAARRAY(149, 2) = "bullet"
TAARRAY(150, 2) = "endash"
TAARRAY(151, 2) = "emdash"
TAARRAY(153, 2) = "trademark"
TAARRAY(155, 2) = "guilsinglright"
TAARRAY(160, 2) = "nonbreakingspace"
TAARRAY(161, 2) = "dieresistonos"
TAARRAY(162, 2) = "Alphatonos"
TAARRAY(163, 2) = "sterling"
TAARRAY(164, 2) = "currency"
TAARRAY(165, 2) = "yen"
TAARRAY(166, 2) = "brokenbar"
TAARRAY(167, 2) = "section"
TAARRAY(168, 2) = "dieresis"
TAARRAY(169, 2) = "copyright"
TAARRAY(171, 2) = "guillemotleft"
TAARRAY(172, 2) = "logicalnot"
TAARRAY(173, 2) = "softhyphen"
TAARRAY(174, 2) = "registered"
TAARRAY(175, 2) = "horizontalbar"
TAARRAY(176, 2) = "degree"
TAARRAY(177, 2) = "plusminus"
TAARRAY(178, 2) = "twosuperior"
TAARRAY(179, 2) = "threesuperior"
TAARRAY(180, 2) = "tonos"
TAARRAY(181, 2) = "mu1"
TAARRAY(182, 2) = "paragraph"
TAARRAY(183, 2) = "periodcentered"
TAARRAY(184, 2) = "Epsilontonos"
TAARRAY(185, 2) = "Etatonos"
TAARRAY(186, 2) = "Iotatonos"
TAARRAY(187, 2) = "guillemotright"
TAARRAY(188, 2) = "Omicrontonos"
TAARRAY(189, 2) = "onehalf"
TAARRAY(190, 2) = "Upsilontonos"
TAARRAY(191, 2) = "Omegatonos"
TAARRAY(192, 2) = "iotadieresistonos"
TAARRAY(193, 2) = "Alpha"
TAARRAY(194, 2) = "Beta"
TAARRAY(195, 2) = "Gamma"
TAARRAY(196, 2) = "Deltagreek"
TAARRAY(197, 2) = "Epsilon"
TAARRAY(198, 2) = "Zeta"
TAARRAY(199, 2) = "Eta"
TAARRAY(200, 2) = "Theta"
TAARRAY(201, 2) = "Iota"
TAARRAY(202, 2) = "Kappa"
TAARRAY(203, 2) = "Lambda"
TAARRAY(204, 2) = "Mu"
TAARRAY(205, 2) = "Nu"
TAARRAY(206, 2) = "Xi"
TAARRAY(207, 2) = "Omicron"
TAARRAY(208, 2) = "Pi"
TAARRAY(209, 2) = "Rho"
TAARRAY(211, 2) = "Sigma"
TAARRAY(212, 2) = "Tau"
TAARRAY(213, 2) = "Upsilon"
TAARRAY(214, 2) = "Phi"
TAARRAY(215, 2) = "Chi"
TAARRAY(216, 2) = "Psi"
TAARRAY(217, 2) = "Omegagreek"
TAARRAY(218, 2) = "Iotadieresis"
TAARRAY(219, 2) = "Upsilondieresis"
TAARRAY(220, 2) = "alphatonos"
TAARRAY(221, 2) = "epsilontonos"
TAARRAY(222, 2) = "etatonos"
TAARRAY(223, 2) = "iotatonos"
TAARRAY(224, 2) = "upsilondieresistonos"
TAARRAY(225, 2) = "alpha"
TAARRAY(226, 2) = "beta"
TAARRAY(227, 2) = "gamma"
TAARRAY(228, 2) = "delta"
TAARRAY(229, 2) = "epsilon"
TAARRAY(230, 2) = "zeta"
TAARRAY(231, 2) = "eta"
TAARRAY(232, 2) = "theta"
TAARRAY(233, 2) = "iota"
TAARRAY(234, 2) = "kappa"
TAARRAY(235, 2) = "lambda"
TAARRAY(236, 2) = "mugreek"
TAARRAY(237, 2) = "nu"
TAARRAY(238, 2) = "xi"
TAARRAY(239, 2) = "omicron"
TAARRAY(240, 2) = "pi"
TAARRAY(241, 2) = "rho"
TAARRAY(242, 2) = "sigmafinal"
TAARRAY(243, 2) = "sigma"
TAARRAY(244, 2) = "tau"
TAARRAY(245, 2) = "upsilon"
TAARRAY(246, 2) = "phi"
TAARRAY(247, 2) = "chi"
TAARRAY(248, 2) = "psi"
TAARRAY(249, 2) = "omega"
TAARRAY(250, 2) = "iotadieresis"
TAARRAY(251, 2) = "upsilondieresis"
TAARRAY(252, 2) = "omicrontonos"
TAARRAY(253, 2) = "upsilontonos"
TAARRAY(254, 2) = "omegatonos"
CASE TCCODEPAGE=1250
TAARRAY(130, 2) = "quotesinglbase"
TAARRAY(132, 2) = "quotedblbase"
TAARRAY(133, 2) = "ellipsis"
TAARRAY(134, 2) = "dagger"
TAARRAY(135, 2) = "daggerdbl"
TAARRAY(137, 2) = "perthousand"
TAARRAY(138, 2) = "Scaron"
TAARRAY(139, 2) = "guilsinglleft"
TAARRAY(140, 2) = "Sacute"
TAARRAY(141, 2) = "Tcaron"
TAARRAY(142, 2) = "Zcaron"
TAARRAY(143, 2) = "Zacute"
TAARRAY(145, 2) = "quoteleft"
TAARRAY(146, 2) = "quoteright"
TAARRAY(147, 2) = "quotedblleft"
TAARRAY(148, 2) = "quotedblright"
TAARRAY(149, 2) = "bullet"
TAARRAY(150, 2) = "endash"
TAARRAY(151, 2) = "emdash"
TAARRAY(153, 2) = "trademark"
TAARRAY(154, 2) = "scaron"
TAARRAY(155, 2) = "guilsinglright"
TAARRAY(156, 2) = "sacute"
TAARRAY(157, 2) = "tcaron"
TAARRAY(158, 2) = "zcaron"
TAARRAY(159, 2) = "zacute"
TAARRAY(160, 2) = "nonbreakingspace"
TAARRAY(161, 2) = "caron"
TAARRAY(162, 2) = "breve"
TAARRAY(163, 2) = "Lslash"
TAARRAY(164, 2) = "currency"
TAARRAY(165, 2) = "Aogonek"
TAARRAY(166, 2) = "brokenbar"
TAARRAY(167, 2) = "section"
TAARRAY(168, 2) = "dieresis"
TAARRAY(170, 2) = "Scedilla"
TAARRAY(171, 2) = "guillemotleft"
TAARRAY(172, 2) = "logicalnot"
TAARRAY(173, 2) = "softhyphen"
TAARRAY(174, 2) = "registered"
TAARRAY(175, 2) = "Zdotaccent"
TAARRAY(176, 2) = "degree"
TAARRAY(177, 2) = "plusminus"
TAARRAY(178, 2) = "ogonek"
TAARRAY(179, 2) = "lslash"
TAARRAY(180, 2) = "acute"
TAARRAY(181, 2) = "mu1"
TAARRAY(182, 2) = "paragraph"
TAARRAY(183, 2) = "periodcentered"
TAARRAY(184, 2) = "cedilla"
TAARRAY(185, 2) = "aogonek"
TAARRAY(186, 2) = "scedilla"
TAARRAY(187, 2) = "guillemotright"
TAARRAY(188, 2) = "Lcaron"
TAARRAY(189, 2) = "hungarumlaut"
TAARRAY(190, 2) = "lcaron"
TAARRAY(191, 2) = "zdotaccent"
TAARRAY(192, 2) = "Racute"
TAARRAY(193, 2) = "Aacute"
TAARRAY(194, 2) = "Acircumflex"
TAARRAY(195, 2) = "Abreve"
TAARRAY(196, 2) = "Adieresis"
TAARRAY(197, 2) = "Lacute"
TAARRAY(198, 2) = "Cacute"
TAARRAY(199, 2) = "Ccedilla"
TAARRAY(200, 2) = "Ccaron"
TAARRAY(201, 2) = "Eacute"
TAARRAY(202, 2) = "Eogonek"
TAARRAY(203, 2) = "Edieresis"
TAARRAY(204, 2) = "Ecaron"
TAARRAY(205, 2) = "Iacute"
TAARRAY(206, 2) = "Icircumflex"
TAARRAY(207, 2) = "Dcaron"
TAARRAY(208, 2) = "Dslash"
TAARRAY(209, 2) = "Nacute"
TAARRAY(210, 2) = "Ncaron"
TAARRAY(211, 2) = "Oacute"
TAARRAY(212, 2) = "Ocircumflex"
TAARRAY(213, 2) = "Ohungarumlaut"
TAARRAY(214, 2) = "Odieresis"
TAARRAY(215, 2) = "multiply"
TAARRAY(216, 2) = "Rcaron"
TAARRAY(217, 2) = "Uring"
TAARRAY(218, 2) = "Uacute"
TAARRAY(219, 2) = "Uhungarumlaut"
TAARRAY(220, 2) = "Udieresis"
TAARRAY(221, 2) = "Yacute"
TAARRAY(222, 2) = "Tcommaaccent"
TAARRAY(223, 2) = "germandbls"
TAARRAY(224, 2) = "racute"
TAARRAY(225, 2) = "aacute"
TAARRAY(226, 2) = "acircumflex"
TAARRAY(227, 2) = "abreve"
TAARRAY(228, 2) = "adieresis"
TAARRAY(229, 2) = "lacute"
TAARRAY(230, 2) = "cacute"
TAARRAY(231, 2) = "ccedilla"
TAARRAY(232, 2) = "ccaron"
TAARRAY(233, 2) = "eacute"
TAARRAY(234, 2) = "eogonek"
TAARRAY(235, 2) = "edieresis"
TAARRAY(236, 2) = "ecaron"
TAARRAY(237, 2) = "iacute"
TAARRAY(238, 2) = "icircumflex"
TAARRAY(239, 2) = "dcaron"
TAARRAY(240, 2) = "dmacron"
TAARRAY(241, 2) = "nacute"
TAARRAY(242, 2) = "ncaron"
TAARRAY(243, 2) = "oacute"
TAARRAY(244, 2) = "ocircumflex"
TAARRAY(245, 2) = "ohungarumlaut"
TAARRAY(246, 2) = "odieresis"
TAARRAY(247, 2) = "divide"
TAARRAY(248, 2) = "rcaron"
TAARRAY(249, 2) = "uring"
TAARRAY(250, 2) = "uacute"
TAARRAY(251, 2) = "uhungarumlaut"
TAARRAY(252, 2) = "udieresis"
TAARRAY(253, 2) = "yacute"
TAARRAY(254, 2) = "tcommaaccent"
TAARRAY(255, 2) = "dotaccent"
CASE TCCODEPAGE=1251
TAARRAY(129, 2) = "afii10052"
TAARRAY(130, 2) = "quotesinglbase"
TAARRAY(131, 2) = "gjecyrillic"
TAARRAY(132, 2) = "quotedblbase"
TAARRAY(133, 2) = "ellipsis"
TAARRAY(134, 2) = "dagger"
TAARRAY(135, 2) = "daggerdbl"
TAARRAY(136, 2) = "euro"
TAARRAY(137, 2) = "perthousand"
TAARRAY(138, 2) = "afii10058"
TAARRAY(139, 2) = "guilsinglleft"
TAARRAY(140, 2) = "afii10059"
TAARRAY(141, 2) = "afii10061"
TAARRAY(142, 2) = "afii10060"
TAARRAY(143, 2) = "afii10145"
TAARRAY(144, 2) = "djecyrillic"
TAARRAY(145, 2) = "quoteleft"
TAARRAY(146, 2) = "quoteright"
TAARRAY(147, 2) = "quotedblleft"
TAARRAY(148, 2) = "quotedblright"
TAARRAY(149, 2) = "bullet"
TAARRAY(150, 2) = "endash"
TAARRAY(151, 2) = "emdash"
TAARRAY(153, 2) = "trademark"
TAARRAY(154, 2) = "ljecyrillic"
TAARRAY(155, 2) = "guilsinglright"
TAARRAY(156, 2) = "njecyrillic"
TAARRAY(157, 2) = "kjecyrillic"
TAARRAY(158, 2) = "tshecyrillic"
TAARRAY(159, 2) = "dzhecyrillic"
TAARRAY(160, 2) = "nonbreakingspace"
TAARRAY(161, 2) = "afii10062"
TAARRAY(162, 2) = "ushortcyrillic"
TAARRAY(163, 2) = "afii10057"
TAARRAY(164, 2) = "currency"
TAARRAY(165, 2) = "afii10050"
TAARRAY(166, 2) = "brokenbar"
TAARRAY(167, 2) = "section"
TAARRAY(168, 2) = "afii10023"
TAARRAY(169, 2) = "copyright"
TAARRAY(170, 2) = "afii10053"
TAARRAY(171, 2) = "guillemotleft"
TAARRAY(172, 2) = "logicalnot"
TAARRAY(173, 2) = "softhyphen"
TAARRAY(174, 2) = "registered"
TAARRAY(175, 2) = "afii10056"
TAARRAY(176, 2) = "degree"
TAARRAY(177, 2) = "plusminus"
TAARRAY(178, 2) = "afii10055"
TAARRAY(179, 2) = "icyrillic"
TAARRAY(180, 2) = "gheupturncyrillic"
TAARRAY(181, 2) = "mu1"
TAARRAY(182, 2) = "paragraph"
TAARRAY(183, 2) = "periodcentered"
TAARRAY(184, 2) = "iocyrillic"
TAARRAY(185, 2) = "numero"
TAARRAY(186, 2) = "ecyrillic"
TAARRAY(187, 2) = "guillemotright"
TAARRAY(188, 2) = "jecyrillic"
TAARRAY(189, 2) = "afii10054"
TAARRAY(190, 2) = "dzecyrillic"
TAARRAY(191, 2) = "yicyrillic"
TAARRAY(192, 2) = "afii10017"
TAARRAY(193, 2) = "afii10018"
TAARRAY(194, 2) = "afii10019"
TAARRAY(195, 2) = "afii10020"
TAARRAY(196, 2) = "afii10021"
TAARRAY(197, 2) = "afii10022"
TAARRAY(198, 2) = "afii10024"
TAARRAY(199, 2) = "afii10025"
TAARRAY(200, 2) = "afii10026"
TAARRAY(201, 2) = "afii10027"
TAARRAY(202, 2) = "afii10028"
TAARRAY(203, 2) = "afii10029"
TAARRAY(204, 2) = "afii10030"
TAARRAY(205, 2) = "afii10031"
TAARRAY(206, 2) = "afii10032"
TAARRAY(207, 2) = "afii10033"
TAARRAY(208, 2) = "afii10034"
TAARRAY(209, 2) = "afii10035"
TAARRAY(210, 2) = "afii10036"
TAARRAY(211, 2) = "afii10037"
TAARRAY(212, 2) = "afii10038"
TAARRAY(213, 2) = "afii10039"
TAARRAY(214, 2) = "afii10040"
TAARRAY(215, 2) = "afii10041"
TAARRAY(216, 2) = "afii10042"
TAARRAY(217, 2) = "afii10043"
TAARRAY(218, 2) = "afii10044"
TAARRAY(219, 2) = "afii10045"
TAARRAY(220, 2) = "afii10046"
TAARRAY(221, 2) = "afii10047"
TAARRAY(222, 2) = "afii10048"
TAARRAY(223, 2) = "afii10049"
TAARRAY(224, 2) = "afii10065"
TAARRAY(225, 2) = "becyrillic"
TAARRAY(226, 2) = "vecyrillic"
TAARRAY(227, 2) = "gecyrillic"
TAARRAY(228, 2) = "decyrillic"
TAARRAY(229, 2) = "iecyrillic"
TAARRAY(230, 2) = "zhecyrillic"
TAARRAY(231, 2) = "zecyrillic"
TAARRAY(232, 2) = "iicyrillic"
TAARRAY(233, 2) = "iishortcyrillic"
TAARRAY(234, 2) = "kacyrillic"
TAARRAY(235, 2) = "elcyrillic"
TAARRAY(236, 2) = "emcyrillic"
TAARRAY(237, 2) = "encyrillic"
TAARRAY(238, 2) = "ocyrillic"
TAARRAY(239, 2) = "pecyrillic"
TAARRAY(240, 2) = "ercyrillic"
TAARRAY(241, 2) = "escyrillic"
TAARRAY(242, 2) = "tecyrillic"
TAARRAY(243, 2) = "ucyrillic"
TAARRAY(244, 2) = "efcyrillic"
TAARRAY(245, 2) = "khacyrillic"
TAARRAY(246, 2) = "tsecyrillic"
TAARRAY(247, 2) = "checyrillic"
TAARRAY(248, 2) = "shacyrillic"
TAARRAY(249, 2) = "shchacyrillic"
TAARRAY(250, 2) = "hardsigncyrillic"
TAARRAY(251, 2) = "yericyrillic"
TAARRAY(252, 2) = "softsigncyrillic"
TAARRAY(253, 2) = "ereversedcyrillic"
TAARRAY(254, 2) = "iucyrillic"
TAARRAY(255, 2) = "iacyrillic"
CASE TCCODEPAGE=1257
TAARRAY(130, 2) = "quotesinglbase"
TAARRAY(132, 2) = "quotedblbase"
TAARRAY(133, 2) = "ellipsis"
TAARRAY(134, 2) = "dagger"
TAARRAY(135, 2) = "daggerdbl"
TAARRAY(137, 2) = "perthousand"
TAARRAY(139, 2) = "guilsinglleft"
TAARRAY(141, 2) = "dieresis"
TAARRAY(142, 2) = "caron"
TAARRAY(143, 2) = "cedilla"
TAARRAY(145, 2) = "quoteleft"
TAARRAY(146, 2) = "quoteright"
TAARRAY(147, 2) = "quotedblleft"
TAARRAY(148, 2) = "quotedblright"
TAARRAY(149, 2) = "bullet"
TAARRAY(150, 2) = "endash"
TAARRAY(151, 2) = "emdash"
TAARRAY(153, 2) = "trademark"
TAARRAY(155, 2) = "guilsinglright"
TAARRAY(157, 2) = "macron"
TAARRAY(157, 2) = "overscore"
TAARRAY(158, 2) = "ogonek"
TAARRAY(160, 2) = "nbspace"
TAARRAY(160, 2) = "nonbreakingspace"
TAARRAY(162, 2) = "cent"
TAARRAY(163, 2) = "sterling"
TAARRAY(164, 2) = "currency"
TAARRAY(166, 2) = "brokenbar"
TAARRAY(167, 2) = "section"
TAARRAY(168, 2) = "Oslash"
TAARRAY(169, 2) = "copyright"
TAARRAY(170, 2) = "Rcedilla"
TAARRAY(170, 2) = "Rcommaaccent"
TAARRAY(171, 2) = "guillemotleft"
TAARRAY(172, 2) = "logicalnot"
TAARRAY(173, 2) = "sfthyphen"
TAARRAY(173, 2) = "softhyphen"
TAARRAY(174, 2) = "registered"
TAARRAY(175, 2) = "AE"
TAARRAY(176, 2) = "degree"
TAARRAY(177, 2) = "plusminus"
TAARRAY(178, 2) = "twosuperior"
TAARRAY(179, 2) = "threesuperior"
TAARRAY(180, 2) = "acute"
TAARRAY(181, 2) = "mu"
TAARRAY(181, 2) = "mu1"
TAARRAY(182, 2) = "paragraph"
TAARRAY(183, 2) = "middot"
TAARRAY(183, 2) = "periodcentered"
TAARRAY(184, 2) = "oslash"
TAARRAY(185, 2) = "onesuperior"
TAARRAY(186, 2) = "rcedilla"
TAARRAY(186, 2) = "rcommaaccent"
TAARRAY(187, 2) = "guillemotright"
TAARRAY(188, 2) = "onequarter"
TAARRAY(189, 2) = "onehalf"
TAARRAY(190, 2) = "threequarters"
TAARRAY(191, 2) = "ae"
TAARRAY(192, 2) = "Aogonek"
TAARRAY(193, 2) = "Iogonek"
TAARRAY(194, 2) = "Amacron"
TAARRAY(195, 2) = "Cacute"
TAARRAY(196, 2) = "Adieresis"
TAARRAY(197, 2) = "Aring"
TAARRAY(198, 2) = "Eogonek"
TAARRAY(199, 2) = "Emacron"
TAARRAY(200, 2) = "Ccaron"
TAARRAY(201, 2) = "Eacute"
TAARRAY(202, 2) = "Zacute"
TAARRAY(203, 2) = "Edot"
TAARRAY(203, 2) = "Edotaccent"
TAARRAY(204, 2) = "Gcedilla"
TAARRAY(204, 2) = "Gcommaaccent"
TAARRAY(205, 2) = "Kcedilla"
TAARRAY(205, 2) = "Kcommaaccent"
TAARRAY(206, 2) = "Imacron"
TAARRAY(207, 2) = "Lcedilla"
TAARRAY(207, 2) = "Lcommaaccent"
TAARRAY(208, 2) = "Scaron"
TAARRAY(209, 2) = "Nacute"
TAARRAY(210, 2) = "Ncedilla"
TAARRAY(210, 2) = "Ncommaaccent"
TAARRAY(211, 2) = "Oacute"
TAARRAY(212, 2) = "Omacron"
TAARRAY(213, 2) = "Otilde"
TAARRAY(214, 2) = "Odieresis"
TAARRAY(215, 2) = "multiply"
TAARRAY(216, 2) = "Uogonek"
TAARRAY(217, 2) = "Lslash"
TAARRAY(218, 2) = "Sacute"
TAARRAY(219, 2) = "Umacron"
TAARRAY(220, 2) = "Udieresis"
TAARRAY(221, 2) = "Zdot"
TAARRAY(221, 2) = "Zdotaccent"
TAARRAY(222, 2) = "Zcaron"
TAARRAY(223, 2) = "germandbls"
TAARRAY(224, 2) = "aogonek"
TAARRAY(225, 2) = "iogonek"
TAARRAY(226, 2) = "amacron"
TAARRAY(227, 2) = "cacute"
TAARRAY(228, 2) = "adieresis"
TAARRAY(229, 2) = "aring"
TAARRAY(230, 2) = "eogonek"
TAARRAY(231, 2) = "emacron"
TAARRAY(232, 2) = "ccaron"
TAARRAY(233, 2) = "eacute"
TAARRAY(234, 2) = "zacute"
TAARRAY(235, 2) = "edot"
TAARRAY(235, 2) = "edotaccent"
TAARRAY(236, 2) = "gcedilla"
TAARRAY(236, 2) = "gcommaaccent"
TAARRAY(237, 2) = "kcedilla"
TAARRAY(237, 2) = "kcommaaccent"
TAARRAY(238, 2) = "imacron"
TAARRAY(239, 2) = "lcedilla"
TAARRAY(239, 2) = "lcommaaccent"
TAARRAY(240, 2) = "scaron"
TAARRAY(241, 2) = "nacute"
TAARRAY(242, 2) = "ncedilla"
TAARRAY(242, 2) = "ncommaaccent"
TAARRAY(243, 2) = "oacute"
TAARRAY(244, 2) = "omacron"
TAARRAY(245, 2) = "otilde"
TAARRAY(246, 2) = "odieresis"
TAARRAY(247, 2) = "divide"
TAARRAY(248, 2) = "uogonek"
TAARRAY(249, 2) = "lslash"
TAARRAY(250, 2) = "sacute"
TAARRAY(251, 2) = "umacron"
TAARRAY(252, 2) = "udieresis"
TAARRAY(253, 2) = "zdot"
TAARRAY(253, 2) = "zdotaccent"
TAARRAY(254, 2) = "zcaron"
TAARRAY(255, 2) = "dotaccent"
ENDCASE
ENDPROC
**
FUNCTION _xf_convertImage
LPARAMETERS TCFROM, TCTO, TCTYPE
IF ATC("xfrxlib.fll", SET("Library"))=0
SET LIBRARY TO xfrxlib.fll ADDITIVE
ENDIF
RETURN _XFCONVERTIMAGE()
ENDFUNC
**
FUNCTION _xf_getBuildVersion
RETURN VAL(RIGHT(VERSION(4), 4))
ENDFUNC
**
DEFINE CLASS GraphicFlowLayoutWriter AS FlowLayoutWriter
NSTYLESFILEHANDLE = 0
NCURRENTPOSITION = 0
OGRAPHICWRITER = .NULL.
LFIRSTINHEADER = .T.
LFIRSTINMAIN = .T.
LFIRSTINFOOTER = .T.
NHEADEROFFSET = 0
NMAINOFFSET = 0
NFOOTEROFFSET = 0
ODOC = .NULL.
**
PROCEDURE Init
LPARAMETERS _X____11333, TLOPENOUTPUTNAME, TLNOFILES
THIS.LSILENT = _X____11333.LSILENT
THIS.COUTPUTNAME = _X____11333.COUTPUTNAME
DODEFAULT(_X____11333, .F., .T.)
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
DODEFAULT(TNREPORTNO, TCCODEPAGE, TOREPORT)
THIS.OGRAPHICWRITER.INITIALIZEFROMREPORTOBJECT(TOREPORT)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
THIS.NCURRENTPOSITION = 0
THIS.LFIRSTINHEADER = .T.
THIS.LFIRSTINMAIN = .T.
THIS.LFIRSTINFOOTER = .T.
THIS.NHEADEROFFSET = 0
THIS.NMAINOFFSET = 0
THIS.NFOOTEROFFSET = 0
THIS.OGRAPHICWRITER.NEWPAGE(TNWIDTH, TNHEIGHT)
THIS.OGRAPHICWRITER.NHEADERMARGIN = 0
THIS.OGRAPHICWRITER.NFOOTERMARGIN = 0
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
THIS.ADDXOBJECT("R", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, "---",  , TNPENSIZE, 8, TNPENRED, TNPENGREEN, TNPENBLUE, .F., TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET,  ,  ,  ,  , FILETOSTR(TCPATH))
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.ADDXOBJECT("R", TNLEFT, TNLEFT+TNWIDTH, TNTOP, TNTOP+TNHEIGHT, "-x-",  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, .F., TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNOFFSET)
ENDPROC
**
PROCEDURE addLine
LPARAMETERS TNLEFT, TNTOP, TNLTO, TNTTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.ADDXOBJECT("L", TNLEFT, TNLTO, TNTOP, TNTTO, "-x-",  , TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE)
ENDPROC
**
FUNCTION addTab
LPARAMETERS TCTYPE, TNPOS
RETURN ''
ENDFUNC
**
FUNCTION setPropText
LPARAMETERS TCTEXTVALUE, TCOBJLINKNAME, TCOBJLINKHREF
RETURN ''
ENDFUNC
**
PROCEDURE outputMatrix
IF RECCOUNT(THIS._X____11335)=0
RETURN
ENDIF
DO CASE
CASE THIS.NCURRENTSECTIONTYPE=0 .OR. THIS.NCURRENTSECTIONTYPE=1
IF THIS.OGRAPHICWRITER.CMODE<>"header"
THIS.NCURRENTPOSITION = 0
THIS.OGRAPHICWRITER.CMODE = "header"
ENDIF
CASE THIS.NCURRENTSECTIONTYPE=7
IF THIS.OGRAPHICWRITER.CMODE<>"footer"
THIS.NCURRENTPOSITION = 0
THIS.OGRAPHICWRITER.CMODE = "footer"
ENDIF
OTHERWISE
IF THIS.OGRAPHICWRITER.CMODE<>"main"
THIS.NCURRENTPOSITION = 0
THIS.OGRAPHICWRITER.CMODE = "main"
ENDIF
ENDCASE
LOCAL LCPIVOTSALIAS, LRPIVOTSALIAS, LCOBJECTSALIAS, LCNUMVAL, LLFIRST, LCCLASSESALIAS, LNLINEHEIGHT, LNUPSHIFT, LNLEFTSHIFT, LNMARGINTOP, LCZORDER, LNSIZESHIFT, LCIMAGEFILE
LCPIVOTSALIAS = THIS.CPIVOTSALIAS
LRPIVOTSALIAS = THIS.RPIVOTSALIAS
LCOBJECTSALIAS = THIS._X____11335
LCCLASSESALIAS = THIS._X____11332
SELECT (LCOBJECTSALIAS)
IF THIS.NLINES>0
INDEX ON IIF(TYPE="L" .OR. TYPE="R" .OR. TYPE="X", -100000, X0) TAG X0 ADDITIVE
SET ORDER TO x0
FOR LNX = 1 TO THIS.NLINES
SET ORDER TO
SCAN ALL FOR LINE=LNX
IF TYPE="T"
EXIT
ENDIF
IF TYPE<>"X"
REPLACE TEXT WITH "B"
ENDIF
ENDSCAN
SET ORDER TO x0
DO CASE
CASE THIS.OGRAPHICWRITER.CMODE="header" .AND. THIS.LFIRSTINHEADER
THIS.LFIRSTINHEADER = .F.
THIS.NHEADEROFFSET = THIS.ALINESARRAY(LNX, 3)
THIS.OGRAPHICWRITER.NHEADERMARGIN = THIS.NHEADEROFFSET
CASE THIS.OGRAPHICWRITER.CMODE="footer" .AND. THIS.LFIRSTINFOOTER
THIS.LFIRSTINFOOTER = .F.
THIS.NFOOTEROFFSET = THIS.OGRAPHICWRITER.NPAPERHEIGHT-THIS.ALINESARRAY(LNX, 3)
THIS.OGRAPHICWRITER.NFOOTERMARGIN = THIS.OGRAPHICWRITER.NPAPERHEIGHT-THIS.ALINESARRAY(THIS.NLINES, 4)
CASE THIS.OGRAPHICWRITER.CMODE="main" .AND. THIS.LFIRSTINMAIN
THIS.LFIRSTINHEADER = .F.
THIS.LFIRSTINMAIN = .F.
THIS.NMAINOFFSET = THIS.ALINESARRAY(LNX, 3)
THIS.OGRAPHICWRITER.NTOPMARGIN = THIS.NMAINOFFSET
ENDCASE
DO CASE
CASE THIS.OGRAPHICWRITER.CMODE="header"
LNUPSHIFT = THIS.NHEADEROFFSET
CASE THIS.OGRAPHICWRITER.CMODE="footer"
LNUPSHIFT = THIS.OGRAPHICWRITER.NPAPERHEIGHT-THIS.NFOOTEROFFSET
OTHERWISE
LNUPSHIFT = THIS.NMAINOFFSET
ENDCASE
LNLEFTSHIFT = THIS.OGRAPHICWRITER.NLEFTMARGIN
LLFIRST = .T.
LCPARAGRAPHSTYLE = ""
SCAN ALL FOR LINE=LNX
IF TYPE="T"
GO (&LCOBJECTSALIAS->CLASS) IN (LCCLASSESALIAS)
LCSTYLE = &LCCLASSESALIAS->ALIGN
DO CASE
CASE (&LCCLASSESALIAS->ALIGN = "right")
LCPARAGRAPHSTYLE = LCPARAGRAPHSTYLE+THIS.ADDTAB("right", XX-LNLEFTSHIFT)
CASE (&LCCLASSESALIAS->ALIGN = "center")
LCPARAGRAPHSTYLE = LCPARAGRAPHSTYLE+THIS.ADDTAB("center", X0+(XX-X0)/2-LNLEFTSHIFT)
OTHERWISE
LCPARAGRAPHSTYLE = LCPARAGRAPHSTYLE+THIS.ADDTAB("left", IIF(X0-LNLEFTSHIFT<=300, 500, X0-LNLEFTSHIFT))
ENDCASE
ENDIF
ENDSCAN
LNLINEHEIGHT = THIS.ALINESARRAY(LNX, 4)-THIS.ALINESARRAY(LNX, 3)
LNMARGINTOP = 0
IF THIS.NCURRENTPOSITION+LNUPSHIFT<THIS.ALINESARRAY(LNX, 3)
LNMARGINTOP = (THIS.ALINESARRAY(LNX, 4)-THIS.NCURRENTPOSITION-LNUPSHIFT)-LNLINEHEIGHT
DO WHILE LNMARGINTOP>(3125.0/2)
LNMARGINTOP = LNMARGINTOP-(3125.0/2)
THIS.OGRAPHICWRITER.ADDEMPTYROW()
THIS.NCURRENTPOSITION = THIS.NCURRENTPOSITION+(3125.0/2)
ENDDO
ENDIF
LCPARAGRAPHSTYLE = LCPARAGRAPHSTYLE+THIS.OGRAPHICWRITER.SETPARGRAPHPROP(0, LNMARGINTOP, LNLINEHEIGHT*0.97 )
SCAN ALL FOR LINE=LNX
IF INLIST(TYPE, "X", "T")
GO (&LCOBJECTSALIAS->CLASS) IN (LCCLASSESALIAS)
LCTEXTVALUE = &LCOBJECTSALIAS->TEXT		    	
LCTEXTVALUE = THIS.SETPROPTEXT(LCTEXTVALUE, OBJLINKNAME, OBJLINKHREF)
ENDIF
IF LLFIRST
THIS.OGRAPHICWRITER.WRITELN("\pard\plain "+LCPARAGRAPHSTYLE)
LLFIRST = .F.
ENDIF
DO CASE
CASE TYPE="T"
THIS.OGRAPHICWRITER.WRITETEXTBOX(LCTEXTVALUE,&LCOBJECTSALIAS->CLASS,LCCLASSESALIAS)
CASE TYPE="L"
LNFROMX = X0-LNLEFTSHIFT
LNFROMY = Y0-THIS.NCURRENTPOSITION-LNUPSHIFT
LNTOX = XX-LNLEFTSHIFT
LNTOY = YY-THIS.NCURRENTPOSITION-LNUPSHIFT
THIS.OGRAPHICWRITER.WRITELINE(LNFROMX, LNFROMY, LNTOX, LNTOY, PENRED, PENGREEN, PENBLUE, PENSIZE, PENPAT, TEXT)
CASE TYPE="X" .OR.  .NOT. EMPTY(OBJPICTURE)
LCALIGN  = &LCCLASSESALIAS->ALIGN
LNXX = X0-LNLEFTSHIFT
LNY = Y0-THIS.NCURRENTPOSITION-LNUPSHIFT
LNWIDTH = XX-X0+200
LNHEIGHT = YY-Y0
IF  .NOT. EMPTY(OBJPICTURE)
LCTEXTVALUE = TEXT
ENDIF
THIS.OGRAPHICWRITER.WRITEXOBJECT(LCTEXTVALUE, LNXX, LNY, LNWIDTH, LNHEIGHT, LCALIGN, OBJPICTURE, LCCLASSESALIAS)
CASE TYPE="R"
LCALIGN  = &LCCLASSESALIAS->ALIGN
LNXX = X0-LNLEFTSHIFT
LNY = Y0-THIS.NCURRENTPOSITION-LNUPSHIFT
LNWIDTH = XX-X0
LNHEIGHT = YY-Y0
THIS.OGRAPHICWRITER.WRITERECTANGLE(LNXX, LNY, LNWIDTH, LNHEIGHT, FILLPAT, FILLRED, FILLGREEN, FILLBLUE, PENRED, PENGREEN, PENBLUE, PENPAT, PENSIZE, OFFSET, TEXT)
ENDCASE
ENDSCAN
THIS.OGRAPHICWRITER.WRITELN("\par ")
THIS.NCURRENTPOSITION = THIS.ALINESARRAY(LNX, 4)-LNUPSHIFT
ENDFOR
RETURN
ENDIF
ENDPROC
**
PROCEDURE outStyles
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE finalize
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS RTFFlowLayoutWriter AS GraphicFlowLayoutWriter
**
PROCEDURE Init
LPARAMETERS _X____11333
DODEFAULT(_X____11333, .F., .T.)
THIS.OGRAPHICWRITER = CREATEOBJECT("RTFWriterFlow")
THIS.OGRAPHICWRITER.INITDOCUMENT()
THIS.OGRAPHICWRITER.INITFILEHEADER()
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TCCODEPAGE, TOREPORT
DODEFAULT(TNREPORTNO, TCCODEPAGE, TOREPORT)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
DODEFAULT(TNHEIGHT, TNWIDTH, TNPAGENO, TNORI)
ENDPROC
**
FUNCTION addTab
LPARAMETERS TCTYPE, TNPOS
DO CASE
CASE TCTYPE="right"
RETURN " \tqr\tx"+ALLTRIM(STR(TNPOS*1440/10000))
CASE TCTYPE="center"
RETURN " \tqc\tx"+ALLTRIM(STR(TNPOS*1440/10000))
OTHERWISE
RETURN " \tx"+ALLTRIM(STR(TNPOS*1440/10000))
ENDCASE
RETURN ''
ENDFUNC
**
FUNCTION setPropText
LPARAMETERS TCTEXTVALUE, TCOBJLINKNAME, TCOBJLINKHREF
LOCAL LCTEXTVALUE
LCTEXTVALUE = STRTRAN(TRIM(TCTEXTVALUE), "\", "\\")
LCTEXTVALUE = STRTRAN(TRIM(LCTEXTVALUE), "{", "\{")
LCTEXTVALUE = STRTRAN(TRIM(LCTEXTVALUE), "}", "\}")
LCTEXTVALUE = STRTRAN(TRIM(LCTEXTVALUE), CHR(13), "\par")
RETURN LCTEXTVALUE
ENDFUNC
**
PROCEDURE outputMatrix
DODEFAULT()
ENDPROC
**
PROCEDURE outStyles
LOCAL LCFORMATSTRING
SELECT (THIS._X____11332)
SCAN ALL
ENDSCAN
ENDPROC
**
PROCEDURE finalize
LPARAMETERS _X____11333
THIS.OUTSTYLES()
THIS.OGRAPHICWRITER.FINALIZE(THIS.COUTPUTNAME, THIS.ODOC)
THIS.ODOC = .NULL.
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS RTFWriterFlow AS xfrxDocument
NFILEHANDLE0 = 0
CFILENAME0 = ""
NFILEHEADERHANDLE = 0
CFILEHEADERNAME = ""
CFILENAME1 = ""
NFILEHANDLE1 = 0
NSECTIONNUMBER = 0
OFILES = .NULL.
CPAGEHEADER = ""
CPAGEFOOTER = ""
NHEADERHTMLHANDLE = 0
CMODE = "main"
LFLUSHED = .F.
CWORDREADPASSWORD = ""
CWORDWRITEPASSWORD = ""
LWORDREQUIREPASSWORD = .F.
LNOTOPENWORD = .F.
NFONTS = 0
NCOLORS = 0
DIMENSION AFONTS(1)
DIMENSION ACOLORS(1)
**
PROCEDURE InitializeFromReportObject
LPARAMETERS TOREPORT
DODEFAULT(TOREPORT)
THIS.NLEFTMARGIN = THIS.NLEFTMARGIN-500
ENDPROC
**
PROCEDURE writeln
LPARAMETERS _X____11334
THIS.WRITE(_X____11334+CHR(13)+CHR(10))
ENDPROC
**
PROCEDURE write
LPARAMETERS _X____11334
DO CASE
CASE THIS.CMODE="header"
THIS.WRITEPAGEHEADER(_X____11334)
CASE THIS.CMODE="footer"
THIS.WRITEPAGEFOOTER(_X____11334)
OTHERWISE
THIS.WRITEMAIN(_X____11334)
ENDCASE
ENDPROC
**
PROCEDURE WriteFileHeader
LPARAMETERS _X____11334
= FWRITE(THIS.NFILEHEADERHANDLE, _X____11334)
ENDPROC
**
FUNCTION InitDocument
WITH THIS
.CFILENAME0 = ADDBS(SYS(2023))+'FileName0'+".tmp"
.NFILEHANDLE0 = FCREATE(.CFILENAME0)
.CFILENAME1 = ADDBS(SYS(2023))+'Filename1'+".tmp"
.NFILEHANDLE1 = FCREATE(.CFILENAME1)
.CFILEHEADERNAME = ADDBS(SYS(2023))+'FileHeaderName'+".tmp"
.NFILEHEADERHANDLE = FCREATE(.CFILEHEADERNAME)
IF  .NOT. (.NFILEHANDLE0>0 .AND. .NFILEHEADERHANDLE>0 .AND. .NFILEHANDLE1>0)
RETURN .F.
ENDIF
ENDWITH
ENDFUNC
**
PROCEDURE flushHeaderFooter
LPARAMETERS TNSECTIONNUMBER
LOCAL LCTEMPL, LCPAGEHEADERURL, LCPAGEFOOTERURL
LOCAL LCLEFTMARGIN, LSRIGHTMARGIN, LCTOPMARGIN, LCBOTTOMMARGIN, LCPAPERWIDTH, LCPAPERHEIGHT, LCPAPERORIENTATION, LCHEADERMARGIN, LCFOOTERMARGIN
WITH THIS
IF TNSECTIONNUMBER=1
IF EMPTY(THIS.CCODEPAGE)
TCCODEPAGE = "\ansicpg"+ALLTRIM(STR(CPCURRENT()))
ENDIF
IF TYPE("This.cCodePage")="N"
TCCODEPAGE = "\ansicpg"+ALLTRIM(STR(THIS.CCODEPAGE))
ENDIF
THIS.CCODEPAGE = TCCODEPAGE
ELSE
ENDIF
IF THIS.NBOTTOMMARGIN<>0
THIS.NBOTTOMMARGIN = THIS.NBOTTOMMARGIN-700
IF THIS.NBOTTOMMARGIN<0
THIS.NBOTTOMMARGIN = 0
ENDIF
ENDIF
LCLEFTMARGIN = ALLTRIM(STR(THIS.NLEFTMARGIN*1440/10000))
LCRIGHTMARGIN = ALLTRIM(STR(THIS.NRIGHTMARGIN*1440/10000))
LCTOPMARGIN = ALLTRIM(STR(THIS.NTOPMARGIN*1440/10000))
LCBOTTOMMARGIN = ALLTRIM(STR(THIS.NBOTTOMMARGIN*1440/10000))
LCPAPERWIDTH = ALLTRIM(STR(THIS.NPAPERWIDTH*1440/10000))
LCPAPERHEIGHT = ALLTRIM(STR(THIS.NPAPERHEIGHT*1440/10000))
LCHEADERMARGIN = ALLTRIM(STR(THIS.NHEADERMARGIN*1440/10000))
LCFOOTERMARGIN = ALLTRIM(STR(THIS.NFOOTERMARGIN*1440/10000))
IF THIS.NORIENTATION=0
LCPAPERORIENTATION = ''
ELSE
LCPAPERORIENTATION = '\lndscpsxn'
ENDIF
IF TNSECTIONNUMBER=1
= FPUTS(.NFILEHANDLE0, '\sectd\sbknone'+LCPAPERORIENTATION)
ELSE
= FPUTS(.NFILEHANDLE0, '\sect\sectd'+LCPAPERORIENTATION)
ENDIF
= FPUTS(.NFILEHANDLE0, '\pgwsxn'+LCPAPERWIDTH+'\pghsxn'+LCPAPERHEIGHT)
= FPUTS(.NFILEHANDLE0, '\marglsxn'+LCLEFTMARGIN+'\margrsxn'+LCRIGHTMARGIN+'\margtsxn'+LCTOPMARGIN+'\margbsxn'+LCBOTTOMMARGIN)
= FPUTS(.NFILEHANDLE0, '\headery'+LCHEADERMARGIN+'\footery'+LCFOOTERMARGIN)
= FPUTS(.NFILEHANDLE0, '{\header{')
IF  .NOT. EMPTY(.CPAGEHEADER)
= FWRITE(.NFILEHANDLE0, .CPAGEHEADER)
ELSE
= FWRITE(.NFILEHANDLE0, '\pard\plain\par')
ENDIF
= FPUTS(.NFILEHANDLE0, '}}')
= FPUTS(.NFILEHANDLE0, '{\footer{')
IF  .NOT. EMPTY(.CPAGEFOOTER)
= FWRITE(.NFILEHANDLE0, .CPAGEFOOTER)
ELSE
= FWRITE(.NFILEHANDLE0, '\pard\plain\par')
ENDIF
= FPUTS(.NFILEHANDLE0, '}}')
= FCLOSE(.NFILEHANDLE1)
LOCAL TEMPHANDLE, LCSTR
TEMPHANDLE = FOPEN(.CFILENAME1)
DO WHILE  .NOT. FEOF(M.TEMPHANDLE)
LCSTR = FREAD(M.TEMPHANDLE, 2000)
= FWRITE(.NFILEHANDLE0, LCSTR)
ENDDO
= FCLOSE(M.TEMPHANDLE)
IF FILE(.CFILENAME1)
ERASE (.CFILENAME1)
ENDIF
.NFILEHANDLE1 = FCREATE(.CFILENAME1)
ENDWITH
ENDPROC
**
PROCEDURE addSection
IF THIS.NSECTIONNUMBER>1
ENDIF
ENDPROC
**
PROCEDURE InitFileHeader
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNWIDTH, TNHEIGHT
WITH THIS
IF .NSECTIONNUMBER>0 .AND.  .NOT. .LFLUSHED
.FLUSHHEADERFOOTER(.NSECTIONNUMBER)
.LFLUSHED = .T.
ENDIF
IF  .NOT. EMPTY(M.TNWIDTH)
.NPAPERWIDTH = M.TNWIDTH
.NPAPERHEIGHT = M.TNHEIGHT
ENDIF
.NSECTIONNUMBER = .NSECTIONNUMBER+1
.CPAGEHEADER = ""
.CPAGEFOOTER = ""
.ADDSECTION()
.LFLUSHED = .F.
ENDWITH
ENDPROC
**
PROCEDURE WritePageHeader
LPARAMETERS _X____11334
THIS.CPAGEHEADER = THIS.CPAGEHEADER+_X____11334
ENDPROC
**
PROCEDURE WritePageFooter
LPARAMETERS _X____11334
THIS.CPAGEFOOTER = THIS.CPAGEFOOTER+_X____11334
ENDPROC
**
PROCEDURE WriteMain
LPARAMETERS _X____11334
WITH THIS
= FWRITE(.NFILEHANDLE1, _X____11334)
ENDWITH
ENDPROC
**
PROCEDURE WriteHeader
LPARAMETERS _X____11334
WITH THIS
= FWRITE(.NFILEHANDLE0, _X____11334)
ENDWITH
ENDPROC
**
PROCEDURE WriteFileHeader
LPARAMETERS _X____11334
WITH THIS
= FPUTS(.NFILEHEADERHANDLE, _X____11334)
ENDWITH
ENDPROC
**
PROCEDURE addEmptyRow
THIS.WRITELN("\pard\plain\sl-229\par")
RETURN
ENDPROC
**
FUNCTION setPargraphProp
LPARAMETERS TNMARGIN, TNMARGINTOP, TNLINEHEIGHT
RETURN "\sa0"+"\sb"+ALLTRIM(STR((TNMARGINTOP*1440/10000)))+"\sl-"+ALLTRIM(STR((((TNLINEHEIGHT)*1440/10000))))
ENDFUNC
**
FUNCTION setPropText
LPARAMETERS TCTEXTVALUE, TCOBJLINKNAME, TCOBJLINKHREF
IF  .NOT. EMPTY(_X____11334)
TCTEXTVALUE = STRTRAN(TRIM(TCTEXTVALUE), "\", "\\")
TCTEXTVALUE = STRTRAN(TRIM(TCTEXTVALUE), "{", "\{")
TCTEXTVALUE = STRTRAN(TRIM(TCTEXTVALUE), "}", "\}")
TCTEXTVALUE = STRTRAN(TRIM(TCTEXTVALUE), CHR(13), "\par ")
ELSE
TCTEXTVALUE = ""
ENDIF
RETURN TCTEXTVALUE
ENDFUNC
**
PROCEDURE WriteTextBox
LPARAMETERS TCTEXTVALUE, TNCLASSFORMAT, TCCLASSESALIAS
LOCAL LCTEXT
LCTEXT = '\tab'+THIS.MAKEFORMAT(TCCLASSESALIAS)+' '+LCTEXTVALUE+'\plain'
THIS.WRITELN(LCTEXT)
ENDPROC
**
FUNCTION MakeFormat
LPARAMETERS TCCLASSESALIAS
LOCAL LCFONT, LNFONTSIZE, LNPENRED, LNPENGREEN, LNPENBLUE, LNFILLRED, LNFILLGREEN, LNFILLBLUE, LBUNDERLINE, LBITAL, LBBOLD, LCTEXT
LCFONT      = &TCCLASSESALIAS->FONT
LNFONTSIZE  = &TCCLASSESALIAS->FONTSIZE
LNPENRED    = &TCCLASSESALIAS->PENRED
LNPENGREEN  = &TCCLASSESALIAS->PENGREEN		
LNPENBLUE   = &TCCLASSESALIAS->PENBLUE
LNFILLRED   = &TCCLASSESALIAS->FILLRED
LNFILLGREEN = &TCCLASSESALIAS->FILLGREEN		
LNFILLBLUE  = &TCCLASSESALIAS->FILLBLUE
LBUNDERLINE = &TCCLASSESALIAS->UNDERLINE
LBITAL      = &TCCLASSESALIAS->ITAL
LBBOLD      = &TCCLASSESALIAS->BOLD
LBSTRIKE    = &TCCLASSESALIAS->STRIKED
LCTEXT = "\plain"
IF LBBOLD
LCTEXT = LCTEXT+'\b'
ENDIF
IF LBITAL
LCTEXT = LCTEXT+'\i'
ENDIF
IF LBUNDERLINE
LCTEXT = LCTEXT+'\ul'
ENDIF
IF LBSTRIKE
LCTEXT = LCTEXT+'\strike'
ENDIF
IF LNFONTSIZE>0
LCTEXT = LCTEXT+'\fs'+ALLTRIM(STR(LNFONTSIZE*2))
ENDIF
IF LEN(LCFONT)>0
LCTEXT = LCTEXT+THIS.ADDFONT(LCFONT)
ENDIF
LCTEXT = LCTEXT+'\cf'+THIS.RGB_PEN(LNPENRED, LNPENGREEN, LNPENBLUE)
LCTEXT = LCTEXT+'\chshdng'+THIS.RGB_FILL(LNFILLRED, LNFILLGREEN, LNFILLBLUE)
LCTEXT = LCTEXT+'\chcfpat'+THIS.RGB_FILL(LNFILLRED, LNFILLGREEN, LNFILLBLUE)
LCTEXT = LCTEXT+'\chcbpat'+THIS.RGB_FILL(LNFILLRED, LNFILLGREEN, LNFILLBLUE)
RETURN LCTEXT
ENDFUNC
**
FUNCTION addFont
LPARAMETERS TCFONTNAME
LOCAL LCFONT, LNFIND
LCFONT = TCFONTNAME
WITH THIS
LCEXACT = SET("EXACT")
SET EXACT ON
LNFIND = 0
LNFIND = ASCAN(.AFONTS, LCFONT)
IF LNFIND<>0
SET EXACT &LCEXACT
RETURN '\f'+ALLTRIM(STR(LNFIND-1))
ENDIF
SET EXACT &LCEXACT
.NFONTS = .NFONTS+1
DIMENSION .AFONTS(.NFONTS)
.AFONTS(.NFONTS) = LCFONT
RETURN '\f'+ALLTRIM(STR(.NFONTS-1))
ENDWITH
RETURN '\f'+ALLTRIM(STR(THIS.NFONTS))
ENDFUNC
**
PROCEDURE WriteLine
LPARAMETERS TNFROMX, TNFROMY, TNTOX, TNTOY, TNPENRED, TNPENGREEN, TNPENBLUE, TNPENSIZE, TNPENPAT, _X____11334
THIS.WRITEXXOBJECT("L", TNFROMX, TNTOX, TNFROMY, TNTOY, 0, TNPENSIZE, TNPENPAT,  , TNPENRED, TNPENGREEN, TNPENBLUE)
ENDPROC
**
PROCEDURE WriteXObject
LPARAMETERS _X____11334, TNX, TNY, TNWIDTH, TNHEIGHT, TCALIGN, TCOBJPICTURE, TCCLASSESALIAS
IF  .NOT. EMPTY(TCOBJPICTURE)
THIS.WRITEPICTURE(TNX, TNY, TNWIDTH, TNHEIGHT, TCOBJPICTURE, _X____11334)
RETURN
ELSE
IF  .NOT. EMPTY(TCCLASSESALIAS)
LCFONT      = &TCCLASSESALIAS->FONT
LNFONTSIZE  = &TCCLASSESALIAS->FONTSIZE
LNPENRED    = &TCCLASSESALIAS->PENRED
LNPENGREEN  = &TCCLASSESALIAS->PENGREEN		
LNPENBLUE   = &TCCLASSESALIAS->PENBLUE
LNFILLRED   = &TCCLASSESALIAS->FILLRED
LNFILLGREEN = &TCCLASSESALIAS->FILLGREEN		
LNFILLBLUE  = &TCCLASSESALIAS->FILLBLUE
LLUNDERLINE = &TCCLASSESALIAS->UNDERLINE
LLITAL      = &TCCLASSESALIAS->ITAL
LLBOLD      = &TCCLASSESALIAS->BOLD
LNMODE = 0
THIS.WRITEXXOBJECT("T", TNX, TNX+TNWIDTH, TNY, TNY+TNHEIGHT, _X____11334, 0, 0, 0, LNPENRED, LNPENGREEN, LNPENBLUE, LNMODE, LNFILLRED, LNFILLGREEN, LNFILLBLUE, LCFONT, LNFONTSIZE, LLBOLD, LLITAL, TCALIGN, LLUNDERLINE)
ENDIF
ENDIF
ENDPROC
**
PROCEDURE WriteRectangle
LPARAMETERS TNX, TNY, TNWIDTH, TNHEIGHT, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, PENRED, PENGREEN, PENBLUE, TNPENPAT, TNPENSIZE, TNOFFSET, _X____11334
LOCAL LNMODE
IF TNFILLPAT=0
LNMODE = 1
ELSE
LNMODE = 0
ENDIF
THIS.WRITEXXOBJECT("L", TNX, TNX+TNWIDTH, TNY, TNY+TNHEIGHT, _X____11334, TNPENSIZE, TNPENPAT, TNFILLPAT, PENRED, PENGREEN, PENBLUE, LNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE,  , TNOFFSET)
ENDPROC
**
PROCEDURE writePicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCPATH, _X____11334
LOCAL LFHANDLE_PICTURE, LNLEFT, LNTOP, LNWIDTH, LNHEIGHT, LCPATHOLD
LCTEXT = ''
LCTYPE = 'NOTHING'
IF LEFT(TCPATH, 2)='BM'
LCTYPE = 'bmp'
ENDIF
IF LEFT(TCPATH, 5)=CHR(255)+CHR(216)+CHR(255)+CHR(224)
LCTYPE = 'jpg'
ENDIF
IF LCTYPE='NOTHING'
RETURN
ENDIF
TNLEFT = ROUND(TNLEFT/10000*1440, 2)
TNTOP = ROUND(TNTOP/10000*1440, 2)
TNWIDTH = ROUND(TNWIDTH/10000*1440, 2)
TNHEIGHT = ROUND(TNHEIGHT/10000*1440, 2)
LCTEXT = LCTEXT+'{\shp{\*\shpinst'
LCTEXT = LCTEXT+'\shpbxcolumn\shpbxignore\shpbypara\shpbyignore'
LCTEXT = LCTEXT+'\shpz0\shpfhdr0\'+'shpleft'+ALLTRIM(STR(TNLEFT))+'\shptop'+ALLTRIM(STR(TNTOP))+'\shpright'+ALLTRIM(STR(TNLEFT+TNWIDTH))+'\shpbottom'+ALLTRIM(STR(TNTOP+TNHEIGHT))+'{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}'
IF _X____11334='B'
LCTEXT = LCTEXT+'{\sp{\sn fBehindDocument}{\sv 1}}'
ENDIF
LCTEXT = LCTEXT+'{\sp{\sn pib}{\sv {\pict'
IF LOWER(LCTYPE)='jpg'
LCTEXT = LCTEXT+'\jpegblip'
ENDIF
IF LOWER(LCTYPE)='bmp'
LCTEXT = LCTEXT+'\wmetafile8'
LNHANDLE = FCREATE('__OBR.BMP')
= FPUTS(LNHANDLE, TCPATH)
= FCLOSE(LNHANDLE)
TCPATH = '__OBR.BMP'
LCPATHOLD = TCPATH
TCPATH = FORCEEXT(TCPATH, 'wmf')
BMP2WMF(LCPATHOLD, TCPATH)
DELETE FILE (LCPATHOLD)
ENDIF
IF LOWER(LCTYPE)='jpg'
LNHANDLE = FCREATE('__OBR.JPG')
= FPUTS(LNHANDLE, TCPATH)
= FCLOSE(LNHANDLE)
TCPATH = '__OBR.JPG'
ENDIF
LFHANDLE_PICTURE = FOPEN(TCPATH, 10)
THIS.WRITELN(LCTEXT)
DO WHILE  .NOT. FEOF(LFHANDLE_PICTURE)
LCSTR = FREAD(LFHANDLE_PICTURE, 64)
LCSTRHEX = TEXT2HEX(LCSTR)
THIS.WRITELN(LCSTRHEX)
ENDDO
= FCLOSE(LFHANDLE_PICTURE)
LCTEXT = '}}}}'
DELETE FILE (TCPATH)
LCTEXT = LCTEXT+'{\shprslt\pvpg\absh'+ALLTRIM(STR(TNHEIGHT))+'\absw'+ALLTRIM(STR(TNWIDTH))
LCTEXT = LCTEXT+'\pict'
LCTEXT = LCTEXT+'\picw'+ALLTRIM(STR(TNWIDTH))+'\pich'+ALLTRIM(STR(TNHEIGHT))
LCTEXT = LCTEXT+'\picwgoal'+ALLTRIM(STR(TNWIDTH))+'\pichgoal'+ALLTRIM(STR(TNHEIGHT))
LCTEXT = LCTEXT+'\wmetafile8\'
LCTEXT = LCTEXT+''
LCTEXT = LCTEXT+'}\par'
LCTEXT = LCTEXT+'}}'
THIS.WRITELN(LCTEXT)
ENDPROC
**
PROCEDURE Finalize
LPARAMETERS TCFILENAME, TOWORDAPPLICATION
WITH THIS
.FLUSHHEADERFOOTER(.NSECTIONNUMBER)
.LFLUSHED = .T.
.WRITEFILEHEADER('{\rtf1'+.CCODEPAGE)
.WRITEFILEHEADER('{\fonttbl')
FOR M.LNI = 1 TO .NFONTS
.WRITEFILEHEADER('{\f'+ALLTRIM(STR(M.LNI-1))+' '+ALLTRIM(.AFONTS(M.LNI))+'}')
ENDFOR
.WRITEFILEHEADER('}')
.WRITEFILEHEADER('{\colortbl')
FOR M.LNI = 1 TO .NCOLORS
.WRITEFILEHEADER(ALLTRIM(.ACOLORS(M.LNI))+';')
ENDFOR
.WRITEFILEHEADER('}')
.WRITEFILEHEADER('\doctype0')
.WRITEFILEHEADER('\viewkind1\viewscale100')
= FWRITE(.NFILEHANDLE0, "}")
= FSEEK(.NFILEHANDLE0, 0, 0)
= FSEEK(.NFILEHEADERHANDLE, 0, 2)
DO WHILE  .NOT. FEOF(.NFILEHANDLE0)
LCSTR = FREAD(.NFILEHANDLE0, 2000)
= FWRITE(.NFILEHEADERHANDLE, LCSTR)
ENDDO
= FCLOSE(.NFILEHANDLE0)
= FCLOSE(.NFILEHEADERHANDLE)
= FCLOSE(.NFILEHANDLE1)
IF FILE(.CFILENAME0)
ERASE (.CFILENAME0)
ENDIF
IF FILE(.CFILENAME1)
ERASE (.CFILENAME1)
ENDIF
IF FILE(.CFILEHEADERNAME)
ERASE (TCFILENAME)
RENAME (.CFILEHEADERNAME) TO (TCFILENAME)
ENDIF
IF  .NOT. THIS.LNOTOPENWORD
* MAH
* = SHELLEXECUTE(FINDWINDOW(0, _SCREEN.CAPTION), "open", TCFILENAME, "", "", 1)
ENDIF
ENDWITH
ENDPROC
**
FUNCTION RGB_pen
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LNCOLOR, LCCOLOR
IF TYPE('tnRed')='L'
RETURN THIS.ADDCOLOR(0, 0, 0)
ENDIF
IF TNRED=-1
RETURN THIS.ADDCOLOR(0, 0, 0)
ENDIF
RETURN THIS.ADDCOLOR(TNRED, TNGREEN, TNBLUE)
ENDFUNC
**
FUNCTION RGB_fill
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LNCOLOR, LCCOLOR
IF TYPE('tnRed')='L'
RETURN THIS.ADDCOLOR(255, 255, 255)
ENDIF
IF TNRED=-1
RETURN THIS.ADDCOLOR(255, 255, 255)
ENDIF
LNCOLOR = TNRED+256*TNGREEN+65536*TNBLUE
LCCOLOR = ALLTRIM(STR(LNCOLOR))
RETURN THIS.ADDCOLOR(TNRED, TNGREEN, TNBLUE)
ENDFUNC
**
FUNCTION RGB_pen_char
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LNCOLOR, LCCOLOR
IF TYPE('tnRed')='L'
RETURN ALLTRIM(STR(00000))
ENDIF
IF TNRED=-1
RETURN ALLTRIM(STR(00000))
ENDIF
LNCOLOR = TNRED+256*TNGREEN+65536*TNBLUE
LCCOLOR = ALLTRIM(STR(LNCOLOR))
RETURN LCCOLOR
ENDFUNC
**
FUNCTION RGB_fill_char
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LNCOLOR, LCCOLOR
IF TYPE('tnRed')='L'
RETURN ALLTRIM(STR(16777215))
ENDIF
IF TNRED=-1
RETURN ALLTRIM(STR(16777215))
ENDIF
LNCOLOR = TNRED+256*TNGREEN+65536*TNBLUE
LCCOLOR = ALLTRIM(STR(LNCOLOR))
RETURN LCCOLOR
ENDFUNC
**
FUNCTION AddColor
LPARAMETERS TNRED, TNGREEN, TNBLUE
LOCAL LCCOLOR
LCCOLOR = '\red'+ALLTRIM(STR(TNRED))+'\green'+ALLTRIM(STR(TNGREEN))+'\blue'+ALLTRIM(STR(TNBLUE))
WITH THIS
LCEXACT = SET("EXACT")
SET EXACT ON
LNFIND = 0
LNFIND = ASCAN(.ACOLORS, LCCOLOR)
IF LNFIND<>0
SET EXACT &LCEXACT
RETURN ALLTRIM(STR(LNFIND-1))
ENDIF
SET EXACT &LCEXACT
.NCOLORS = .NCOLORS+1
DIMENSION .ACOLORS(.NCOLORS)
.ACOLORS(.NCOLORS) = LCCOLOR
RETURN ALLTRIM(STR(.NCOLORS-1))
ENDWITH
RETURN
ENDFUNC
**
PROCEDURE writeXXObject
LPARAMETERS TCTYPE, TNLEFT, TNRIGHT, TNTOP, TNBOTTOM, _X____11334, TNPENSIZE, TNPENPAT, TNFILLPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TCALIGN, TLUNDERLINE, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP
LOCAL LCTEXT
TNLEFT = ROUND(TNLEFT/10000*1440, 2)
TNTOP = ROUND(TNTOP/10000*1440, 2)
TNBOTTOM = ROUND(TNBOTTOM/10000*1440, 2)
TNRIGHT = ROUND(TNRIGHT/10000*1440, 2)
IF EMPTY(_X____11334)
_X____11334 = ""
ENDIF
LCTEXT = '{\shp{\*\shpinst'
LCTEXT = LCTEXT+'\shpleft'+ALLTRIM(STR(TNLEFT))
LCTEXT = LCTEXT+'\shptop'+ALLTRIM(STR(TNTOP))
LCTEXT = LCTEXT+'\shpbottom'+ALLTRIM(STR(TNBOTTOM))
LCTEXT = LCTEXT+'\shpright'+ALLTRIM(STR(TNRIGHT))
LCTEXT = LCTEXT+'\shpbxcolumn\shpbxignore\shpbypara\shpbyignore'
LCTEXT = LCTEXT+'\shpwr3'
LCTEXT = LCTEXT+'\shpz0'
LCTEXT = LCTEXT+'{\shptxt'
LCTEXT = LCTEXT+'{\sp{\sn dxTextLeft}{\sv 0}}'
LCTEXT = LCTEXT+'{\sp{\sn dyTextTop}{\sv 0}}'
LCTEXT = LCTEXT+'{\sp{\sn dxTextRight}{\sv 0}}'
LCTEXT = LCTEXT+'{\sp{\sn dyTextBottom}{\sv 0}}'
IF TCTYPE='L'
LNOFFSET = TNFONTSIZE
IF TYPE('lnOffSet')<>'L'
IF LNOFFSET>0
IF LNOFFSET<50
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 2}}'+'{\sp{\sn adjustValue}{\sv '+STR(LNOFFSET*100)+'}}'
ELSE
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 3}}'
ENDIF
ELSE
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 1}}'
ENDIF
ELSE
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 20}}'
ENDIF
ELSE
LCTEXT = LCTEXT+'{\sp{\sn ShapeType}{\sv 1}}'
ENDIF
IF _X____11334='B'
LCTEXT = LCTEXT+'{\sp{\sn fBehindDocument}{\sv 1}}'
ENDIF
IF TYPE('tnMode')='L'
ELSE
IF TNMODE=0
LCTEXT = LCTEXT+'{\sp{\sn fillColor}{\sv '+THIS.RGB_FILL_CHAR(TNFILLRED, TNFILLGREEN, TNFILLBLUE)+'}}'
ELSE
LCTEXT = LCTEXT+'{\sp{\sn fillColor}{\sv '+THIS.RGB_FILL_CHAR(255, 255, 255)+'}}'
ENDIF
ENDIF
IF TCTYPE='L'
IF TNPENRED<>-1 .AND. TNPENPAT<>0
LCTEXT = LCTEXT+'{\sp{\sn lineColor}{\sv '+THIS.RGB_PEN_CHAR(TNPENRED, TNPENGREEN, TNPENBLUE)+'}}'
ELSE
IF TYPE('tnMode')='L'
LCTEXT = LCTEXT+'{\sp{\sn lineColor}{\sv '+THIS.RGB_PEN_CHAR(0, 0, 0)+'}}'
ELSE
IF TNMODE<>0
LCTEXT = LCTEXT+'{\sp{\sn lineColor}{\sv '+THIS.RGB_PEN_CHAR(0, 0, 0)+'}}'
ELSE
LCTEXT = LCTEXT+'{\sp{\sn lineColor}{\sv '+THIS.RGB_PEN_CHAR(255, 255, 255)+'}}'
ENDIF
ENDIF
ENDIF
ELSE
LCTEXT = LCTEXT+'{\sp{\sn fline}{\sv 0}}'
LCCOLOR = THIS.RGB_PEN(TNPENRED, TNPENGREEN, TNPENBLUE)
LCTEXT = LCTEXT+'\cf'+LCCOLOR
ENDIF
IF TNPENPAT=8
TNPENPAT = 0
ENDIF
LNPENPAT = 0
DO CASE
CASE TNPENPAT=0
LNPENPAT = 0
CASE TNPENPAT=1
LNPENPAT = 2
CASE TNPENPAT=2
LNPENPAT = 1
CASE TNPENPAT=3
LNPENPAT = 3
CASE TNPENPAT=4
LNPENPAT = 4
CASE TNPENPAT=8
LNPENPAT = 0
OTHERWISE
LNPENPAT = 0
ENDCASE
IF TCTYPE='L'
IF LNPENPAT<>0
LCTEXT = LCTEXT+'{\sp{\sn lineDashing}{\sv '+ALLTRIM(STR(LNPENPAT))+'}}'
ENDIF
ENDIF
LCTEXT = LCTEXT+'{\sp{\sn lineWidth}{\sv '+ALLTRIM(STR(TNPENSIZE*12700))+'}}'
IF TYPE('tnMode')<>'L'
IF TNMODE=1
LCTEXT = LCTEXT+'{\sp{\sn fillOpacity}{\sv 0}}'
ENDIF
ENDIF
IF TLBOLD
LCTEXT = LCTEXT+'\b'
ENDIF
IF TLITALICS
LCTEXT = LCTEXT+'\i'
ENDIF
IF TYPE('tcAlign')<>'L'
DO CASE
CASE TCALIGN='right'
LCTEXT = LCTEXT+'\qr'
CASE TCALIGN='left'
LCTEXT = LCTEXT+'\ql'
CASE TCALIGN='center'
LCTEXT = LCTEXT+'\qc'
ENDCASE
ENDIF
IF TLUNDERLINE
LCTEXT = LCTEXT+'\ul'
ENDIF
IF TYPE('tnFontSize')<>'L'
IF TNFONTSIZE>0
LCTEXT = LCTEXT+'\fs'+ALLTRIM(STR(TNFONTSIZE*2))
ENDIF
ENDIF
IF TYPE('tcFont')<>'L'
IF LEN(TCFONT)>0
LCTEXT = LCTEXT+THIS.ADDFONT(TCFONT)
ENDIF
ENDIF
IF TCTYPE='T'
LCTEXT = LCTEXT+' '+_X____11334
ENDIF
LCTEXT = LCTEXT+'\par}}}'
THIS.WRITELN(LCTEXT)
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS pdfReader AS CUSTOM
HANDLE = -1
CBUFFER = ""
NBUFFERPOS = -1
NBUFFERLEN = -1
NOBJECTCOUNT = -1
NROOTOBJ = -1
NROOTGEN = -1
NPAGESOBJ = -1
NPAGESGEN = -1
CCURSORNAME = "__x_tags"
CPAGESCURSORNAME = "__x_pages"
**
PROCEDURE Destroy
USE IN SELECT(THIS.CCURSORNAME)
USE IN SELECT(THIS.CPAGESCURSORNAME)
ENDPROC
**
FUNCTION seekObject
LPARAMETERS TNOBJ, TNGEN
THIS.CBUFFER = ""
SELECT (THIS.CCURSORNAME)
IF SEEK(M.TNOBJ, THIS.CCURSORNAME, "obj")
DO WHILE M.TNOBJ=OBJ .AND. M.TNGEN<>GENERATION
SKIP
ENDDO
IF M.TNOBJ=OBJ .AND. M.TNGEN=GENERATION
FSEEK(THIS.HANDLE, OFFSET)
RETURN .T.
ELSE
RETURN .F.
ENDIF
ELSE
RETURN .F.
ENDIF
ENDFUNC
**
FUNCTION openDocument
LPARAMETERS TCNAME
THIS.HANDLE = FOPEN(M.TCNAME)
THIS.PREPARECURSORS()
RETURN THIS.HANDLE
ENDFUNC
**
PROCEDURE prepareCursors
THIS.CCURSORNAME = "c"+SUBSTR(SYS(2015), 4, 7)
LOCAL LCNAME
LCNAME = THIS.CCURSORNAME
CREATE CURSOR (LCNAME) (OBJ I, OFFSET I, GENERATION I)
INDEX ON OBJ TAG OBJ ADDITIVE
THIS.CPAGESCURSORNAME = "p"+SUBSTR(SYS(2015), 4, 7)
LCNAME = THIS.CPAGESCURSORNAME
CREATE CURSOR (LCNAME) (OBJ I, GENERATION I)
ENDPROC
**
PROCEDURE closeDocument
FCLOSE(THIS.HANDLE)
ENDPROC
**
FUNCTION getNextWord
LOCAL LNSPACE, LNTAB, LNCR, LNLF, LNMIN, LCWORD, LNB, LNB2, LNSLASH
IF EMPTY(THIS.CBUFFER)
THIS.GETMOREDATA()
ENDIF
LNSPACE = AT(" ", THIS.CBUFFER)
LNTAB = AT(CHR(9), THIS.CBUFFER)
LNCR = AT(CHR(13), THIS.CBUFFER)
LNLF = AT(CHR(10), THIS.CBUFFER)
LNB = AT("[", THIS.CBUFFER)
LNB2 = AT("]", THIS.CBUFFER)
LNSLASH = AT("/", SUBSTR(THIS.CBUFFER, 2))
IF M.LNSPACE=0
LNSPACE = 9999999
ENDIF
IF M.LNTAB=0
LNTAB = 9999999
ENDIF
IF M.LNCR=0
LNCR = 9999999
ENDIF
IF M.LNLF=0
LNLF = 9999999
ENDIF
IF M.LNB=0
LNB = 9999999
ENDIF
IF M.LNB2=0
LNB2 = 9999999
ELSE
IF M.LNB2>1
M.LNB2 = M.LNB2-1
ENDIF
ENDIF
IF M.LNSLASH=0
LNSLASH = 9999999
ENDIF
LNMIN = MIN(M.LNSPACE, M.LNTAB, M.LNCR, M.LNLF, M.LNB, M.LNB2, M.LNSLASH)
LCWORD = LEFT(THIS.CBUFFER, M.LNMIN)
THIS.CBUFFER = SUBSTR(THIS.CBUFFER, M.LNMIN+1)
RETURN M.LCWORD
ENDFUNC
**
PROCEDURE getMoreData
THIS.CBUFFER = ALLTRIM(FGETS(THIS.HANDLE, 2000))
DO WHILE LEFT(THIS.CBUFFER, 1)="%"
THIS.CBUFFER = ALLTRIM(FGETS(THIS.HANDLE, 2000))
ENDDO
THIS.NBUFFERPOS = 1
THIS.NBUFFERLEN = LEN(THIS.CBUFFER)
ENDPROC
**
FUNCTION readTrailer
LOCAL LNCURRENT, LCWORD, LNCOUNT
LNCOUNT = 0
LNCURRENT = FSEEK(THIS.HANDLE, -10, 2)
LCSTR = LOWER(ALLTRIM(FGETS(THIS.HANDLE)))
DO WHILE M.LCSTR<>"trailer"
LNCOUNT = M.LNCOUNT+1
IF LNCOUNT=200
RETURN .F.
ENDIF
LNCURRENT = FSEEK(THIS.HANDLE, M.LNCURRENT-6)
LCSTR = LOWER(ALLTRIM(FGETS(THIS.HANDLE)))
LCSTR = LOWER(ALLTRIM(FGETS(THIS.HANDLE)))
ENDDO
LNCOUNT = 0
DO WHILE .T.
LNCOUNT = M.LNCOUNT+1
IF FEOF(THIS.HANDLE)
RETURN .F.
ENDIF
IF LNCOUNT=500
RETURN .F.
ENDIF
LCWORD = LOWER(THIS.GETNEXTWORD())
DO CASE
CASE M.LCWORD="<<"
LOOP
CASE M.LCWORD=">>"
EXIT
CASE M.LCWORD="/size"
THIS.NOBJECTCOUNT = VAL(THIS.GETNEXTWORD())
CASE M.LCWORD="/root"
THIS.NROOTOBJ = VAL(THIS.GETNEXTWORD())
THIS.NROOTGEN = VAL(THIS.GETNEXTWORD())
THIS.GETNEXTWORD()
ENDCASE
ENDDO
ENDFUNC
**
FUNCTION readCatalog
LOCAL LCWORD
DO WHILE .T.
IF FEOF(THIS.HANDLE)
RETURN .F.
ENDIF
LCWORD = LOWER(THIS.GETNEXTWORD())
DO CASE
CASE M.LCWORD="<<"
LOOP
CASE M.LCWORD=">>"
EXIT
CASE M.LCWORD="/pages"
THIS.NPAGESOBJ = VAL(THIS.GETNEXTWORD())
THIS.NPAGESGEN = VAL(THIS.GETNEXTWORD())
EXIT
ENDCASE
ENDDO
ENDFUNC
**
FUNCTION readPages
LOCAL LCWORD
DO WHILE .T.
IF FEOF(THIS.HANDLE)
RETURN .F.
ENDIF
LCWORD = LOWER(THIS.GETNEXTWORD())
DO CASE
CASE M.LCWORD="<<"
LOOP
CASE M.LCWORD=">>"
EXIT
CASE M.LCWORD="/kids"
THIS.READKIDSARRAY()
EXIT
ENDCASE
ENDDO
ENDFUNC
**
FUNCTION readKidsArray
LOCAL LCWORD, LCNAME
LCNAME = THIS.CPAGESCURSORNAME
DO WHILE .T.
IF FEOF(THIS.HANDLE)
RETURN .F.
ENDIF
LCWORD = LOWER(THIS.GETNEXTWORD())
DO CASE
CASE M.LCWORD="["
LOOP
CASE M.LCWORD="]"
EXIT
CASE EMPTY(M.LCWORD)
OTHERWISE
INSERT INTO (M.LCNAME) VALUES (VAL(M.LCWORD), VAL(THIS.GETNEXTWORD()))
THIS.GETNEXTWORD()
ENDCASE
ENDDO
ENDFUNC
**
FUNCTION getXRefOffset
LOCAL LCEND, LNAT, LNOFFSET, LNRETVAL
FSEEK(THIS.HANDLE, -60, 2)
THIS.CBUFFER = FREAD(THIS.HANDLE, 60)
LNAT = ATC("startxref", THIS.CBUFFER)
IF M.LNAT=0
RETURN -1
ELSE
THIS.CBUFFER = SUBSTR(THIS.CBUFFER, LNAT+10)
THIS.CBUFFER = CHRTRAN(THIS.CBUFFER, CHR(9)+CHR(10)+CHR(13), "   ")
THIS.CBUFFER = ALLTRIM(THIS.CBUFFER)
LNRETVAL = VAL(THIS.GETNEXTWORD())
THIS.CBUFFER = ""
RETURN M.LNRETVAL
ENDIF
ENDFUNC
**
FUNCTION readXRef
LPARAMETERS TNOFFSET
LOCAL LCBUFFER, LCWORD, LNFROM, LNCOUNT, LCNAME
LCNAME = THIS.CCURSORNAME
FSEEK(THIS.HANDLE, TNOFFSET)
THIS.CBUFFER = ""
LCBUFFER = ""
LNFROM = -1
LNCOUNT = -1
DO WHILE .T.
IF FEOF(THIS.HANDLE)
RETURN .F.
ENDIF
IF EMPTY(M.LCBUFFER)
LCWORD = THIS.GETNEXTWORD()
ELSE
LCWORD = M.LCBUFFER
LCBUFFER = ""
ENDIF
DO CASE
CASE M.LCWORD="xref"
LOOP
CASE M.LCWORD="trailer"
EXIT
OTHERWISE
LNVALUE = VAL(M.LCWORD)
LNNEXTVALUE = VAL(THIS.GETNEXTWORD())
LCALPHA = LOWER(THIS.GETNEXTWORD())
DO CASE
CASE M.LCALPHA="n" .OR. M.LCALPHA="f"
IF M.LNFROM=-1
RETURN .F.
ELSE
INSERT INTO (LCNAME) VALUES (M.LNFROM, M.LNVALUE, M.LNNEXTVALUE)
ENDIF
LNFROM = M.LNFROM+1
OTHERWISE
LNFROM = M.LNVALUE
LNCOUNT = M.LNNEXTVALUE
LCBUFFER = M.LCALPHA
ENDCASE
ENDCASE
ENDDO
ENDFUNC
**
ENDDEFINE
**
FUNCTION inc
LPARAMETERS TNNO
TNNO = TNNO+1
RETURN TNNO
ENDFUNC
**
FUNCTION _x_ww
LPARAMETERS TCOUTPUT, TCFONT, TNFONTSIZE, TNITALICS, TNBOLD, TNWIDTH, TCRET, TNALIGN, TNCODEPAGE
IF EMPTY(TNCODEPAGE)
TNCODEPAGE = 0
ENDIF
IF VARTYPE(_XFRX_WORDWRAPALGORITHM)=="N" .AND. _XFRX_WORDWRAPALGORITHM=2
RETURN X_WW_GDIPLUS(TCOUTPUT, TCFONT, TNFONTSIZE, TNITALICS, TNBOLD, TNWIDTH*96/1000, @TCRET, TNALIGN, TNCODEPAGE)
ELSE
RETURN X_WW(TCOUTPUT, TCFONT, TNFONTSIZE, TNITALICS, TNBOLD, TNWIDTH+(25.0/9), @TCRET, TNALIGN, TNCODEPAGE)
ENDIF
ENDFUNC
**
FUNCTION getWord
LPARAMETERS TCSTRING
IF EMPTY(TCSTRING)
RETURN ""
ELSE
TCSTRING = ALLTRIM(TCSTRING)
ENDIF
LOCAL LNSPACE, LNTAB, LNCR, LNLF, LNMIN, LCWORD
LNSPACE = AT(" ", TCSTRING)
LNTAB = AT(CHR(9), TCSTRING)
LNCR = AT(CHR(13), TCSTRING)
LNLF = AT(CHR(10), TCSTRING)
IF LNSPACE=0
LNSPACE = 9999999
ENDIF
IF LNTAB=0
LNTAB = 9999999
ENDIF
IF LNCR=0
LNCR = 9999999
ENDIF
IF LNLF=0
LNLF = 9999999
ENDIF
LNMIN = MIN(M.LNSPACE, M.LNTAB, M.LNCR, M.LNLF)
RETURN ALLTRIM(LEFT(TCSTRING, M.LNMIN))
ENDFUNC
**
DEFINE CLASS bbox AS Custom
NLEFT = 0
NTOP = 0
NWIDTH = 0
NHEIGHT = 0
ENDDEFINE
**
DEFINE CLASS xfrxlistener AS UtilityReportListener
DEFAULTPICTUREFORMAT = "jpg"
PICTUREDPI = 0
CHECKXFRXLIBVERSION = .T.
FRXDATASESSION = -1
OXFDOCUMENT = "null"
NREPORTNUMBER = 1
DONOTOPENVIEWER = .F.
NEWVIEWERSESSION = .F.
HIDDEN ICAUTHOR
ICAUTHOR = ("")
HIDDEN ICTITLE
ICTITLE = ("")
HIDDEN ICSUBJECT
ICSUBJECT = ("")
HIDDEN ICKEYWORDS
ICKEYWORDS = ("")
HIDDEN ICCREATOR
ICCREATOR = ("")
HIDDEN ICPRODUCER
ICPRODUCER = ("")
HIDDEN ICCOMMENTS
ICCOMMENTS = ("")
HIDDEN ICCATEGORY
ICCATEGORY = ("")
HIDDEN ICMANAGER
ICMANAGER = ("")
HIDDEN ICCOMPANY
ICCOMPANY = ("")
HIDDEN ICARCHIVENAME
ICARCHIVENAME = .F.
HIDDEN ILADDTOARCHIVE
ILADDTOARCHIVE = .F.
HIDDEN ILDELETESOURCEDOCUMENT
ILDELETESOURCEDOCUMENT = .F.
HIDDEN ILPRINTDOCUMENT
ILPRINTDOCUMENT = .F.
HIDDEN ILMODIFYDOCUMENT
ILMODIFYDOCUMENT = .F.
HIDDEN ILCOPYTEXTANDGRAPHICS
ILCOPYTEXTANDGRAPHICS = .F.
HIDDEN ILADDORMODIFYANNOTATIONS
ILADDORMODIFYANNOTATIONS = .F.
HIDDEN ICREADPASSWORD
ICREADPASSWORD = .F.
HIDDEN ICWRITEPASSWORD
ICWRITEPASSWORD = .F.
HIDDEN ILREQUIREPASSWORD
ILREQUIREPASSWORD = .F.
XFRXPREVIEWER = .F.
OXFSESSION = .F.
CODEPAGE = .F.
NCODEPAGE = 0
NUDPAPERWIDTH = .F.
NUDPAPERHEIGHT = .F.
NSHRINKHEIGHT = .F.
NAME = "xfrxlistener"
LSKIPONEHEADER = .F.
TARGETTYPE = .F.
EMBTYPE = 1
UVALUE = .F.
NPREVIOUSBAND = 0
APPENDTOFILE = .F.
DIMENSION AVALUES(1)
OOTHERPARAMS = .NULL.
CLOGFILE = ""
NLASTERROR = 0
OSCRIPTS = .NULL.
REALPAGEWIDTH = .F.
REALPAGEHEIGHT = .F.
LAFTERLOAD = .F.
LSKIPPINGTHISPAGE = .F.
CURRENTBAND = -1
UNFINISHEDBAND = -1
NDEFAULTDATASESSION = 1
LSILENT = .F.
**
PROCEDURE Error
LPARAMETERS TCCODE, TCMETH, TCLINE
DO CASE
CASE TCCODE=1426
CASE TCCODE=1429
CASE TCCODE=1162 .AND. INLIST(UPPER(TCMETH), "OPENCURSORS", "CLOSECURSORS")
OTHERWISE
LOCAL _XFERROR(1)
THIS.ADDTOLOG("###ERROR:"+TRANSFORM(TCCODE, "")+" in "+ALLTRIM(TCMETH)+" @ "+TRANSFORM(TCLINE, ""))
= AERROR(_XFERROR)
THIS.ADDTOLOG("         "+TRANSFORM(_XFERROR(2), ""))
ENDCASE
THIS.NLASTERROR = TCCODE
ENDPROC
**
FUNCTION ErrorMessage
LPARAMETERS TNERRORNUMBER
DO CASE
CASE TNERRORNUMBER=0
RETURN "OK"
CASE TNERRORNUMBER=-1
RETURN "Cannot load Word or Excel application"
CASE TNERRORNUMBER=-2
RETURN "The Word or Excel application version must be 2000 or higher"
CASE TNERRORNUMBER=-3
RETURN "Cannot create or open the output file"
CASE TNERRORNUMBER=-4
RETURN "Unknown output target"
CASE TNERRORNUMBER=-5
RETURN "Hndlib.dll cannot be loaded (it is missing or an old version is used)"
CASE TNERRORNUMBER=-6
RETURN "Xfrxlib.fll cannot be loaded (it is missing or invalid)"
CASE TNERRORNUMBER=-7
RETURN "Zlib.dll cannot be loaded"
CASE TNERRORNUMBER=-8
RETURN "An old version of xfrxlib.fll is used"
CASE TNERRORNUMBER=-10
RETURN "The existing document is either corrupted or in an unsupported format"
OTHERWISE
RETURN "Unknown error"
ENDCASE
ENDFUNC
**
PROCEDURE registerScript
LPARAMETERS TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE
THIS.OSCRIPTS.ADD(TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE)
ENDPROC
**
PROCEDURE unregisterAllScripts
THIS.OSCRIPTS.REMOVEALL()
ENDPROC
**
FUNCTION getVersion
RETURN "12.6.0001"+" License granted to: demo version"
ENDFUNC
**
PROCEDURE addToLog
LPARAMETERS TCSTR
IF  .NOT. EMPTY(THIS.CLOGFILE)
ADDTOLOG(TCSTR, THIS.CLOGFILE)
ENDIF
ENDPROC
**
PROCEDURE initLog
THIS.SETLOGFILE("_XFRX.log")
ENDPROC
**
PROCEDURE setLogFile
LPARAMETERS TCLOGFILE
THIS.CLOGFILE = TCLOGFILE
THIS.ADDTOLOG(REPLICATE("=", 60))
THIS.ADDTOLOG("Log initialized: "+TTOC(DATETIME()))
THIS.ADDTOLOG("XFRX version:"+THIS.GETVERSION())
ENDPROC
**
PROCEDURE registerScript
LPARAMETERS TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE
THIS.OSCRIPTS.ADD(TOSCRIPTOBJECT, TCSCRIPTMETHOD, TNZORDER, TCPAGESCOPE, TNNUMBERINGTYPE)
ENDPROC
**
PROCEDURE unregisterAllScripts
THIS.OSCRIPTS.REMOVEALL()
ENDPROC
**
PROCEDURE Error
LPARAMETERS TCCODE, TCMETH, TCLINE
DO CASE
CASE TCCODE=1426
CASE TCCODE=1429
CASE TCCODE=1162 .AND. INLIST(UPPER(TCMETH), "OPENCURSORS", "CLOSECURSORS")
OTHERWISE
LOCAL _XFERROR(1)
THIS.ADDTOLOG("###ERROR:"+TRANSFORM(TCCODE, "")+" in "+ALLTRIM(TCMETH)+" @ "+TRANSFORM(TCLINE, ""))
= AERROR(_XFERROR)
THIS.ADDTOLOG("         "+TRANSFORM(_XFERROR(2), ""))
ENDCASE
THIS.NLASTERROR = TCCODE
ENDPROC
**
PROCEDURE setOtherParams
LPARAMETERS TUPAR1, TUPAR2, TUPAR3, TUPAR4, TUPAR5, TUPAR6, TUPAR7, TUPAR8, TUPAR9, TUPAR10
IF ISNULL(THIS.OOTHERPARAMS)
THIS.OOTHERPARAMS = CREATEOBJECT("collection")
ENDIF
LOCAL LOPARAMS
LOPARAMS = CREATEOBJECT("empty")
ADDPROPERTY(LOPARAMS, "par1", TUPAR1)
ADDPROPERTY(LOPARAMS, "par2", TUPAR2)
ADDPROPERTY(LOPARAMS, "par3", TUPAR3)
ADDPROPERTY(LOPARAMS, "par4", TUPAR4)
ADDPROPERTY(LOPARAMS, "par5", TUPAR5)
ADDPROPERTY(LOPARAMS, "par6", TUPAR6)
ADDPROPERTY(LOPARAMS, "par7", TUPAR7)
ADDPROPERTY(LOPARAMS, "par8", TUPAR8)
ADDPROPERTY(LOPARAMS, "par9", TUPAR9)
ADDPROPERTY(LOPARAMS, "par10", TUPAR10)
THIS.OOTHERPARAMS.ADD(LOPARAMS)
ENDPROC
**
PROCEDURE setEmbeddingType
LPARAMETERS TNEMBEDDINGTYPE
IF TYPE("tnEmbeddingType")="N"
THIS.EMBTYPE = TNEMBEDDINGTYPE
ENDIF
ENDPROC
**
PROCEDURE drawrectangle
**
** ReFox - este procedimiento es vacío **
**
ENDPROC
**
PROCEDURE setauthor
LPARAMETERS TCAUTHOR
THIS.ICAUTHOR = TCAUTHOR
ENDPROC
**
PROCEDURE settitle
LPARAMETERS TCVALUE
THIS.ICTITLE = TCVALUE
ENDPROC
**
PROCEDURE setsubject
LPARAMETERS TCVALUE
THIS.ICSUBJECT = TCVALUE
ENDPROC
**
PROCEDURE setkeywords
LPARAMETERS TCVALUE
THIS.ICKEYWORDS = TCVALUE
ENDPROC
**
PROCEDURE setcreator
LPARAMETERS TCVALUE
THIS.ICCREATOR = TCVALUE
ENDPROC
**
PROCEDURE setproducer
LPARAMETERS TCVALUE
THIS.ICPRODUCER = TCVALUE
ENDPROC
**
PROCEDURE setcomments
LPARAMETERS TCVALUE
THIS.ICCOMMENTS = TCVALUE
ENDPROC
**
PROCEDURE setcategory
LPARAMETERS TCCATEGORY
THIS.ICCATEGORY = TCCATEGORY
ENDPROC
**
PROCEDURE setmanager
LPARAMETERS TCVALUE
THIS.ICMANAGER = TCVALUE
ENDPROC
**
PROCEDURE setcompany
LPARAMETERS TCVALUE
THIS.ICCOMPANY = TCVALUE
ENDPROC
**
FUNCTION setparams
LPARAMETERS TCOUTPUTNAME, TCDIRECTORY, TLNOTOPENWORD, TCCODEPAGE, TLSILENT, TLNEWSESSION, TCTARGET, TCARCHIVE, TLADDITIVE, TLDELETEFILEAFTER, TLAPPENDTOFILE, TNMODE
IF VARTYPE(_XFRX_WORDWRAPALGORITHM)<>"N"
PUBLIC _XFRX_WORDWRAPALGORITHM
_XFRX_WORDWRAPALGORITHM = 2
ENDIF
IF PARAMETERS()=0 .AND. VARTYPE(THIS.OXFSESSION)="O" .AND.  .NOT. ISNULL(THIS.OXFSESSION)
RETURN 0
ENDIF
THIS.OXFSESSION = EVALUATE('xfrx("XFRX#INIT")')
IF  .NOT. EMPTY(TLAPPENDTOFILE)
THIS.APPENDTOFILE = TLAPPENDTOFILE
ENDIF
IF  .NOT. EMPTY(TCOUTPUTNAME)
THIS.TARGETFILENAME = TCOUTPUTNAME
ENDIF
IF  .NOT. EMPTY(TLNOTOPENWORD)
THIS.DONOTOPENVIEWER = TLNOTOPENWORD
ENDIF
IF  .NOT. EMPTY(TCCODEPAGE)
THIS.CODEPAGE = TCCODEPAGE
DO CASE
CASE TYPE("tcCodePage")="N"
THIS.NCODEPAGE = TCCODEPAGE
CASE TYPE("tcCodePage")="C"
THIS.NCODEPAGE = VAL(TCCODEPAGE)
OTHERWISE
THIS.NCODEPAGE = 0
ENDCASE
ENDIF
IF  .NOT. EMPTY(TLSILENT)
THIS.QUIETMODE = TLSILENT
ENDIF
IF  .NOT. EMPTY(TLNEWSESSION)
THIS.NEWVIEWERSESSION = TLNEWSESSION
ENDIF
IF  .NOT. EMPTY(TCTARGET)
THIS.TARGETTYPE = TCTARGET
ENDIF
IF  .NOT. EMPTY(TCARCHIVE)
THIS.ICARCHIVENAME = TCARCHIVE
ENDIF
IF  .NOT. EMPTY(TLADDITIVE)
THIS.ILADDTOARCHIVE = TLADDITIVE
ENDIF
IF  .NOT. EMPTY(TLDELETEFILEAFTER)
THIS.ILDELETESOURCEDOCUMENT = TLDELETEFILEAFTER
ENDIF
IF EMPTY(THIS.TARGETTYPE)
THIS.TARGETTYPE = "DOC"
ENDIF
IF  .NOT. EMPTY(THIS.CLOGFILE)
THIS.OXFSESSION.INITLOG(.T.)
ENDIF
IF EMPTY(TCDIRECTORY)
TCDIRECTORY = SYS(2023)
ENDIF
THIS.OXFSESSION.VFP8MODE = .F.
THIS.OXFSESSION.CHECKXFRXLIBVERSION = THIS.CHECKXFRXLIBVERSION
RETURN THIS.OXFSESSION.SETPARAMS(THIS.TARGETFILENAME, TCDIRECTORY, THIS.DONOTOPENVIEWER, THIS.CODEPAGE, THIS.QUIETMODE .OR. THIS.LSILENT, THIS.NEWVIEWERSESSION, THIS.TARGETTYPE, THIS.ICARCHIVENAME, THIS.ILADDTOARCHIVE, THIS.ILDELETESOURCEDOCUMENT, THIS.APPENDTOFILE)
ENDFUNC
**
FUNCTION testbeforerun
RETURN 0
ENDFUNC
**
PROCEDURE zipdocument
LPARAMETERS ARCHIVENAME, ADDTOARCHIVE, DELETESOURCEDOCUMENT
THIS.ICARCHIVENAME = ARCHIVENAME
THIS.ILADDTOARCHIVE = ADDTOARCHIVE
THIS.ILDELETESOURCEDOCUMENT = DELETESOURCEDOCUMENT
ENDPROC
**
PROCEDURE setpermissions
LPARAMETERS TLPRINTDOCUMENT, TLMODIFYDOCUMENT, TLCOPYTEXTANDGRAPHICS, TLADDORMODIFYANNOTATIONS
THIS.ILPRINTDOCUMENT = TLPRINTDOCUMENT
THIS.ILMODIFYDOCUMENT = TLMODIFYDOCUMENT
THIS.ILCOPYTEXTANDGRAPHICS = TLCOPYTEXTANDGRAPHICS
THIS.ILADDORMODIFYANNOTATIONS = TLADDORMODIFYANNOTATIONS
ENDPROC
**
PROCEDURE setpasswords
LPARAMETERS TCREADPASSWORD, TCWRITEPASSWORD, TLREQUIREPASSWORD
THIS.ICREADPASSWORD = TCREADPASSWORD
THIS.ICWRITEPASSWORD = TCWRITEPASSWORD
THIS.ILREQUIREPASSWORD = TLREQUIREPASSWORD
ENDPROC
**
FUNCTION transformreport
LPARAMETERS TODOCUMENT
THIS.OXFSESSION.CHECKXFRXLIBVERSION = THIS.CHECKXFRXLIBVERSION
THIS.OXFSESSION.DYNAMICLINEHEIGHT = THIS.DYNAMICLINEHEIGHT
LOCAL LNRETVAL
LNRETVAL = THIS.SETPARAMS()
IF LNRETVAL=0
IF  .NOT. EMPTY(THIS.ICREADPASSWORD) .OR.  .NOT. EMPTY(THIS.ICWRITEPASSWORD)
THIS.OXFSESSION.SETPASSWORDS(THIS.ICREADPASSWORD, THIS.ICWRITEPASSWORD, THIS.ILREQUIREPASSWORD)
ENDIF
THIS.OXFSESSION.SETEMBEDDINGTYPE(THIS.EMBTYPE)
THIS.OXFSESSION.SETPERMISSIONS(THIS.ILPRINTDOCUMENT, THIS.ILMODIFYDOCUMENT, THIS.ILCOPYTEXTANDGRAPHICS, THIS.ILADDORMODIFYANNOTATIONS)
THIS.OXFSESSION.SETAUTHOR(THIS.ICAUTHOR)
THIS.OXFSESSION.SETTITLE(THIS.ICTITLE)
THIS.OXFSESSION.SETSUBJECT(THIS.ICSUBJECT)
THIS.OXFSESSION.SETKEYWORDS(THIS.ICKEYWORDS)
THIS.OXFSESSION.SETCREATOR(THIS.ICCREATOR)
THIS.OXFSESSION.SETPRODUCER(THIS.ICPRODUCER)
THIS.OXFSESSION.SETCOMMENTS(THIS.ICCOMMENTS)
THIS.OXFSESSION.SETCATEGORY(THIS.ICCATEGORY)
THIS.OXFSESSION.SETMANAGER(THIS.ICMANAGER)
THIS.OXFSESSION.SETCOMPANY(THIS.ICCOMPANY)
THIS.OXFSESSION.SHRINKHEIGHT(0)
LOCAL LNI
IF  .NOT. ISNULL(THIS.OOTHERPARAMS)
FOR LNI = 1 TO THIS.OOTHERPARAMS.COUNT
THIS.OXFSESSION.SETOTHERPARAMS(THIS.OOTHERPARAMS.ITEM(M.LNI).PAR1, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR2, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR3, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR4, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR5, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR6, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR7, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR8, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR9, THIS.OOTHERPARAMS.ITEM(M.LNI).PAR10)
ENDFOR
ENDIF
TODOCUMENT.INDEX()
THIS.OXFSESSION.TRANSFORMREPORT(TODOCUMENT)
THIS.OXFSESSION = .NULL.
ELSE
THIS.OXFSESSION = .NULL.
RETURN LNRETVAL
ENDIF
ENDFUNC
**
FUNCTION previewreport
LPARAMETERS TOXFF
LOCAL LOSESSION
IF VARTYPE(THIS.XFRXPREVIEWER)="O" .AND.  .NOT. ISNULL(THIS.XFRXPREVIEWER)
LOSESSION = EVALUATE('xfrx("XFRX#INIT")')
LOSESSION.CHECKXFRXLIBVERSION = THIS.CHECKXFRXLIBVERSION
LOSESSION.VFP8MODE = .F.
LOSESSION.SETPARAMS( , SYS(2023),  ,  ,  ,  , "CNT")
LOSESSION.SETOTHERPARAMS(THIS.XFRXPREVIEWER)
LOSESSION.TRANSFORMREPORT(TOXFF)
ELSE
RETURN .F.
ENDIF
ENDFUNC
**
PROCEDURE finalize
IF ISNULL(THIS.OXFDOCUMENT)
RETURN
ENDIF
IF UPPER(THIS.TARGETTYPE)="XFF"
IF  .NOT. EMPTY(THIS.TARGETFILENAME)
THIS.OXFDOCUMENT.COPYXFF(THIS.TARGETFILENAME)
USE (THIS.TARGETFILENAME) ALIAS (THIS.OXFDOCUMENT.CXFFALIAS)
ENDIF
ELSE
THIS.TRANSFORMREPORT(THIS.OXFDOCUMENT)
THIS.OXFDOCUMENT = .NULL.
ENDIF
ENDPROC
**
PROCEDURE setpapersize
LPARAMETERS TNUDPAPERWIDTH, TNUDPAPERHEIGHT
THIS.NUDPAPERWIDTH = TNUDPAPERWIDTH
THIS.NUDPAPERHEIGHT = TNUDPAPERHEIGHT
ENDPROC
**
PROCEDURE shrinkheight
LPARAMETERS TNSHRINKHEIGHT
THIS.NSHRINKHEIGHT = TNSHRINKHEIGHT
ENDPROC
**
PROCEDURE Init
PUBLIC __XFRET
__XFRET = SPACE(65000)
DECLARE INTEGER compress2 IN zlib AS cxx STRING @, STRING @, STRING @, INTEGER, INTEGER
DECLARE INTEGER TranslateCharsetInfo IN gdi32 INTEGER, STRING @, INTEGER
LOCAL LA, LB, LD
LA = "Test"
LB = SPACE(500)
LD = SPACE(500)
= CXX(@LB, @LD, @LA, LEN(LA), -1)
IF ATC("xfrxlib.fll", SET("Library"))=0
SET LIBRARY TO xfrxlib.fll ADDITIVE
ENDIF
DODEFAULT()
THIS.NSHRINKHEIGHT = .NULL.
THIS.TARGETFILENAME = ""
THIS.OSCRIPTS = CREATEOBJECT("PDFLScripts")
ENDPROC
**
PROCEDURE EvaluateContents
LPARAMETERS NFRXRECNO, OOBJPROPERTIES
DODEFAULT(NFRXRECNO, OOBJPROPERTIES)
IF _XF_GETBUILDVERSION()>2107
THIS.AVALUES[NFRXRECNO] = OOBJPROPERTIES
ENDIF
ENDPROC
**
PROCEDURE AdjustObjectSize
LPARAMETERS NFRXRECNO, OOBJPROPERTIES
DODEFAULT(NFRXRECNO, OOBJPROPERTIES)
THIS.AVALUES[NFRXRECNO] = OOBJPROPERTIES
ENDPROC
**
PROCEDURE Render
LPARAMETERS NFRXRECNO, NLEFT, NTOP, NWIDTH, NHEIGHT, NOBJECTCONTINUATIONTYPE, CCONTENTSTOBERENDERED, GDIPLUSIMAGE
DODEFAULT(NFRXRECNO, NLEFT, NTOP, NWIDTH, NHEIGHT, NOBJECTCONTINUATIONTYPE, CCONTENTSTOBERENDERED, GDIPLUSIMAGE)
IF  .NOT. THIS.INVOKEONCURRENTPASS()
RETURN
ENDIF
IF THIS.LSKIPPINGTHISPAGE
RETURN
ENDIF
THIS.SETFRXDATASESSION()
IF THIS.CURRENTBAND=-1 .AND. THIS.UNFINISHEDBAND>-1
GOTO (THIS.UNFINISHEDBAND) IN FRX
THIS.OXFDOCUMENT.EU_BEFORESECTION(FRX.OBJCODE, FRX.HEIGHT)
ENDIF
GOTO (M.NFRXRECNO) IN STYLES
LOCAL LOSTYLE
SELECT STYLES
SCATTER MEMO NAME LOSTYLE
IF TYPE("this.MemberDataAlias")="C" .AND. USED(THIS.MEMBERDATAALIAS)
SELECT (THIS.MEMBERDATAALIAS)
LOCAL LIFRXRECNO
M.LIFRXRECNO = THIS.GETFRXRECNO("RENDER", NFRXRECNO, NLEFT)
LOCATE FOR FRXRECNO=M.LIFRXRECNO .AND. TYPE="R" .AND. NAME=="Microsoft.VFP.Reporting.Builder.Rotate" .AND.  .NOT. EMPTY(EXECUTE)
IF FOUND() .AND.  .NOT. EMPTY(INT(VAL(EXECUTE)))
LOSTYLE.USER = LOSTYLE.USER+CHR(13)+"#UR ROTATE "+ALLTRIM(STR(-INT(VAL(EXECUTE))))
ENDIF
ENDIF
SELECT FRX
THIS.SETCURRENTDATASESSION()
IF LOSTYLE.OFFSET=1 .AND. LOSTYLE.OBJTYPE=17
LCNAME = LOSTYLE.NAME
*B609136,1 MMT 02/03/2010 Fix bug of not exporting barcode to PDF[Start]
IF LOSTYLE.OBJTYPE <> 17
*B609136,1 MMT 02/03/2010 Fix bug of not exporting barcode to PDF[ENd]
IF EMPTY(&LCNAME)
RETURN
ENDIF
*B609136,1 MMT 02/03/2010 Fix bug of not exporting barcode to PDF[Start]
ENDIF
*B609136,1 MMT 02/03/2010 Fix bug of not exporting barcode to PDF[ENd]
ENDIF
LOCAL LCSAFETY, LOPROPERTIES, LUVALUE
LCSAFETY = SET("Safety")
SET SAFETY OFF
LOSTYLE.USER = LOSTYLE.COMMENT+CHR(13)+LOSTYLE.USER
LOPROPERTIES = THIS.AVALUES(NFRXRECNO)
IF VARTYPE(LOPROPERTIES)="O" .AND.  .NOT. ISNULL(LOPROPERTIES)
IF LOSTYLE.OBJTYPE=7 .OR. LOSTYLE.OBJTYPE=17
IF LOPROPERTIES.RELOAD
NWIDTH = LOPROPERTIES.WIDTH
NHEIGHT = LOPROPERTIES.HEIGHT
ENDIF
ELSE
LUVALUE = LOPROPERTIES.VALUE
IF LOPROPERTIES.RELOAD
CCONTENTSTOBERENDERED = STRCONV(STRCONV(LOPROPERTIES.TEXT, 1), 5)
LOSTYLE.FONTFACE = LOPROPERTIES.FONTNAME
LOSTYLE.FONTSTYLE = LOPROPERTIES.FONTSTYLE
LOSTYLE.FONTBOLD = BITTEST(LOPROPERTIES.FONTSTYLE, 0)
LOSTYLE.FONTITALIC = BITTEST(LOPROPERTIES.FONTSTYLE, 1)
LOSTYLE.FONTUNDERLINE = BITTEST(LOPROPERTIES.FONTSTYLE, 2)
LOSTYLE.FONTSTRIKETHROUGH = BITTEST(LOPROPERTIES.FONTSTYLE, 7)
IF LOPROPERTIES.FILLALPHA=255
LOSTYLE.MODE = 0
ELSE
LOSTYLE.MODE = 1
ENDIF
LOSTYLE.FONTSIZE = LOPROPERTIES.FONTSIZE
LOSTYLE.FILLRED = LOPROPERTIES.FILLRED
LOSTYLE.FILLGREEN = LOPROPERTIES.FILLGREEN
LOSTYLE.FILLBLUE = LOPROPERTIES.FILLBLUE
LOSTYLE.PENRED = LOPROPERTIES.PENRED
LOSTYLE.PENGREEN = LOPROPERTIES.PENGREEN
LOSTYLE.PENBLUE = LOPROPERTIES.PENBLUE
ENDIF
ENDIF
ENDIF
THIS.OXFDOCUMENT.EU_RENDER(M.NFRXRECNO, M.NLEFT, M.NTOP, M.NWIDTH, M.NHEIGHT, M.NOBJECTCONTINUATIONTYPE, M.CCONTENTSTOBERENDERED, M.GDIPLUSIMAGE, THIS, M.LOSTYLE, M.LUVALUE, THIS.NCODEPAGE)
SET SAFETY &LCSAFETY
ENDPROC
**
PROCEDURE CancelReport
LPARAMETERS TLHARDCANCEL
DODEFAULT()
IF  .NOT. TLHARDCANCEL
RETURN
ENDIF
IF VARTYPE(THIS.OXFDOCUMENT)="O" .AND.  .NOT. ISNULL(THIS.OXFDOCUMENT)
THIS.OXFDOCUMENT.OSCRIPTS = .NULL.
THIS.OXFDOCUMENT.OXFRXSESSION = .NULL.
ENDIF
THIS.OXFDOCUMENT = .NULL.
THIS.OXFSESSION = .NULL.
ENDPROC
**
PROCEDURE Destroy
IF VARTYPE(THIS.OXFDOCUMENT)="O" .AND.  .NOT. ISNULL(THIS.OXFDOCUMENT)
THIS.OXFDOCUMENT.OXFRXSESSION = .NULL.
THIS.OXFDOCUMENT.OSCRIPTS = .NULL.
ENDIF
THIS.OXFDOCUMENT = .NULL.
THIS.OXFSESSION = .NULL.
THIS.OSCRIPTS = .NULL.
DODEFAULT()
ENDPROC
**
PROCEDURE BeforeReport
IF VARTYPE(THIS.OXFDOCUMENT)<>"O" .OR. ISNULL(THIS.OXFDOCUMENT)
IF VARTYPE(THIS.OXFSESSION)<>"O" .OR. ISNULL(THIS.OXFSESSION)
IF EMPTY(THIS.TARGETTYPE)
THIS.TARGETTYPE = ""
ENDIF
THIS.TARGETTYPE = UPPER(THIS.TARGETTYPE)
IF UPPER(THIS.TARGETTYPE)<>"XFF"
LOCAL LNRETVAL
LNRETVAL = THIS.SETPARAMS()
IF LNRETVAL<>0
THIS.CANCELREPORT(.T.)
THIS.HADERROR = .T.
RETURN
ENDIF
ELSE
THIS.OXFSESSION = EVALUATE('xfrx("XFRX#INIT")')
ENDIF
ENDIF
SET DATASESSION TO (THIS.NDEFAULTDATASESSION)
THIS.OXFDOCUMENT = EVALUATE('xfrx("XFRX#DRAW")')
THIS.OXFDOCUMENT.OSCRIPTS = THIS.OSCRIPTS
THIS.OXFDOCUMENT.DEFAULTPICTUREFORMAT = THIS.DEFAULTPICTUREFORMAT
THIS.OXFDOCUMENT.PICTUREDPI = THIS.PICTUREDPI
THIS.NREPORTNUMBER = 1
THIS.SENDGDIPLUSIMAGE = 1
ELSE
THIS.NREPORTNUMBER = THIS.NREPORTNUMBER+1
ENDIF
THIS.OXFDOCUMENT.OXFRXSESSION = THIS.OXFSESSION
THIS.SETFRXDATASESSION()
SELECT FRX
DIMENSION THIS.AVALUES[RECCOUNT()]
THIS.AVALUES = .NULL.
LOCAL LCTEMPNAME
LCTEMPNAME = ADDBS(SYS(2023))+"S"+SUBSTR(SYS(3), 2)
COPY TO (LCTEMPNAME)
USE (LCTEMPNAME) ALIAS TEMPCURSOR IN 0
SELECT OBJCODE, OBJTYPE, RECNO() AS FRXRECNO, PLATFORM, NAME, EXPR, OFFSET, VPOS, HPOS, HEIGHT, WIDTH, STYLE, PICTURE, ORDER, COMMENT, USER, FILLCHAR, PENRED, PENGREEN, PENBLUE, FILLRED, FILLGREEN, FILLBLUE, PENSIZE, PENPAT, FILLPAT, FONTFACE, GENERAL, BITTEST(FONTSTYLE, 0) AS FONTBOLD, BITTEST(FONTSTYLE, 1) AS FONTITALIC, BITTEST(FONTSTYLE, 2) AS FONTUNDERLINE, BITTEST(FONTSTYLE, 7) AS FONTSTRIKETHROUGH, FONTSTYLE, FONTSIZE, MODE, IIF(DOUBLE, RESOID, 1) AS FONTCHARSET, UNIQUEID AS OBJID FROM tempcursor ORDER BY FRXRECNO INTO CURSOR styles
USE IN SELECT("tempcursor")
ERASE (LCTEMPNAME+".dbf")
ERASE (LCTEMPNAME+".fpt")
SELECT FRX
THIS.SETCURRENTDATASESSION()
LOCAL LCSAFETY
LCSAFETY = SET("Safety")
SET SAFETY OFF
THIS.OXFDOCUMENT.EU_BEFOREREPORT(THIS)
DODEFAULT()
SET SAFETY &LCSAFETY
THIS.CURRENTBAND = -1
THIS.UNFINISHEDBAND = -1
ENDPROC
**
PROCEDURE AfterReport
LOCAL LCSAFETY, LNSELECT
LCSAFETY = SET("Safety")
SET SAFETY OFF
THIS.OXFDOCUMENT.OXFRXSESSION = .NULL.
LNSELECT = SELECT(0)
IF  .NOT. THIS.HADERROR
THIS.OXFDOCUMENT.EU_AFTERREPORT(THIS)
IF (VARTYPE(THIS.COMMANDCLAUSES)="O" .AND. THIS.COMMANDCLAUSES.NOPAGEEJECT)
ELSE
THIS.FINALIZE()
ENDIF
ELSE
THIS.OXFDOCUMENT = .NULL.
ENDIF
SELECT (LNSELECT)
SET SAFETY &LCSAFETY
DODEFAULT()
ENDPROC
**
PROCEDURE AfterBand
LPARAMETERS NBANDOBJCODE, NFRXRECNO
DODEFAULT(NBANDOBJCODE, NFRXRECNO)
IF  .NOT. THIS.INVOKEONCURRENTPASS()
RETURN
ENDIF
THIS.CURRENTBAND = -1
ENDPROC
**
PROCEDURE BeforeBand
LPARAMETERS NBANDOBJCODE, NFRXRECNO
DODEFAULT(NBANDOBJCODE, NFRXRECNO)
IF  .NOT. THIS.INVOKEONCURRENTPASS()
RETURN
ENDIF
IF THIS.CURRENTBAND=-1
THIS.CURRENTBAND = M.NFRXRECNO
ELSE
THIS.UNFINISHEDBAND = THIS.CURRENTBAND
THIS.CURRENTBAND = M.NFRXRECNO
ENDIF
LOCAL LLNEWPAGE
DO CASE
CASE NBANDOBJCODE=0 .OR. (NBANDOBJCODE=8 .AND. THIS.NPREVIOUSBAND=7)
IF NBANDOBJCODE=0
THIS.SETFRXDATASESSION()
GOTO (NFRXRECNO) IN FRX
THIS.LSKIPONEHEADER =  .NOT. FRX.PAGEBREAK
THIS.SETCURRENTDATASESSION()
ENDIF
LLNEWPAGE = .T.
CASE NBANDOBJCODE=1
IF THIS.LSKIPONEHEADER
THIS.LSKIPONEHEADER = .F.
ELSE
IF VARTYPE(GNSTOPXFRX)="N" .AND. GNSTOPXFRX=1
THIS.CANCELREPORT()
RETURN
ENDIF
LLNEWPAGE = .T.
ENDIF
ENDCASE
IF M.LLNEWPAGE
LOCAL LNPAGENO, LNPAGEHEIGHT, LNPAGEWIDTH
IF THIS.ISSUCCESSOR
LNPAGENO = THIS.SHAREDPAGENO
LNPAGEHEIGHT = THIS.SHAREDPAGEHEIGHT
LNPAGEWIDTH = THIS.SHAREDPAGEWIDTH
ELSE
LNPAGENO = THIS.PAGENO
LNPAGEHEIGHT = THIS.GETPAGEHEIGHT()
LNPAGEWIDTH = THIS.GETPAGEWIDTH()
ENDIF
IF (M.LNPAGENO<THIS.COMMANDCLAUSES.RANGEFROM) .OR. (THIS.COMMANDCLAUSES.RANGETO>0 .AND. M.LNPAGENO>THIS.COMMANDCLAUSES.RANGETO)
THIS.LSKIPPINGTHISPAGE = .T.
ELSE
THIS.LSKIPPINGTHISPAGE = .F.
ENDIF
IF  .NOT. THIS.LSKIPPINGTHISPAGE
THIS.OXFDOCUMENT.NEWPAGE(10000*M.LNPAGEHEIGHT/960, 10000*M.LNPAGEWIDTH/960, M.LNPAGENO, IIF(M.LNPAGEWIDTH>LNPAGEHEIGHT, 1, 0))
ENDIF
ENDIF
THIS.NPREVIOUSBAND = NBANDOBJCODE
THIS.SETFRXDATASESSION()
GOTO (NFRXRECNO) IN FRX
THIS.OXFDOCUMENT.EU_BEFORESECTION(FRX.OBJCODE, FRX.HEIGHT)
THIS.SETCURRENTDATASESSION()
ENDPROC
**
FUNCTION invokeoncurrentpass
RETURN ( .NOT. THIS.TWOPASSPROCESS) .OR. THIS.CURRENTPASS=1
ENDFUNC
**
FUNCTION GetPageWidth
IF THIS.LAFTERLOAD
THIS.LAFTERLOAD = .F.
IF EMPTY(THIS.NUDPAPERHEIGHT)
THIS.SETFRXDATASESSION()
IF USED("frx")
SELECT FRX
LOCAL LCSTR, LNORIENTATION
LOCATE ALL FOR OBJTYPE=1 .AND. OBJCODE=53
IF FOUND()
LCSTR = MLINE(FRX.EXPR, ATCLINE("ORIENTATION", FRX.EXPR))
IF  .NOT. EMPTY(M.LCSTR)
LNORIENTATION = GETNUMERICVALUE(M.LCSTR)
ENDIF
LCSTR = MLINE(FRX.EXPR, ATCLINE("PAPERSIZE", FRX.EXPR))
IF  .NOT. EMPTY(M.LCSTR)
LOCAL LNPWIDTH, LNPHEIGHT
SETPAPERSIZE(GETNUMERICVALUE(LCSTR), @LNPWIDTH, @LNPHEIGHT)
IF LNORIENTATION=0
THIS.REALPAGEWIDTH = LNPWIDTH*960/10000
THIS.REALPAGEHEIGHT = LNPHEIGHT*960/10000
ELSE
THIS.REALPAGEWIDTH = LNPHEIGHT*960/10000
THIS.REALPAGEHEIGHT = LNPWIDTH*960/10000
ENDIF
ENDIF
ENDIF
ENDIF
THIS.SETCURRENTDATASESSION()
ENDIF
ENDIF
IF EMPTY(THIS.NUDPAPERWIDTH)
IF EMPTY(THIS.REALPAGEWIDTH)
RETURN DODEFAULT()
ELSE
RETURN THIS.REALPAGEWIDTH
ENDIF
ELSE
RETURN (0.096^1)*THIS.NUDPAPERWIDTH
ENDIF
ENDFUNC
**
FUNCTION GetPageHeight
LOCAL LNHEIGHT
IF EMPTY(THIS.NUDPAPERHEIGHT)
IF EMPTY(THIS.REALPAGEHEIGHT)
LNHEIGHT = DODEFAULT()
ELSE
RETURN THIS.REALPAGEHEIGHT
ENDIF
ELSE
LNHEIGHT = (0.096^1)*THIS.NUDPAPERHEIGHT
ENDIF
IF  .NOT. ISNULL(THIS.NSHRINKHEIGHT)
LNHEIGHT = LNHEIGHT-(0.096^1)*THIS.NSHRINKHEIGHT
ENDIF
RETURN LNHEIGHT
ENDFUNC
**
PROCEDURE LoadReport
THIS.NDEFAULTDATASESSION = SET("Datasession")
IF  .NOT. EMPTY(THIS.CLOGFILE)
THIS.OXFSESSION.INITLOG(.T.)
ENDIF
THIS.LAFTERLOAD = .T.
DODEFAULT()
IF  .NOT. EMPTY(THIS.TARGETTYPE)
IF ISNULL(THIS.NSHRINKHEIGHT) .AND. (THIS.TARGETTYPE="HTML" .OR. THIS.TARGETTYPE="MHT")
THIS.NSHRINKHEIGHT = 16500
ENDIF
ENDIF
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS eq_packer AS Custom
CPATH = ""
CDIRECTORY = ""
OFILELIST = .NULL.
ODIRLIST = .NULL.
**
PROCEDURE Init
THIS.CPATH = SYS(2023)
THIS.CDIRECTORY = ADDBS(THIS.CPATH)+"eq_"+SUBSTR(SYS(2015), 6)
MD (THIS.CDIRECTORY)
THIS.OFILELIST = CREATEOBJECT("eq_fileList")
THIS.ODIRLIST = CREATEOBJECT("eq_fileList")
ENDPROC
**
PROCEDURE MKDir
LPARAMETERS TCDIR
THIS.ODIRLIST.ADDFILE(TCDIR)
MD (THIS.CDIRECTORY+"\"+TCDIR)
ENDPROC
**
FUNCTION StrToFile
LPARAMETERS TCSTRING, TCFILE, TCFLAGS
THIS.OFILELIST.ADDFILE(TCFILE)
RETURN STRTOFILE(TCSTRING, THIS.CDIRECTORY+"\"+TCFILE, TCFLAGS)
ENDFUNC
**
PROCEDURE CopyFile
LPARAMETERS TCFROM, TCFILE
THIS.OFILELIST.ADDFILE(TCFILE)
COPY FILE (TCFROM) TO (THIS.CDIRECTORY+"\"+TCFILE)
ENDPROC
**
PROCEDURE AddFile
LPARAMETERS TCFILE
THIS.OFILELIST.ADDFILE(TCFILE)
ENDPROC
**
PROCEDURE Pack
LPARAMETERS TCOUTPUTNAME
LOCAL LOZIP, LNI
LOZIP = CREATEOBJECT("eqZip")
LOZIP.OPENARCHIVE(TCOUTPUTNAME)
FOR LNI = 1 TO THIS.OFILELIST.NFILES
IF FILE(THIS.CDIRECTORY+"\"+THIS.OFILELIST.AFILES(LNI))
LOZIP.APPENDFILE(THIS.CDIRECTORY+"\"+THIS.OFILELIST.AFILES(LNI), THIS.OFILELIST.AFILES(LNI))
ENDIF
ENDFOR
LOZIP.CLOSEARCHIVE("created by xfrx")
ENDPROC
**
PROCEDURE Erase
FOR LNI = 1 TO THIS.OFILELIST.NFILES
ERASE (THIS.CDIRECTORY+"\"+THIS.OFILELIST.AFILES(LNI))
ENDFOR
LOCAL LCDIRECTORY
FOR LNI = THIS.ODIRLIST.NFILES TO 1 STEP -1
LCDIRECTORY = THIS.ODIRLIST.AFILES(LNI)
RD (THIS.CDIRECTORY+"\"+LCDIRECTORY)
ENDFOR
RD (THIS.CDIRECTORY)
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS eq_fileList AS Custom
DIMENSION _FILESARRAY(1)
NFILES = 0
**
FUNCTION aFiles
LPARAMETERS LNI
RETURN ALLTRIM(THIS._FILESARRAY(LNI))
ENDFUNC
**
PROCEDURE addFile
LPARAMETERS TCFILENAME
IF ASCAN(THIS._FILESARRAY, TCFILENAME+" ")=0
THIS.NFILES = THIS.NFILES+1
DIMENSION THIS._FILESARRAY(THIS.NFILES)
THIS._FILESARRAY(THIS.NFILES) = TCFILENAME+" "
ENDIF
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS eq_xps AS Custom
OREPOSITORY = .NULL.
NCURRENTPAGE = 0
OPAGECONTENT = .NULL.
OFONTPROCESSOR = .NULL.
NCODEPAGE = CPCURRENT()
NXPOS = 0
NYPOS = 0
CFONTNAME = ""
NFONTSIZE = 0
LFONTBOLD = .F.
LFONTITALIC = .F.
LFONTUNDERLINE = .F.
LFONTSTRIKED = .F.
CPENCOLOR = "#FF000000"
CFILLCOLOR = "#FFFFFFFF"
NRESOURCEOBJECTS = 0
DIMENSION ARESOURCEOBJECTS(1)
**
PROCEDURE Init
THIS.OPAGECONTENT = CREATEOBJECT("eqFSO", 30000)
THIS.OPAGECONTENT.APPEND("")
THIS.OREPOSITORY = CREATEOBJECT("eq_packer")
THIS.OREPOSITORY.MKDIR("fp")
THIS.OREPOSITORY.MKDIR("fp/_rels")
THIS.OFONTPROCESSOR = CREATEOBJECT("eq_fontProcessor")
THIS.ADDMAINRELS()
ENDPROC
**
PROCEDURE SetColor
LPARAMETERS TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE
IF TNFILLRED=-1 .OR. TNFILLGREEN=-1 .OR. TNFILLBLUE=-1
THIS.CFILLCOLOR = "#FFFFFFFF"
ELSE
THIS.CFILLCOLOR = HEXARGB(255, TNFILLRED, TNFILLGREEN, TNFILLBLUE)
ENDIF
IF TNPENRED=-1 .OR. TNPENGREEN=-1 .OR. TNPENBLUE=-1
THIS.CPENCOLOR = "#FF000000"
ELSE
THIS.CPENCOLOR = HEXARGB(255, TNPENRED, TNPENGREEN, TNPENBLUE)
ENDIF
ENDPROC
**
PROCEDURE DrawPath
LPARAMETERS TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCPATHDATA
LOCAL LCTEXT
LCTEXT = '<Path'
LCTEXT = LCTEXT+' StrokeThickness="'+ALLTRIM(__STR(TNPENSIZE, 10, 2))+'"'
IF TNPENPAT<>0
IF TNPENRED=-1 .OR. TNPENGREEN=-1 .OR. TNPENBLUE=-1
LCTEXT = LCTEXT+' Stroke="#FF000000"'
ELSE
LCTEXT = LCTEXT+' Stroke="'+HEXARGB(255, TNPENRED, TNPENGREEN, TNPENBLUE)+'"'
ENDIF
ENDIF
DO CASE
CASE TNPENPAT=1
LCTEXT = LCTEXT+' StrokeDashArray="2 2"'
CASE TNPENPAT=2
LCTEXT = LCTEXT+' StrokeDashArray="12 4"'
CASE TNPENPAT=3
LCTEXT = LCTEXT+' StrokeDashArray="6 4 2 4"'
CASE TNPENPAT=4
LCTEXT = LCTEXT+' StrokeDashArray="6 2 2 2 2 2"'
ENDCASE
IF TNFILLPAT<>0
IF TNFILLRED=-1 .OR. TNFILLGREEN=-1 .OR. TNFILLBLUE=-1
LCTEXT = LCTEXT+' Fill="#FFFFFFFF"'
ELSE
LCTEXT = LCTEXT+' Fill="'+HEXARGB(255, TNFILLRED, TNFILLGREEN, TNFILLBLUE)+'"'
ENDIF
ENDIF
LCTEXT = LCTEXT+' Data="'+TCPATHDATA+'" />'
THIS.ADDPAGECONTENT(LCTEXT)
ENDPROC
**
PROCEDURE DrawLine
LPARAMETERS TNX, TNY, TNXTO, TNYTO, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE
LOCAL LCPATHDATA
LCPATHDATA = 'F0 M '+__STR(TNX, 10, 2)+','+__STR(TNY, 10, 2)+' L '+__STR(TNXTO, 10, 2)+','+__STR(TNYTO, 10, 2)+' '
THIS.DRAWPATH(TNPENSIZE, 0, 0, 0, 0, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, LCPATHDATA)
ENDPROC
**
PROCEDURE DrawRectangle
LPARAMETERS TNX, TNY, TNW, TNH, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET
LOCAL LCPATHDATA, KOEF2, KOEF3
DO CASE
CASE TNOFFSET=0
LCPATHDATA = 'F1 M '+__STR(TNX, 10, 2)+','+__STR(TNY, 10, 2)+' L '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY, 10, 2)+' L '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY+TNH, 10, 2)+' L '+__STR(TNX, 10, 2)+','+__STR(TNY+TNH, 10, 2)+'z'
CASE TNOFFSET=99
KOEF3 = 100
LCPATHDATA = 'F1 M '+__STR(TNX, 10, 2)+','+__STR(TNY+TNH/2, 10, 2)+' C '+__STR(TNX+TNW/M.KOEF3, 10, 2)+','+__STR(TNY-TNH/7, 10, 2)+'  '+__STR(TNX+(M.KOEF3-1)*TNW/M.KOEF3, 10, 2)+','+__STR(TNY-TNH/7, 10, 2)+'  '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY+TNH/2, 10, 2)+' C '+__STR(M.TNX+(M.KOEF3-1)*M.TNW/M.KOEF3, 10, 2)+','+__STR(M.TNY+M.TNH+M.TNH/7, 10, 2)+'  '+__STR(M.TNX+M.TNW/M.KOEF3, 10, 2)+','+__STR(M.TNY+M.TNH+M.TNH/7, 10, 2)+'  '+__STR(TNX, 10, 2)+','+__STR(TNY+TNH/2, 10, 2)+'z'
OTHERWISE
M.KOEF2 = 1
TNOFFSET = MIN(M.TNW/2, M.TNH/2, TNOFFSET)
LCPATHDATA = 'F1 M '+__STR(TNX, 10, 2)+','+__STR(TNY+TNOFFSET, 10, 2)+' C '+__STR(TNX, 10, 2)+','+__STR(TNY, 10, 2)+'  '+__STR(TNX, 10, 2)+','+__STR(TNY, 10, 2)+'  '+__STR(TNX+TNOFFSET, 10, 2)+','+__STR(TNY, 10, 2)+' L '+__STR(TNX+TNW-TNOFFSET, 10, 2)+','+__STR(TNY, 10, 2)+' C '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY, 10, 2)+'  '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY, 10, 2)+'  '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY+TNOFFSET, 10, 2)+' L '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY+TNH-TNOFFSET, 10, 2)+' C '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY+TNH, 10, 2)+'  '+__STR(TNX+TNW, 10, 2)+','+__STR(TNY+TNH, 10, 2)+'  '+__STR(TNX+TNW-TNOFFSET, 10, 2)+','+__STR(TNY+TNH, 10, 2)+' L '+__STR(TNX+TNOFFSET, 10, 2)+','+__STR(TNY+TNH, 10, 2)+' C '+__STR(TNX, 10, 2)+','+__STR(TNY+TNH, 10, 2)+'  '+__STR(TNX, 10, 2)+','+__STR(TNY+TNH, 10, 2)+'  '+__STR(TNX, 10, 2)+','+__STR(TNY+TNH-TNOFFSET, 10, 2)+' L '+__STR(TNX, 10, 2)+','+__STR(TNY+TNOFFSET, 10, 2)+'z'
ENDCASE
THIS.DRAWPATH(TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, LCPATHDATA)
ENDPROC
**
PROCEDURE DrawPicture
LPARAMETERS TNX, TNY, TNWIDTH, TNHEIGHT, TCPICTUREPATH, NREALWIDTH, NREALHEIGHT
IF  .NOT. FILE(TCPICTUREPATH)
RETURN
ENDIF
LOCAL LORESOURCEOBJECT
LORESOURCEOBJECT = THIS.GETRESOURCEOBJECT(TCPICTUREPATH)
IF ISNULL(LORESOURCEOBJECT)
LORESOURCEOBJECT = THIS.ADDRESOURCEOBJECT(TCPICTUREPATH)
ENDIF
LOCAL LCTEXT
LCTEXT = '<Path>'+CHR(13)
LCTEXT = LCTEXT+'<Path.Fill>'+CHR(13)
LCTEXT = LCTEXT+'<ImageBrush ImageSource="'+LORESOURCEOBJECT.CFILENAME+'" '+CHR(13)
LCTEXT = LCTEXT+'ViewportUnits="Absolute" TileMode="None" '+CHR(13)
LCTEXT = LCTEXT+'ViewboxUnits="Absolute" Viewbox="0,0,'+__STR(NREALWIDTH, 10, 2)+','+__STR(NREALHEIGHT, 10, 2)+'" Viewport="'+__STR(TNX, 10, 2)+', '+__STR(TNY, 10, 2)+', '+__STR(TNWIDTH, 10, 2)+', '+__STR(TNHEIGHT, 10, 2)+'" />'+CHR(13)
LCTEXT = LCTEXT+'</Path.Fill>'+CHR(13)
LCTEXT = LCTEXT+'<Path.Data>'+CHR(13)
LCTEXT = LCTEXT+'<PathGeometry>'+CHR(13)
LCTEXT = LCTEXT+'<PathFigure StartPoint="'+__STR(TNX, 10, 2)+','+__STR(TNY, 10, 2)+'" IsClosed="true">'+CHR(13)
LCTEXT = LCTEXT+'<PolyLineSegment Points="'+__STR(TNX+TNWIDTH, 10, 2)+','+__STR(TNY, 10, 2)+' '+__STR(TNX+TNWIDTH, 10, 2)+','+__STR(TNY+TNHEIGHT, 10, 2)+' '+__STR(TNX, 10, 2)+','+__STR(TNY+TNHEIGHT, 10, 2)+'" />'+CHR(13)
LCTEXT = LCTEXT+'</PathFigure>'+CHR(13)
LCTEXT = LCTEXT+'</PathGeometry>'+CHR(13)
LCTEXT = LCTEXT+'</Path.Data>'+CHR(13)
LCTEXT = LCTEXT+'</Path>'+CHR(13)
THIS.ADDPAGECONTENT(LCTEXT)
ENDPROC
**
PROCEDURE SetPos
LPARAMETERS TNX, TNY
THIS.NXPOS = TNX
THIS.NYPOS = TNY
ENDPROC
**
PROCEDURE SetFont
LPARAMETERS TCFONTNAME, TNFONTSIZE, TLBOLD, TLITALIC, TLUNDERLINE, TLSTRIKED
THIS.CFONTNAME = TCFONTNAME
THIS.NFONTSIZE = TNFONTSIZE
THIS.LFONTBOLD = TLBOLD
THIS.LFONTITALIC = TLITALIC
THIS.LFONTUNDERLINE = TLUNDERLINE
THIS.LFONTSTRIKED = TLSTRIKED
ENDPROC
**
PROCEDURE OutText
LPARAMETERS _X____11334, TNROTATE, TNCODEPAGE, TNWIDTH, AA
IF EMPTY(_X____11334)
RETURN
ENDIF
LOCAL LCINTERNALFONTNAME, LNFONTNUMBER
LCINTERNALFONTNAME = THIS.OFONTPROCESSOR.ADDTEXT(_X____11334, TNCODEPAGE, THIS.CFONTNAME, THIS.LFONTBOLD, THIS.LFONTITALIC)
LOCAL LCTEXT
LCTEXT = "<Glyphs"
LCTEXT = LCTEXT+' Fill="'+THIS.CPENCOLOR+'"'
LCTEXT = LCTEXT+' FontUri="'+LCINTERNALFONTNAME+'"'
LCTEXT = LCTEXT+' FontRenderingEmSize="'+ALLTRIM(__STR(THIS.NFONTSIZE))+'"'
LCTEXT = LCTEXT+' StyleSimulations="None"'
LCTEXT = LCTEXT+' OriginX="'+ALLTRIM(__STR(THIS.NXPOS))+'"'
LCTEXT = LCTEXT+' OriginY="'+ALLTRIM(__STR(THIS.NYPOS))+'"'
LCTEXT = LCTEXT+' UnicodeString="'
THIS.ADDPAGECONTENT(LCTEXT)
THIS.OPAGECONTENT.APPENDASUNICODE(STRTRANHTMLSTRING(_X____11334), TNCODEPAGE)
THIS.OPAGECONTENT.APPENDASUNICODE('" />', THIS.NCODEPAGE)
IF (THIS.LFONTUNDERLINE .OR. THIS.LFONTSTRIKED)
IF THIS.LFONTUNDERLINE
THIS.DRAWLINE(THIS.NXPOS+TOPOINT(AA/30), THIS.NYPOS+TOPOINT(AA/10), THIS.NXPOS+TOPOINT(TNWIDTH)+TOPOINT(AA/30), THIS.NYPOS+TOPOINT(AA/10), TOPOINT(AA/10)*0.7 , 8, 0, 0, 0)
ENDIF
IF THIS.LFONTSTRIKED
THIS.DRAWLINE(THIS.NXPOS+TOPOINT(AA/30), THIS.NYPOS+TOPOINT(AA/10)-TOPOINT(AA*0.3 ), THIS.NXPOS+TOPOINT(TNWIDTH)+TOPOINT(AA/30), THIS.NYPOS+TOPOINT(AA/10)-TOPOINT(AA*0.3 ), TOPOINT(AA/10)*0.7 , 8, 0, 0, 0)
ENDIF
ENDIF
ENDPROC
**
PROCEDURE AddPageContent
LPARAMETERS TCSTRING
THIS.OPAGECONTENT.APPENDASUNICODE(TCSTRING, THIS.NCODEPAGE)
ENDPROC
**
PROCEDURE AddPage
LPARAMETERS TNWIDTH, TNHEIGHT
THIS.FINISHPAGE()
THIS.NCURRENTPAGE = THIS.NCURRENTPAGE+1
LOCAL LCTEXT
LCTEXT = '<FixedPage xmlns="http://schemas.microsoft.com/xps/2005/06"'
LCTEXT = LCTEXT+' xmlns:x="http://schemas.microsoft.com/xps/2005/06/resourcedictionary-key"'
LCTEXT = LCTEXT+' xml:lang="en-us" Width="'+ALLTRIM(__STR(TNWIDTH, 10, 2))+'" Height="'+ALLTRIM(__STR(TNHEIGHT, 10, 2))+'" >'
THIS.OPAGECONTENT.ASSIGN("")
THIS.OPAGECONTENT.APPENDASUNICODE(LCTEXT, THIS.NCODEPAGE)
ENDPROC
**
PROCEDURE finishPage
IF THIS.NCURRENTPAGE=0
RETURN
ENDIF
THIS.OPAGECONTENT.APPENDASUNICODE("</FixedPage>", THIS.NCODEPAGE)
THIS.OREPOSITORY.STRTOFILE(CHR(255)+CHR(254)+THIS.OPAGECONTENT.TOSTRING(), THIS.PAGEFILENAME(THIS.NCURRENTPAGE))
LOCAL LCRELPAGE
LCRELPAGE = '<?xml version="1.0" encoding="utf-8"?>'
LCRELPAGE = LCRELPAGE+'<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'
LOCAL I
FOR I = 1 TO THIS.OFONTPROCESSOR.GETCOUNT()
LCRELPAGE = LCRELPAGE+'<Relationship Target="/Fonts/font'+ALLTRIM(__STR(I))+'.ttf" Id="RF'+ALLTRIM(__STR(M.I))+'" Type="http://schemas.microsoft.com/xps/2005/06/required-resource"/>'
ENDFOR
FOR I = 1 TO THIS.NRESOURCEOBJECTS
LCRELPAGE = LCRELPAGE+'<Relationship Type="http://schemas.microsoft.com/xps/2005/06/required-resource" Target="'+THIS.ARESOURCEOBJECTS(M.I).CFILENAME+'" Id="RR'+ALLTRIM(__STR(M.I))+'" />'
ENDFOR
LCRELPAGE = LCRELPAGE+'</Relationships>'
THIS.OREPOSITORY.STRTOFILE(LCRELPAGE, THIS.PAGERELSFILENAME(THIS.NCURRENTPAGE))
ENDPROC
**
PROCEDURE addContentTypes
LOCAL LCTEXT, LNI
LCTEXT = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+'<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">'+'<Default Extension="xaml" ContentType="application/vnd.ms-package.xps-fixeddocumentsequence+xml" /> '+'<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>'+'<Default Extension="ttf" ContentType="application/vnd.ms-opentype" /> '+'<Default Extension="jpg" ContentType="image/jpeg"/>'+'<Default Extension="png" ContentType="image/png"/>'+'<Default Extension="tif" ContentType="image/tiff"/>'+'<Override PartName="/FD/FD_1.XAML" ContentType="application/vnd.ms-package.xps-fixeddocument+xml" />'
FOR LNI = 1 TO THIS.NCURRENTPAGE
LCTEXT = LCTEXT+'<Override PartName="/'+UPPER(THIS.PAGEFILENAME(M.LNI))+'" ContentType="application/vnd.ms-package.xps-fixedpage+xml" /> '+CHR(13)+CHR(10)
ENDFOR
LCTEXT = LCTEXT+"</Types>"
THIS.OREPOSITORY.STRTOFILE(LCTEXT, "[Content_Types].xml")
ENDPROC
**
FUNCTION pageFileName
LPARAMETERS TNPAGENO
RETURN "fp/fp_"+ALLTRIM(__STR(M.TNPAGENO))+".xaml"
ENDFUNC
**
FUNCTION pageRelsFileName
LPARAMETERS TNPAGENO
RETURN "fp/_rels/fp_"+ALLTRIM(__STR(M.TNPAGENO))+".xaml.rels"
ENDFUNC
**
PROCEDURE addDocument
LOCAL LCTEXT
THIS.OREPOSITORY.MKDIR("fd")
LCTEXT = '<FixedDocument xmlns="http://schemas.microsoft.com/xps/2005/06">'
FOR LNI = 1 TO THIS.NCURRENTPAGE
LCTEXT = LCTEXT+'<PageContent Source="../'+THIS.PAGEFILENAME(M.LNI)+'" /> '
ENDFOR
LCTEXT = LCTEXT+"</FixedDocument>"
THIS.OREPOSITORY.STRTOFILE(LCTEXT, "fd/fd_1.xaml")
ENDPROC
**
PROCEDURE addMainRels
THIS.OREPOSITORY.MKDIR("_rels")
LOCAL LCTEXT
LCTEXT = '<?xml version="1.0" encoding="utf-8"?>'+'<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'+'  <Relationship Type="http://schemas.microsoft.com/xps/2005/06/fixedrepresentation" Target="/fds/fds_1.xaml" Id="R14347BBD4E16D348" />'+'</Relationships>'
THIS.OREPOSITORY.STRTOFILE(LCTEXT, "_rels/.rels")
THIS.OREPOSITORY.MKDIR("fds")
LCTEXT = '<FixedDocumentSequence xmlns="http://schemas.microsoft.com/xps/2005/06"><DocumentReference Source="../fd/fd_1.xaml" /></FixedDocumentSequence>'
THIS.OREPOSITORY.STRTOFILE(LCTEXT, "fds/fds_1.xaml")
ENDPROC
**
PROCEDURE finalize
LPARAMETERS TCFILENAME
THIS.FINISHPAGE()
THIS.ADDCONTENTTYPES()
THIS.ADDDOCUMENT()
THIS.OREPOSITORY.MKDIR("Fonts")
THIS.OFONTPROCESSOR.WRITEFONTFILES(THIS.OREPOSITORY.CDIRECTORY+"\Fonts\")
LOCAL I
FOR I = 1 TO THIS.OFONTPROCESSOR.GETCOUNT()
THIS.OREPOSITORY.ADDFILE("Fonts/font"+ALLTRIM(__STR(I))+".ttf")
ENDFOR
THIS.OREPOSITORY.PACK(TCFILENAME)
THIS.OREPOSITORY.ERASE()
THIS.OREPOSITORY = .NULL.
ENDPROC
**
FUNCTION getResourceObject
LPARAMETERS TCNAME
WITH THIS
LOCAL I
FOR I = 1 TO .NRESOURCEOBJECTS
IF .ARESOURCEOBJECTS(M.I).CHECKSUM=SYS(2007, FILETOSTR(M.TCNAME), 0, 1)
RETURN .ARESOURCEOBJECTS(M.I)
ENDIF
ENDFOR
ENDWITH
RETURN .NULL.
ENDFUNC
**
FUNCTION addResourceObject
LPARAMETERS TCFILE
WITH THIS
.NRESOURCEOBJECTS = .NRESOURCEOBJECTS+1
IF .NRESOURCEOBJECTS=1
THIS.OREPOSITORY.MKDIR("Resources")
ENDIF
DIMENSION .ARESOURCEOBJECTS(.NRESOURCEOBJECTS)
.ARESOURCEOBJECTS(.NRESOURCEOBJECTS) = CREATEOBJECT("ResourceObject")
LOCAL LCRESOURCENAME
LCRESOURCENAME = "res"+ALLTRIM(__STR(.NRESOURCEOBJECTS))+"."+JUSTEXT(TCFILE)
THIS.OREPOSITORY.COPYFILE(M.TCFILE, "Resources/"+M.LCRESOURCENAME)
LCRESOURCENAME = "../Resources/"+LCRESOURCENAME
.ARESOURCEOBJECTS(.NRESOURCEOBJECTS).CFILENAME = M.LCRESOURCENAME
.ARESOURCEOBJECTS(.NRESOURCEOBJECTS).NWIDTH = 0
.ARESOURCEOBJECTS(.NRESOURCEOBJECTS).NHEIGHT = 0
.ARESOURCEOBJECTS(.NRESOURCEOBJECTS).CHECKSUM = SYS(2007, FILETOSTR(M.TCFILE), 0, 1)
RETURN .ARESOURCEOBJECTS(.NRESOURCEOBJECTS)
ENDWITH
ENDFUNC
**
ENDDEFINE
**
DEFINE CLASS ResourceObject AS Custom
CHECKSUM = 0
CFILENAME = ""
NWIDTH = -1
NHEIGHT = -1
NOBJECTNO = -1
ENDDEFINE
**
DEFINE CLASS eq_fontProcessor AS Custom
NFPPOINTER = 0
**
PROCEDURE Init
THIS.APISETUP()
THIS.NFPPOINTER = _EQ_FONTPROCESSOR_INIT()
ENDPROC
**
PROCEDURE Destroy
= _EQ_FONTPROCESSOR_DESTROY(THIS.NFPPOINTER)
ENDPROC
**
PROCEDURE APISetup
DECLARE INTEGER _eq_fontProcessor_AddText IN hndlib.dll INTEGER, STRING @, INTEGER, STRING @
DECLARE INTEGER _eq_fontProcessor_Init IN hndlib.dll
DECLARE INTEGER _eq_fontProcessor_Destroy IN hndlib.dll INTEGER
DECLARE INTEGER _eq_fontProcessor_GetCount IN hndlib.dll INTEGER
DECLARE INTEGER _eq_fontProcessor_WriteFontFiles IN hndlib.dll INTEGER, STRING @
ENDPROC
**
FUNCTION GetCount
RETURN _EQ_FONTPROCESSOR_GETCOUNT(THIS.NFPPOINTER)
ENDFUNC
**
FUNCTION AddText
LPARAMETERS _X____11334, TNCODEPAGE, LCFONTNAME, LLFONTBOLD, LLFONTITALIC
LOCAL LCFONTNAME, LNRETVAL
LCFONTNAME = ALLTRIM(LCFONTNAME)+IIF(LLFONTBOLD, "B", "N")+IIF(LLFONTITALIC, "I", "N")
LNRETVAL = _EQ_FONTPROCESSOR_ADDTEXT(THIS.NFPPOINTER, _X____11334, TNCODEPAGE, LCFONTNAME)
RETURN "/Fonts/font"+ALLTRIM(__STR(LNRETVAL))+".ttf"
ENDFUNC
**
PROCEDURE WriteFontFiles
LPARAMETERS TCDIRECTORY
= _EQ_FONTPROCESSOR_WRITEFONTFILES(THIS.NFPPOINTER, TCDIRECTORY)
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS XPSWriter AS DocumentWriter
COUTPUTNAME = ""
OXPS = .NULL.
CFDIR = ""
NPAGEHEIGHT = 0
NPAGEWIDTH = 0
CSETPOINT = ""
FHANDLE = 0
FHANDLE2 = 0
CFILENAME = ""
CFILENAME2 = ""
NFONTS = 0
NCOLORS = 0
NREPORTNO = 0
PICTUREDPI = 0
LCLEFTMARGIN = ''
LCRIGHTMARGIN = ''
LCTOPMARGIN = ''
LCBOTTOMMARGIN = ''
LCPAPERWIDTH = ''
LCPAPERHEIGHT = ''
LCPAPERORIENTATION = ''
**
PROCEDURE Init
LPARAMETERS _X____11333
DODEFAULT()
THIS.COUTPUTNAME = _X____11333.COUTPUTNAME
IF EMPTY(JUSTEXT(THIS.COUTPUTNAME))
THIS.COUTPUTNAME = THIS.COUTPUTNAME+".xps"
ENDIF
THIS.OXPS = CREATEOBJECT("eq_xps")
ENDPROC
**
PROCEDURE firstPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO
THIS.NEWPAGE(TNHEIGHT, TNWIDTH, TNPAGENO)
ENDPROC
**
PROCEDURE newPage
LPARAMETERS TNHEIGHT, TNWIDTH, TNPAGENO, TNORI
THIS.OXPS.ADDPAGE(TOPOINT(TNWIDTH), TOPOINT(TNHEIGHT))
ENDPROC
**
PROCEDURE newReport
LPARAMETERS TNREPORTNO, TNCODEPAGE, TOREPORT
THIS.OXPS.NCODEPAGE = TNCODEPAGE
ENDPROC
**
PROCEDURE addPicture
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCPATH, TCNAME, X0, NREALWIDTH, NREALHEIGHT, NROTATE
LOCAL LLERASETEMPORARYFILE, LLCONVERSIONREQUIRED, LCCURRENTEXT
IF EMPTY(X0)
IF  .NOT. EMPTY(THIS.PICTUREDPI)
LOCAL LCEXTENSION, LCFILENAME2, LCTEMPORARYNAME
LCCURRENTEXT = UPPER(JUSTEXT(M.TCPATH))
DO CASE
CASE LCCURRENTEXT="JPG" .OR. LCCURRENTEXT="JPEG"
LCPICTURETYPE = "image/jpeg"
LCEXTENSION = "jpg"
CASE LCCURRENTEXT="TIF"
LCPICTURETYPE = "image/tiff"
LCEXTENSION = "tif"
OTHERWISE
LCPICTURETYPE = "image/png"
LCEXTENSION = "png"
ENDCASE
LCFILENAME2 = FORCEPATH(SYS(2015), SYS(2023))+"."+LCEXTENSION
LCTEMPORARYNAME = FORCEPATH(SYS(2015), SYS(2023))
IF _XFRXPREPAREFILE(M.TCPATH, M.LCTEMPORARYNAME)
IF 1=_XFSAVEIMAGE(M.LCTEMPORARYNAME, M.LCFILENAME2, LCPICTURETYPE, INT(TNWIDTH*96/10000), INT(TNHEIGHT*96/10000), THIS.PICTUREDPI)
TCPATH = M.LCFILENAME2
LLERASETEMPORARYFILE = .T.
ENDIF
ERASE (LCTEMPORARYNAME)
ENDIF
ENDIF
ENDIF
LCCURRENTEXT = UPPER(JUSTEXT(M.TCPATH))
IF  .NOT. INLIST(LCCURRENTEXT, "JPG", "TIF", "PNG")
LCFILENAME2 = FORCEPATH(SYS(2015), SYS(2023))+".png"
= _XF_CONVERTIMAGE(M.TCPATH, M.LCFILENAME2, "image/png")
IF M.LLERASETEMPORARYFILE
ERASE (M.TCPATH)
ENDIF
TCPATH = M.LCFILENAME2
LLERASETEMPORARYFILE = .T.
ENDIF
IF EMPTY(NREALWIDTH) .OR. EMPTY(NREALHEIGHT)
_XFGETIMAGESIZE(TCPATH, @NREALWIDTH, @NREALHEIGHT)
ENDIF
THIS.OXPS.DRAWPICTURE(TOPOINT(TNLEFT), TOPOINT(TNTOP), TOPOINT(TNWIDTH), TOPOINT(TNHEIGHT), TCPATH, NREALWIDTH, NREALHEIGHT)
IF LLERASETEMPORARYFILE
ERASE (TCPATH)
ENDIF
ENDPROC
**
PROCEDURE addRectangle
LPARAMETERS TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET, TCNAME
THIS.OXPS.DRAWRECTANGLE(TOPOINT(TNLEFT), TOPOINT(TNTOP), TOPOINT(TNWIDTH), TOPOINT(TNHEIGHT), TNPENSIZE, TNFILLPAT, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TNOFFSET)
ENDPROC
**
PROCEDURE AddLine
LPARAMETERS TNLEFT, TNTOP, TNRIGHT, TNBOTTOM, TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE, TCNAME
THIS.OXPS.DRAWLINE(TOPOINT(TNLEFT), TOPOINT(TNTOP), TOPOINT(TNRIGHT), TOPOINT(TNBOTTOM), TNPENSIZE, TNPENPAT, TNPENRED, TNPENGREEN, TNPENBLUE)
ENDPROC
**
PROCEDURE addTextBox
LPARAMETERS _X____11334, TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TNLEFT, TNTOP, TNWIDTH, TNHEIGHT, TCTYPE, TNPENRED, TNPENGREEN, TNPENBLUE, TNMODE, TNFILLRED, TNFILLGREEN, TNFILLBLUE, TCALIGN, TLUNDERLINE, TCUNIQUEID, TCLINKNAME, TCLINKHREF, TCOUTLINE, TNOUTLINESTYLE, TCTOOLTIP, TCNAME
LOCAL LNORIWIDTH
LNORIWIDTH = TNWIDTH
IF TCTYPE="L"
TNWIDTH = TNWIDTH+(TNFONTSIZE*0.9 )*10000/72
ENDIF
IF TCTYPE="L"
IF TYPE('tcAlign')<>'L'
DO CASE
CASE TCALIGN='right'
TNLEFT = TNLEFT-(TNFONTSIZE*0.9 )*10000/72
CASE TCALIGN='left'
CASE TCALIGN='center'
ENDCASE
ENDIF
ENDIF
LOCAL LINESCOUNT, AA, BB, CC, IIII, LNXFROM, LCXTO, LCPREPARED
IF ISNULL(_X____11334) .OR. EMPTY(_X____11334)
LINESCOUNT = 0
ELSE
LINESCOUNT = _X_WW(_X____11334, TCFONT, TNFONTSIZE, IIF(TLITALICS, 1, 0), IIF(TLBOLD, 1, 0), TNWIDTH/10, @__XFRET, IIF(TCALIGN="right", 1, 0), THIS.OTXTBOX.NCODEPAGE)
ENDIF
AA = 10*TOINT(SUBSTR(__XFRET, 1, 4))
BB = 10*TOINT(SUBSTR(__XFRET, 5, 4))
CC = 10*TOINT(SUBSTR(__XFRET, 9, 4))
LCPREPARED = ""
LNCURRENTLINEWIDTH = TNWIDTH
IF TNMODE=0 .AND. TNFILLRED<>-1 .AND. TNFILLGREEN<>-1 .AND. TNFILLBLUE<>-1
THIS.OXPS.DRAWRECTANGLE(TOPOINT(TNLEFT), TOPOINT(TNTOP), TOPOINT(LNORIWIDTH), TOPOINT(TNHEIGHT), 1, 8, TNFILLRED, TNFILLGREEN, TNFILLBLUE, 0, 0, 0, 0, 0)
ENDIF
THIS.OXPS.SETFONT(TCFONT, TNFONTSIZE, TLBOLD, TLITALICS, TLUNDERLINE, THIS.OTXTBOX.LSTRIKED)
THIS.OXPS.SETCOLOR(TNPENRED, TNPENGREEN, TNPENBLUE, TNFILLRED, TNFILLGREEN, TNFILLBLUE)
LOCAL LNBOXWIDTH, LNLF
LNBOXWIDTH = TOPOINT(TNWIDTH)
LNLF = TOPOINT(TNLEFT)
TNLEFT = TOPOINT(TNLEFT)
TNTOP = TOPOINT(TNTOP)
FOR IIII = 1 TO LINESCOUNT
LNXFROM = TOINT(SUBSTR(__XFRET, M.IIII*12-11+12, 4))
LNXTO = TOINT(SUBSTR(__XFRET, M.IIII*12-11+4+12, 4))
LNCURRENTLINEWIDTH = 10*TOINT(SUBSTR(__XFRET, IIII*12-11+8+12, 4))
IF M.IIII>1 .AND. (M.AA*M.IIII+(M.BB)*(M.IIII-1)>TNHEIGHT+M.IIII*90)
EXIT
ENDIF
DO CASE
CASE TCALIGN="right"
LNLF = TNLEFT+LNBOXWIDTH-TOPOINT(LNCURRENTLINEWIDTH)
CASE TCALIGN="center"
LNLF = TNLEFT+(LNBOXWIDTH-TOPOINT(LNCURRENTLINEWIDTH))/2
ENDCASE
THIS.OXPS.SETPOS(LNLF, TNTOP+TOPOINT((CC)+(AA+BB)*(IIII-1)))
THIS.OXPS.OUTTEXT(SUBSTR(M._X____11334, M.LNXFROM, M.LNXTO-M.LNXFROM+1), 0, THIS.OTXTBOX.NCODEPAGE, LNCURRENTLINEWIDTH, AA)
ENDFOR
ENDPROC
**
PROCEDURE Finalize
LPARAMETERS _X____11333
THIS.OXPS.FINALIZE(THIS.COUTPUTNAME)
THIS.OXPS = .NULL.
LOCAL M.LNI
WITH THIS
IF  .NOT. _X____11333.LNOTOPENWORD
* MAH
* = SHELLEXECUTE(FINDWINDOW(0, _SCREEN.CAPTION), "open", THIS.COUTPUTNAME, "", "", 1)
ENDIF
ENDWITH
ENDPROC
**
ENDDEFINE
**
DEFINE CLASS eqFSO AS Custom
FSOCLASSPOINTER = 0
**
PROCEDURE log
LPARAMETERS TCPROC, TUPAR1, TUPAR2, TUPAR3, TUPAR4
IF PARAMETERS()=1
STRTOFILE("loobj."+TCPROC+"()", "str.log", .T.)
ELSE
IF PARAMETERS()=2
STRTOFILE("loobj."+TCPROC+"('"+TRANSFORM(TUPAR1, "")+"')", "str.log", .T.)
ELSE
IF PARAMETERS()=5
STRTOFILE("loobj."+TCPROC+"('"+TRANSFORM(TUPAR1, "")+"',"+TRANSFORM(TUPAR2, "")+","+TRANSFORM(TUPAR3, "")+","+TRANSFORM(TUPAR4, "")+")", "str.log", .T.)
ELSE
STRTOFILE("loobj."+TCPROC+"("+TRANSFORM(TUPAR1, "")+","+TRANSFORM(TUPAR2, "")+")", "str.log", .T.)
ENDIF
ENDIF
ENDIF
STRTOFILE(CHR(13), "str.log", .T.)
ENDPROC
**
PROCEDURE init
LPARAMETERS TNBLOCKSIZE
THIS.APISETUP()
THIS.FSOCLASSPOINTER = _EQFSO_SETUP(TNBLOCKSIZE)
ENDPROC
**
PROCEDURE APISetup
DECLARE INTEGER _eqFSO_setup IN hndlib.dll INTEGER
DECLARE INTEGER _eqFSO_Deallocate IN hndlib.dll INTEGER
DECLARE INTEGER _eqFSO_Append IN hndlib.dll INTEGER, STRING @, INTEGER
DECLARE INTEGER _eqFSO_AppendAsUnicode IN hndlib.dll INTEGER, STRING @, INTEGER, INTEGER
DECLARE INTEGER _eqFSO_Assign IN hndlib.dll INTEGER, STRING @, INTEGER
DECLARE INTEGER _eqFSO_GetLength IN hndlib.dll INTEGER
DECLARE INTEGER _eqFSO_GetMemoryPointer IN hndlib.dll INTEGER
DECLARE INTEGER _eqFSO_Substr IN hndlib.dll INTEGER, INTEGER, INTEGER, STRING @
DECLARE INTEGER _eqFSO_SetColor IN hndlib.dll INTEGER, STRING @, INTEGER, INTEGER, INTEGER
DECLARE INTEGER _eqFSO_FormatString4Float IN hndlib.dll INTEGER, STRING @, SINGLE, SINGLE, SINGLE, SINGLE
DECLARE INTEGER _eqFSO_GetInt IN hndlib.dll INTEGER, INTEGER
DECLARE INTEGER _eqFSO_PDF_AddBox IN hndlib.dll INTEGER, SINGLE, SINGLE, SINGLE, SINGLE, SINGLE, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER, INTEGER
ENDPROC
**
PROCEDURE deallocate
= _EQFSO_DEALLOCATE(THIS.FSOCLASSPOINTER)
THIS.FSOCLASSPOINTER = 0
ENDPROC
**
PROCEDURE destroy
THIS.DEALLOCATE()
ENDPROC
**
PROCEDURE Append
LPARAMETERS TCSTRING
= _EQFSO_APPEND(THIS.FSOCLASSPOINTER, TCSTRING, LEN(TCSTRING))
ENDPROC
**
PROCEDURE AppendAsUnicode
LPARAMETERS TCSTRING, TNCODEPAGE
= _EQFSO_APPENDASUNICODE(THIS.FSOCLASSPOINTER, TCSTRING, LEN(TCSTRING), TNCODEPAGE)
ENDPROC
**
PROCEDURE Assign
LPARAMETERS TCSTRING
= _EQFSO_ASSIGN(THIS.FSOCLASSPOINTER, TCSTRING, LEN(TCSTRING))
ENDPROC
**
FUNCTION GetLength
RETURN _EQFSO_GETLENGTH(THIS.FSOCLASSPOINTER)
ENDFUNC
**
FUNCTION GetMemoryPointer
RETURN _EQFSO_GETMEMORYPOINTER(THIS.FSOCLASSPOINTER)
ENDFUNC
**
FUNCTION Substr
LPARAMETERS TNFROM, TNLENGTH
LCOUTSTRING = SPACE(TNLENGTH)
= _EQFSO_SUBSTR(THIS.FSOCLASSPOINTER, TNFROM, TNLENGTH, @LCOUTSTRING)
RETURN LCOUTSTRING
ENDFUNC
**
FUNCTION _Left
LPARAMETERS TNLENGTH
LCOUTSTRING = SPACE(TNLENGTH)
= _EQFSO_SUBSTR(THIS.FSOCLASSPOINTER, 1, TNLENGTH, @LCOUTSTRING)
RETURN LCOUTSTRING
ENDFUNC
**
FUNCTION ToString
LOCAL LENGTH, LCOUTSTRING
LENGTH = _EQFSO_GETLENGTH(THIS.FSOCLASSPOINTER)
LCOUTSTRING = SPACE(LENGTH)
_EQFSO_SUBSTR(THIS.FSOCLASSPOINTER, 1, LENGTH, @LCOUTSTRING)
RETURN LCOUTSTRING
ENDFUNC
**
FUNCTION getInt
LPARAMETERS TNOFFSET
RETURN _EQFSO_GETINT(THIS.FSOCLASSPOINTER, TNOFFSET)
ENDFUNC
**
PROCEDURE SetColor
LPARAMETERS TCTYPE, TR, TG, TB
_EQFSO_SETCOLOR(THIS.FSOCLASSPOINTER, @TCTYPE, TR, TG, TB)
ENDPROC
**
ENDDEFINE
**
*** 
*** ReFox - retrace your steps ... 
***
