using System;
using System.Data;
using System.Data.OleDb;
using System.Data.Odbc;
using System.Data.SqlClient;
using System.Reflection;
using System.Collections;
using System.Data.SqlTypes;
using Aria.Xml;
using Aria.Environment;
using System.EnterpriseServices;

namespace Aria.Data
{
    /// <summary>
    /// This class used to work as SQL statement (insert, update, and select any data in database)
    /// </summary>
    public class AriaDataProvider
    {
        public DataTable GetDataTable(AriaDbCommand command)
        {
            return command.GetDataTable();
        }

        public ArrayList GetObjectList(AriaDbCommand command, Type type)
        {
            DataTable table = GetDataTable(command);
            
            ArrayList objectList = new ArrayList();

            for (int rowIndex = 0; rowIndex < table.Rows.Count; rowIndex++)
            {
                object dataObject = type.Assembly.CreateInstance(type.FullName);

                for (int columnIndex = 0; columnIndex < table.Columns.Count; columnIndex++)
                {
                    object value = table.Rows[rowIndex][columnIndex];

                    if (value is DBNull)
                    {
                        continue;
                    }

                    if (dataObject.GetType().GetProperty(table.Columns[columnIndex].ColumnName) == null)
                    {
                        continue;
                    }

                    AriaXmlSerializer xmlSerializer = new AriaXmlSerializer();

                    if (dataObject.GetType().GetProperty(table.Columns[columnIndex].ColumnName).PropertyType.GetCustomAttributes(typeof(AriaSerializableAttribute), true).Length > 0)
                    {
                        if (value.ToString().Length == 0)
                        {
                            value = null;
                        }
                        else 
                        {
                            try
                            {
                                value = xmlSerializer.ConvertFromXml(value.ToString());
                            }
                            catch (Exception)
                            {
                                value = null;
                            }
                        }
                    }
                    else if (table.Columns[columnIndex].ColumnName == "Error")
                    {
                        try
                        {
                            value = xmlSerializer.ConvertFromXml(value.ToString());
                        }
                        catch(Exception)
                        {
                            value = new Exception(value.ToString());
                        }
                    }
                    else if (dataObject.GetType().GetProperty(table.Columns[columnIndex].ColumnName).PropertyType.IsEnum)
                    {
                        value = Enum.Parse(dataObject.GetType().GetProperty(table.Columns[columnIndex].ColumnName).PropertyType, value.ToString());
                    }
                    else if(value is System.Guid)
                    {
                        value = value.ToString();
                    }

                    dataObject.GetType().GetProperty(table.Columns[columnIndex].ColumnName).SetValue(dataObject, value, null);
                }

                objectList.Add(dataObject);
            }

            return objectList;
        }

        public void InsertObject(AriaDbConnection connection, AriaDatabaseTypes databaseType, object record, string[] autoGeneratedFeilds , string clientId)
        {
            InsertObject(connection, databaseType, record.GetType().Name, record, autoGeneratedFeilds,clientId);
        }

        public void InsertObject(AriaDbConnection connection, AriaDatabaseTypes databaseType, string tableName, 
                                    object record, string[] autoGeneratedFeilds,string  clientId )
        {
            AriaDbCommand command = new AriaDbCommand("", connection, databaseType,clientId);
            
            command.CommandText = "INSERT INTO " + tableName + " (";
            
            string names = "";
            string values = "";
            
            ArrayList autoGeneratedFeildsList = new ArrayList();
            
            if (autoGeneratedFeilds != null)
            {
                autoGeneratedFeildsList.AddRange(autoGeneratedFeilds);
            }
            
            object value = null;
            
            for (int propertyIndex = 0; propertyIndex < record.GetType().GetProperties().Length; propertyIndex++)
            {
                PropertyInfo property = record.GetType().GetProperties()[propertyIndex];

                if (autoGeneratedFeildsList.Contains(property.Name))
                    continue;

                if (property.PropertyType.GetCustomAttributes(typeof(Aria.Xml.AriaSerializableAttribute), true).Length > 0)
                {
                    if (property.GetValue(record, null) != null)
                    {
                        AriaXmlSerializer xmlSerializer = new AriaXmlSerializer();
                        value = xmlSerializer.ConvertToXml(property.GetValue(record, null));
                    }
                    else
                    {
                        value = null;
                    }
                }
                else if (property.PropertyType.IsEnum == true)
                {
                    value = property.GetValue(record, null).ToString();
                }
                else
                {
                    value = property.GetValue(record, null);
                }

                if (value != null)
                {
                    if (names != "")
                    {
                        names += ",";
                        values += ",";
                    }

                    names += property.Name;
                    values += "@" + property.Name;
                    command.Parameters.Add(new AriaDbParameter(property.Name, value));
                }
            }

            command.CommandText += names + ") VALUES(" + values + ")";

            command.ExecuteNonQuery();
        }

        public void UpdateObject(AriaDbConnection connection, AriaDatabaseTypes databaseType, string tableName, object record,
                                    string[] properties, string whereCluase, string clientId)
        {
            AriaDbCommand command = new AriaDbCommand("", connection, databaseType, clientId);
            command.CommandText = "UPDATE " + tableName + " SET ";

            for (int index = 0; index < properties.Length; index++)
            {
                if (index != 0)
                    command.CommandText += ", ";

                if (properties[index] == "Error")
                {
                    command.CommandText += "[Error]" + "=@" + properties[index];
                }
                else
                {
                    command.CommandText += properties[index] + "=@" + properties[index];
                }

                object value = null;
                PropertyInfo property = record.GetType().GetProperty(properties[index]);


                if (property.PropertyType.GetCustomAttributes(typeof(Aria.Xml.AriaSerializableAttribute), true).Length > 0)
                {
                    if (property.GetValue(record, null) != null)
                    {
                        AriaXmlSerializer xmlSerializer = new AriaXmlSerializer();
                        value = xmlSerializer.ConvertToXml(property.GetValue(record, null));
                    }
                    else
                    {
                        value = null;
                    }
                }
                else if (property.GetValue(record, null) is Exception)
                {
                    if (property.GetValue(record, null) != null)
                    {
                        AriaXmlSerializer xmlSerializer = new AriaXmlSerializer();
                        value = xmlSerializer.ConvertToXml(property.GetValue(record, null));
                    }
                    else
                    {
                        value = null;
                    }
                }
                else if (property.PropertyType.IsEnum == true)
                {
                    value = property.GetValue(record, null).ToString();
                }
                else
                {
                    value = property.GetValue(record, null);
                }

                // T20110803.0001 MAH 9/13/2011
                //command.Parameters.Add(new AriaDbParameter("@" + properties[index], value));
                command.Parameters.Add(new AriaDbParameter("@" + properties[index], value == null ? DBNull.Value : value));
                // T20110803.0001 MAH 9/13/2011
            }

            for (int propertyIndex = 0; propertyIndex < record.GetType().GetProperties().Length; propertyIndex++)
            {
                if (whereCluase.ToUpper().Contains("@" + record.GetType().GetProperties()[propertyIndex].Name.ToUpper()))
                {
                    command.Parameters.Add(new AriaDbParameter(record.GetType().GetProperties()[propertyIndex].Name,
                                                    record.GetType().GetProperties()[propertyIndex].GetValue(record, null)));
                }

            }

            command.CommandText += " WHERE " + whereCluase;

            command.ExecuteNonQuery();
        }
    }
}
