//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Map {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Shipment")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Shipment : global::System.Data.DataSet {
        
        private OrderFulfillmentDataTable tableOrderFulfillment;
        
        private ItemDataTable tableItem;
        
        private FulfillmentDataDataTable tableFulfillmentData;
        
        private AddressDataTable tableAddress;
        
        private BatteryDataTable tableBattery;
        
        private BatterySubgroupDataTable tableBatterySubgroup;
        
        private StandardProductIDDataTable tableStandardProductID;
        
        private ComputerPlatformDataTable tableComputerPlatform;
        
        private RebateDataTable tableRebate;
        
        private ColorSpecificationDataTable tableColorSpecification;
        
        private global::System.Data.DataRelation relationRelationToItem;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Shipment() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Shipment(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["OrderFulfillment"] != null)) {
                    base.Tables.Add(new OrderFulfillmentDataTable(ds.Tables["OrderFulfillment"]));
                }
                if ((ds.Tables["Item"] != null)) {
                    base.Tables.Add(new ItemDataTable(ds.Tables["Item"]));
                }
                if ((ds.Tables["FulfillmentData"] != null)) {
                    base.Tables.Add(new FulfillmentDataDataTable(ds.Tables["FulfillmentData"]));
                }
                if ((ds.Tables["Address"] != null)) {
                    base.Tables.Add(new AddressDataTable(ds.Tables["Address"]));
                }
                if ((ds.Tables["Battery"] != null)) {
                    base.Tables.Add(new BatteryDataTable(ds.Tables["Battery"]));
                }
                if ((ds.Tables["BatterySubgroup"] != null)) {
                    base.Tables.Add(new BatterySubgroupDataTable(ds.Tables["BatterySubgroup"]));
                }
                if ((ds.Tables["StandardProductID"] != null)) {
                    base.Tables.Add(new StandardProductIDDataTable(ds.Tables["StandardProductID"]));
                }
                if ((ds.Tables["ComputerPlatform"] != null)) {
                    base.Tables.Add(new ComputerPlatformDataTable(ds.Tables["ComputerPlatform"]));
                }
                if ((ds.Tables["Rebate"] != null)) {
                    base.Tables.Add(new RebateDataTable(ds.Tables["Rebate"]));
                }
                if ((ds.Tables["ColorSpecification"] != null)) {
                    base.Tables.Add(new ColorSpecificationDataTable(ds.Tables["ColorSpecification"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderFulfillmentDataTable OrderFulfillment {
            get {
                return this.tableOrderFulfillment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemDataTable Item {
            get {
                return this.tableItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FulfillmentDataDataTable FulfillmentData {
            get {
                return this.tableFulfillmentData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressDataTable Address {
            get {
                return this.tableAddress;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BatteryDataTable Battery {
            get {
                return this.tableBattery;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BatterySubgroupDataTable BatterySubgroup {
            get {
                return this.tableBatterySubgroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StandardProductIDDataTable StandardProductID {
            get {
                return this.tableStandardProductID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComputerPlatformDataTable ComputerPlatform {
            get {
                return this.tableComputerPlatform;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RebateDataTable Rebate {
            get {
                return this.tableRebate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ColorSpecificationDataTable ColorSpecification {
            get {
                return this.tableColorSpecification;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Shipment cln = ((Shipment)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["OrderFulfillment"] != null)) {
                    base.Tables.Add(new OrderFulfillmentDataTable(ds.Tables["OrderFulfillment"]));
                }
                if ((ds.Tables["Item"] != null)) {
                    base.Tables.Add(new ItemDataTable(ds.Tables["Item"]));
                }
                if ((ds.Tables["FulfillmentData"] != null)) {
                    base.Tables.Add(new FulfillmentDataDataTable(ds.Tables["FulfillmentData"]));
                }
                if ((ds.Tables["Address"] != null)) {
                    base.Tables.Add(new AddressDataTable(ds.Tables["Address"]));
                }
                if ((ds.Tables["Battery"] != null)) {
                    base.Tables.Add(new BatteryDataTable(ds.Tables["Battery"]));
                }
                if ((ds.Tables["BatterySubgroup"] != null)) {
                    base.Tables.Add(new BatterySubgroupDataTable(ds.Tables["BatterySubgroup"]));
                }
                if ((ds.Tables["StandardProductID"] != null)) {
                    base.Tables.Add(new StandardProductIDDataTable(ds.Tables["StandardProductID"]));
                }
                if ((ds.Tables["ComputerPlatform"] != null)) {
                    base.Tables.Add(new ComputerPlatformDataTable(ds.Tables["ComputerPlatform"]));
                }
                if ((ds.Tables["Rebate"] != null)) {
                    base.Tables.Add(new RebateDataTable(ds.Tables["Rebate"]));
                }
                if ((ds.Tables["ColorSpecification"] != null)) {
                    base.Tables.Add(new ColorSpecificationDataTable(ds.Tables["ColorSpecification"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableOrderFulfillment = ((OrderFulfillmentDataTable)(base.Tables["OrderFulfillment"]));
            if ((initTable == true)) {
                if ((this.tableOrderFulfillment != null)) {
                    this.tableOrderFulfillment.InitVars();
                }
            }
            this.tableItem = ((ItemDataTable)(base.Tables["Item"]));
            if ((initTable == true)) {
                if ((this.tableItem != null)) {
                    this.tableItem.InitVars();
                }
            }
            this.tableFulfillmentData = ((FulfillmentDataDataTable)(base.Tables["FulfillmentData"]));
            if ((initTable == true)) {
                if ((this.tableFulfillmentData != null)) {
                    this.tableFulfillmentData.InitVars();
                }
            }
            this.tableAddress = ((AddressDataTable)(base.Tables["Address"]));
            if ((initTable == true)) {
                if ((this.tableAddress != null)) {
                    this.tableAddress.InitVars();
                }
            }
            this.tableBattery = ((BatteryDataTable)(base.Tables["Battery"]));
            if ((initTable == true)) {
                if ((this.tableBattery != null)) {
                    this.tableBattery.InitVars();
                }
            }
            this.tableBatterySubgroup = ((BatterySubgroupDataTable)(base.Tables["BatterySubgroup"]));
            if ((initTable == true)) {
                if ((this.tableBatterySubgroup != null)) {
                    this.tableBatterySubgroup.InitVars();
                }
            }
            this.tableStandardProductID = ((StandardProductIDDataTable)(base.Tables["StandardProductID"]));
            if ((initTable == true)) {
                if ((this.tableStandardProductID != null)) {
                    this.tableStandardProductID.InitVars();
                }
            }
            this.tableComputerPlatform = ((ComputerPlatformDataTable)(base.Tables["ComputerPlatform"]));
            if ((initTable == true)) {
                if ((this.tableComputerPlatform != null)) {
                    this.tableComputerPlatform.InitVars();
                }
            }
            this.tableRebate = ((RebateDataTable)(base.Tables["Rebate"]));
            if ((initTable == true)) {
                if ((this.tableRebate != null)) {
                    this.tableRebate.InitVars();
                }
            }
            this.tableColorSpecification = ((ColorSpecificationDataTable)(base.Tables["ColorSpecification"]));
            if ((initTable == true)) {
                if ((this.tableColorSpecification != null)) {
                    this.tableColorSpecification.InitVars();
                }
            }
            this.relationRelationToItem = this.Relations["RelationToItem"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Shipment";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableOrderFulfillment = new OrderFulfillmentDataTable();
            base.Tables.Add(this.tableOrderFulfillment);
            this.tableItem = new ItemDataTable();
            base.Tables.Add(this.tableItem);
            this.tableFulfillmentData = new FulfillmentDataDataTable();
            base.Tables.Add(this.tableFulfillmentData);
            this.tableAddress = new AddressDataTable();
            base.Tables.Add(this.tableAddress);
            this.tableBattery = new BatteryDataTable();
            base.Tables.Add(this.tableBattery);
            this.tableBatterySubgroup = new BatterySubgroupDataTable();
            base.Tables.Add(this.tableBatterySubgroup);
            this.tableStandardProductID = new StandardProductIDDataTable();
            base.Tables.Add(this.tableStandardProductID);
            this.tableComputerPlatform = new ComputerPlatformDataTable();
            base.Tables.Add(this.tableComputerPlatform);
            this.tableRebate = new RebateDataTable();
            base.Tables.Add(this.tableRebate);
            this.tableColorSpecification = new ColorSpecificationDataTable();
            base.Tables.Add(this.tableColorSpecification);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("RelationToItem", new global::System.Data.DataColumn[] {
                        this.tableOrderFulfillment.OrderFulfillment_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableItem.OrderFulfillment_IdColumn});
            this.tableItem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OrderFulfillment_FulfillmentData", new global::System.Data.DataColumn[] {
                        this.tableOrderFulfillment.OrderFulfillment_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFulfillmentData.OrderFulfillment_IdColumn});
            this.tableFulfillmentData.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Battery_BatterySubgroup", new global::System.Data.DataColumn[] {
                        this.tableBattery.Battery_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableBatterySubgroup.Battery_IdColumn});
            this.tableBatterySubgroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationRelationToItem = new global::System.Data.DataRelation("RelationToItem", new global::System.Data.DataColumn[] {
                        this.tableOrderFulfillment.OrderFulfillment_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableItem.OrderFulfillment_IdColumn}, false);
            this.relationRelationToItem.Nested = true;
            this.Relations.Add(this.relationRelationToItem);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrderFulfillment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFulfillmentData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAddress() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBattery() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBatterySubgroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStandardProductID() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeComputerPlatform() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRebate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeColorSpecification() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Shipment ds = new Shipment();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void OrderFulfillmentRowChangeEventHandler(object sender, OrderFulfillmentRowChangeEvent e);
        
        public delegate void ItemRowChangeEventHandler(object sender, ItemRowChangeEvent e);
        
        public delegate void FulfillmentDataRowChangeEventHandler(object sender, FulfillmentDataRowChangeEvent e);
        
        public delegate void AddressRowChangeEventHandler(object sender, AddressRowChangeEvent e);
        
        public delegate void BatteryRowChangeEventHandler(object sender, BatteryRowChangeEvent e);
        
        public delegate void BatterySubgroupRowChangeEventHandler(object sender, BatterySubgroupRowChangeEvent e);
        
        public delegate void StandardProductIDRowChangeEventHandler(object sender, StandardProductIDRowChangeEvent e);
        
        public delegate void ComputerPlatformRowChangeEventHandler(object sender, ComputerPlatformRowChangeEvent e);
        
        public delegate void RebateRowChangeEventHandler(object sender, RebateRowChangeEvent e);
        
        public delegate void ColorSpecificationRowChangeEventHandler(object sender, ColorSpecificationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrderFulfillmentDataTable : global::System.Data.TypedTableBase<OrderFulfillmentRow> {
            
            private global::System.Data.DataColumn columnOrderFulfillment_Id;
            
            private global::System.Data.DataColumn columnAmazonOrderID;
            
            private global::System.Data.DataColumn columnMerchantOrderID;
            
            private global::System.Data.DataColumn columnMerchantFulfillmentID;
            
            private global::System.Data.DataColumn columnFulfillmentDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderFulfillmentDataTable() {
                this.TableName = "OrderFulfillment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderFulfillmentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrderFulfillmentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderFulfillment_IdColumn {
                get {
                    return this.columnOrderFulfillment_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmazonOrderIDColumn {
                get {
                    return this.columnAmazonOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MerchantOrderIDColumn {
                get {
                    return this.columnMerchantOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MerchantFulfillmentIDColumn {
                get {
                    return this.columnMerchantFulfillmentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FulfillmentDateColumn {
                get {
                    return this.columnFulfillmentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderFulfillmentRow this[int index] {
                get {
                    return ((OrderFulfillmentRow)(this.Rows[index]));
                }
            }
            
            public event OrderFulfillmentRowChangeEventHandler OrderFulfillmentRowChanging;
            
            public event OrderFulfillmentRowChangeEventHandler OrderFulfillmentRowChanged;
            
            public event OrderFulfillmentRowChangeEventHandler OrderFulfillmentRowDeleting;
            
            public event OrderFulfillmentRowChangeEventHandler OrderFulfillmentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrderFulfillmentRow(OrderFulfillmentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderFulfillmentRow AddOrderFulfillmentRow(string AmazonOrderID, string MerchantOrderID, ulong MerchantFulfillmentID, System.DateTime FulfillmentDate) {
                OrderFulfillmentRow rowOrderFulfillmentRow = ((OrderFulfillmentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AmazonOrderID,
                        MerchantOrderID,
                        MerchantFulfillmentID,
                        FulfillmentDate};
                rowOrderFulfillmentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOrderFulfillmentRow);
                return rowOrderFulfillmentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OrderFulfillmentDataTable cln = ((OrderFulfillmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OrderFulfillmentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderFulfillment_Id = base.Columns["OrderFulfillment_Id"];
                this.columnAmazonOrderID = base.Columns["AmazonOrderID"];
                this.columnMerchantOrderID = base.Columns["MerchantOrderID"];
                this.columnMerchantFulfillmentID = base.Columns["MerchantFulfillmentID"];
                this.columnFulfillmentDate = base.Columns["FulfillmentDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderFulfillment_Id = new global::System.Data.DataColumn("OrderFulfillment_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderFulfillment_Id);
                this.columnAmazonOrderID = new global::System.Data.DataColumn("AmazonOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmazonOrderID);
                this.columnMerchantOrderID = new global::System.Data.DataColumn("MerchantOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMerchantOrderID);
                this.columnMerchantFulfillmentID = new global::System.Data.DataColumn("MerchantFulfillmentID", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMerchantFulfillmentID);
                this.columnFulfillmentDate = new global::System.Data.DataColumn("FulfillmentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFulfillmentDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOrderFulfillment_Id}, true));
                this.columnOrderFulfillment_Id.AutoIncrement = true;
                this.columnOrderFulfillment_Id.AllowDBNull = false;
                this.columnOrderFulfillment_Id.Unique = true;
                this.columnOrderFulfillment_Id.Namespace = "";
                this.columnAmazonOrderID.AllowDBNull = false;
                this.columnMerchantOrderID.AllowDBNull = false;
                this.columnFulfillmentDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderFulfillmentRow NewOrderFulfillmentRow() {
                return ((OrderFulfillmentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OrderFulfillmentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OrderFulfillmentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderFulfillmentRowChanged != null)) {
                    this.OrderFulfillmentRowChanged(this, new OrderFulfillmentRowChangeEvent(((OrderFulfillmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderFulfillmentRowChanging != null)) {
                    this.OrderFulfillmentRowChanging(this, new OrderFulfillmentRowChangeEvent(((OrderFulfillmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderFulfillmentRowDeleted != null)) {
                    this.OrderFulfillmentRowDeleted(this, new OrderFulfillmentRowChangeEvent(((OrderFulfillmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderFulfillmentRowDeleting != null)) {
                    this.OrderFulfillmentRowDeleting(this, new OrderFulfillmentRowChangeEvent(((OrderFulfillmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrderFulfillmentRow(OrderFulfillmentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderFulfillmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItemDataTable : global::System.Data.TypedTableBase<ItemRow> {
            
            private global::System.Data.DataColumn columnOrderFulfillment_Id;
            
            private global::System.Data.DataColumn columnAmazonOrderItemCode;
            
            private global::System.Data.DataColumn columnMerchantOrderItemID;
            
            private global::System.Data.DataColumn columnMerchantFulfillmentItemID;
            
            private global::System.Data.DataColumn columnQuantity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDataTable() {
                this.TableName = "Item";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderFulfillment_IdColumn {
                get {
                    return this.columnOrderFulfillment_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmazonOrderItemCodeColumn {
                get {
                    return this.columnAmazonOrderItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MerchantOrderItemIDColumn {
                get {
                    return this.columnMerchantOrderItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MerchantFulfillmentItemIDColumn {
                get {
                    return this.columnMerchantFulfillmentItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow this[int index] {
                get {
                    return ((ItemRow)(this.Rows[index]));
                }
            }
            
            public event ItemRowChangeEventHandler ItemRowChanging;
            
            public event ItemRowChangeEventHandler ItemRowChanged;
            
            public event ItemRowChangeEventHandler ItemRowDeleting;
            
            public event ItemRowChangeEventHandler ItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItemRow(ItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow AddItemRow(OrderFulfillmentRow parentOrderFulfillmentRowByRelationToItem, string AmazonOrderItemCode, string MerchantOrderItemID, ulong MerchantFulfillmentItemID, ulong Quantity) {
                ItemRow rowItemRow = ((ItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AmazonOrderItemCode,
                        MerchantOrderItemID,
                        MerchantFulfillmentItemID,
                        Quantity};
                if ((parentOrderFulfillmentRowByRelationToItem != null)) {
                    columnValuesArray[0] = parentOrderFulfillmentRowByRelationToItem[0];
                }
                rowItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowItemRow);
                return rowItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ItemDataTable cln = ((ItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderFulfillment_Id = base.Columns["OrderFulfillment_Id"];
                this.columnAmazonOrderItemCode = base.Columns["AmazonOrderItemCode"];
                this.columnMerchantOrderItemID = base.Columns["MerchantOrderItemID"];
                this.columnMerchantFulfillmentItemID = base.Columns["MerchantFulfillmentItemID"];
                this.columnQuantity = base.Columns["Quantity"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderFulfillment_Id = new global::System.Data.DataColumn("OrderFulfillment_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderFulfillment_Id);
                this.columnAmazonOrderItemCode = new global::System.Data.DataColumn("AmazonOrderItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmazonOrderItemCode);
                this.columnMerchantOrderItemID = new global::System.Data.DataColumn("MerchantOrderItemID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMerchantOrderItemID);
                this.columnMerchantFulfillmentItemID = new global::System.Data.DataColumn("MerchantFulfillmentItemID", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMerchantFulfillmentItemID);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnOrderFulfillment_Id.Namespace = "";
                this.columnAmazonOrderItemCode.AllowDBNull = false;
                this.columnMerchantOrderItemID.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "ItemRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ItemRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ItemRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "ItemDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Item");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableItem");
                this.ExtendedProperties.Add("Generator_UserTableName", "Item");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow NewItemRow() {
                return ((ItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemRowChanged != null)) {
                    this.ItemRowChanged(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemRowChanging != null)) {
                    this.ItemRowChanging(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemRowDeleted != null)) {
                    this.ItemRowDeleted(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemRowDeleting != null)) {
                    this.ItemRowDeleting(this, new ItemRowChangeEvent(((ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItemRow(ItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FulfillmentDataDataTable : global::System.Data.TypedTableBase<FulfillmentDataRow> {
            
            private global::System.Data.DataColumn columnCarrierCode;
            
            private global::System.Data.DataColumn columnCarrierName;
            
            private global::System.Data.DataColumn columnShippingMethod;
            
            private global::System.Data.DataColumn columnShipperTrackingNumber;
            
            private global::System.Data.DataColumn columnOrderFulfillment_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FulfillmentDataDataTable() {
                this.TableName = "FulfillmentData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FulfillmentDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FulfillmentDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarrierCodeColumn {
                get {
                    return this.columnCarrierCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarrierNameColumn {
                get {
                    return this.columnCarrierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShippingMethodColumn {
                get {
                    return this.columnShippingMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipperTrackingNumberColumn {
                get {
                    return this.columnShipperTrackingNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderFulfillment_IdColumn {
                get {
                    return this.columnOrderFulfillment_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FulfillmentDataRow this[int index] {
                get {
                    return ((FulfillmentDataRow)(this.Rows[index]));
                }
            }
            
            public event FulfillmentDataRowChangeEventHandler FulfillmentDataRowChanging;
            
            public event FulfillmentDataRowChangeEventHandler FulfillmentDataRowChanged;
            
            public event FulfillmentDataRowChangeEventHandler FulfillmentDataRowDeleting;
            
            public event FulfillmentDataRowChangeEventHandler FulfillmentDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFulfillmentDataRow(FulfillmentDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FulfillmentDataRow AddFulfillmentDataRow(string CarrierCode, string CarrierName, string ShippingMethod, string ShipperTrackingNumber, int OrderFulfillment_Id) {
                FulfillmentDataRow rowFulfillmentDataRow = ((FulfillmentDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CarrierCode,
                        CarrierName,
                        ShippingMethod,
                        ShipperTrackingNumber,
                        OrderFulfillment_Id};
                rowFulfillmentDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFulfillmentDataRow);
                return rowFulfillmentDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FulfillmentDataDataTable cln = ((FulfillmentDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FulfillmentDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCarrierCode = base.Columns["CarrierCode"];
                this.columnCarrierName = base.Columns["CarrierName"];
                this.columnShippingMethod = base.Columns["ShippingMethod"];
                this.columnShipperTrackingNumber = base.Columns["ShipperTrackingNumber"];
                this.columnOrderFulfillment_Id = base.Columns["OrderFulfillment_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCarrierCode = new global::System.Data.DataColumn("CarrierCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrierCode);
                this.columnCarrierName = new global::System.Data.DataColumn("CarrierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarrierName);
                this.columnShippingMethod = new global::System.Data.DataColumn("ShippingMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShippingMethod);
                this.columnShipperTrackingNumber = new global::System.Data.DataColumn("ShipperTrackingNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperTrackingNumber);
                this.columnOrderFulfillment_Id = new global::System.Data.DataColumn("OrderFulfillment_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderFulfillment_Id);
                this.columnCarrierCode.AllowDBNull = false;
                this.columnCarrierName.AllowDBNull = false;
                this.columnOrderFulfillment_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FulfillmentDataRow NewFulfillmentDataRow() {
                return ((FulfillmentDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FulfillmentDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FulfillmentDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FulfillmentDataRowChanged != null)) {
                    this.FulfillmentDataRowChanged(this, new FulfillmentDataRowChangeEvent(((FulfillmentDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FulfillmentDataRowChanging != null)) {
                    this.FulfillmentDataRowChanging(this, new FulfillmentDataRowChangeEvent(((FulfillmentDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FulfillmentDataRowDeleted != null)) {
                    this.FulfillmentDataRowDeleted(this, new FulfillmentDataRowChangeEvent(((FulfillmentDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FulfillmentDataRowDeleting != null)) {
                    this.FulfillmentDataRowDeleting(this, new FulfillmentDataRowChangeEvent(((FulfillmentDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFulfillmentDataRow(FulfillmentDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FulfillmentDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AddressDataTable : global::System.Data.TypedTableBase<AddressRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddressFieldOne;
            
            private global::System.Data.DataColumn columnAddressFieldTwo;
            
            private global::System.Data.DataColumn columnAddressFieldThree;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnCounty;
            
            private global::System.Data.DataColumn columnStateOrRegion;
            
            private global::System.Data.DataColumn columnPostalCode;
            
            private global::System.Data.DataColumn columnCountryCode;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressDataTable() {
                this.TableName = "Address";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AddressDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AddressDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressFieldOneColumn {
                get {
                    return this.columnAddressFieldOne;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressFieldTwoColumn {
                get {
                    return this.columnAddressFieldTwo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressFieldThreeColumn {
                get {
                    return this.columnAddressFieldThree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountyColumn {
                get {
                    return this.columnCounty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateOrRegionColumn {
                get {
                    return this.columnStateOrRegion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryCodeColumn {
                get {
                    return this.columnCountryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressRow this[int index] {
                get {
                    return ((AddressRow)(this.Rows[index]));
                }
            }
            
            public event AddressRowChangeEventHandler AddressRowChanging;
            
            public event AddressRowChangeEventHandler AddressRowChanged;
            
            public event AddressRowChangeEventHandler AddressRowDeleting;
            
            public event AddressRowChangeEventHandler AddressRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAddressRow(AddressRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressRow AddAddressRow(string Name, string AddressFieldOne, string AddressFieldTwo, string AddressFieldThree, string City, string County, string StateOrRegion, string PostalCode, string CountryCode, string PhoneNumber) {
                AddressRow rowAddressRow = ((AddressRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        AddressFieldOne,
                        AddressFieldTwo,
                        AddressFieldThree,
                        City,
                        County,
                        StateOrRegion,
                        PostalCode,
                        CountryCode,
                        PhoneNumber};
                rowAddressRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAddressRow);
                return rowAddressRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AddressDataTable cln = ((AddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AddressDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnAddressFieldOne = base.Columns["AddressFieldOne"];
                this.columnAddressFieldTwo = base.Columns["AddressFieldTwo"];
                this.columnAddressFieldThree = base.Columns["AddressFieldThree"];
                this.columnCity = base.Columns["City"];
                this.columnCounty = base.Columns["County"];
                this.columnStateOrRegion = base.Columns["StateOrRegion"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnCountryCode = base.Columns["CountryCode"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddressFieldOne = new global::System.Data.DataColumn("AddressFieldOne", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressFieldOne);
                this.columnAddressFieldTwo = new global::System.Data.DataColumn("AddressFieldTwo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressFieldTwo);
                this.columnAddressFieldThree = new global::System.Data.DataColumn("AddressFieldThree", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddressFieldThree);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnCounty = new global::System.Data.DataColumn("County", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCounty);
                this.columnStateOrRegion = new global::System.Data.DataColumn("StateOrRegion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateOrRegion);
                this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnCountryCode = new global::System.Data.DataColumn("CountryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryCode);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnName.AllowDBNull = false;
                this.columnAddressFieldOne.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnCountryCode.AllowDBNull = false;
                this.columnCountryCode.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressRow NewAddressRow() {
                return ((AddressRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AddressRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AddressRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressRowChanged != null)) {
                    this.AddressRowChanged(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressRowChanging != null)) {
                    this.AddressRowChanging(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressRowDeleted != null)) {
                    this.AddressRowDeleted(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressRowDeleting != null)) {
                    this.AddressRowDeleting(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAddressRow(AddressRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AddressDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BatteryDataTable : global::System.Data.TypedTableBase<BatteryRow> {
            
            private global::System.Data.DataColumn columnBattery_Id;
            
            private global::System.Data.DataColumn columnAreBatteriesIncluded;
            
            private global::System.Data.DataColumn columnAreBatteriesRequired;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatteryDataTable() {
                this.TableName = "Battery";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BatteryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BatteryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Battery_IdColumn {
                get {
                    return this.columnBattery_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreBatteriesIncludedColumn {
                get {
                    return this.columnAreBatteriesIncluded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreBatteriesRequiredColumn {
                get {
                    return this.columnAreBatteriesRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatteryRow this[int index] {
                get {
                    return ((BatteryRow)(this.Rows[index]));
                }
            }
            
            public event BatteryRowChangeEventHandler BatteryRowChanging;
            
            public event BatteryRowChangeEventHandler BatteryRowChanged;
            
            public event BatteryRowChangeEventHandler BatteryRowDeleting;
            
            public event BatteryRowChangeEventHandler BatteryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBatteryRow(BatteryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatteryRow AddBatteryRow(bool AreBatteriesIncluded, bool AreBatteriesRequired) {
                BatteryRow rowBatteryRow = ((BatteryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AreBatteriesIncluded,
                        AreBatteriesRequired};
                rowBatteryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBatteryRow);
                return rowBatteryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BatteryDataTable cln = ((BatteryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BatteryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBattery_Id = base.Columns["Battery_Id"];
                this.columnAreBatteriesIncluded = base.Columns["AreBatteriesIncluded"];
                this.columnAreBatteriesRequired = base.Columns["AreBatteriesRequired"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBattery_Id = new global::System.Data.DataColumn("Battery_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnBattery_Id);
                this.columnAreBatteriesIncluded = new global::System.Data.DataColumn("AreBatteriesIncluded", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreBatteriesIncluded);
                this.columnAreBatteriesRequired = new global::System.Data.DataColumn("AreBatteriesRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreBatteriesRequired);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBattery_Id}, true));
                this.columnBattery_Id.AutoIncrement = true;
                this.columnBattery_Id.AllowDBNull = false;
                this.columnBattery_Id.Unique = true;
                this.columnBattery_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatteryRow NewBatteryRow() {
                return ((BatteryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BatteryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BatteryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BatteryRowChanged != null)) {
                    this.BatteryRowChanged(this, new BatteryRowChangeEvent(((BatteryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BatteryRowChanging != null)) {
                    this.BatteryRowChanging(this, new BatteryRowChangeEvent(((BatteryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BatteryRowDeleted != null)) {
                    this.BatteryRowDeleted(this, new BatteryRowChangeEvent(((BatteryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BatteryRowDeleting != null)) {
                    this.BatteryRowDeleting(this, new BatteryRowChangeEvent(((BatteryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBatteryRow(BatteryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BatteryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BatterySubgroupDataTable : global::System.Data.TypedTableBase<BatterySubgroupRow> {
            
            private global::System.Data.DataColumn columnBatteryType;
            
            private global::System.Data.DataColumn columnNumberOfBatteries;
            
            private global::System.Data.DataColumn columnBattery_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatterySubgroupDataTable() {
                this.TableName = "BatterySubgroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BatterySubgroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BatterySubgroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatteryTypeColumn {
                get {
                    return this.columnBatteryType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfBatteriesColumn {
                get {
                    return this.columnNumberOfBatteries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Battery_IdColumn {
                get {
                    return this.columnBattery_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatterySubgroupRow this[int index] {
                get {
                    return ((BatterySubgroupRow)(this.Rows[index]));
                }
            }
            
            public event BatterySubgroupRowChangeEventHandler BatterySubgroupRowChanging;
            
            public event BatterySubgroupRowChangeEventHandler BatterySubgroupRowChanged;
            
            public event BatterySubgroupRowChangeEventHandler BatterySubgroupRowDeleting;
            
            public event BatterySubgroupRowChangeEventHandler BatterySubgroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBatterySubgroupRow(BatterySubgroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatterySubgroupRow AddBatterySubgroupRow(string BatteryType, ulong NumberOfBatteries, int Battery_Id) {
                BatterySubgroupRow rowBatterySubgroupRow = ((BatterySubgroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BatteryType,
                        NumberOfBatteries,
                        Battery_Id};
                rowBatterySubgroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBatterySubgroupRow);
                return rowBatterySubgroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BatterySubgroupDataTable cln = ((BatterySubgroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BatterySubgroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBatteryType = base.Columns["BatteryType"];
                this.columnNumberOfBatteries = base.Columns["NumberOfBatteries"];
                this.columnBattery_Id = base.Columns["Battery_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBatteryType = new global::System.Data.DataColumn("BatteryType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatteryType);
                this.columnNumberOfBatteries = new global::System.Data.DataColumn("NumberOfBatteries", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfBatteries);
                this.columnBattery_Id = new global::System.Data.DataColumn("Battery_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnBattery_Id);
                this.columnBatteryType.AllowDBNull = false;
                this.columnNumberOfBatteries.AllowDBNull = false;
                this.columnBattery_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatterySubgroupRow NewBatterySubgroupRow() {
                return ((BatterySubgroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BatterySubgroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BatterySubgroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BatterySubgroupRowChanged != null)) {
                    this.BatterySubgroupRowChanged(this, new BatterySubgroupRowChangeEvent(((BatterySubgroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BatterySubgroupRowChanging != null)) {
                    this.BatterySubgroupRowChanging(this, new BatterySubgroupRowChangeEvent(((BatterySubgroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BatterySubgroupRowDeleted != null)) {
                    this.BatterySubgroupRowDeleted(this, new BatterySubgroupRowChangeEvent(((BatterySubgroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BatterySubgroupRowDeleting != null)) {
                    this.BatterySubgroupRowDeleting(this, new BatterySubgroupRowChangeEvent(((BatterySubgroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBatterySubgroupRow(BatterySubgroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BatterySubgroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StandardProductIDDataTable : global::System.Data.TypedTableBase<StandardProductIDRow> {
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardProductIDDataTable() {
                this.TableName = "StandardProductID";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StandardProductIDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StandardProductIDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardProductIDRow this[int index] {
                get {
                    return ((StandardProductIDRow)(this.Rows[index]));
                }
            }
            
            public event StandardProductIDRowChangeEventHandler StandardProductIDRowChanging;
            
            public event StandardProductIDRowChangeEventHandler StandardProductIDRowChanged;
            
            public event StandardProductIDRowChangeEventHandler StandardProductIDRowDeleting;
            
            public event StandardProductIDRowChangeEventHandler StandardProductIDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStandardProductIDRow(StandardProductIDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardProductIDRow AddStandardProductIDRow(string Type, string Value) {
                StandardProductIDRow rowStandardProductIDRow = ((StandardProductIDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Type,
                        Value};
                rowStandardProductIDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStandardProductIDRow);
                return rowStandardProductIDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StandardProductIDDataTable cln = ((StandardProductIDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StandardProductIDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnType = base.Columns["Type"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnType.AllowDBNull = false;
                this.columnValue.AllowDBNull = false;
                this.columnValue.MaxLength = 14;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardProductIDRow NewStandardProductIDRow() {
                return ((StandardProductIDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StandardProductIDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StandardProductIDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StandardProductIDRowChanged != null)) {
                    this.StandardProductIDRowChanged(this, new StandardProductIDRowChangeEvent(((StandardProductIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StandardProductIDRowChanging != null)) {
                    this.StandardProductIDRowChanging(this, new StandardProductIDRowChangeEvent(((StandardProductIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StandardProductIDRowDeleted != null)) {
                    this.StandardProductIDRowDeleted(this, new StandardProductIDRowChangeEvent(((StandardProductIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StandardProductIDRowDeleting != null)) {
                    this.StandardProductIDRowDeleting(this, new StandardProductIDRowChangeEvent(((StandardProductIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStandardProductIDRow(StandardProductIDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StandardProductIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ComputerPlatformDataTable : global::System.Data.TypedTableBase<ComputerPlatformRow> {
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnSystemRequirements;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComputerPlatformDataTable() {
                this.TableName = "ComputerPlatform";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComputerPlatformDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ComputerPlatformDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemRequirementsColumn {
                get {
                    return this.columnSystemRequirements;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComputerPlatformRow this[int index] {
                get {
                    return ((ComputerPlatformRow)(this.Rows[index]));
                }
            }
            
            public event ComputerPlatformRowChangeEventHandler ComputerPlatformRowChanging;
            
            public event ComputerPlatformRowChangeEventHandler ComputerPlatformRowChanged;
            
            public event ComputerPlatformRowChangeEventHandler ComputerPlatformRowDeleting;
            
            public event ComputerPlatformRowChangeEventHandler ComputerPlatformRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddComputerPlatformRow(ComputerPlatformRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComputerPlatformRow AddComputerPlatformRow(string Type, string SystemRequirements) {
                ComputerPlatformRow rowComputerPlatformRow = ((ComputerPlatformRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Type,
                        SystemRequirements};
                rowComputerPlatformRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowComputerPlatformRow);
                return rowComputerPlatformRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ComputerPlatformDataTable cln = ((ComputerPlatformDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ComputerPlatformDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnType = base.Columns["Type"];
                this.columnSystemRequirements = base.Columns["SystemRequirements"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSystemRequirements = new global::System.Data.DataColumn("SystemRequirements", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemRequirements);
                this.columnType.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComputerPlatformRow NewComputerPlatformRow() {
                return ((ComputerPlatformRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ComputerPlatformRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ComputerPlatformRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComputerPlatformRowChanged != null)) {
                    this.ComputerPlatformRowChanged(this, new ComputerPlatformRowChangeEvent(((ComputerPlatformRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComputerPlatformRowChanging != null)) {
                    this.ComputerPlatformRowChanging(this, new ComputerPlatformRowChangeEvent(((ComputerPlatformRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComputerPlatformRowDeleted != null)) {
                    this.ComputerPlatformRowDeleted(this, new ComputerPlatformRowChangeEvent(((ComputerPlatformRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComputerPlatformRowDeleting != null)) {
                    this.ComputerPlatformRowDeleting(this, new ComputerPlatformRowChangeEvent(((ComputerPlatformRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveComputerPlatformRow(ComputerPlatformRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ComputerPlatformDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RebateDataTable : global::System.Data.TypedTableBase<RebateRow> {
            
            private global::System.Data.DataColumn columnRebateStartDate;
            
            private global::System.Data.DataColumn columnRebateEndDate;
            
            private global::System.Data.DataColumn columnRebateMessage;
            
            private global::System.Data.DataColumn columnRebateName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RebateDataTable() {
                this.TableName = "Rebate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RebateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RebateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RebateStartDateColumn {
                get {
                    return this.columnRebateStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RebateEndDateColumn {
                get {
                    return this.columnRebateEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RebateMessageColumn {
                get {
                    return this.columnRebateMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RebateNameColumn {
                get {
                    return this.columnRebateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RebateRow this[int index] {
                get {
                    return ((RebateRow)(this.Rows[index]));
                }
            }
            
            public event RebateRowChangeEventHandler RebateRowChanging;
            
            public event RebateRowChangeEventHandler RebateRowChanged;
            
            public event RebateRowChangeEventHandler RebateRowDeleting;
            
            public event RebateRowChangeEventHandler RebateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRebateRow(RebateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RebateRow AddRebateRow(System.DateTime RebateStartDate, System.DateTime RebateEndDate, string RebateMessage, string RebateName) {
                RebateRow rowRebateRow = ((RebateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RebateStartDate,
                        RebateEndDate,
                        RebateMessage,
                        RebateName};
                rowRebateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRebateRow);
                return rowRebateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RebateDataTable cln = ((RebateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RebateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRebateStartDate = base.Columns["RebateStartDate"];
                this.columnRebateEndDate = base.Columns["RebateEndDate"];
                this.columnRebateMessage = base.Columns["RebateMessage"];
                this.columnRebateName = base.Columns["RebateName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRebateStartDate = new global::System.Data.DataColumn("RebateStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRebateStartDate);
                this.columnRebateEndDate = new global::System.Data.DataColumn("RebateEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRebateEndDate);
                this.columnRebateMessage = new global::System.Data.DataColumn("RebateMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRebateMessage);
                this.columnRebateName = new global::System.Data.DataColumn("RebateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRebateName);
                this.columnRebateStartDate.AllowDBNull = false;
                this.columnRebateEndDate.AllowDBNull = false;
                this.columnRebateMessage.AllowDBNull = false;
                this.columnRebateName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RebateRow NewRebateRow() {
                return ((RebateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RebateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RebateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RebateRowChanged != null)) {
                    this.RebateRowChanged(this, new RebateRowChangeEvent(((RebateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RebateRowChanging != null)) {
                    this.RebateRowChanging(this, new RebateRowChangeEvent(((RebateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RebateRowDeleted != null)) {
                    this.RebateRowDeleted(this, new RebateRowChangeEvent(((RebateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RebateRowDeleting != null)) {
                    this.RebateRowDeleting(this, new RebateRowChangeEvent(((RebateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRebateRow(RebateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RebateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ColorSpecificationDataTable : global::System.Data.TypedTableBase<ColorSpecificationRow> {
            
            private global::System.Data.DataColumn columnColor;
            
            private global::System.Data.DataColumn columnColorMap;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColorSpecificationDataTable() {
                this.TableName = "ColorSpecification";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ColorSpecificationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ColorSpecificationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColorMapColumn {
                get {
                    return this.columnColorMap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColorSpecificationRow this[int index] {
                get {
                    return ((ColorSpecificationRow)(this.Rows[index]));
                }
            }
            
            public event ColorSpecificationRowChangeEventHandler ColorSpecificationRowChanging;
            
            public event ColorSpecificationRowChangeEventHandler ColorSpecificationRowChanged;
            
            public event ColorSpecificationRowChangeEventHandler ColorSpecificationRowDeleting;
            
            public event ColorSpecificationRowChangeEventHandler ColorSpecificationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddColorSpecificationRow(ColorSpecificationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColorSpecificationRow AddColorSpecificationRow(string Color, string ColorMap) {
                ColorSpecificationRow rowColorSpecificationRow = ((ColorSpecificationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Color,
                        ColorMap};
                rowColorSpecificationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowColorSpecificationRow);
                return rowColorSpecificationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ColorSpecificationDataTable cln = ((ColorSpecificationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ColorSpecificationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnColor = base.Columns["Color"];
                this.columnColorMap = base.Columns["ColorMap"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnColor = new global::System.Data.DataColumn("Color", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor);
                this.columnColorMap = new global::System.Data.DataColumn("ColorMap", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColorMap);
                this.columnColor.AllowDBNull = false;
                this.columnColorMap.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColorSpecificationRow NewColorSpecificationRow() {
                return ((ColorSpecificationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ColorSpecificationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ColorSpecificationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ColorSpecificationRowChanged != null)) {
                    this.ColorSpecificationRowChanged(this, new ColorSpecificationRowChangeEvent(((ColorSpecificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ColorSpecificationRowChanging != null)) {
                    this.ColorSpecificationRowChanging(this, new ColorSpecificationRowChangeEvent(((ColorSpecificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ColorSpecificationRowDeleted != null)) {
                    this.ColorSpecificationRowDeleted(this, new ColorSpecificationRowChangeEvent(((ColorSpecificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ColorSpecificationRowDeleting != null)) {
                    this.ColorSpecificationRowDeleting(this, new ColorSpecificationRowChangeEvent(((ColorSpecificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveColorSpecificationRow(ColorSpecificationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Shipment ds = new Shipment();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ColorSpecificationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrderFulfillmentRow : global::System.Data.DataRow {
            
            private OrderFulfillmentDataTable tableOrderFulfillment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderFulfillmentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderFulfillment = ((OrderFulfillmentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderFulfillment_Id {
                get {
                    return ((int)(this[this.tableOrderFulfillment.OrderFulfillment_IdColumn]));
                }
                set {
                    this[this.tableOrderFulfillment.OrderFulfillment_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AmazonOrderID {
                get {
                    return ((string)(this[this.tableOrderFulfillment.AmazonOrderIDColumn]));
                }
                set {
                    this[this.tableOrderFulfillment.AmazonOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MerchantOrderID {
                get {
                    return ((string)(this[this.tableOrderFulfillment.MerchantOrderIDColumn]));
                }
                set {
                    this[this.tableOrderFulfillment.MerchantOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong MerchantFulfillmentID {
                get {
                    try {
                        return ((ulong)(this[this.tableOrderFulfillment.MerchantFulfillmentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MerchantFulfillmentID\' in table \'OrderFulfillment\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableOrderFulfillment.MerchantFulfillmentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FulfillmentDate {
                get {
                    return ((global::System.DateTime)(this[this.tableOrderFulfillment.FulfillmentDateColumn]));
                }
                set {
                    this[this.tableOrderFulfillment.FulfillmentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMerchantFulfillmentIDNull() {
                return this.IsNull(this.tableOrderFulfillment.MerchantFulfillmentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMerchantFulfillmentIDNull() {
                this[this.tableOrderFulfillment.MerchantFulfillmentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow[] GetItemRows() {
                if ((this.Table.ChildRelations["RelationToItem"] == null)) {
                    return new ItemRow[0];
                }
                else {
                    return ((ItemRow[])(base.GetChildRows(this.Table.ChildRelations["RelationToItem"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItemRow : global::System.Data.DataRow {
            
            private ItemDataTable tableItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItem = ((ItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderFulfillment_Id {
                get {
                    try {
                        return ((int)(this[this.tableItem.OrderFulfillment_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderFulfillment_Id\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.OrderFulfillment_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AmazonOrderItemCode {
                get {
                    return ((string)(this[this.tableItem.AmazonOrderItemCodeColumn]));
                }
                set {
                    this[this.tableItem.AmazonOrderItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MerchantOrderItemID {
                get {
                    return ((string)(this[this.tableItem.MerchantOrderItemIDColumn]));
                }
                set {
                    this[this.tableItem.MerchantOrderItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong MerchantFulfillmentItemID {
                get {
                    try {
                        return ((ulong)(this[this.tableItem.MerchantFulfillmentItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MerchantFulfillmentItemID\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.MerchantFulfillmentItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong Quantity {
                get {
                    try {
                        return ((ulong)(this[this.tableItem.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItem.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderFulfillmentRow OrderFulfillmentRow {
                get {
                    return ((OrderFulfillmentRow)(this.GetParentRow(this.Table.ParentRelations["RelationToItem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RelationToItem"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderFulfillment_IdNull() {
                return this.IsNull(this.tableItem.OrderFulfillment_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderFulfillment_IdNull() {
                this[this.tableItem.OrderFulfillment_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMerchantFulfillmentItemIDNull() {
                return this.IsNull(this.tableItem.MerchantFulfillmentItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMerchantFulfillmentItemIDNull() {
                this[this.tableItem.MerchantFulfillmentItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableItem.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableItem.QuantityColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FulfillmentDataRow : global::System.Data.DataRow {
            
            private FulfillmentDataDataTable tableFulfillmentData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FulfillmentDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFulfillmentData = ((FulfillmentDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CarrierCode {
                get {
                    return ((string)(this[this.tableFulfillmentData.CarrierCodeColumn]));
                }
                set {
                    this[this.tableFulfillmentData.CarrierCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CarrierName {
                get {
                    return ((string)(this[this.tableFulfillmentData.CarrierNameColumn]));
                }
                set {
                    this[this.tableFulfillmentData.CarrierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShippingMethod {
                get {
                    try {
                        return ((string)(this[this.tableFulfillmentData.ShippingMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShippingMethod\' in table \'FulfillmentData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFulfillmentData.ShippingMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperTrackingNumber {
                get {
                    try {
                        return ((string)(this[this.tableFulfillmentData.ShipperTrackingNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipperTrackingNumber\' in table \'FulfillmentData\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFulfillmentData.ShipperTrackingNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderFulfillment_Id {
                get {
                    try {
                        return ((int)(this[this.tableFulfillmentData.OrderFulfillment_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderFulfillment_Id\' in table \'FulfillmentData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFulfillmentData.OrderFulfillment_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShippingMethodNull() {
                return this.IsNull(this.tableFulfillmentData.ShippingMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShippingMethodNull() {
                this[this.tableFulfillmentData.ShippingMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperTrackingNumberNull() {
                return this.IsNull(this.tableFulfillmentData.ShipperTrackingNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperTrackingNumberNull() {
                this[this.tableFulfillmentData.ShipperTrackingNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderFulfillment_IdNull() {
                return this.IsNull(this.tableFulfillmentData.OrderFulfillment_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderFulfillment_IdNull() {
                this[this.tableFulfillmentData.OrderFulfillment_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AddressRow : global::System.Data.DataRow {
            
            private AddressDataTable tableAddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AddressRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddress = ((AddressDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableAddress.NameColumn]));
                }
                set {
                    this[this.tableAddress.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressFieldOne {
                get {
                    return ((string)(this[this.tableAddress.AddressFieldOneColumn]));
                }
                set {
                    this[this.tableAddress.AddressFieldOneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressFieldTwo {
                get {
                    try {
                        return ((string)(this[this.tableAddress.AddressFieldTwoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddressFieldTwo\' in table \'Address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.AddressFieldTwoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddressFieldThree {
                get {
                    try {
                        return ((string)(this[this.tableAddress.AddressFieldThreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddressFieldThree\' in table \'Address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.AddressFieldThreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    return ((string)(this[this.tableAddress.CityColumn]));
                }
                set {
                    this[this.tableAddress.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string County {
                get {
                    try {
                        return ((string)(this[this.tableAddress.CountyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'County\' in table \'Address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.CountyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateOrRegion {
                get {
                    try {
                        return ((string)(this[this.tableAddress.StateOrRegionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateOrRegion\' in table \'Address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.StateOrRegionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableAddress.PostalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCode\' in table \'Address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.PostalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryCode {
                get {
                    return ((string)(this[this.tableAddress.CountryCodeColumn]));
                }
                set {
                    this[this.tableAddress.CountryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tableAddress.PhoneNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhoneNumber\' in table \'Address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressFieldTwoNull() {
                return this.IsNull(this.tableAddress.AddressFieldTwoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressFieldTwoNull() {
                this[this.tableAddress.AddressFieldTwoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressFieldThreeNull() {
                return this.IsNull(this.tableAddress.AddressFieldThreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressFieldThreeNull() {
                this[this.tableAddress.AddressFieldThreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountyNull() {
                return this.IsNull(this.tableAddress.CountyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountyNull() {
                this[this.tableAddress.CountyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateOrRegionNull() {
                return this.IsNull(this.tableAddress.StateOrRegionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateOrRegionNull() {
                this[this.tableAddress.StateOrRegionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableAddress.PostalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeNull() {
                this[this.tableAddress.PostalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNumberNull() {
                return this.IsNull(this.tableAddress.PhoneNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNumberNull() {
                this[this.tableAddress.PhoneNumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BatteryRow : global::System.Data.DataRow {
            
            private BatteryDataTable tableBattery;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BatteryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBattery = ((BatteryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Battery_Id {
                get {
                    return ((int)(this[this.tableBattery.Battery_IdColumn]));
                }
                set {
                    this[this.tableBattery.Battery_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AreBatteriesIncluded {
                get {
                    try {
                        return ((bool)(this[this.tableBattery.AreBatteriesIncludedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreBatteriesIncluded\' in table \'Battery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBattery.AreBatteriesIncludedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AreBatteriesRequired {
                get {
                    try {
                        return ((bool)(this[this.tableBattery.AreBatteriesRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreBatteriesRequired\' in table \'Battery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBattery.AreBatteriesRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreBatteriesIncludedNull() {
                return this.IsNull(this.tableBattery.AreBatteriesIncludedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreBatteriesIncludedNull() {
                this[this.tableBattery.AreBatteriesIncludedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreBatteriesRequiredNull() {
                return this.IsNull(this.tableBattery.AreBatteriesRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreBatteriesRequiredNull() {
                this[this.tableBattery.AreBatteriesRequiredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BatterySubgroupRow : global::System.Data.DataRow {
            
            private BatterySubgroupDataTable tableBatterySubgroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BatterySubgroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBatterySubgroup = ((BatterySubgroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BatteryType {
                get {
                    return ((string)(this[this.tableBatterySubgroup.BatteryTypeColumn]));
                }
                set {
                    this[this.tableBatterySubgroup.BatteryTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong NumberOfBatteries {
                get {
                    return ((ulong)(this[this.tableBatterySubgroup.NumberOfBatteriesColumn]));
                }
                set {
                    this[this.tableBatterySubgroup.NumberOfBatteriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Battery_Id {
                get {
                    try {
                        return ((int)(this[this.tableBatterySubgroup.Battery_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Battery_Id\' in table \'BatterySubgroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBatterySubgroup.Battery_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBattery_IdNull() {
                return this.IsNull(this.tableBatterySubgroup.Battery_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBattery_IdNull() {
                this[this.tableBatterySubgroup.Battery_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StandardProductIDRow : global::System.Data.DataRow {
            
            private StandardProductIDDataTable tableStandardProductID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StandardProductIDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStandardProductID = ((StandardProductIDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableStandardProductID.TypeColumn]));
                }
                set {
                    this[this.tableStandardProductID.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableStandardProductID.ValueColumn]));
                }
                set {
                    this[this.tableStandardProductID.ValueColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ComputerPlatformRow : global::System.Data.DataRow {
            
            private ComputerPlatformDataTable tableComputerPlatform;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComputerPlatformRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableComputerPlatform = ((ComputerPlatformDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableComputerPlatform.TypeColumn]));
                }
                set {
                    this[this.tableComputerPlatform.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemRequirements {
                get {
                    try {
                        return ((string)(this[this.tableComputerPlatform.SystemRequirementsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SystemRequirements\' in table \'ComputerPlatform\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComputerPlatform.SystemRequirementsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSystemRequirementsNull() {
                return this.IsNull(this.tableComputerPlatform.SystemRequirementsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSystemRequirementsNull() {
                this[this.tableComputerPlatform.SystemRequirementsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RebateRow : global::System.Data.DataRow {
            
            private RebateDataTable tableRebate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RebateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRebate = ((RebateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RebateStartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableRebate.RebateStartDateColumn]));
                }
                set {
                    this[this.tableRebate.RebateStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RebateEndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableRebate.RebateEndDateColumn]));
                }
                set {
                    this[this.tableRebate.RebateEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RebateMessage {
                get {
                    return ((string)(this[this.tableRebate.RebateMessageColumn]));
                }
                set {
                    this[this.tableRebate.RebateMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RebateName {
                get {
                    return ((string)(this[this.tableRebate.RebateNameColumn]));
                }
                set {
                    this[this.tableRebate.RebateNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ColorSpecificationRow : global::System.Data.DataRow {
            
            private ColorSpecificationDataTable tableColorSpecification;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ColorSpecificationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableColorSpecification = ((ColorSpecificationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Color {
                get {
                    return ((string)(this[this.tableColorSpecification.ColorColumn]));
                }
                set {
                    this[this.tableColorSpecification.ColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ColorMap {
                get {
                    return ((string)(this[this.tableColorSpecification.ColorMapColumn]));
                }
                set {
                    this[this.tableColorSpecification.ColorMapColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrderFulfillmentRowChangeEvent : global::System.EventArgs {
            
            private OrderFulfillmentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderFulfillmentRowChangeEvent(OrderFulfillmentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderFulfillmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItemRowChangeEvent : global::System.EventArgs {
            
            private ItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRowChangeEvent(ItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FulfillmentDataRowChangeEvent : global::System.EventArgs {
            
            private FulfillmentDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FulfillmentDataRowChangeEvent(FulfillmentDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FulfillmentDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AddressRowChangeEvent : global::System.EventArgs {
            
            private AddressRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressRowChangeEvent(AddressRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BatteryRowChangeEvent : global::System.EventArgs {
            
            private BatteryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatteryRowChangeEvent(BatteryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatteryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BatterySubgroupRowChangeEvent : global::System.EventArgs {
            
            private BatterySubgroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatterySubgroupRowChangeEvent(BatterySubgroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BatterySubgroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StandardProductIDRowChangeEvent : global::System.EventArgs {
            
            private StandardProductIDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardProductIDRowChangeEvent(StandardProductIDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StandardProductIDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ComputerPlatformRowChangeEvent : global::System.EventArgs {
            
            private ComputerPlatformRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComputerPlatformRowChangeEvent(ComputerPlatformRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComputerPlatformRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RebateRowChangeEvent : global::System.EventArgs {
            
            private RebateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RebateRowChangeEvent(RebateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RebateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ColorSpecificationRowChangeEvent : global::System.EventArgs {
            
            private ColorSpecificationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColorSpecificationRowChangeEvent(ColorSpecificationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ColorSpecificationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591