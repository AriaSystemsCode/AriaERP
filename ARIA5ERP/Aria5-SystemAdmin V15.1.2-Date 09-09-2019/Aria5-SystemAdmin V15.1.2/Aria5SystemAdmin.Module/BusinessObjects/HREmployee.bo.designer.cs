//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DevExpress.ExpressApp.DC;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using DevExpress.ExpressApp.ConditionalAppearance;
using DevExpress.ExpressApp.Editors;
using Aria5.DevExpress.MainSystem.Module.Managers;
using Aria5.DevExpress.MainSystem.Module.BusinessObjects;
namespace Aria5SystemAdmin.Module.BusinessObjects
{
  //ATA add this rules at model rules instead of here [Start]
  //[Appearance("Employment", AppearanceItemType = "ViewItem", TargetItems = "EmploymentDate,EmploymentType", Criteria = "IsNull(EmploymentStatus) or EmploymentStatus!='Active'", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  //[Appearance("Medicalinsurance", AppearanceItemType = "ViewItem", TargetItems = "MedicalInsuranceNo,MedicalInsuranceStartDate", Criteria = "IsNull(MedicalInsuranceStatus) or MedicalInsuranceStatus !='Active'", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  //[Appearance("Medicalinsurance", AppearanceItemType = "ViewItem", TargetItems = "SocialInsuranceNo,SocialInsuranceStartDate", Criteria = "IsNull(SocialInsuranceStatus) or SocialInsuranceStatus !='Active'", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  //[Appearance("ActionSchdule", AppearanceItemType = "Action", TargetItems = "ScheduleActivities", Criteria = "Employment_status != 'Candidate'", Context = "ListView", Visibility = ViewItemVisibility.Hide)]
  //[Appearance("Qualifications", AppearanceItemType = "ViewItem", TargetItems = "Qualifications", Criteria = "!IsCurrentUserInRole('Admin')", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  //ATA add this rules at model rules instead of here [End]
  //ATA add new conditionalapperance for new fields 
  [Appearance("ResignationDate", AppearanceItemType = "ViewItem", TargetItems = "ResignationDate", Criteria = "EmploymentStatus !='InActive'", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  [Appearance("MinsuranceendDate", AppearanceItemType = "ViewItem", TargetItems = "MedicalInsuranceEndDate", Criteria = "MedicalInsuranceStatus !='InActive'", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  [Appearance("SinsuranceendDate", AppearanceItemType = "ViewItem", TargetItems = "SocialInsuranceEndDate", Criteria = "SocialInsuranceStatus !='InActive'", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  [Appearance("EmployeeFields", AppearanceItemType = "ViewItem", TargetItems = "Business,LanguageCode,DepartmentName,Department,SSN,Language,BirthDate,MedicalInsuranceStartDate,MedicalInsuranceNo,SocialInsuranceStartDate,SocialInsuranceNo,MedicalInsuranceStatus,SocialInsuranceStatus,EmploymentDate,JobPosition,JobPositionName,ActingAs,EmploymentType,Branch", Criteria = "EmploymentStatus =='Candidate'", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  [Appearance("ApplicantsFields", AppearanceItemType = "ViewItem", TargetItems = "Stage,NoticePeriod,JobVacancy,CurrentSalary,ExpectedSalary", Criteria = "EmploymentStatus !='Candidate'", Context = "DetailView", Visibility = ViewItemVisibility.Hide)]
  [DefaultClassOptions]
  [RelatedEntity("Aria5-SystemAdmin-HR-Employee")]
  public partial class HREmployee : Person
  {
    public HREmployee(DevExpress.Xpo.Session session)
      : base(session)
    {
    }
    private XPCollection<HRActivity> listofactivity;
    private System.Drawing.Image _image;
    [DevExpress.Xpo.ValueConverterAttribute(typeof(DevExpress.Xpo.Metadata.ImageValueConverter))]
    public System.Drawing.Image Employee_IMAGE
    {
      get
      {
        return _image;
      }
      set
      {
        try
        {
          SetPropertyValue("Employee_IMAGE", ref _image, value);
        }
        catch (Exception)
        {
          //  throw;
        }
      }
    }
    private Country _nationality;
    public Country Nationality
    {
      get
      {
        return _nationality;
      }
      set
      {
        SetPropertyValue<Country>("Nationality", ref _nationality, value);
      }
    }
    private DateTime _employment_date;
    public DateTime EmploymentDate
    {
      get
      {
        return _employment_date;
      }
      set
      {
        SetPropertyValue<DateTime>("EmploymentDate", ref _employment_date, value);
      }
    }
    //ATA add new field based on hr requirements 7/9/2017 [start]
    private DateTime _resignationdate;
    public DateTime ResignationDate
    {
      get
      {
        return _resignationdate;
      }
      set
      {
        SetPropertyValue<DateTime>("ResignationDate", ref _resignationdate, value);
      }
    }
    //ATA add new field based on hr requirements 7/9/2017 [End]
    private Employment_status? _status;
    [DevExpress.Persistent.Base.ImmediatePostDataAttribute]
    public Employment_status? EmploymentStatus
    {
      get
      {
        return _status;
      }
      set
      {
        SetPropertyValue<Employment_status?>("EmploymentStatus", ref _status, value);
        //ATA to get latest id for each employee 
        if (!IsLoading && !IsSaving && value != null && this.Id == null)
        {
          EntityType temp = null;
          EntityTypeSettings entitysetting = null;
          TypeSettings setting = null;
          if (Id == null || Id == string.Empty)
          {
            if (_status == Employment_status.Candidate)
            {
              temp = this.Session.FindObject<EntityType>(CriteriaOperator.Parse("[TypeId] == 'Candidate'"));
            }
            else
              if (_status == Employment_status.Active || _status == Employment_status.InActive)
              {
                temp = this.Session.FindObject<EntityType>(CriteriaOperator.Parse("[TypeId] == 'Employee'"));
              }
            if (temp != null)
            {
              entitysetting = this.Session.FindObject<EntityTypeSettings>(CriteriaOperator.Parse("[EntityType] = '" + temp.Oid + "'"));
              if (entitysetting != null)
              {
                setting = entitysetting.Settings.Where(x => x.SettingName.Contains("Identifier Structure")).FirstOrDefault();
              }
            }
            if (setting != null)
            {
              Id = IdentifierStructureManager.GetNextId(setting.Value, new Dictionary<int, object>(), this.Session);
            }
          }
          else
          {
            if (_status == Employment_status.Active && this.Id.Contains('-'))
            {
              temp = this.Session.FindObject<EntityType>(CriteriaOperator.Parse("[TypeId] == 'Employee'"));
              if (temp != null)
              {
                entitysetting = this.Session.FindObject<EntityTypeSettings>(CriteriaOperator.Parse("[EntityType] = '" + temp.Oid + "'"));
                if (entitysetting != null)
                {
                  setting = entitysetting.Settings.Where(x => x.SettingName.Contains("Identifier Structure")).FirstOrDefault();
                }
              }
              if (setting != null)
              {
                Id = IdentifierStructureManager.GetNextId(setting.Value, new Dictionary<int, object>(), this.Session);
              }
            }
          }
        }
      }
    }
    private HRJobPosition _jobposition;
    [Association("HRJobPosition-HREmployee")]
    [DataSourceCriteria("Master = True")]
    [ImmediatePostData]
    public HRJobPosition JobPosition
    {
      get
      {
        return _jobposition;
      }
      set
      {
        SetPropertyValue("JobPosition", ref _jobposition, value);
        //ATA to get job position refrence data 
        if (!IsLoading && !IsSaving && value != null)
        {
          _jobpositionname = _jobposition.Name;
        }
      }
    }
    private string _jobpositionname;
    public string JobPositionName
    {
      get
      {
        return _jobpositionname;
      }
      set
      {
        _jobpositionname = value;
      }
    }
    private HRJobPosition _actingas;
    [DataSourceCriteria("Master = True")]
    public HRJobPosition ActingAs
    {
      get
      {
        if (_actingas != null)
        {
          if (_actingas.Activities.Count > 0)
          {
            listofactivity = _actingas.Activities;
          }
        }
        return _actingas;
      }
      set
      {
        _actingas = value;
      }
    }
    private HR_Branches _branch;
    public HR_Branches Branch
    {
      get
      {
        return _branch;
      }
      set
      {
        _branch = value;
      }
    }
    private Employment_Type? _type;
    public Employment_Type? EmploymentType
    {
      get
      {
        return _type;
      }
      set
      {
        SetPropertyValue<Employment_Type?>("EmploymentType", ref _type, value);
      }
    }
    private Gender _gender;
    public Gender Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        SetPropertyValue<Gender>("Gender", ref _gender, value);
      }
    }
    private insurance_status? _social_insurance_status;
    [ImmediatePostData(true)]
    public insurance_status? SocialInsuranceStatus
    {
      get
      {
        return _social_insurance_status;
      }
      set
      {
        SetPropertyValue<insurance_status?>("SocialInsuranceStatus", ref _social_insurance_status, value);
      }
    }
    private string _social_insurance_no;
    public string SocialInsuranceNo
    {
      get
      {
        return _social_insurance_no;
      }
      set
      {
        SetPropertyValue<string>("SocialInsuranceNo", ref _social_insurance_no, value);
      }
    }
    private DateTime _socialinsurancestartdate;
    public DateTime SocialInsuranceStartDate
    {
      get
      {
        return _socialinsurancestartdate;
      }
      set
      {
        _socialinsurancestartdate = value;
      }
    }
    //ATA add new field based on hr requirements 7/9/2017 [start]
    private DateTime _socialinsuranceenddate;
    public DateTime SocialInsuranceEndDate
    {
      get
      {
        return _socialinsuranceenddate;
      }
      set
      {
        SetPropertyValue("SocialInsuranceEndDate", ref _socialinsuranceenddate, value);
      }
    }
    //ATA add new field based on hr requirements 7/9/2017 [End]
    private insurance_status? _medical_insurance_status;
    [ImmediatePostData(true)]
    public insurance_status? MedicalInsuranceStatus
    {
      get
      {
        return _medical_insurance_status;
      }
      set
      {
        SetPropertyValue<insurance_status?>("MedicalInsuranceStatus", ref _medical_insurance_status, value);
      }
    }
    private string _medical_insurance_no;
    public string MedicalInsuranceNo
    {
      get
      {
        return _medical_insurance_no;
      }
      set
      {
        SetPropertyValue<string>("MedicalInsuranceNo", ref _medical_insurance_no, value);
      }
    }
    private DateTime _medicalinsurancestartdate;
    public DateTime MedicalInsuranceStartDate
    {
      get
      {
        return _medicalinsurancestartdate;
      }
      set
      {
        _medicalinsurancestartdate = value;
      }
    }
    //ATA add new field based on hr requirements 7/9/2017 [start]
    private DateTime _medicalinsuranceenddate;
    public DateTime MedicalInsuranceEndDate
    {
      get
      {
        return _medicalinsuranceenddate;
      }
      set
      {
        SetPropertyValue("MedicalInsuranceEndDate", ref _medicalinsuranceenddate, value);
      }
    }
    //ATA add new field based on hr requirements 7/9/2017 [End]
    private Military_status? _military_status;
    public Military_status? MilitaryStatus
    {
      get
      {
        return _military_status;
      }
      set
      {
        SetPropertyValue<Military_status?>("MilitaryStatus", ref _military_status, value);
      }
    }
    private Marital_status? _marital_status;
    public Marital_status? MaritalStatus
    {
      get
      {
        return _marital_status;
      }
      set
      {
        SetPropertyValue<Marital_status?>("MaritalStatus", ref _marital_status, value);
      }
    }
    //ATA add new fields default phone number and default address  as per HR request 7/9/2017 [start] 
    [NonPersistent]
    public ContactPhone DefaultPhoneNumber
    {
      get
      {
        return this.ContactPhones.FirstOrDefault();
      }
    }
    [NonPersistent]
    public ContactAddress DefaultAddress
    {
      get
      {
        return ContactAddresses.FirstOrDefault();
      }
    }
    //ATA add new fields default phone number and default address  as per HR request 7/9/2017 [End] 
    //ATA add new fields for applicans based on recruitment activities 9/7/2017 [start]
    private decimal _currentsalary;
    public decimal CurrentSalary
    {
      get
      {
        return _currentsalary;
      }
      set
      {
        _currentsalary = value;
      }
    }
    private string _expectedSalary;
    public string ExpectedSalary
    {
      get
      {
        return _expectedSalary;
      }
      set
      {
        _expectedSalary = value;
      }
    }
    private HRJobVacancy _jobVacancy;
    [Association("JobVacancy-Applicants")]
    public HRJobVacancy JobVacancy
    {
      get
      {
        return _jobVacancy;
      }
      set
      {
        _jobVacancy = value;
      }
    }
    private int _noticePeriod;
    public int NoticePeriod
    {
      get
      {
        return _noticePeriod;
      }
      set
      {
        _noticePeriod = value;
      }
    }
    [Association("Employee-Experiences")]
    public XPCollection<HRExperience> Experience
    {
      get
      {
        return GetCollection<HRExperience>("Experience");
      }
    }
    private RecruitmentStages _stage;
    public RecruitmentStages Stage
    {
      get
      {
        return _stage;
      }
      set
      {
        _stage = value;
      }
    }
    public enum RecruitmentStages
    {
      Rejected,
      ApplicationScreening,
      ManagerScreening,
      PhoneScreening,
      HRInterview,
      Technicalinterview,
      SendingJobOffer
    }
    //ATA add new fields for applicans based on recruitment activities 9/7/2017 [End]
    [Association("HRActivity-HREmployee")]
    [DataSourceProperty("listofactivity")]
    public XPCollection<HRActivity> ActingAsActivities
    {
      get
      {
        return GetCollection<HRActivity>("ActingAsActivities");
      }
    }
    public XPCollection<HR_ActivityLog> PendingActivities
    {
      get
      {
        XPCollection<HR_ActivityLog> _pendingActivities = new XPCollection<HR_ActivityLog>(Session);
        if (this.Oid != null)
        {
          _pendingActivities.Criteria = CriteriaOperator.Parse("[Status] = '" + ActivityStatus.Pending + "' and ([Entity] = '" + this.Oid + "' or [User] = '" + this.Oid + "')");
        }
        return _pendingActivities;
      }
    }
    public XPCollection<HR_ActivityLog> HistoryActivities
    {
      get
      {
        XPCollection<HR_ActivityLog> _historyActivities = new XPCollection<HR_ActivityLog>(Session);
        if (this.Oid != null)
        {
          _historyActivities.Criteria = CriteriaOperator.Parse("[Status] = '" + ActivityStatus.History + "' and ([Entity] = '" + this.Oid + "' or [User] = '" + this.Oid + "')");
        }
        return _historyActivities;
      }
    }
    [Association("HRJobPositionRevision-HREmployee")]
    public XPCollection<HRJobPositionRevision> JobPositionRevisions
    {
      get
      {
        return GetCollection<HRJobPositionRevision>("JobPositionRevisions");
      }
    }
    [Association("HREmployee-Skillsinstance")]
    public XPCollection<HRSkillInstance> Qualifications
    {
      get
      {
        return GetCollection<HRSkillInstance>("Qualifications");
      }
    }
    //ATA add new list of files check as per HR requirement 7/9/2017 [start]
    [Association("Employee-FilesChecks")]
    public XPCollection<HRPersonalFilesCheck> FilesCheckList
    {
      get
      {
        return GetCollection<HRPersonalFilesCheck>("FilesCheckList");
      }
    }
    //ATA add new list of files check as per HR requirement 7/9/2017 [End]
    //ATA add employee profile for the security user HR system work requied this action 1/15/2017 [start]   
    //  private AriaSecuritySystemUser _systemuser;
    //    [Association("Ariasecurityuser-Employee")]
    //public AriaSecuritySystemUser SystemUser
    //{
    //    get
    //    {
    //        return _systemuser;
    //    }
    //    set
    //    {
    //        SetPropertyValue("SystemUser", ref _systemuser, value);
    //    }
    //}
    //ATA add employee profile for the security user HR system work requied this action 1/15/2017 [End]
  }
  public enum Employment_status
  {
    [DisplayName("Active")]
    Active,
    [DisplayName("InActive")]
    InActive,
    [DisplayName("Candidate")]
    Candidate,
  }
  public enum Military_status
  {
    Complete,
    [DisplayName("Will serve")]
    Willserve,
    Postponed,
    Exampted
  }
  public enum Marital_status
  {
    Single,
    Engaged,
    Married
  }
  public enum Employment_Type
  {
    FullTime,
    PartTime,
    FreeLance,
  }
  public enum Title
  {
    Mr,
    Mrs,
    Ms,
    Miss
  }
  public enum Gender
  {
    Male,
    Female,
  }
  public enum insurance_status
  {
    //[DisplayName("")]
    //Select,
    Active,
    InActive,
    [DisplayName("In Prop.")]
    InProp
  }
}
