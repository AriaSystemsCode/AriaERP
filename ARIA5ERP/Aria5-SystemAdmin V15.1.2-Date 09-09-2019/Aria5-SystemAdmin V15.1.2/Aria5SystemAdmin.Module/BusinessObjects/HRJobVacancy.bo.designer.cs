//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DevExpress.ExpressApp.DC;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using DevExpress.Persistent.Validation;
namespace Aria5SystemAdmin.Module.BusinessObjects
{
  [DefaultClassOptions]
  [RelatedEntity("Aria5-SystemAdmin-JobVacancy")]
  [XafDefaultProperty("RequestNumber")]
  public partial class HRJobVacancy : DevExpress.Persistent.BaseImpl.BaseObject
  {
    public HRJobVacancy(DevExpress.Xpo.Session session)
      : base(session)
    {
    }
    private int _requestNumber;
    public int RequestNumber
    {
      get
      {
        return _requestNumber;
      }
      set
      {
        _requestNumber = value;
      }
    }
    private DateTime _requestedDate;
    public DateTime RequestedDate
    {
      get
      {
        return _requestedDate;
      }
      set
      {
        _requestedDate = value;
      }
    }
    private HREmployee _requestedBy;
    public HREmployee RequestedBy
    {
      get
      {
        return _requestedBy;
      }
      set
      {
        _requestedBy = value;
      }
    }
    private Department _department;
    [ImmediatePostData(true)]
    [RuleRequiredField]
    public Department Department
    {
      get
      {
        return _department;
      }
      set
      {
        _department = value;
      }
    }
    private HRJobPosition _jobPosition;
    [Association("Jobvacancy-JobPosition")]
    [DataSourceProperty("Department.JobPositions")]
    [RuleRequiredField]
    public HRJobPosition JobPosition
    {
      get
      {
        return _jobPosition;
      }
      set
      {
        _jobPosition = value;
      }
    }
    private int? _numberOfVacancies;
    [RuleRequiredField]
    public int? NumberOfVacancies
    {
      get
      {
        return _numberOfVacancies;
      }
      set
      {
        _numberOfVacancies = value;
      }
    }
    private int? _minmumyearsofexp;
    [RuleRequiredField]
    public int? MinmumyearsOfExperience
    {
      get
      {
        return _minmumyearsofexp;
      }
      set
      {
        SetPropertyValue("MinmumyearsOfExperience", ref _minmumyearsofexp, value);
      }
    }
    private VacancyStatus? _status;
    public VacancyStatus? Status
    {
      get
      {
        return _status;
      }
      set
      {
        _status = value;
      }
    }
    [Association("JobVacancy-Applicants")]
    public XPCollection<HREmployee> Applicants
    {
      get
      {
        //ATA add new relation for the applicant and job vacancy 
        //XPCollection<HREmployee> _applicants = new XPCollection<HREmployee>(Session);
        //if (this.Oid != null)
        //{
        //  _applicants.Criteria = CriteriaOperator.Parse("[EmploymentStatus] = '" + Employment_status.Candidate + "' and [JobPosition] = '" + this.JobPosition.Oid + "'");
        //}
        //return _applicants;
        return GetCollection<HREmployee>("Applicants");
      }
    }
    [DataSourceCriteria("Status = 'Pending'")]
    public XPCollection<HR_ActivityLog> PendingActivities
    {
      get
      {
        XPCollection<HR_ActivityLog> _pendingActivities = new XPCollection<HR_ActivityLog>(Session);
        // XPCollection<HR_ActivityLog> test = new XPCollection<HR_ActivityLog>(new Session());
        if (this.Oid != null)
        {
          // _pendingActivities.Criteria = CriteriaOperator.Parse("[Status] = '" + ActivityStatus.Pending + "'",new InOperator("[Entity]",Applicants)); //and ([TargetEntity] in (Select Oid From HREmployee where [Status] ='" +Employment_status.Candidate+"'))");
          _pendingActivities.Criteria = new InOperator("Entity", Applicants);
          //foreach (HREmployee candidate in Applicants)
          //{
          //    test.AddRange(_pendingActivities.Where(x => x.TargetEntity == candidate));
          //}
        }
        return _pendingActivities;
      }
    }
    //ATA add this stages lists to clasify the applicants in each stage 
    public XPCollection<HREmployee> ApplicationScreening
    {
      get
      {
        //if (!Applicants.IsLoaded)
        //    Applicants.Load();
        XPCollection<HREmployee> Listofapplicants = new XPCollection<HREmployee>(Applicants.Session, Applicants.Where(x => x.Stage == HREmployee.RecruitmentStages.ApplicationScreening));
        return Listofapplicants;
      }
    }
    public XPCollection<HREmployee> ManagerScreening
    {
      get
      {
        XPCollection<HREmployee> Listofapplicants = new XPCollection<HREmployee>(Applicants.Session, Applicants.Where(x => x.Stage == HREmployee.RecruitmentStages.ManagerScreening));
        return Listofapplicants;
      }
    }
    public XPCollection<HREmployee> PhoneScreening
    {
      get
      {
        XPCollection<HREmployee> Listofapplicants = new XPCollection<HREmployee>(Applicants.Session, Applicants.Where(x => x.Stage == HREmployee.RecruitmentStages.PhoneScreening));
        return Listofapplicants;
      }
    }
    public XPCollection<HREmployee> HRInterview
    {
      get
      {
        XPCollection<HREmployee> Listofapplicants = new XPCollection<HREmployee>(Applicants.Session, Applicants.Where(x => x.Stage == HREmployee.RecruitmentStages.HRInterview));
        return Listofapplicants;
      }
    }
    public XPCollection<HREmployee> Technicalinterview
    {
      get
      {
        XPCollection<HREmployee> Listofapplicants = new XPCollection<HREmployee>(Applicants.Session, Applicants.Where(x => x.Stage == HREmployee.RecruitmentStages.Technicalinterview));
        return Listofapplicants;
      }
    }
    public XPCollection<HREmployee> SendingJobOffer
    {
      get
      {
        XPCollection<HREmployee> Listofapplicants = new XPCollection<HREmployee>(Applicants.Session, Applicants.Where(x => x.Stage == HREmployee.RecruitmentStages.SendingJobOffer));
        return Listofapplicants;
      }
    }
    public XPCollection<HREmployee> Rejected
    {
      get
      {
        XPCollection<HREmployee> Listofapplicants = new XPCollection<HREmployee>(Applicants.Session, Applicants.Where(x => x.Stage == HREmployee.RecruitmentStages.Rejected));
        return Listofapplicants;
      }
    }
    private Employment_Type _employmentStatus;
    public Employment_Type EmploymentStatus
    {
      get
      {
        return _employmentStatus;
      }
      set
      {
        _employmentStatus = value;
      }
    }
    private PreferredGenderenum _preferedgender;
    public PreferredGenderenum PreferredGender
    {
      get
      {
        return _preferedgender;
      }
      set
      {
        _preferedgender = value;
      }
    }
    private DateTime _requiredJoiningDate;
    public DateTime RequiredJoiningDate
    {
      get
      {
        return _requiredJoiningDate;
      }
      set
      {
        _requiredJoiningDate = value;
      }
    }
    public enum PreferredGenderenum
    {
      MalesOnly,
      FemalesOnly,
      MalesPrefered,
      FemalesPrefered,
      NoPreference
    }
    public enum VacancyStatus
    {
      Submited,
      Pending,
      Completed
    }
  }
}
