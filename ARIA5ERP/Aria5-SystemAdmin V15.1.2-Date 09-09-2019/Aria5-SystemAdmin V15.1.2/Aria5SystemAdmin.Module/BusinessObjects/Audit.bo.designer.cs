//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DevExpress.ExpressApp.DC;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Xpo;
using DevExpress.ExpressApp.Security;
using DevExpress.ExpressApp;
namespace Aria5SystemAdmin.Module.BusinessObjects
{
  // [NonPersistent]
  public partial class Base : BaseObject
  {
    private Aria5SystemAdmin.Module.BusinessObjects.Audit _user;
    public Base(Session session)
      : base(session)
    {
    }
    private void UpdateAudit(AuditAction act)
    {
      Audit audit = new Audit(Session);
      audit.Action = act;
      audit.Date = DateTime.Now;
      audit.AuditedRecord = string.Format("{0}({1})", ClassInfo.FullName, Session.GetKeyValue(this));
      audit.User = ((AuthenticationStandardLogonParameters)SecuritySystem.LogonParameters).UserName;
      foreach (Change change in changes)
      {
        ModificationInfo modInfo = new ModificationInfo(Session);
        modInfo.Audit = audit;
        modInfo.PropertyName = change.PropertyName;
        modInfo.OldValue = change.PrevValue;
        modInfo.NewValue = change.Value;
        modInfo.Save();
      }
      audit.Save();
    }
    protected override void OnSaving()
    {
      base.OnSaving();
      if (Session.IsNewObject(this))
        UpdateAudit(AuditAction.Insert);
      else
        UpdateAudit(AuditAction.Update);
    }
    protected override void OnDeleting()
    {
      base.OnDeleting();
      Change change = new Change();
      change.PropertyName = ClassInfo.KeyProperty.Name;
      change.PrevValue = Session.GetKeyValue(this).ToString();
      change.Value = "<DELETED>";
      changes.Add(change);
      UpdateAudit(AuditAction.Delete);
    }
    private List<Change> changes = new List<Change>();
    protected override void OnChanged(string propertyName, object oldValue, object newValue)
    {
      base.OnChanged(propertyName, oldValue, newValue);
      Change change = new Change();
      change.PropertyName = propertyName;
      change.PrevValue = oldValue == null ? "<NULL>" : oldValue.ToString();
      change.Value = newValue == null ? "<NULL>" : newValue.ToString();
      changes.Add(change);
    }
    private struct Change
    {
      public string PropertyName;
      public string PrevValue;
      public string Value;
    }
    [DevExpress.Persistent.Base.DataSourcePropertyAttribute("Audit.PropertyName")]public Aria5SystemAdmin.Module.BusinessObjects.Audit User
    {
      get
      {
        return _user;
      }
      set
      {
        SetPropertyValue("User", ref _user, value);
      }
    }
  }
  public class QACategories : Base
  {
    int fCategoryID;
    //[Key(true)]
    public int CategoryID
    {
      get
      {
        return fCategoryID;
      }
      set
      {
        SetPropertyValue<int>("CategoryID", ref fCategoryID, value);
      }
    }
    string fCategoryName;
    [Size(15)]
    public string CategoryName
    {
      get
      {
        return fCategoryName;
      }
      set
      {
        SetPropertyValue<string>("CategoryName", ref fCategoryName, value);
      }
    }
    string fDescription;
    [Size(1073741823)]
    public string Description
    {
      get
      {
        return fDescription;
      }
      set
      {
        SetPropertyValue<string>("Description", ref fDescription, value);
      }
    }
    public QACategories(Session session)
      : base(session)
    {
    }
    public QACategories()
      : base(Session.DefaultSession)
    {
    }
    public override void AfterConstruction()
    {
      base.AfterConstruction();
    }
  }
  public class Audit : XPObject
  {
    public Audit(Session session)
      : base(session)
    {
    }
    private string fUser;
    public string User
    {
      get
      {
        return fUser;
      }
      set
      {
        SetPropertyValue<string>("User", ref fUser, value);
      }
    }
    private DateTime fDate;
    public DateTime Date
    {
      get
      {
        return fDate;
      }
      set
      {
        SetPropertyValue<DateTime>("Date", ref fDate, value);
      }
    }
    private AuditAction fAction;
    public AuditAction Action
    {
      get
      {
        return fAction;
      }
      set
      {
        SetPropertyValue<AuditAction>("Action", ref fAction, value);
      }
    }
    private string fAuditedRecord;
    public string AuditedRecord
    {
      get
      {
        return fAuditedRecord;
      }
      set
      {
        SetPropertyValue<string>("AuditedRecord", ref fAuditedRecord, value);
      }
    }
    [Association("Audit-ModificationInfo")]
    public XPCollection<ModificationInfo> Modifications
    {
      get
      {
        return GetCollection<ModificationInfo>("Modifications");
      }
    }
  }
  public class ModificationInfo : XPObject
  {
    public ModificationInfo(Session session)
      : base(session)
    {
    }
    private string fPropertyName;
    public string PropertyName
    {
      get
      {
        return fPropertyName;
      }
      set
      {
        SetPropertyValue<string>("PropertyName", ref fPropertyName, value);
      }
    }
    private string fOldValue;
    public string OldValue
    {
      get
      {
        return fOldValue;
      }
      set
      {
        SetPropertyValue<string>("OldValue", ref fOldValue, value);
      }
    }
    private string fNewValue;
    public string NewValue
    {
      get
      {
        return fNewValue;
      }
      set
      {
        SetPropertyValue<string>("NewValue", ref fNewValue, value);
      }
    }
    private Audit fAudit;
    [Association("Audit-ModificationInfo")]
    public Audit Audit
    {
      get
      {
        return fAudit;
      }
      set
      {
        SetPropertyValue<Audit>("Audit", ref fAudit, value);
      }
    }
  }
  public enum AuditAction
  {
    Insert,
    Update,
    Delete
  }
}
