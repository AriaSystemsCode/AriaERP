//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DevExpress.ExpressApp.DC;
using DevExpress.Persistent.Base;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Xpo;
using System.ComponentModel;
using DevExpress.ExpressApp.Security;
using DevExpress.Data.Filtering;
using DevExpress.ExpressApp;
namespace Aria5SystemAdmin.Module.BusinessObjects
{
  //[NavigationItem("EntityOperationPermissionGenerator"), ImageName("BO_Security_Permission")]
  [DefaultClassOptions]
  [DomainComponent]
  [NonPersistent]
  public partial class EntityOperationPermissionGenerator : XPCustomObject, ICheckedListBoxItemsProvider
  {
    private Aria5SystemAdmin.Module.BusinessObjects.AriaSecuritySystemRole _role;
    private Aria5SystemAdmin.Module.BusinessObjects.Application_T _application;
    private System.Boolean _allowView;
    private System.Boolean _allowDelete;
    private System.Boolean _allowEdit;
    private System.Boolean _allowAdd;
    private string _entities = "";
    private System.String _key;
    public EntityOperationPermissionGenerator(DevExpress.Xpo.Session session)
      : base(session)
    {
      // ItemsChanged += EntityOperationPermissionGenerator_ItemsChanged;
    }
    [Key(true),
    MemberDesignTimeVisibility(false),
    Persistent("Oid"),
    Browsable(false)]
    private Guid oid = Guid.Empty;
    public event EventHandler ItemsChanged;
    [PersistentAlias("oid"),
    Browsable(false)]
    public Guid Oid
    {
      get
      {
        return oid;
      }
    }
    [DevExpress.Persistent.Base.ImmediatePostDataAttribute]
    [DevExpress.Persistent.Base.DataSourcePropertyAttribute("AvailableApplications")]
    public Aria5SystemAdmin.Module.BusinessObjects.Application_T Application
    {
      get
      {
        return _application;
      }
      set
      {
        if ((_application != null && value != null) && _application.Id != value.Id)
        {
          Entities = "";
        }
        if (_application != null && value == null)
        {
          Entities = "";
        }
        if (_application == null && value != null)
        {
          Entities = "";
        }
        _application = value;
      }
    }
    public System.Boolean AllowAdd
    {
      get
      {
        return _allowAdd;
      }
      set
      {
        _allowAdd = value;
      }
    }
    public System.Boolean AllowEdit
    {
      get
      {
        return _allowEdit;
      }
      set
      {
        _allowEdit = value;
      }
    }
    public System.Boolean AllowDelete
    {
      get
      {
        return _allowDelete;
      }
      set
      {
        _allowDelete = value;
      }
    }
    public System.Boolean AllowView
    {
      get
      {
        return _allowView;
      }
      set
      {
        _allowView = value;
      }
    }
    //[DevExpress.Xpo.KeyAttribute(true)]
    public System.String Key
    {
      get
      {
        return _key;
      }
      set
      {
        SetPropertyValue("Key", ref _key, value);
      }
    }
    //[DevExpress.Persistent.Base.DataSourcePropertyAttribute("Application.AriaObjects")]
    [EditorAlias("CheckedListBoxEditor"),
    VisibleInListView(true),
    Size(-1)]
    public string Entities
    {
      get
      {
        return _entities;
      }
      set
      {
        _entities = value;
      }
    }
    private object _currentAppId;
    protected override void OnChanged(string propertyName, object oldValue, object newValue)
    {
      _currentAppId = newValue;
      base.OnChanged(propertyName, oldValue, newValue);
    }
    Dictionary<object, string> ICheckedListBoxItemsProvider.GetCheckedListBoxItems(string targetMemberName)
    {
      object val1 = GetPropertyValue(targetMemberName);
      object val2 = GetMemberValue(targetMemberName);
      Dictionary<object, string> result = new Dictionary<object, string>();
      if (Application != null)
      {
        foreach (var obj in Application.AriaObjects)
        {
          result.Add(obj.ObjectName + ':' + obj.ObjectID.ToString(), obj.ObjectName);
        }
        result.Add("", "Generate permission o be able to select another application.");
      }
      else
      {
        result.Add("", "Please select application first.");
      }
      //if (result.Count == 0) return null;
      //else
      return result;
    }
    public Aria5SystemAdmin.Module.BusinessObjects.AriaSecuritySystemRole Role
    {
      get
      {
        return _role;
      }
      set
      {
        SetPropertyValue("Role", ref _role, value);
      }
    }
    private XPCollection<Application_T> availableApplications;
    [Browsable(false)]
    public XPCollection<Application_T> AvailableApplications
    {
      get
      {
        if (availableApplications == null)
        {
          availableApplications = new XPCollection<Application_T>(Session);
          string userName = ((AuthenticationStandardLogonParameters)SecuritySystem.LogonParameters).UserName;
          CriteriaOperator criteria = CriteriaOperator.Parse("UserName = '" + userName + "'");
          AriaSecuritySystemUser user = Session.FindObject<AriaSecuritySystemUser>(criteria);
          if (user.Account.Id.ToString().ToUpper() == "ARIA")
          {
            return availableApplications;
          }
          else
          {
            string str = string.Empty;
            user.Account.ConfigurationItems.Load();
            CriteriaOperator criteriaApp = null;
            if (user.Account.ConfigurationItems.Count > 0)
            {
              for (int i = 0; i < user.Account.ConfigurationItems.Count; i++)
              {
                if (i > 0)
                {
                  str += " OR ";
                }
                str = "[Oid] = '" + user.Account.ConfigurationItems[i].Application.Oid + "'";
                for (int j = 0; j < user.Account.ConfigurationItems[i].PreRequesiteAppList.Count; j++)
                {
                  if (!str.Contains(user.Account.ConfigurationItems[i].PreRequesiteAppList[j].Oid.ToString()))
                  {
                    str += " OR ";
                    str += "[Oid] = '" + user.Account.ConfigurationItems[i].PreRequesiteAppList[j].Oid + "'";
                  }
                }
              }
              criteriaApp = CriteriaOperator.Parse(str);
            }
            else
            {
              criteriaApp = CriteriaOperator.Parse("[Oid] = '" + Guid.Empty + "'");
            }
            availableApplications.Criteria = criteriaApp;
            return availableApplications;
          }
        }
        return availableApplications;
      }
    }
  }
  //public class CommonRoot : XPObject
  //{
  //    [BrowsableAttribute(false)]
  //    public new int Oid
  //    {
  //        get { return base.Oid; }
  //        set { base.Oid = value; }
  //    }
  //    public CommonRoot()
  //    {
  //    }
  //}
}
